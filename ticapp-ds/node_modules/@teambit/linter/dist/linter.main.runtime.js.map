{"version":3,"sources":["linter.main.runtime.ts"],"names":["LinterMain","constructor","envs","linterService","lint","components","opts","envsRuntime","createEnvironment","lintResults","run","createTask","name","LintTask","LinterAspect","id","provider","cli","component","loggerAspect","workspace","config","logger","createLogger","LinterService","linterAspect","registerService","register","LintCmd","getHost","MainRuntime","EnvsAspect","CLIAspect","ComponentAspect","LoggerAspect","WorkspaceAspect","extensionFormats","fixTypes","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAWO,MAAMA,UAAN,CAAiB;AAGtBC,EAAAA,WAAW,CAASC,IAAT,EAAiCC,aAAjC,EAA+D;AAAA,SAAtDD,IAAsD,GAAtDA,IAAsD;AAAA,SAA9BC,aAA8B,GAA9BA,aAA8B;AAAE;AAE5E;AACF;AACA;;;AACY,QAAJC,IAAI,CAACC,UAAD,EAA0BC,IAA1B,EAA+C;AACvD,UAAMC,WAAW,GAAG,MAAM,KAAKL,IAAL,CAAUM,iBAAV,CAA4BH,UAA5B,CAA1B;AACA,UAAMI,WAAW,GAAGF,WAAW,CAACG,GAAZ,CAAgB,KAAKP,aAArB,EAAoCG,IAApC,CAApB;AACA,WAAOG,WAAP;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,UAAU,CAACC,IAAD,EAA0B;AAClC,WAAO,KAAIC,gBAAJ,EAAaC,uBAAaC,EAA1B,EAA8BH,IAA9B,CAAP;AACD;;AASoB,eAARI,QAAQ,CACnB,CAACd,IAAD,EAAOe,GAAP,EAAYC,SAAZ,EAAuBC,YAAvB,EAAqCC,SAArC,CADmB,EAEnBC,MAFmB,EAGnB;AACA;AACA,UAAMC,MAAM,GAAGH,YAAY,CAACI,YAAb,CAA0BT,uBAAaC,EAAvC,CAAf;AACA,UAAMZ,aAAa,GAAG,KAAIqB,wBAAJ,EAAkBH,MAAlB,CAAtB;AACA,UAAMI,YAAY,GAAG,IAAIzB,UAAJ,CAAeE,IAAf,EAAqBC,aAArB,CAArB;AACAD,IAAAA,IAAI,CAACwB,eAAL,CAAqBvB,aAArB;AACAc,IAAAA,GAAG,CAACU,QAAJ,CAAa,KAAIC,gBAAJ,EAAYH,YAAZ,EAA0BP,SAAS,CAACW,OAAV,EAA1B,EAA+CT,SAA/C,CAAb;AAEA,WAAOK,YAAP;AACD;;AAzCqB;;;gCAAXzB,U,aACM8B,kB;gCADN9B,U,kBAsBW,CAAC+B,kBAAD,EAAaC,gBAAb,EAAwBC,4BAAxB,EAAyCC,sBAAzC,EAAuDC,4BAAvD,C;gCAtBXnC,U,mBAwB0B;AACnCoC,EAAAA,gBAAgB,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B,MAA/B,CADiB;AAEnCC,EAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,YAAtB;AAFyB,C;;AAoBvCvB,uBAAawB,UAAb,CAAwBtC,UAAxB","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component, ComponentAspect, ComponentMain } from '@teambit/component';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { LinterAspect } from './linter.aspect';\nimport { LinterService } from './linter.service';\nimport { LintTask } from './lint.task';\nimport { LintCmd } from './lint.cmd';\nimport { FixTypes, LinterOptions } from './linter-context';\n\nexport type LinterConfig = {\n  /**\n   * extension formats to lint.\n   */\n  extensionFormats: string[];\n  fixTypes?: FixTypes;\n};\n\nexport class LinterMain {\n  static runtime = MainRuntime;\n\n  constructor(private envs: EnvsMain, private linterService: LinterService) {}\n\n  /**\n   * lint an array of components.\n   */\n  async lint(components: Component[], opts: LinterOptions) {\n    const envsRuntime = await this.envs.createEnvironment(components);\n    const lintResults = envsRuntime.run(this.linterService, opts);\n    return lintResults;\n  }\n\n  /**\n   * create a lint task for build pipelines.\n   * @param name name of the task.\n   */\n  createTask(name?: string): LintTask {\n    return new LintTask(LinterAspect.id, name);\n  }\n\n  static dependencies = [EnvsAspect, CLIAspect, ComponentAspect, LoggerAspect, WorkspaceAspect];\n\n  static defaultConfig: LinterConfig = {\n    extensionFormats: ['.ts', '.tsx', '.js', '.jsx', '.mjs'],\n    fixTypes: ['layout', 'problem', 'suggestion'],\n  };\n\n  static async provider(\n    [envs, cli, component, loggerAspect, workspace]: [EnvsMain, CLIMain, ComponentMain, LoggerMain, Workspace],\n    config: LinterConfig\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const logger = loggerAspect.createLogger(LinterAspect.id);\n    const linterService = new LinterService(config);\n    const linterAspect = new LinterMain(envs, linterService);\n    envs.registerService(linterService);\n    cli.register(new LintCmd(linterAspect, component.getHost(), workspace));\n\n    return linterAspect;\n  }\n}\n\nLinterAspect.addRuntime(LinterMain);\n"]}