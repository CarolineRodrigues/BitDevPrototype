{"version":3,"sources":["linter.service.tsx"],"names":["LinterService","constructor","linterConfig","run","context","options","mergedOpts","optionsWithDefaults","linterContext","mergeContext","linter","env","getLinter","results","lint","Object","assign","quiet","extensionFormats","fixTypes","fix","render","descriptor","getDescriptor","id","displayName","version","config","language","ignoreIllegals","undefined","icon","displayConfig"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { defaults } from 'lodash';\nimport { EnvService, ExecutionContext, EnvDefinition } from '@teambit/envs';\nimport { Text, Newline } from 'ink';\nimport highlight from 'cli-highlight';\nimport { Linter, LintResults } from './linter';\nimport { LinterContext, LinterOptions } from './linter-context';\nimport { LinterConfig } from './linter.main.runtime';\n\nexport class LinterService implements EnvService<LintResults> {\n  name = 'linter';\n\n  constructor(private linterConfig: LinterConfig) {}\n\n  async run(context: ExecutionContext, options: LinterOptions): Promise<LintResults> {\n    const mergedOpts = this.optionsWithDefaults(options);\n    const linterContext = this.mergeContext(mergedOpts, context);\n    const linter: Linter = context.env.getLinter(linterContext);\n\n    const results = await linter.lint(linterContext);\n    return results;\n  }\n\n  private optionsWithDefaults(options: LinterOptions): LinterOptions {\n    return defaults(options, this.linterConfig);\n  }\n\n  private mergeContext(options: LinterOptions, context?: ExecutionContext): LinterContext {\n    const linterContext: LinterContext = Object.assign(\n      {},\n      {\n        quiet: false,\n        extensionFormats: options.extensionFormats,\n        fixTypes: options.fixTypes,\n        fix: options.fix,\n      },\n      context\n    );\n    return linterContext;\n  }\n\n  render(env: EnvDefinition) {\n    const descriptor = this.getDescriptor(env);\n\n    return (\n      <Text key={descriptor?.id}>\n        <Text color=\"cyan\">configured linter: </Text>\n        <Text>\n          {descriptor?.id} ({descriptor?.displayName} @ {descriptor?.version})\n        </Text>\n        <Newline />\n        <Text color=\"cyan\">linter config:</Text>\n        <Newline />\n        <Text>\n          {descriptor?.config && highlight(descriptor?.config, { language: 'javascript', ignoreIllegals: true })}\n        </Text>\n        <Newline />\n      </Text>\n    );\n  }\n\n  getDescriptor(env: EnvDefinition) {\n    if (!env.env.getLinter) return undefined;\n    const mergedOpts = this.optionsWithDefaults({});\n    const linterContext = this.mergeContext(mergedOpts);\n    const linter = env.env.getLinter(linterContext);\n\n    return {\n      id: linter.id,\n      icon: linter.icon,\n      config: linter.displayConfig ? linter.displayConfig() : undefined,\n      version: linter.version ? linter.version() : '?',\n      displayName: linter.displayName ? linter.displayName : '?',\n    };\n  }\n}\n"]}