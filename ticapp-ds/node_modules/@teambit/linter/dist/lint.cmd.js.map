{"version":3,"sources":["lint.cmd.ts"],"names":["LintCmd","constructor","linter","componentHost","workspace","report","components","linterOptions","code","data","json","duration","lintResults","componentsIdsToLint","title","chalk","bold","cyan","length","toString","name","componentsOutputs","results","map","lintRes","compTitle","componentId","ignoreVersion","compOutput","output","join","seconds","summery","timer","Timer","create","start","componentsIds","getIdsToLint","changed","componentsToLint","getMany","opts","fix","fixTypes","fixType","split","undefined","linterResults","lint","jsonLinterResults","toJsonLintResults","timerResponse","stop","totalErrorCount","totalFatalErrorCount","comp","id","resolveMultipleComponentIds","getNewAndModifiedIds","listIds","totalFixableErrorCount","totalFixableWarningCount","totalWarningCount","newResults","res","resultsWithoutComponent","result","Object","assign","component","errors"],"mappings":"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","sourcesContent":["import { TimerResponse, Timer } from '@teambit/legacy/dist/toolbox/timer';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ComponentFactory, ComponentID } from '@teambit/component';\nimport chalk from 'chalk';\nimport { EnvsExecutionResult } from '@teambit/envs';\nimport { Workspace } from '@teambit/workspace';\nimport { compact, flatten, omit } from 'lodash';\nimport { LinterMain } from './linter.main.runtime';\nimport { ComponentLintResult, LintResults } from './linter';\nimport { FixTypes, LinterOptions } from './linter-context';\n\nexport type LintCmdOptions = {\n  changed?: boolean;\n  fix?: boolean;\n  fixType?: string;\n  json?: boolean;\n};\n\n/**\n * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component\n */\nexport type JsonComponentLintResult = Omit<ComponentLintResult, 'component'> & {\n  componentId: ComponentID;\n};\n\nexport type JsonLintDataResults = Omit<LintResults, 'results'> & { results: JsonComponentLintResult[] };\n/**\n * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component\n */\nexport type JsonLintResults = {\n  code: number;\n  data: {\n    duration: TimerResponse;\n    lintResults: JsonLintDataResults;\n    componentsIdsToLint: string[];\n  };\n};\n\nexport class LintCmd implements Command {\n  name = 'lint [component...]';\n  description = 'lint components in the development workspace';\n  group = 'development';\n  options = [\n    ['c', 'changed', 'lint only new and modified components'],\n    ['f', 'fix', 'automatically fix problems'],\n    ['', 'fix-type <fixType>', 'specify the types of fixes to apply (problem, suggestion, layout)'],\n    ['j', 'json', 'return the lint results in json format'],\n  ] as CommandOptions;\n\n  constructor(private linter: LinterMain, private componentHost: ComponentFactory, private workspace: Workspace) {}\n\n  async report([components = []]: [string[]], linterOptions: LintCmdOptions) {\n    const { code, data } = await this.json([components], linterOptions);\n    const { duration, lintResults, componentsIdsToLint } = data;\n    const title = chalk.bold(\n      `linting total of ${chalk.cyan(componentsIdsToLint.length.toString())} component(s) in workspace '${chalk.cyan(\n        this.componentHost.name\n      )}'`\n    );\n\n    const componentsOutputs = lintResults.results\n      .map((lintRes) => {\n        const compTitle = chalk.bold.cyan(lintRes.componentId.toString({ ignoreVersion: true }));\n        const compOutput = lintRes.output;\n        return `${compTitle}\\n${compOutput}`;\n      })\n      .join('\\n');\n\n    const { seconds } = duration;\n    const summery = `linted ${chalk.cyan(componentsIdsToLint.length.toString())} components in ${chalk.cyan(\n      seconds.toString()\n    )}.`;\n    return { code, data: `${title}\\n\\n${componentsOutputs}\\n\\n${summery}` };\n  }\n\n  async json([components = []]: [string[]], linterOptions: LintCmdOptions): Promise<JsonLintResults> {\n    const timer = Timer.create();\n    timer.start();\n    const componentsIds = await this.getIdsToLint(components, linterOptions.changed);\n    const componentsToLint = await this.workspace.getMany(componentsIds);\n    const opts: LinterOptions = {\n      fix: linterOptions.fix,\n      fixTypes: linterOptions.fixType ? (linterOptions.fixType.split(',') as FixTypes) : undefined,\n    };\n    const linterResults = await this.linter.lint(componentsToLint, opts);\n    const jsonLinterResults = toJsonLintResults(linterResults);\n    // console.log('jsonLinterResults', JSON.stringify(jsonLinterResults, null, 2));\n    const timerResponse = timer.stop();\n    let code = 0;\n    if (jsonLinterResults.totalErrorCount || jsonLinterResults.totalFatalErrorCount) {\n      code = 1;\n    }\n    return {\n      code,\n      data: {\n        duration: timerResponse,\n        lintResults: jsonLinterResults,\n        componentsIdsToLint: componentsToLint.map((comp) => comp.id.toString()),\n      },\n    };\n  }\n\n  private async getIdsToLint(components: string[], changed = false): Promise<ComponentID[]> {\n    if (components.length) {\n      return this.workspace.resolveMultipleComponentIds(components);\n    }\n    if (changed) {\n      return this.workspace.getNewAndModifiedIds();\n    }\n    return this.componentHost.listIds();\n  }\n}\n\nfunction toJsonLintResults(results: EnvsExecutionResult<LintResults>): JsonLintDataResults {\n  let totalErrorCount = 0;\n  let totalFatalErrorCount = 0;\n  let totalFixableErrorCount = 0;\n  let totalFixableWarningCount = 0;\n  let totalWarningCount = 0;\n  const newResults = results.results.map((res) => {\n    const resultsWithoutComponent = res.data?.results.map((result) => {\n      return Object.assign({}, { componentId: result.component.id }, omit(result, ['component']));\n    });\n\n    if (res.data) {\n      totalErrorCount += res.data.totalErrorCount ?? 0;\n      totalFatalErrorCount += res.data.totalFatalErrorCount ?? 0;\n      totalFixableErrorCount += res.data.totalFixableErrorCount ?? 0;\n      totalFixableWarningCount += res.data.totalFixableWarningCount ?? 0;\n      totalWarningCount += res.data.totalWarningCount ?? 0;\n    }\n\n    return compact(resultsWithoutComponent);\n  });\n  return {\n    results: compact(flatten(newResults)),\n    totalErrorCount,\n    totalFatalErrorCount,\n    totalFixableErrorCount,\n    totalFixableWarningCount,\n    totalWarningCount,\n    errors: results?.errors,\n  };\n}\n"]}