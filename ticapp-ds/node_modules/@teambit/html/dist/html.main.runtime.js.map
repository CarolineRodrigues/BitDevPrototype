{"version":3,"sources":["html.main.runtime.ts"],"names":["HtmlMain","constructor","react","htmlEnv","envs","overrideTsConfig","bind","overrideJestConfig","overrideBuildPipe","overrideCompiler","overrideCompilerTasks","overrideBuildTsConfig","overridePackageJsonProps","useTypescript","useWebpack","usePrettier","useEslint","overrideDependencies","dependencyPolicy","override","getDependencies","compose","transformers","targetEnv","merge","provider","generator","HtmlEnv","reactEnv","registerEnv","registerComponentTemplate","htmlEnvTemplate","htmlComponentTemplate","deprecatedHtmlComponentTemplate","EnvsAspect","ReactAspect","GeneratorAspect","MainRuntime","HtmlAspect","addRuntime"],"mappings":"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","sourcesContent":["import { TsConfigSourceFile } from 'typescript';\nimport { merge } from 'lodash';\nimport type { TsCompilerOptionsWithoutTsConfig } from '@teambit/typescript';\nimport { BuildTask } from '@teambit/builder';\nimport { Compiler } from '@teambit/compiler';\nimport { PackageJsonProps } from '@teambit/pkg';\nimport { EnvPolicyConfigObject } from '@teambit/dependency-resolver';\nimport { MainRuntime } from '@teambit/cli';\nimport { EnvsAspect, EnvsMain, EnvTransformer, Environment } from '@teambit/envs';\nimport { ReactAspect, ReactEnv, ReactMain } from '@teambit/react';\nimport { GeneratorAspect, GeneratorMain } from '@teambit/generator';\nimport { htmlEnvTemplate } from './templates/html-env';\nimport { htmlComponentTemplate, deprecatedHtmlComponentTemplate } from './templates/html-component';\nimport { HtmlAspect } from './html.aspect';\nimport { HtmlEnv } from './html.env';\n\nexport class HtmlMain {\n  constructor(\n    private react: ReactMain,\n\n    readonly htmlEnv: HtmlEnv,\n\n    private envs: EnvsMain\n  ) {}\n  static slots = [];\n  static dependencies = [EnvsAspect, ReactAspect, GeneratorAspect];\n  static runtime = MainRuntime;\n\n  /**\n   * @deprecated use useTypescript()\n   * override the TS config of the environment.\n   */\n  overrideTsConfig: (\n    tsconfig: TsConfigSourceFile,\n    compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>,\n    tsModule?: any\n  ) => EnvTransformer = this.react.overrideTsConfig.bind(this.react);\n\n  /**\n   * override the jest config of the environment.\n   */\n  overrideJestConfig = this.react.overrideJestConfig.bind(this.react);\n\n  /**\n   * override the env build pipeline.\n   */\n  overrideBuildPipe: (tasks: BuildTask[]) => EnvTransformer = this.react.overrideBuildPipe.bind(this.react);\n\n  /**\n   * override the env compilers list.\n   */\n  overrideCompiler: (compiler: Compiler) => EnvTransformer = this.react.overrideCompiler.bind(this.react);\n\n  /**\n   * override the env compilers tasks in the build pipe.\n   */\n  overrideCompilerTasks: (tasks: BuildTask[]) => EnvTransformer = this.react.overrideCompilerTasks.bind(this.react);\n\n  /**\n   * @deprecated use useTypescript()\n   * override the build ts config.\n   */\n  overrideBuildTsConfig: (\n    tsconfig: any,\n    compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>\n  ) => EnvTransformer = this.react.overrideBuildTsConfig.bind(this.react);\n\n  /**\n   * override package json properties.\n   */\n  overridePackageJsonProps: (props: PackageJsonProps) => EnvTransformer = this.react.overridePackageJsonProps.bind(\n    this.react\n  );\n\n  /**\n   * override the env's typescript config for both dev and build time.\n   * Replaces both overrideTsConfig (devConfig) and overrideBuildTsConfig (buildConfig)\n   */\n  useTypescript = this.react.useTypescript.bind(this.react);\n\n  /**\n   * override the env's dev server and preview webpack configurations.\n   * Replaces both overrideDevServerConfig and overridePreviewConfig\n   */\n  useWebpack = this.react.useWebpack.bind(this.react);\n\n  /**\n   * An API to mutate the prettier config\n   */\n  usePrettier = this.react.usePrettier.bind(this.react);\n\n  /**\n   * An API to mutate the eslint config\n   */\n  useEslint = this.react.useEslint.bind(this.react);\n\n  /**\n   * override the dependency configuration of the component environment.\n   */\n  overrideDependencies(dependencyPolicy: EnvPolicyConfigObject) {\n    return this.envs.override({\n      getDependencies: () => merge(dependencyPolicy, this.htmlEnv.getDependencies()),\n    });\n  }\n\n  /**\n   * create a new composition of the html environment.\n   */\n  compose(transformers: EnvTransformer[], targetEnv: Environment = {}) {\n    return this.envs.compose(this.envs.merge(targetEnv, this.htmlEnv), transformers);\n  }\n\n  static async provider([envs, react, generator]: [EnvsMain, ReactMain, GeneratorMain]) {\n    const htmlEnv: HtmlEnv = envs.merge<HtmlEnv, ReactEnv>(new HtmlEnv(), react.reactEnv);\n    envs.registerEnv(htmlEnv);\n    generator.registerComponentTemplate([htmlEnvTemplate, htmlComponentTemplate, deprecatedHtmlComponentTemplate]);\n    return new HtmlMain(react, htmlEnv, envs);\n  }\n}\n\nHtmlAspect.addRuntime(HtmlMain);\n"]}