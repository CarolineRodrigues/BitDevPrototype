{"version":3,"sources":["render-composition.ts"],"names":["RenderHtmlComposition","target","composition","undefined","innerHTML","Element","HTMLDocument","appendChild"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACO,MAAMA,qBAAqB,GAAG,CAACC,MAAD,EAA6BC,WAA7B,KAA8D;AACjG,MAAI,CAACD,MAAL,EAAa,OAAOE,SAAP,CADoF,CAGjG;AACA;;AACAF,EAAAA,MAAM,CAACG,SAAP,GAAmB,EAAnB;;AAEA,MAAIF,WAAW,YAAYG,OAAvB,IAAkCH,WAAW,YAAYI,YAA7D,EAA2E;AACzEL,IAAAA,MAAM,CAACM,WAAP,CAAmBL,WAAnB;AACA,WAAOC,SAAP;AACD;;AAED,UAAQ,OAAOD,WAAf;AACE,SAAK,UAAL;AACEA,MAAAA,WAAW,CAACD,MAAD,CAAX;AACA,aAAOE,SAAP;;AACF,SAAK,QAAL;AACE,yCAAeF,MAAf,EAAuBC,WAAvB;AACA,aAAOC,SAAP;;AACF;AACE,aAAOA,SAAP;AAAkB;AARtB;AAUD,CAtBM","sourcesContent":["import { renderTemplate } from '@teambit/html.modules.render-template';\nimport { HtmlComposition } from './interfaces';\n\n/**\n * this mounts compositions into the DOM in the component preview.\n * this function can be overridden through ReactAspect.overrideCompositionsMounter() API\n * to apply custom logic for component DOM mounting.\n */\nexport const RenderHtmlComposition = (target: HTMLElement | null, composition: HtmlComposition) => {\n  if (!target) return undefined;\n\n  // first clear the root node from any previous compositions. Required as all compositions\n  // of a specific component are rendered in the same iframe\n  target.innerHTML = '';\n\n  if (composition instanceof Element || composition instanceof HTMLDocument) {\n    target.appendChild(composition);\n    return undefined;\n  }\n\n  switch (typeof composition) {\n    case 'function':\n      composition(target);\n      return undefined;\n    case 'string':\n      renderTemplate(target, composition);\n      return undefined;\n    default:\n      return undefined; // TODO error \"this type of composition is not supported by the html env\"\n  }\n};\n"]}