{"version":3,"sources":["insights.cmd.ts"],"names":["InsightsCmd","constructor","insightManager","report","names","options","list","results","json","JSON","stringify","runInsights","renderData","template","listInsights","opts","namesArr","run","runAll","elements","map","result","chalk","cyan","bold","message","renderedData","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKe,MAAMA,WAAN,CAAqC;AAUlDC,EAAAA,WAAW,CAACC,cAAD,EAAiC;AAAA,kDATrC,qBASqC;AAAA,yDAR9B,6BAQ8B;AAAA,mDAPpC,aAOoC;AAAA,qDANlC,IAMkC;AAAA,qDALlC,CACR,CAAC,GAAD,EAAM,MAAN,EAAc,mBAAd,CADQ,EAER,CAAC,GAAD,EAAM,MAAN,EAAc,oCAAd,CAFQ,CAKkC;AAAA;AAC1C,SAAKA,cAAL,GAAsBA,cAAtB;AACD;;AAEW,QAANC,MAAM,CAACC,KAAD,EAAoBC,OAApB,EAAiE;AAC3E,QAAIA,OAAO,CAACC,IAAZ,EAAkB;AAChB,YAAMC,OAAO,GAAG,MAAM,KAAKC,IAAL,CAAUJ,KAAV,EAAiBC,OAAjB,CAAtB;AACA,aAAOI,IAAI,CAACC,SAAL,CAAeH,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAAP;AACD;;AACD,UAAMA,OAAO,GAAG,MAAM,KAAKI,WAAL,CAAiBP,KAAjB,EAAwB;AAAEQ,MAAAA,UAAU,EAAE;AAAd,KAAxB,CAAtB;AACA,WAAOC,QAAQ,CAACN,OAAD,CAAf;AACD;;AAES,QAAJC,IAAI,CAACJ,KAAD,EAAoB;AAAEE,IAAAA;AAAF,GAApB,EAAiD;AACzD,QAAIA,IAAJ,EAAU;AACR,YAAMC,OAAO,GAAG,KAAKL,cAAL,CAAoBY,YAApB,EAAhB;AACA,aAAOP,OAAP;AACD;;AACD,WAAO,KAAKI,WAAL,CAAiBP,KAAjB,EAAwB;AAAEQ,MAAAA,UAAU,EAAE;AAAd,KAAxB,CAAP;AACD;;AAEwB,QAAXD,WAAW,CAAC,CAACP,KAAD,CAAD,EAAsBW,IAAtB,EAA+C;AACtE,QAAIX,KAAJ,EAAW;AACT,UAAIG,OAAwB,GAAG,EAA/B;AACA,YAAMS,QAAQ,GAAG,OAAOZ,KAAP,KAAiB,QAAjB,GAA4B,CAACA,KAAD,CAA5B,GAAsCA,KAAvD;AACAG,MAAAA,OAAO,GAAG,MAAM,KAAKL,cAAL,CAAoBe,GAApB,CAAwBD,QAAxB,EAAkCD,IAAlC,CAAhB;AACA,aAAOR,OAAP;AACD;;AACD,UAAMA,OAAO,GAAG,MAAM,KAAKL,cAAL,CAAoBgB,MAApB,CAA2BH,IAA3B,CAAtB;AACA,WAAOR,OAAP;AACD;;AAxCiD;;;;AA2CpD,SAASM,QAAT,CAAkBN,OAAlB,EAAoD;AAClD,QAAMY,QAAQ,GAAGZ,OAAO,CACrBa,GADc,CACTC,MAAD,IAAY;AACf,WAAQ,KAAIC,iBAAMC,IAAN,CAAWC,IAAX,CAAgBH,MAAM,CAACI,OAAvB,CAAgC;AAClD,IAAIJ,MAAM,CAACK,YAAa,EADlB;AAED,GAJc,EAKdC,IALc,CAKT,IALS,CAAjB;AAMA,SAAOR,QAAP;AACD","sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { InsightResult } from './insight';\nimport { InsightManager, RunInsightOptions } from './insight-manager';\n\nexport default class InsightsCmd implements Command {\n  name = 'insights [...names]';\n  description = 'Insights on component graph';\n  group = 'development';\n  private = true;\n  options = [\n    ['l', 'list', 'list all insights'],\n    ['j', 'json', 'return the insights in json format'],\n  ] as CommandOptions;\n  insightManager: InsightManager;\n  constructor(insightManager: InsightManager) {\n    this.insightManager = insightManager;\n  }\n\n  async report(names: [string[]], options: { list: boolean }): Promise<string> {\n    if (options.list) {\n      const results = await this.json(names, options);\n      return JSON.stringify(results, null, 2);\n    }\n    const results = await this.runInsights(names, { renderData: true });\n    return template(results);\n  }\n\n  async json(names: [string[]], { list }: { list: boolean }) {\n    if (list) {\n      const results = this.insightManager.listInsights();\n      return results;\n    }\n    return this.runInsights(names, { renderData: false });\n  }\n\n  private async runInsights([names]: [string[]], opts: RunInsightOptions) {\n    if (names) {\n      let results: InsightResult[] = [];\n      const namesArr = typeof names === 'string' ? [names] : names;\n      results = await this.insightManager.run(namesArr, opts);\n      return results;\n    }\n    const results = await this.insightManager.runAll(opts);\n    return results;\n  }\n}\n\nfunction template(results: InsightResult[]): string {\n  const elements = results\n    .map((result) => {\n      return `\\n${chalk.cyan.bold(result.message)}\n  ${result.renderedData}`;\n    })\n    .join('\\n');\n  return elements;\n}\n"]}