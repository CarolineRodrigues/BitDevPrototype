{"version":3,"sources":["insight-manager.ts"],"names":["InsightManager","constructor","insights","Map","forEach","insight","register","name","has","InsightAlreadyExists","set","listInsights","keys","getByName","insightName","get","delete","InsightNotFound","run","insightNames","opts","res","insightRes","renderData","renderedData","push","runAll","allInsightNames"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMO,MAAMA,cAAN,CAAqB;AAC1B;AAEAC,EAAAA,WAAW;AACT;AACJ;AACA;AACIC,EAAAA,QAJS,EAKT;AAAA,sDANwC,IAAIC,GAAJ,EAMxC;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAa;AAC5B,WAAKC,QAAL,CAAcD,OAAd;AACD,KAFD;AAGD;AAED;AACF;AACA;;;AACEC,EAAAA,QAAQ,CAACD,OAAD,EAAmB;AACzB,UAAME,IAAI,GAAGF,OAAO,CAACE,IAArB;;AACA,QAAI,KAAKL,QAAL,CAAcM,GAAd,CAAkBD,IAAlB,CAAJ,EAA6B;AAC3B,YAAM,KAAIE,+BAAJ,EAAyBF,IAAzB,CAAN;AACD;;AACD,SAAKL,QAAL,CAAcQ,GAAd,CAAkBH,IAAlB,EAAwBF,OAAxB;AACD;AACD;AACF;AACA;;;AACEM,EAAAA,YAAY,GAAa;AACvB,WAAO,CAAC,GAAG,KAAKT,QAAL,CAAcU,IAAd,EAAJ,CAAP;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,SAAS,CAACC,WAAD,EAA2C;AAClD,WAAO,KAAKZ,QAAL,CAAca,GAAd,CAAkBD,WAAlB,CAAP;AACD;AAED;AACF;AACA;;;AACEE,EAAAA,MAAM,CAACF,WAAD,EAAsB;AAC1B,QAAI,CAAC,KAAKZ,QAAL,CAAcM,GAAd,CAAkBM,WAAlB,CAAL,EAAqC;AACnC,YAAM,KAAIG,0BAAJ,EAAoBH,WAApB,CAAN;AACD;;AACD,SAAKZ,QAAL,CAAcc,MAAd,CAAqBF,WAArB;AACD;AAED;AACF;AACA;AACA;;;AACW,QAAHI,GAAG,CAACC,YAAD,EAAyBC,IAAzB,EAA4E;AACnF,UAAMC,GAAoB,GAAG,EAA7B,CADmF,CAEnF;AACA;AACA;;AACA,UAAM,2BAAWF,YAAX,EAAyB,MAAOL,WAAP,IAAuB;AACpD,YAAMT,OAAO,GAAG,KAAKQ,SAAL,CAAeC,WAAf,CAAhB;;AACA,UAAIT,OAAJ,EAAa;AACX,cAAMiB,UAAyB,GAAG,MAAMjB,OAAO,CAACa,GAAR,EAAxC;;AACA,YAAI,CAACE,IAAI,CAACG,UAAV,EAAsB;AACpB,iBAAOD,UAAU,CAACE,YAAlB;AACD;;AACDH,QAAAA,GAAG,CAACI,IAAJ,CAASH,UAAT;AACD;AACF,KATK,CAAN;AAUA,WAAOD,GAAP;AACD;AAED;AACF;AACA;AACA;;;AACc,QAANK,MAAM,CAACN,IAAD,EAAoD;AAC9D,UAAMO,eAAe,GAAG,KAAKhB,YAAL,EAAxB;AACA,WAAO,KAAKO,GAAL,CAASS,eAAT,EAA0BP,IAA1B,CAAP;AACD;;AA7EyB","sourcesContent":["import pMapSeries from 'p-map-series';\nimport InsightAlreadyExists from './exceptions/insight-already-exists';\nimport InsightNotFound from './exceptions/insight-not-found';\nimport { Insight, InsightResult } from './insight';\n\nexport type RunInsightOptions = {\n  renderData: boolean;\n};\nexport class InsightManager {\n  /** insights is an insight registry */\n  readonly insights: Map<string, Insight> = new Map();\n  constructor(\n    /**\n     * array of registered insights\n     */\n    insights: Insight[]\n  ) {\n    insights.forEach((insight) => {\n      this.register(insight);\n    });\n  }\n\n  /**\n   * registers a new insight and returns the updated insight registry map\n   */\n  register(insight: Insight) {\n    const name = insight.name;\n    if (this.insights.has(name)) {\n      throw new InsightAlreadyExists(name);\n    }\n    this.insights.set(name, insight);\n  }\n  /**\n   * list of all registered insights\n   */\n  listInsights(): string[] {\n    return [...this.insights.keys()];\n  }\n\n  /**\n   * gets a specific insight by its name or undefined if doesn't exist\n   */\n  getByName(insightName: string): Insight | undefined {\n    return this.insights.get(insightName);\n  }\n\n  /**\n   * deletes a specific insight by its name if exists\n   */\n  delete(insightName: string) {\n    if (!this.insights.has(insightName)) {\n      throw new InsightNotFound(insightName);\n    }\n    this.insights.delete(insightName);\n  }\n\n  /**\n   * execute an array of insights\n   *\n   */\n  async run(insightNames: string[], opts: RunInsightOptions): Promise<InsightResult[]> {\n    const res: InsightResult[] = [];\n    // the reason for not using Promise.all here is that the current both insights building the graph.\n    // if it happens at the same time, some props are not populated in one of the instances. it obviously\n    // should be fixed in the GraphBuilder class. see \"todo\" there.\n    await pMapSeries(insightNames, async (insightName) => {\n      const insight = this.getByName(insightName);\n      if (insight) {\n        const insightRes: InsightResult = await insight.run();\n        if (!opts.renderData) {\n          delete insightRes.renderedData;\n        }\n        res.push(insightRes);\n      }\n    });\n    return res;\n  }\n\n  /**\n   * execute all insights in the registry\n   *\n   */\n  async runAll(opts: RunInsightOptions): Promise<InsightResult[]> {\n    const allInsightNames = this.listInsights();\n    return this.run(allInsightNames, opts);\n  }\n}\n"]}