{"version":3,"sources":["find-cycles.ts"],"names":["INSIGHT_NAME","FindCycles","constructor","graphBuilder","runInsight","graph","getGraph","message","data","undefined","cycles","findCycles","length","renderData","string","map","cycle","join","run","bareResult","renderedData","result","metaData","name","description"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGO,MAAMA,YAAY,GAAG,qBAArB;;;AAEQ,MAAMC,UAAN,CAAoC;AAIjDC,EAAAA,WAAW,CAACC,YAAD,EAA6B;AAAA,kDAHjCH,YAGiC;AAAA,yDAF1B,gDAE0B;AAAA;AACtC,SAAKG,YAAL,GAAoBA,YAApB;AACD;;AACuB,QAAVC,UAAU,GAAuB;AAC7C,UAAMC,KAAK,GAAG,MAAM,KAAKF,YAAL,CAAkBG,QAAlB,EAApB;;AACA,QAAI,CAACD,KAAL,EAAY;AACV,aAAO;AACLE,QAAAA,OAAO,EAAE,EADJ;AAELC,QAAAA,IAAI,EAAEC;AAFD,OAAP;AAID;;AACD,UAAMC,MAAM,GAAGL,KAAK,CAACM,UAAN,EAAf;;AACA,QAAID,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;AACvB,aAAO;AACLL,QAAAA,OAAO,EAAG,SAAQG,MAAM,CAACE,MAAO,SAD3B;AAELJ,QAAAA,IAAI,EAAEE;AAFD,OAAP;AAID;;AACD,WAAO;AACLH,MAAAA,OAAO,EAAG,SAAQG,MAAM,CAACE,MAAO,UAD3B;AAELJ,MAAAA,IAAI,EAAEE;AAFD,KAAP;AAID;;AAEOG,EAAAA,UAAU,CAACL,IAAD,EAAkB;AAClC,QAAIA,IAAI,CAACA,IAAL,CAAUI,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,aAAO,wBAAP;AACD;;AACD,UAAME,MAAM,GAAGN,IAAI,CAACA,IAAL,CACZO,GADY,CACPC,KAAD,IAAW;AACd,aAAQ;AAChB;AACA,IAAIA,KAAK,CAACC,IAAN,CAAW,MAAX,CAAmB,EAFf;AAGD,KALY,EAMZA,IANY,CAMP,IANO,CAAf;AAOA,WAAOH,MAAP;AACD;;AAEQ,QAAHI,GAAG,GAA2B;AAClC,UAAMC,UAAU,GAAG,MAAM,KAAKf,UAAL,EAAzB;AACA,UAAMgB,YAAY,GAAG,KAAKP,UAAL,CAAgBM,UAAhB,CAArB;AACA,UAAME,MAAqB,GAAG;AAC5BC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAE,KAAKA,IADH;AAERC,QAAAA,WAAW,EAAE,KAAKA;AAFV,OADkB;AAK5BhB,MAAAA,IAAI,EAAEW,UAAU,CAACX,IALW;AAM5BD,MAAAA,OAAO,EAAEY,UAAU,CAACZ,OANQ;AAO5Ba,MAAAA;AAP4B,KAA9B;;AAUA,QAAID,UAAU,CAACZ,OAAf,EAAwB;AACtBc,MAAAA,MAAM,CAACd,OAAP,GAAiBY,UAAU,CAACZ,OAA5B;AACD;;AACD,WAAOc,MAAP;AACD;;AA3DgD","sourcesContent":["import { GraphBuilder } from '@teambit/graph';\nimport { Insight, InsightResult, RawResult } from '../insight';\n\nexport const INSIGHT_NAME = 'cyclic dependencies';\n\nexport default class FindCycles implements Insight {\n  name = INSIGHT_NAME;\n  description = 'Get all cyclic dependencies in component graph';\n  graphBuilder: GraphBuilder;\n  constructor(graphBuilder: GraphBuilder) {\n    this.graphBuilder = graphBuilder;\n  }\n  private async runInsight(): Promise<RawResult> {\n    const graph = await this.graphBuilder.getGraph();\n    if (!graph) {\n      return {\n        message: '',\n        data: undefined,\n      };\n    }\n    const cycles = graph.findCycles();\n    if (cycles.length === 1) {\n      return {\n        message: `Found ${cycles.length} cycle.`,\n        data: cycles,\n      };\n    }\n    return {\n      message: `Found ${cycles.length} cycles.`,\n      data: cycles,\n    };\n  }\n\n  private renderData(data: RawResult) {\n    if (data.data.length === 0) {\n      return 'No cyclic dependencies';\n    }\n    const string = data.data\n      .map((cycle) => {\n        return `\\nCyclic dependency\n-----------------\n- ${cycle.join('\\n- ')}`;\n      })\n      .join('\\n');\n    return string;\n  }\n\n  async run(): Promise<InsightResult> {\n    const bareResult = await this.runInsight();\n    const renderedData = this.renderData(bareResult);\n    const result: InsightResult = {\n      metaData: {\n        name: this.name,\n        description: this.description,\n      },\n      data: bareResult.data,\n      message: bareResult.message,\n      renderedData,\n    };\n\n    if (bareResult.message) {\n      result.message = bareResult.message;\n    }\n    return result;\n  }\n}\n"]}