{"version":3,"sources":["duplicate-dependencies.ts"],"names":["INSIGHT_NAME","DuplicateDependencies","constructor","graphBuilder","runInsight","graph","getGraph","message","data","undefined","duplicates","findDuplicateDependencies","lenDependencies","keys","length","formatData","formatted","dependency","depData","entries","totalOutdatedDependents","dependentsByVersion","getDependents","priorVersions","push","dependencyId","latestVersion","latestVersionId","toString","forEach","pVersion","dependents","version","ComponentID","fromString","versionId","split","immediateDependents","dependent","id","usedVersion","compId","sort","revreseCompareVersions","v1","v2","stringifyDependents","string","map","join","stringifyDependentsByVersion","versions","renderData","obj","run","bareResult","formattedData","renderedData","result","metaData","name","description"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { GraphBuilder, VersionSubgraph } from '@teambit/graph';\nimport { rcompare } from 'semver';\n// import { ComponentID } from '../../../component/component-id';\nimport { ComponentID } from '@teambit/component';\nimport { Insight, InsightResult, RawResult } from '../insight';\n// import NoDataForInsight from '../exceptions/no-data-for-insight';\n\nexport const INSIGHT_NAME = 'duplicate dependencies';\n\ntype Dependent = {\n  id: string;\n  usedVersion: string;\n};\n\ntype VersionWithDependents = {\n  version: string;\n  compId: string;\n  dependents: Dependent[];\n};\n\ntype FormattedEntry = {\n  dependencyId: string;\n  latestVersion: string;\n  totalOutdatedDependents: string;\n  dependentsByVersion: VersionWithDependents[];\n};\nexport default class DuplicateDependencies implements Insight {\n  name = INSIGHT_NAME;\n  description = 'Get all duplicate dependencies in component graph';\n  graphBuilder: GraphBuilder;\n  constructor(graphBuilder: GraphBuilder) {\n    this.graphBuilder = graphBuilder;\n  }\n  private async runInsight(): Promise<RawResult> {\n    const graph = await this.graphBuilder.getGraph();\n    if (!graph) {\n      return {\n        message: 'No graph found',\n        data: undefined,\n      };\n    }\n    const duplicates = graph.findDuplicateDependencies();\n    const lenDependencies = [...duplicates.keys()].length;\n    if (lenDependencies === 1) {\n      return {\n        message: `Found ${lenDependencies} duplicate dependency.`,\n        data: duplicates,\n      };\n    }\n    return {\n      message: `Found ${lenDependencies} duplicate dependencies.`,\n      data: duplicates,\n    };\n  }\n\n  private formatData(data: any): FormattedEntry[] {\n    const formatted: FormattedEntry[] = [];\n    for (const [dependency, depData] of data.entries()) {\n      const { totalOutdatedDependents, dependentsByVersion } = this.getDependents(depData.priorVersions);\n      formatted.push({\n        dependencyId: dependency,\n        latestVersion: depData.latestVersionId,\n        totalOutdatedDependents: totalOutdatedDependents.toString(),\n        dependentsByVersion,\n      });\n    }\n    return formatted;\n  }\n\n  private getDependents(\n    priorVersions: VersionSubgraph[]\n  ): { totalOutdatedDependents: number; dependentsByVersion: VersionWithDependents[] } {\n    let totalOutdatedDependents = 0;\n    const dependentsByVersion: VersionWithDependents[] = [];\n    priorVersions.forEach((pVersion: VersionSubgraph) => {\n      const dependents: Dependent[] = [];\n      const version = ComponentID.fromString(pVersion.versionId).version || pVersion.versionId.split('@')[1];\n      pVersion.immediateDependents.forEach((dependent: string) => {\n        dependents.push({\n          id: dependent,\n          usedVersion: pVersion.versionId,\n        });\n      });\n      dependentsByVersion.push({\n        compId: pVersion.versionId,\n        version,\n        dependents,\n      });\n      totalOutdatedDependents += pVersion.immediateDependents.length;\n    });\n    dependentsByVersion.sort(this.revreseCompareVersions);\n    return { totalOutdatedDependents, dependentsByVersion };\n  }\n\n  revreseCompareVersions(v1: VersionWithDependents, v2: VersionWithDependents) {\n    return rcompare(v1.version, v2.version);\n  }\n\n  private stringifyDependents(dependents: Dependent[]): string {\n    const string = dependents\n      .map((dependent) => {\n        return `- ${dependent.id} => ${dependent.usedVersion}`;\n      })\n      .join('\\n');\n    return string;\n  }\n\n  private stringifyDependentsByVersion(versions: VersionWithDependents[]): string {\n    const string = versions\n      .map((version) => {\n        return `- ${version.compId} has ${version.dependents.length} dependents`;\n      })\n      .join('\\n');\n    return string;\n  }\n\n  private renderData(data: FormattedEntry[]) {\n    const string = data\n      .map((obj) => {\n        return `\\n\\nFound ${obj.totalOutdatedDependents} outdated dependents for ${obj.dependencyId}\nThe latest version is \"${obj.latestVersion}\"\nOutdated dependents:\n${this.stringifyDependentsByVersion(obj.dependentsByVersion)}`;\n      })\n      .join('\\n');\n    return string;\n  }\n\n  async run(): Promise<InsightResult> {\n    const bareResult = await this.runInsight();\n    const formattedData = this.formatData(bareResult.data);\n    const renderedData = this.renderData(formattedData);\n    const result: InsightResult = {\n      metaData: {\n        name: this.name,\n        description: this.description,\n      },\n      data: formattedData,\n      message: bareResult.message,\n      renderedData,\n    };\n\n    if (bareResult.message) {\n      result.message = bareResult.message;\n    }\n    return result;\n  }\n}\n"]}