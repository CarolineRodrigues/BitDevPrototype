{"version":3,"sources":["diagnostic.main.runtime.ts"],"names":["DiagnosticMain","constructor","diagnosticSlot","register","diagnostic","getDiagnosticData","slots","toArray","reduce","prev","cSlot","aspectId","reports","forEach","diag","diagnosticFn","push","getBitVersion","version","provider","express","config","diagnosticMain","DiagnosticRoute","Slot","withType","ExpressAspect","MainRuntime","DiagnosticAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKO,MAAMA,cAAN,CAAqB;AAC1BC,EAAAA,WAAW;AACT;AACQC,EAAAA,cAFC,EAGT;AAAA,SADQA,cACR,GADQA,cACR;AAAE;;AAKJC,EAAAA,QAAQ,CAAC,GAAGC,UAAJ,EAA8B;AACpC,SAAKF,cAAL,CAAoBC,QAApB,CAA6BC,UAA7B;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,KAAK,GAAG,KAAKJ,cAAL,CAAoBK,OAApB,EAAd;AACA,WAAOD,KAAK,CAACE,MAAN,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACnC,YAAM,CAACC,QAAD,EAAWP,UAAX,IAAyBM,KAA/B;AACAD,MAAAA,IAAI,CAACE,QAAD,CAAJ,GAAiB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAjB;AACAR,MAAAA,UAAU,CAACS,OAAX,CAAoBC,IAAD,IAAU;AAC3B,cAAM;AAAEC,UAAAA;AAAF,YAAmBD,IAAzB;AACAL,QAAAA,IAAI,CAACE,QAAD,CAAJ,CAAeC,OAAf,CAAuBI,IAAvB,CAA4BD,YAAY,EAAxC;AACD,OAHD;AAIA,aAAON,IAAP;AACD,KARM,EAQJ,EARI,CAAP;AASD;;AAEmB,SAAbQ,aAAa,GAAG;AACrB,UAAMC,OAAO,GAAG,oCAAkB,IAAlB,CAAhB;AACA,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD;;AAEoB,eAARC,QAAQ,CAAC,CAACC,OAAD,CAAD,EAA2BC,MAA3B,EAAwC,CAACnB,cAAD,CAAxC,EAA4E;AAC/F,UAAMoB,cAAc,GAAG,IAAItB,cAAJ,CAAmBE,cAAnB,CAAvB;AACAoB,IAAAA,cAAc,CAACnB,QAAf,CAAwB;AAAEY,MAAAA,YAAY,EAAEf,cAAc,CAACiB;AAA/B,KAAxB;AACAG,IAAAA,OAAO,CAACjB,QAAR,CAAiB,CAAC,KAAIoB,8BAAJ,EAAoBD,cAApB,CAAD,CAAjB;AACA,WAAOA,cAAP;AACD;;AApCyB;;;gCAAftB,c,WAKI,CAACwB,gBAAKC,QAAL,EAAD,C;gCALJzB,c,kBAMW,CAAC0B,wBAAD,C;gCANX1B,c,aAOM2B,kB;;AAgCnBC,+BAAiBC,UAAjB,CAA4B7B,cAA5B","sourcesContent":["import { getHarmonyVersion } from '@teambit/legacy/dist/bootstrap';\n\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { MainRuntime } from '@teambit/cli';\nimport { ExpressAspect, ExpressMain } from '@teambit/express';\nimport { DiagnosticAspect } from './diagnostic.aspect';\nimport { DiagnosticRoute } from './diagnostic.route';\nimport { Diagnostic } from './diagnostic';\n\nexport type DiagnosticSlot = SlotRegistry<Diagnostic[]>;\n\nexport class DiagnosticMain {\n  constructor(\n    /** the diagnostic entity slot */\n    private diagnosticSlot: DiagnosticSlot\n  ) {}\n  static slots = [Slot.withType<Diagnostic[]>()];\n  static dependencies = [ExpressAspect];\n  static runtime = MainRuntime;\n\n  register(...diagnostic: Diagnostic[]) {\n    this.diagnosticSlot.register(diagnostic);\n  }\n\n  getDiagnosticData() {\n    const slots = this.diagnosticSlot.toArray();\n    return slots.reduce((prev, cSlot) => {\n      const [aspectId, diagnostic] = cSlot;\n      prev[aspectId] = { reports: [] };\n      diagnostic.forEach((diag) => {\n        const { diagnosticFn } = diag;\n        prev[aspectId].reports.push(diagnosticFn());\n      });\n      return prev;\n    }, {});\n  }\n\n  static getBitVersion() {\n    const version = getHarmonyVersion(true);\n    return { version };\n  }\n\n  static async provider([express]: [ExpressMain], config: any, [diagnosticSlot]: [DiagnosticSlot]) {\n    const diagnosticMain = new DiagnosticMain(diagnosticSlot);\n    diagnosticMain.register({ diagnosticFn: DiagnosticMain.getBitVersion });\n    express.register([new DiagnosticRoute(diagnosticMain)]);\n    return diagnosticMain;\n  }\n}\n\nDiagnosticAspect.addRuntime(DiagnosticMain);\n"]}