{"version":3,"sources":["side-bar.tsx"],"names":["SideBar","drawerSlot","itemSlot","rest","drawers","values","filter","drawer","isHidden","sort","sortFn","openDrawerList","onToggleDrawer","map","id","items","handleDrawerToggle","isDrawerOpen","includes","list","concat","styles","sidebar","name","isOpen","sidebarDrawer","open","widgets","Context","first","second","order"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAaA;AACA;AACA;AACO,SAASA,OAAT,OAAkE;AAAA,MAAjD;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAiD;AAAA,MAAtBC,IAAsB;AACvE,QAAMC,OAAO,GAAG,uBAAQH,UAAU,CAACI,MAAX,EAAR,EACbC,MADa,CACLC,MAAD;AAAA;;AAAA,WAAY,EAACA,MAAD,aAACA,MAAD,mCAACA,MAAM,CAAEC,QAAT,6CAAC,sBAAAD,MAAM,CAAP,CAAZ;AAAA,GADM,EAEbE,IAFa,CAERC,MAFQ,CAAhB;AAIA,QAAM,CAACC,cAAD,EAAiBC,cAAjB,IAAmC,uBAAiCR,OAAO,CAACS,GAAR,CAAaN,MAAD,IAAYA,MAAM,CAACO,EAA/B,CAAjC,CAAzC;AACA,QAAMC,KAAK,GAAG,sBAAQ,MAAM,uBAAQb,QAAR,aAAQA,QAAR,uBAAQA,QAAQ,CAAEG,MAAV,EAAR,CAAd,EAA2C,CAACH,QAAD,CAA3C,CAAd;;AAEA,QAAMc,kBAAkB,GAAIF,EAAD,IAAgB;AACzC,UAAMG,YAAY,GAAGN,cAAc,CAACO,QAAf,CAAwBJ,EAAxB,CAArB;;AACA,QAAIG,YAAJ,EAAkB;AAChBL,MAAAA,cAAc,CAAEO,IAAD,IAAUA,IAAI,CAACb,MAAL,CAAaC,MAAD,IAAYA,MAAM,KAAKO,EAAnC,CAAX,CAAd;AACA;AACD;;AACDF,IAAAA,cAAc,CAAEO,IAAD,IAAUA,IAAI,CAACC,MAAL,CAAYN,EAAZ,CAAX,CAAd;AACD,GAPD;;AASA,sBACE,mEAASX,IAAT;AAAe,IAAA,SAAS,EAAEkB,yBAAOC;AAAjC,mBACE,+BAAC,mCAAD;AAAa,IAAA,KAAK,EAAEP;AAApB,IADF,EAEGX,OAAO,CAACS,GAAR,CAAaN,MAAD,IAAY;AACvB,QAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACgB,IAAvB,EAA6B,OAAO,IAAP,CADN,CAEvB;;AACA,UAAMC,MAAM,GAAGb,cAAc,CAACO,QAAf,CAAwBX,MAAM,CAACO,EAA/B,CAAf;AAEA,wBACE,+BAAC,8BAAD;AACE,MAAA,SAAS,EAAE,2BAAWO,yBAAOI,aAAlB,EAAiCD,MAAM,IAAIH,yBAAOK,IAAlD,CADb;AAEE,MAAA,MAAM,EAAEF,MAFV;AAGE,MAAA,QAAQ,EAAE,MAAMR,kBAAkB,CAACT,MAAM,CAACO,EAAR,CAHpC;AAIE,MAAA,GAAG,EAAEP,MAAM,CAACO,EAJd;AAKE,MAAA,IAAI,EAAEP,MAAM,CAACgB,IALf;AAME,MAAA,OAAO,EAAEhB,MAAM,CAACoB,OANlB;AAOE,MAAA,OAAO,EAAEpB,MAAM,CAACqB;AAPlB,oBASE,+BAAC,MAAD,CAAQ,MAAR,OATF,CADF;AAaD,GAlBA,CAFH,CADF;AAwBD;;AACD,SAASlB,MAAT,CAAgBmB,KAAhB,EAAmCC,MAAnC,EAAuD;AAAA;;AACrD;AACA;AACA;AAEA,SAAO,iBAACD,KAAK,CAACE,KAAP,uDAAgB,CAAhB,sBAAsBD,MAAM,CAACC,KAA7B,yDAAsC,CAAtC,CAAP;AACD","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { flatten } from 'lodash';\nimport classNames from 'classnames';\nimport { MenuSection } from '@teambit/design.ui.surfaces.menu.section';\nimport { DrawerType, DrawerUI } from '@teambit/ui-foundation.ui.tree.drawer';\nimport { DrawerSlot, SidebarItemSlot } from '../../sidebar.ui.runtime';\nimport styles from './side-bar.module.scss';\n\nexport type SideBarProps = {\n  /**\n   * slot of registered drawers.\n   */\n  drawerSlot: DrawerSlot;\n  /**\n   * slot of registered items to the main section at the top.\n   */\n  itemSlot?: SidebarItemSlot;\n} & React.HTMLAttributes<HTMLDivElement>;\n\n/**\n * side bar component.\n */\nexport function SideBar({ drawerSlot, itemSlot, ...rest }: SideBarProps) {\n  const drawers = flatten(drawerSlot.values())\n    .filter((drawer) => !drawer?.isHidden?.())\n    .sort(sortFn);\n\n  const [openDrawerList, onToggleDrawer] = useState<(string | undefined)[]>(drawers.map((drawer) => drawer.id));\n  const items = useMemo(() => flatten(itemSlot?.values()), [itemSlot]);\n\n  const handleDrawerToggle = (id: string) => {\n    const isDrawerOpen = openDrawerList.includes(id);\n    if (isDrawerOpen) {\n      onToggleDrawer((list) => list.filter((drawer) => drawer !== id));\n      return;\n    }\n    onToggleDrawer((list) => list.concat(id));\n  };\n\n  return (\n    <div {...rest} className={styles.sidebar}>\n      <MenuSection items={items} />\n      {drawers.map((drawer) => {\n        if (!drawer || !drawer.name) return null;\n        // consider passing collapse all as a prop so each drawer collapses itself\n        const isOpen = openDrawerList.includes(drawer.id);\n\n        return (\n          <DrawerUI\n            className={classNames(styles.sidebarDrawer, isOpen && styles.open)}\n            isOpen={isOpen}\n            onToggle={() => handleDrawerToggle(drawer.id)}\n            key={drawer.id}\n            name={drawer.name}\n            Widgets={drawer.widgets}\n            Context={drawer.Context}\n          >\n            <drawer.render />\n          </DrawerUI>\n        );\n      })}\n    </div>\n  );\n}\nfunction sortFn(first: DrawerType, second: DrawerType) {\n  // 0  - equal\n  // <0 - first < second\n  // >0 - first > second\n\n  return (first.order ?? 0) - (second.order ?? 0);\n}\n"]}