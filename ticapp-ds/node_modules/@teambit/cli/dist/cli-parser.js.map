{"version":3,"sources":["cli-parser.ts"],"names":["CLIParser","constructor","commands","groups","parser","yargs","docsDomain","parse","args","process","argv","slice","throwForNonExistsCommand","logger","debug","join","help","configureParser","forEach","command","length","parseCommandWithSubCommands","yargsCommand","getYargsCommand","configureGlobalFlags","setHelpMiddleware","handleCommandFailure","configureCompletion","strict","wrap","middleware","_","printHelp","exit","loader","off","showHelp","logCommandHelp","bind","isDaemon","fail","msg","err","stop","console","log","chalk","yellow","commandsToShowComponentIdsForCompletion","completion","current","completionFilter","done","startsWith","includes","consumer","bitmapIdsFromCurrentLane","map","id","toStringWithoutVersion","parserConfiguration","yarnCommand","builderFunc","cmd","subCommand","options","getGlobalOptions","builder","YargsAdapter","handler","option","alias","describe","group","GLOBAL_GROUP","global","commandName","commandsNames","c","name","aliases","filter","a","existingGlobalFlags","validCommands","commandExist","didYouMean","returnFirstMatch","suggestions","private","suggestion","Array","isArray","CommandNotFound","findCommandByArgv","replacer","p1","p2","green","lines","split","linesWithoutEmpty","cmdLine","description","globalOptions","subCommands","optionsStarted","globalStarted","subCommandsStarted","i","currentLine","STANDARD_GROUP","push","optionsColored","opt","replace","optionsStr","subCommandsStr","descriptionColored","desc","extendedDescription","descriptionStr","globalOptionsStr","finalOutput","enteredCommand","enteredSubCommand","undefined","isCommandMatch","str","find"],"mappings":"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","sourcesContent":["import didYouMean from 'didyoumean';\nimport yargs from 'yargs';\nimport { Command } from '@teambit/legacy/dist/cli/command';\nimport { GroupsType } from '@teambit/legacy/dist/cli/command-groups';\nimport { compact } from 'lodash';\nimport { loadConsumerIfExist } from '@teambit/legacy/dist/consumer';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport chalk from 'chalk';\nimport { getCommandId } from './get-command-id';\nimport { formatHelp } from './help';\nimport { GLOBAL_GROUP, STANDARD_GROUP, YargsAdapter } from './yargs-adapter';\nimport { CommandNotFound } from './exceptions/command-not-found';\n\nexport class CLIParser {\n  constructor(\n    private commands: Command[],\n    private groups: GroupsType,\n    public parser = yargs,\n    private docsDomain: string\n  ) {}\n\n  async parse(args = process.argv.slice(2)) {\n    this.throwForNonExistsCommand(args[0]);\n    logger.debug(`[+] CLI-INPUT: ${args.join(' ')}`);\n    yargs(args);\n    yargs.help(false);\n    this.configureParser();\n    this.commands.forEach((command: Command) => {\n      if (command.commands && command.commands.length) {\n        this.parseCommandWithSubCommands(command);\n      } else {\n        const yargsCommand = this.getYargsCommand(command);\n        yargs.command(yargsCommand);\n      }\n    });\n    this.configureGlobalFlags();\n    this.setHelpMiddleware();\n    this.handleCommandFailure();\n    this.configureCompletion();\n    yargs.strict(); // don't allow non-exist flags and non-exist commands\n\n    yargs\n      // .recommendCommands() // don't use it, it brings the global help of yargs, we have a custom one\n      .wrap(null);\n\n    await yargs.parse();\n  }\n\n  private setHelpMiddleware() {\n    yargs.middleware((argv) => {\n      if (argv._.length === 0 && argv.help) {\n        // this is the main help page\n        this.printHelp();\n        process.exit(0);\n      }\n      if (argv.help) {\n        loader.off(); // stop the \"loading bit...\" before showing help if needed\n        // this is a command help page\n        yargs.showHelp(this.logCommandHelp.bind(this));\n        if (!logger.isDaemon) process.exit(0);\n      }\n    }, true);\n  }\n\n  private handleCommandFailure() {\n    yargs.fail((msg, err) => {\n      loader.stop();\n      if (err) {\n        throw err;\n      }\n      yargs.showHelp(this.logCommandHelp.bind(this));\n      // eslint-disable-next-line no-console\n      console.log(`\\n${chalk.yellow(msg)}`);\n      if (!logger.isDaemon) process.exit(1);\n    });\n  }\n\n  private configureCompletion() {\n    const commandsToShowComponentIdsForCompletion = [\n      'show',\n      'diff',\n      'tag',\n      'export',\n      'env',\n      'envs',\n      'compile',\n      'build',\n      'test',\n      'lint',\n      'log',\n      'dependents',\n      'dependencies',\n    ];\n    // @ts-ignore\n    yargs.completion('completion', async function (current, argv, completionFilter, done) {\n      if (!current.startsWith('-') && commandsToShowComponentIdsForCompletion.includes(argv._[1])) {\n        const consumer = await loadConsumerIfExist();\n        done(consumer?.bitmapIdsFromCurrentLane.map((id) => id.toStringWithoutVersion()));\n      } else {\n        completionFilter();\n      }\n    });\n  }\n\n  private printHelp() {\n    const help = formatHelp(this.commands, this.groups, this.docsDomain);\n    // eslint-disable-next-line no-console\n    console.log(help);\n  }\n\n  private configureParser() {\n    yargs.parserConfiguration({\n      // 'strip-dashed': true, // we can't enable it, otherwise, the completion doesn't work\n      'strip-aliased': true,\n      'boolean-negation': false,\n      'populate--': true,\n    });\n  }\n\n  private parseCommandWithSubCommands(command: Command) {\n    const yarnCommand = this.getYargsCommand(command);\n    const builderFunc = () => {\n      command.commands?.forEach((cmd) => {\n        const subCommand = this.getYargsCommand(cmd);\n        yargs.command(subCommand);\n      });\n      // since the \"builder\" method is overridden, the global flags of the main command are gone, this fixes it.\n      yargs.options(yarnCommand.getGlobalOptions(command));\n      return yargs;\n    };\n    yarnCommand.builder = builderFunc;\n    yargs.command(yarnCommand);\n  }\n\n  private getYargsCommand(command: Command): YargsAdapter {\n    const yarnCommand = new YargsAdapter(command);\n    yarnCommand.handler = yarnCommand.handler.bind(yarnCommand);\n\n    return yarnCommand;\n  }\n\n  private configureGlobalFlags() {\n    yargs\n      .option('help', {\n        alias: 'h',\n        describe: 'show help',\n        group: GLOBAL_GROUP,\n      })\n      .option('version', {\n        global: false,\n        alias: 'v',\n        describe: 'show version',\n        group: GLOBAL_GROUP,\n      });\n  }\n\n  private throwForNonExistsCommand(commandName: string) {\n    if (!commandName || commandName.startsWith('-')) {\n      return;\n    }\n    const commandsNames = this.commands.map((c) => getCommandId(c.name));\n    const aliases = this.commands.map((c) => c.alias).filter((a) => a);\n    const existingGlobalFlags = ['-V', '--version'];\n    const validCommands = [...commandsNames, ...aliases, ...existingGlobalFlags];\n    const commandExist = validCommands.includes(commandName);\n\n    if (!commandExist) {\n      didYouMean.returnFirstMatch = true;\n      const suggestions = didYouMean(\n        commandName,\n        this.commands.filter((c) => !c.private).map((c) => getCommandId(c.name))\n      );\n      const suggestion = suggestions && Array.isArray(suggestions) ? suggestions[0] : suggestions;\n\n      throw new CommandNotFound(commandName, suggestion as string);\n    }\n  }\n\n  /**\n   * manipulate the command help output. there is no API from Yarn to do any of this, so it needs to be done manually.\n   * see https://github.com/yargs/yargs/issues/1956\n   */\n  private logCommandHelp(help: string) {\n    const command = this.findCommandByArgv();\n\n    const replacer = (_, p1, p2) => `${p1}${chalk.green(p2)}`;\n    const lines = help.split('\\n');\n    const linesWithoutEmpty = compact(lines);\n    const cmdLine = linesWithoutEmpty[0];\n    const description: string[] = [];\n    const options: string[] = [];\n    const globalOptions: string[] = [];\n    const subCommands: string[] = [];\n\n    let optionsStarted = false;\n    let globalStarted = false;\n    let subCommandsStarted = false;\n    for (let i = 1; i < linesWithoutEmpty.length; i += 1) {\n      const currentLine = linesWithoutEmpty[i];\n      if (currentLine === STANDARD_GROUP) {\n        optionsStarted = true;\n      } else if (currentLine === GLOBAL_GROUP) {\n        globalStarted = true;\n      } else if (currentLine === 'Commands:') {\n        subCommandsStarted = true;\n      } else if (globalStarted) {\n        globalOptions.push(currentLine);\n      } else if (optionsStarted) {\n        options.push(currentLine);\n      } else if (subCommandsStarted) {\n        subCommands.push(currentLine);\n      } else {\n        description.push(currentLine);\n      }\n    }\n\n    // show the flags in green\n    const optionsColored = options.map((opt) => opt.replace(/(--)([\\w-]+)/, replacer).replace(/(-)([\\w-]+)/, replacer));\n    const optionsStr = options.length ? `\\n${STANDARD_GROUP}\\n${optionsColored.join('\\n')}\\n` : '';\n    const subCommandsStr = subCommands.length ? `\\n${'Commands:'}\\n${subCommands.join('\\n')}\\n` : '';\n    // show the description in yellow\n    const descriptionColored = description.map((desc) => chalk.yellow(desc));\n    if (command?.extendedDescription) {\n      descriptionColored.push(command?.extendedDescription);\n    }\n    const descriptionStr = descriptionColored.join('\\n');\n    const globalOptionsStr = globalOptions.join('\\n');\n\n    const finalOutput = `${cmdLine}\n\n${descriptionStr}\n${subCommandsStr}${optionsStr}\n${GLOBAL_GROUP}\n${globalOptionsStr}`;\n\n    // eslint-disable-next-line no-console\n    console.log(finalOutput);\n  }\n\n  private findCommandByArgv(): Command | undefined {\n    const args = process.argv.slice(2);\n    const enteredCommand = args[0];\n    const enteredSubCommand = args[1];\n    if (!enteredCommand) {\n      return undefined;\n    }\n    const isCommandMatch = (cmd: Command, str: string) => {\n      return (\n        cmd.name.startsWith(`${str} `) || // e.g. \"tag <id>\".startsWith(\"tag \")\n        cmd.name === str || // e.g. \"globals\" === \"globals\"\n        cmd.alias === str\n      ); // e.g. \"t\" === \"t\"\n    };\n    const command = this.commands.find((cmd) => isCommandMatch(cmd, enteredCommand));\n    if (!command) {\n      return undefined;\n    }\n    if (!command.commands || !enteredSubCommand) {\n      return command; // no sub-commands.\n    }\n    const subCommand = command.commands.find((cmd) => isCommandMatch(cmd, enteredSubCommand));\n    return subCommand || command;\n  }\n}\n"]}