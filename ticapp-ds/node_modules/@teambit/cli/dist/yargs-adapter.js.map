{"version":3,"sources":["yargs-adapter.ts"],"names":["GLOBAL_GROUP","STANDARD_GROUP","YargsAdapter","constructor","commanderCommand","command","name","describe","description","aliases","alias","builder","optionsToBuilder","handler","argv","enteredArgs","getArgsFromCommandName","argsValues","map","a","flags","Object","keys","reduce","acc","current","val","_packageManagerArgs","commandRunner","CommandRunner","runCommand","option","options","opt","desc","optName","split","group","type","includes","requiresArg","globalOptions","getGlobalOptions","remoteOp","TOKEN_FLAG","internal","log","commandName","commandSplit","shift","existArg","trimmed","trim","startsWith","endsWith","Error","withoutBrackets","slice"],"mappings":"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","sourcesContent":["import { Command } from '@teambit/legacy/dist/cli/command';\nimport { Arguments, CommandBuilder, CommandModule } from 'yargs';\nimport { TOKEN_FLAG } from '@teambit/legacy/dist/constants';\nimport { camelCase } from 'lodash';\nimport { CommandRunner } from './command-runner';\n\nexport const GLOBAL_GROUP = 'Global';\nexport const STANDARD_GROUP = 'Options';\n\nexport class YargsAdapter implements CommandModule {\n  command: string;\n  describe?: string;\n  aliases?: string;\n  builder: CommandBuilder;\n  constructor(private commanderCommand: Command) {\n    this.command = commanderCommand.name;\n    this.describe = commanderCommand.description;\n    this.aliases = commanderCommand.alias;\n    this.builder = this.optionsToBuilder(commanderCommand);\n  }\n\n  handler(argv: Arguments) {\n    const enteredArgs = getArgsFromCommandName(this.commanderCommand.name);\n    const argsValues = enteredArgs.map((a) => argv[a]) as any[];\n    // a workaround to get a flag syntax such as \"--all [version]\" work with yargs.\n    const flags = Object.keys(argv).reduce((acc, current) => {\n      if (current === '_' || current === '$0' || current === '--') return acc;\n      // const flagName = current.split(' ')[0];\n      const val = typeof argv[current] === 'string' && !argv[current] ? true : argv[current];\n      acc[current] = val;\n      return acc;\n    }, {});\n    this.commanderCommand._packageManagerArgs = (argv['--'] || []) as string[];\n\n    const commandRunner = new CommandRunner(this.commanderCommand, argsValues, flags);\n    return commandRunner.runCommand();\n  }\n\n  private optionsToBuilder(command: Command) {\n    const option = command.options.reduce((acc, [alias, opt, desc]) => {\n      const optName = opt.split(' ')[0];\n      acc[optName] = {\n        alias,\n        describe: desc,\n        group: STANDARD_GROUP,\n        type: opt.includes(' ') ? 'string' : 'boolean',\n        requiresArg: opt.includes('<'),\n      };\n      return acc;\n    }, {});\n    const globalOptions = this.getGlobalOptions(command);\n\n    return { ...option, ...globalOptions };\n  }\n\n  getGlobalOptions(command: Command): Record<string, any> {\n    const globalOptions: Record<string, any> = {};\n    if (command.remoteOp) {\n      globalOptions[TOKEN_FLAG] = {\n        describe: 'authentication token',\n        group: GLOBAL_GROUP,\n      };\n    }\n    if (!command.internal) {\n      globalOptions.log = {\n        describe:\n          'print log messages to the screen, options are: [trace, debug, info, warn, error, fatal], the default is info',\n        group: GLOBAL_GROUP,\n      };\n      globalOptions['safe-mode'] = {\n        describe:\n          'bootstrap the bare-minimum with only the CLI aspect. useful mainly for low-level commands when bit refuses to load',\n        group: GLOBAL_GROUP,\n      };\n    }\n    return globalOptions;\n  }\n}\n\nfunction getArgsFromCommandName(commandName: string) {\n  const commandSplit = commandName.split(' ');\n  commandSplit.shift(); // remove the first element, it's the command-name\n\n  return commandSplit.map((existArg) => {\n    const trimmed = existArg.trim();\n    if ((!trimmed.startsWith('<') && !trimmed.startsWith('[')) || (!trimmed.endsWith('>') && !trimmed.endsWith(']'))) {\n      throw new Error(`expect arg \"${trimmed}\" of \"${commandName}\" to be wrapped with \"[]\" or \"<>\"`);\n    }\n    // remove the opening and closing brackets\n    const withoutBrackets = trimmed.slice(1, -1);\n\n    return camelCase(withoutBrackets);\n  });\n}\n"]}