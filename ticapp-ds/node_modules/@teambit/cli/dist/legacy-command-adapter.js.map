{"version":3,"sources":["legacy-command-adapter.ts"],"names":["LegacyCommandAdapter","constructor","cmd","cliExtension","name","description","options","opts","alias","shortDescription","skipWorkspace","group","loader","private","migration","internal","commands","map","sub","action","params","res","_packageManagerArgs","data","code","__code","undefined","report","actionResult","json","JSON","parse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAIO,MAAMA,oBAAN,CAA8C;AAcnDC,EAAAA,WAAW,CAASC,GAAT,EAA6BC,YAA7B,EAAoD;AAAA,SAA3CD,GAA2C,GAA3CA,GAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7D,SAAKE,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACA,SAAKC,WAAL,GAAmBH,GAAG,CAACG,WAAvB;AACA,SAAKC,OAAL,GAAeJ,GAAG,CAACK,IAAJ,IAAY,EAA3B;AACA,SAAKC,KAAL,GAAaN,GAAG,CAACM,KAAjB;AACA,SAAKC,gBAAL,GAAwBP,GAAG,CAACO,gBAA5B;AACA,SAAKC,aAAL,GAAqBR,GAAG,CAACQ,aAAzB;AACA,SAAKC,KAAL,GAAaT,GAAG,CAACS,KAAjB;AACA,SAAKC,MAAL,GAAcV,GAAG,CAACU,MAAlB;AACA,SAAKC,OAAL,GAAeX,GAAG,CAACW,OAAnB;AAEA,SAAKC,SAAL,GAAiBZ,GAAG,CAACY,SAArB;AACA,SAAKC,QAAL,GAAgBb,GAAG,CAACa,QAApB;AACA,SAAKC,QAAL,GAAgB,CAACd,GAAG,CAACc,QAAJ,IAAgB,EAAjB,EAAqBC,GAArB,CAA0BC,GAAD,IAAS,IAAIlB,oBAAJ,CAAyBkB,GAAzB,EAA8Bf,YAA9B,CAAlC,CAAhB;AACD;;AAEmB,QAANgB,MAAM,CAACC,MAAD,EAAcd,OAAd,EAAsE;AACxF,UAAMe,GAAG,GAAG,MAAM,KAAKnB,GAAL,CAASiB,MAAT,CAAgBC,MAAhB,EAAwBd,OAAxB,EAAiC,KAAKgB,mBAAtC,CAAlB;AACA,QAAIC,IAAI,GAAGF,GAAX;AACA,QAAIG,IAAI,GAAG,CAAX;;AACA,QAAIH,GAAG,IAAIA,GAAG,CAACI,MAAJ,KAAeC,SAA1B,EAAqC;AACnCH,MAAAA,IAAI,GAAGF,GAAG,CAACE,IAAX;AACAC,MAAAA,IAAI,GAAGH,GAAG,CAACI,MAAX;AACD;;AACD,UAAME,MAAM,GAAG,KAAKzB,GAAL,CAASyB,MAAT,CAAgBJ,IAAhB,EAAsBH,MAAtB,EAA8Bd,OAA9B,CAAf;AACA,WAAO;AACLkB,MAAAA,IADK;AAELG,MAAAA;AAFK,KAAP;AAID;;AAEW,QAANA,MAAM,CAACP,MAAD,EAAcd,OAAd,EAAwF;AAClG,UAAMsB,YAAY,GAAG,MAAM,KAAKT,MAAL,CAAYC,MAAZ,EAAoBd,OAApB,CAA3B;AACA,WAAO;AAAEiB,MAAAA,IAAI,EAAEK,YAAY,CAACD,MAArB;AAA6BH,MAAAA,IAAI,EAAEI,YAAY,CAACJ;AAAhD,KAAP;AACD;;AAES,QAAJK,IAAI,CAACT,MAAD,EAAcd,OAAd,EAAuE;AAC/E,UAAMsB,YAAY,GAAG,MAAM,KAAKT,MAAL,CAAYC,MAAZ,EAAoBd,OAApB,CAA3B;AACA,WAAO;AACLiB,MAAAA,IAAI,EAAEO,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACD,MAAxB,CADD;AAELH,MAAAA,IAAI,EAAEI,YAAY,CAACJ;AAFd,KAAP;AAID;;AAxDkD","sourcesContent":["import { LegacyCommand } from '@teambit/legacy/dist/cli/legacy-command';\nimport { Command, CommandOptions, GenericObject } from '.';\nimport { CLIMain } from './cli.main.runtime';\n\nexport class LegacyCommandAdapter implements Command {\n  alias: string;\n  name: string;\n  description: string;\n  options: CommandOptions;\n  shortDescription?: string;\n  group?: string;\n  loader?: boolean;\n  commands: Command[];\n  private?: boolean;\n  migration?: boolean;\n  internal?: boolean;\n  skipWorkspace?: boolean;\n  _packageManagerArgs?: string[];\n  constructor(private cmd: LegacyCommand, cliExtension: CLIMain) {\n    this.name = cmd.name;\n    this.description = cmd.description;\n    this.options = cmd.opts || [];\n    this.alias = cmd.alias;\n    this.shortDescription = cmd.shortDescription;\n    this.skipWorkspace = cmd.skipWorkspace;\n    this.group = cmd.group;\n    this.loader = cmd.loader;\n    this.private = cmd.private;\n\n    this.migration = cmd.migration;\n    this.internal = cmd.internal;\n    this.commands = (cmd.commands || []).map((sub) => new LegacyCommandAdapter(sub, cliExtension));\n  }\n\n  private async action(params: any, options: { [key: string]: any }): Promise<ActionResult> {\n    const res = await this.cmd.action(params, options, this._packageManagerArgs);\n    let data = res;\n    let code = 0;\n    if (res && res.__code !== undefined) {\n      data = res.data;\n      code = res.__code;\n    }\n    const report = this.cmd.report(data, params, options);\n    return {\n      code,\n      report,\n    };\n  }\n\n  async report(params: any, options: { [key: string]: any }): Promise<{ data: string; code: number }> {\n    const actionResult = await this.action(params, options);\n    return { data: actionResult.report, code: actionResult.code };\n  }\n\n  async json(params: any, options: { [key: string]: any }): Promise<GenericObject> {\n    const actionResult = await this.action(params, options);\n    return {\n      data: JSON.parse(actionResult.report),\n      code: actionResult.code,\n    };\n  }\n}\n\ntype ActionResult = {\n  code: number;\n  report: string;\n};\n"]}