{"version":3,"sources":["generate-doc-md.ts"],"names":["GenerateCommandsDoc","constructor","commands","options","generate","getAllPublicCommandsSorted","metadata","id","title","metadataStr","Object","keys","map","key","join","output","cmd","generateCommand","publicCommands","filter","private","sort","a","b","name","localeCompare","commandName","result","alias","length","skipWorkspace","formatDescription","description","generateSubCommands","generateOptions","subCommands","ret","forEach","subCommand","match","usage","opt","flag","aliasFormatted","flagFormatted","split"],"mappings":"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","sourcesContent":["import { Command } from '@teambit/legacy/dist/cli/command';\nimport { CommandOptions } from '@teambit/legacy/dist/cli/legacy-command';\nimport { getCommandId } from './get-command-id';\n\nexport type GenerateOpts = {\n  metadata?: Record<string, string>;\n};\nexport class GenerateCommandsDoc {\n  constructor(private commands: Command[], private options: GenerateOpts) {}\n\n  generate(): string {\n    const commands = this.getAllPublicCommandsSorted();\n    const metadata = {\n      id: 'cli-all',\n      title: 'CLI Commands',\n      ...this.options.metadata,\n    };\n    const metadataStr = Object.keys(metadata)\n      .map((key) => `${key}: ${metadata[key]}`)\n      .join('\\n');\n    let output = `---\n${metadataStr}\n---\n\nCommands that are marked as workspace only must be executed inside a workspace. Commands that are marked as not workspace only, can be executed from anywhere and will run on a remote server.\n`;\n    output += commands.map((cmd) => this.generateCommand(cmd)).join('\\n');\n\n    return output;\n  }\n\n  private getAllPublicCommandsSorted() {\n    const publicCommands = this.commands.filter((cmd) => !cmd.private);\n    return publicCommands.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  private generateCommand(cmd: Command) {\n    const commandName = getCommandId(cmd.name);\n    let result = `## ${commandName}  \\n\\n`;\n    if (cmd.alias && cmd.alias.length > 0) {\n      result += `**Alias**: \\`${cmd.alias}\\`  \\n`;\n    }\n    result += `**Workspace only**: ${cmd.skipWorkspace ? 'no' : 'yes'}  \\n`;\n    result += `**Description**: ${this.formatDescription(cmd.description as string)}`;\n    result += `\\`bit ${cmd.name}\\`  \\n\\n`;\n\n    if (cmd.commands && cmd.commands.length > 0) {\n      result += this.generateSubCommands(cmd.commands);\n    }\n    result += this.generateOptions(cmd.options);\n    result += `---  \\n`;\n\n    return result;\n  }\n\n  private generateSubCommands(subCommands: Command[]) {\n    let ret = '';\n    subCommands.forEach((subCommand) => {\n      // @ts-ignore\n      const name = subCommand.name.match(/^([\\w-]+)/)[0];\n      const usage = subCommand.name;\n      ret += `### ${name} \\n`;\n      ret += `**Usage**: \\`${usage}\\`  \\n\\n`;\n      ret += `**Description**: ${this.formatDescription(subCommand.description as string)}`;\n\n      ret += '\\n';\n      ret += this.generateOptions(subCommand.options);\n    });\n    return ret;\n  }\n\n  private generateOptions(options: CommandOptions): string {\n    if (!options || options.length <= 0) return '';\n    let output = `| **Option** | **Option alias** | **Description**|  \\n`;\n    output += `|---|:-----:|---|\\n`;\n    options.forEach((opt) => {\n      const [alias, flag, description] = opt;\n      const aliasFormatted = alias ? `\\`-${alias}\\`` : '   ';\n      const flagFormatted = `--${flag}`;\n      output += `|\\`${flagFormatted}\\`|${aliasFormatted}|${description}|\\n`;\n    });\n    output += `\\n`;\n    return output;\n  }\n\n  private formatDescription(description: string): string {\n    return `${description.split('\\n').join('  \\n')}  \\n\\n`;\n  }\n}\n"]}