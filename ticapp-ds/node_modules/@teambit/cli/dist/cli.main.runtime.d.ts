import { SlotRegistry } from '@teambit/harmony';
import { Command } from '@teambit/legacy/dist/cli/command';
import type { CommunityMain } from '@teambit/community';
import { GroupsType } from '@teambit/legacy/dist/cli/command-groups';
export declare type CommandList = Array<Command>;
export declare type OnStart = (hasWorkspace: boolean) => Promise<void>;
export declare type OnStartSlot = SlotRegistry<OnStart>;
export declare type CommandsSlot = SlotRegistry<CommandList>;
export declare class CLIMain {
    private commandsSlot;
    private onStartSlot;
    private community;
    groups: GroupsType;
    constructor(commandsSlot: CommandsSlot, onStartSlot: OnStartSlot, community: CommunityMain);
    /**
     * registers a new command in to the CLI.
     */
    register(...commands: CommandList): void;
    /**
     * helpful for having the same command name in different environments (legacy and Harmony)
     */
    unregister(commandName: string): void;
    /**
     * list of all registered commands. (legacy and new).
     */
    get commands(): CommandList;
    /**
     * get an instance of a registered command. (useful for aspects to modify and extend existing commands)
     */
    getCommand(name: string): Command | undefined;
    /**
     * when running `bit help`, commands are grouped by categories.
     * this method helps registering a new group by providing its name and a description.
     * the name is what needs to be assigned to the `group` property of the Command interface.
     * the description is what shown in the `bit help` output.
     */
    registerGroup(name: string, description: string): void;
    registerOnStart(onStartFn: OnStart): this;
    /**
     * execute commands registered to this aspect.
     */
    run(hasWorkspace: boolean): Promise<void>;
    private invokeOnStart;
    private setDefaults;
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static slots: (((registerFn: () => string) => SlotRegistry<CommandList>) | ((registerFn: () => string) => SlotRegistry<OnStart>))[];
    static provider([community]: [CommunityMain], config: any, [commandsSlot, onStartSlot]: [CommandsSlot, OnStartSlot]): Promise<CLIMain>;
}
