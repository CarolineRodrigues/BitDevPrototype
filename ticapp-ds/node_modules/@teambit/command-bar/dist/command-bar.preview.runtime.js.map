{"version":3,"sources":["command-bar.preview.runtime.tsx"],"names":["CommandBarPreview","constructor","pubSub","e","target","isEditable","isDenyListed","preventDefault","pub","CommandBarAspect","id","KeyEvent","document","addEventListener","handleKeyEvent","provider","pubsubPreview","PubsubAspect","PreviewRuntime","editableTags","element","includes","tagName","isContentEditable","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,iBAAN,CAAwB;AAC7BC,EAAAA,WAAW,CAASC,MAAT,EAAgC;AAAA,SAAvBA,MAAuB,GAAvBA,MAAuB;AAAA,4DAMzBC,CAAD,IAAsB;AACrC,YAAM;AAAEC,QAAAA;AAAF,UAAaD,CAAnB;AACA,UAAI,CAACC,MAAD,IAAWC,UAAU,CAACD,MAAD,CAAzB,EAAkD;AAClD,UAAIE,YAAY,CAACH,CAAD,CAAhB,EAAqBA,CAAC,CAACI,cAAF;AAErB,WAAKL,MAAL,CAAYM,GAAZ,CAAgBC,+BAAiBC,EAAjC,EAAqC,KAAIC,oBAAJ,EAAaR,CAAb,CAArC;AACD,KAZ0C;AACzCS,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKC,cAA1C;AACAF,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,UAA1B,EAAsC,KAAKC,cAA3C;AACAF,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKC,cAAxC;AACD;;AAYoB,eAARC,QAAQ,CAAC,CAACb,MAAD,CAAD,EAA4B;AAC/C,UAAMc,aAAa,GAAG,IAAIhB,iBAAJ,CAAsBE,MAAtB,CAAtB;AACA,WAAOc,aAAP;AACD;;AApB4B;;;gCAAlBhB,iB,kBAeW,CAACiB,sBAAD,C;gCAfXjB,iB,aAgBMkB,yB;AAOnB,MAAMC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,CAArB;;AACA,SAASd,UAAT,CAAoBe,OAApB,EAA0C;AACxC,SAAOD,YAAY,CAACE,QAAb,CAAsBD,OAAO,CAACE,OAA9B,KAA0CF,OAAO,CAACG,iBAAzD;AACD;;AAEDd,+BAAiBe,UAAjB,CAA4BxB,iBAA5B,E,CAEA;;;AACA,SAASM,YAAT,CAAsBH,CAAtB,EAAwC;AACtC,SAAO,8CAA2BA,CAA3B,CAAP;AACD","sourcesContent":["import { PreviewRuntime } from '@teambit/preview';\nimport { PubsubAspect, PubsubPreview } from '@teambit/pubsub';\nimport { isOpenCommandBarKeybinding } from './keybinding';\nimport { CommandBarAspect } from './command-bar.aspect';\nimport { KeyEvent } from './model/key-event';\n\nexport class CommandBarPreview {\n  constructor(private pubSub: PubsubPreview) {\n    document.addEventListener('keydown', this.handleKeyEvent);\n    document.addEventListener('keypress', this.handleKeyEvent);\n    document.addEventListener('keyup', this.handleKeyEvent);\n  }\n\n  handleKeyEvent = (e: KeyboardEvent) => {\n    const { target } = e;\n    if (!target || isEditable(target as HTMLElement)) return;\n    if (isDenyListed(e)) e.preventDefault();\n\n    this.pubSub.pub(CommandBarAspect.id, new KeyEvent(e));\n  };\n\n  static dependencies = [PubsubAspect];\n  static runtime = PreviewRuntime;\n  static async provider([pubSub]: [PubsubPreview]) {\n    const pubsubPreview = new CommandBarPreview(pubSub);\n    return pubsubPreview;\n  }\n}\n\nconst editableTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isEditable(element: HTMLElement) {\n  return editableTags.includes(element.tagName) || element.isContentEditable;\n}\n\nCommandBarAspect.addRuntime(CommandBarPreview);\n\n// block default browser behavior that would override our keybinding.\nfunction isDenyListed(e: KeyboardEvent) {\n  return isOpenCommandBarKeybinding(e);\n}\n"]}