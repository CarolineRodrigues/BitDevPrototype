{"version":3,"sources":["command-bar.ui.runtime.tsx"],"names":["RESULT_LIMIT","CommandBarUI","addSearcher","commandSearcher","searcherSlot","register","addCommand","originalCommands","forEach","id","commandId","getCommand","undefined","DuplicateCommandError","commands","map","x","displayName","handler","keybinding","commandSlot","command","addKeybinding","updateCommandsSearcher","updaters","next","run","commandEntry","relevantCommands","values","find","filter","pop","flat","update","key","mousetrap","bind","constructor","pubSub","isBrowser","Mousetrap","MousetrapStub","CommandSearcher","setVisibility","trigger","term","limit","searchers","searcher","test","search","children","sub","CommandBarAspect","e","keyboardEvent","KeyboardEvent","type","data","document","dispatchEvent","provider","uiUi","pubsubUI","config","commandSlots","commandBar","commandBarCommands","open","openCommandBarKeybinding","registerHudItem","getCommandBar","registerRenderHooks","reactContext","renderContext","UIAspect","PubsubAspect","Slot","withType","UIRuntime","addRuntime"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport Mousetrap from 'mousetrap';\n\nimport UIAspect, { UIRuntime, UiUI } from '@teambit/ui';\nimport { PubsubAspect, PubsubUI } from '@teambit/pubsub';\nimport { isBrowser } from '@teambit/ui-foundation.ui.is-browser';\nimport { CommandBar } from './ui/command-bar';\nimport { CommandSearcher } from './ui/command-searcher';\nimport { CommandBarAspect } from './command-bar.aspect';\nimport { commandBarCommands } from './command-bar.commands';\nimport { SearchProvider, Keybinding, CommandHandler, CommandId } from './types';\nimport { DuplicateCommandError } from './duplicate-command-error';\nimport { KeyEvent } from './model/key-event';\nimport { CommandBarContext } from './ui/command-bar-context';\nimport { MousetrapStub } from './mousetrap-stub';\nimport { openCommandBarKeybinding } from './keybinding';\n\nconst RESULT_LIMIT = 5;\ntype SearcherSlot = SlotRegistry<SearchProvider>;\ntype CommandSlot = SlotRegistry<CommandEntry[]>;\n\nexport type CommandEntry = {\n  id: CommandId;\n  handler: CommandHandler;\n  keybinding?: Keybinding;\n  displayName: string;\n};\n\n/** Quick launch actions. Use the `addSearcher` slot to extend the available actions */\nexport class CommandBarUI {\n  private mousetrap = isBrowser ? new Mousetrap() : new MousetrapStub();\n  private commandSearcher = new CommandSearcher([]);\n\n  /** Opens the command bar */\n  open = () => {\n    this.setVisibility?.(true);\n    return false; // aka prevent default\n  };\n\n  /** Closes the command bar */\n  close = () => {\n    this.setVisibility?.(false);\n  };\n\n  /** Add and autocomplete provider. To support keyboard navigation, each result should have a props `active: boolean`, and `exectue: () => any` */\n  addSearcher(commandSearcher: SearchProvider) {\n    this.searcherSlot.register(commandSearcher);\n    return this;\n  }\n\n  /**\n   * registers a command\n   */\n  addCommand(...originalCommands: CommandEntry[]) {\n    originalCommands.forEach(({ id: commandId }) => {\n      if (this.getCommand(commandId) !== undefined) throw new DuplicateCommandError(commandId);\n    });\n\n    // commands could mutate later on, clone to ensure immutability ðŸ‘Œ\n    const commands = originalCommands.map((x) => ({\n      id: x.id,\n      displayName: x.displayName,\n      handler: x.handler,\n      keybinding: x.keybinding,\n    }));\n\n    this.commandSlot.register(commands);\n\n    commands.forEach((command) => {\n      if (command.keybinding) {\n        this.addKeybinding(command.keybinding, command.id);\n      }\n    });\n\n    this.updateCommandsSearcher();\n\n    const updaters = commands.map((command) => (next: CommandHandler) => {\n      command.handler = next;\n    });\n    return updaters;\n  }\n\n  /**\n   * executes command by name, if exists.\n   * @param commandId\n   */\n  run(commandId: CommandId) {\n    const commandEntry = this.getCommand(commandId);\n    if (!commandEntry) return undefined;\n\n    return commandEntry.handler();\n  }\n\n  /**\n   * executes a keyboard shortcut manually\n   */\n  trigger = (key: string) => {\n    this.mousetrap.trigger(key);\n  };\n\n  private search = (term: string, limit: number = RESULT_LIMIT) => {\n    const searchers = this.searcherSlot.values();\n\n    const searcher = searchers.find((x) => x.test(term));\n    return searcher?.search(term, limit) || [];\n  };\n\n  private getCommand(id: CommandId) {\n    const relevantCommands = this.commandSlot\n      .values()\n      .map((commands) => commands.find((command) => command.id === id))\n      .filter((x) => !!x);\n\n    return relevantCommands.pop();\n  }\n\n  private updateCommandsSearcher() {\n    const commands = this.commandSlot.values().flat();\n    this.commandSearcher.update(commands);\n  }\n\n  private addKeybinding(key: Keybinding, command: CommandId) {\n    this.mousetrap.bind(key, this.run.bind(this, command));\n  }\n\n  private renderContext = ({ children }: { children: ReactNode }) => {\n    return <CommandBarContext.Provider value={this}>{children}</CommandBarContext.Provider>;\n  };\n\n  /**\n   * internal. Opens and closes the command bar UI.\n   */\n  setVisibility?: (visible: boolean) => void;\n\n  /**\n   * generate the ui for command bar\n   */\n  getCommandBar = () => {\n    return <CommandBar key=\"CommandBarUI\" search={this.search} commander={this} />;\n  };\n\n  constructor(private searcherSlot: SearcherSlot, private commandSlot: CommandSlot, pubSub: PubsubUI) {\n    this.addSearcher(this.commandSearcher);\n    pubSub.sub(CommandBarAspect.id, (e: KeyEvent) => {\n      const keyboardEvent = new KeyboardEvent(e.type, e.data);\n      document.dispatchEvent(keyboardEvent);\n    });\n  }\n\n  static dependencies = [UIAspect, PubsubAspect];\n  static slots = [Slot.withType<SearchProvider>(), Slot.withType<CommandEntry[]>()];\n  static runtime = UIRuntime;\n  static async provider(\n    [uiUi, pubsubUI]: [UiUI, PubsubUI],\n    config,\n    [searcherSlot, commandSlots]: [SearcherSlot, CommandSlot]\n  ) {\n    const commandBar = new CommandBarUI(searcherSlot, commandSlots, pubsubUI);\n\n    commandBar.addCommand({\n      id: commandBarCommands.open,\n      handler: commandBar.open,\n      displayName: 'Open command bar',\n      keybinding: openCommandBarKeybinding,\n    });\n\n    uiUi.registerHudItem(commandBar.getCommandBar());\n    uiUi.registerRenderHooks({\n      reactContext: commandBar.renderContext,\n    });\n\n    return commandBar;\n  }\n}\n\nCommandBarAspect.addRuntime(CommandBarUI);\n"]}