{"version":3,"sources":["command-searcher.ts"],"names":["searchedKeys","CommandSearcher","constructor","commands","Fuse","keys","fuseCommands","setCollection","update","search","term","limit","unprefixedPattern","replace","searchResults","map","x","item","test","startsWith"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA,MAAMA,YAA6C,GAAG,CAAC,aAAD,CAAtD;;AAEO,MAAMC,eAAN,CAAgD;AAOrDC,EAAAA,WAAW,CAACC,QAAD,EAAoC;AAAA,0DANxB,KAAIC,eAAJ,EAAgC,EAAhC,EAAoC;AACzD;AACA;AACAC,MAAAA,IAAI,EAAEL;AAHmD,KAApC,CAMwB;AAC7C,SAAKM,YAAL,CAAkBC,aAAlB,CAAgCJ,QAAhC;AACD;;AAEDK,EAAAA,MAAM,CAACL,QAAD,EAAoC;AACxC,SAAKG,YAAL,CAAkBC,aAAlB,CAAgCJ,QAAhC;AACD;;AAEDM,EAAAA,MAAM,CAACC,IAAD,EAAeC,KAAf,EAAuD;AAC3D,UAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAA1B;AACA,UAAMC,aAAa,GAAG,KAAKR,YAAL,CAAkBG,MAAlB,CAAyBG,iBAAzB,EAA4C;AAAED,MAAAA;AAAF,KAA5C,CAAtB,CAF2D,CAG3D;;AACA,WAAOG,aAAa,CAACC,GAAd,CAAmBC,CAAD,IAAOA,CAAC,CAACC,IAA3B,CAAP;AACD;;AAEDC,EAAAA,IAAI,CAACR,IAAD,EAAwB;AAC1B,WAAOA,IAAI,CAACS,UAAL,CAAgB,GAAhB,CAAP;AACD;;AAxBoD","sourcesContent":["import Fuse from 'fuse.js';\nimport { CommanderSearchResult, SearchProvider } from '../../types';\n\nconst searchedKeys: (keyof CommanderSearchResult)[] = ['displayName'];\n\nexport class CommandSearcher implements SearchProvider {\n  private fuseCommands = new Fuse<CommanderSearchResult>([], {\n    // weight can be included here.\n    // fields loses weight the longer they get, so it seems ok for now.\n    keys: searchedKeys,\n  });\n\n  constructor(commands: CommanderSearchResult[]) {\n    this.fuseCommands.setCollection(commands);\n  }\n\n  update(commands: CommanderSearchResult[]) {\n    this.fuseCommands.setCollection(commands);\n  }\n\n  search(term: string, limit: number): CommanderSearchResult[] {\n    const unprefixedPattern = term.replace(/^>/, '');\n    const searchResults = this.fuseCommands.search(unprefixedPattern, { limit });\n    // @ts-ignore this shows error on Circle for some weird reason\n    return searchResults.map((x) => x.item);\n  }\n\n  test(term: string): boolean {\n    return term.startsWith('>');\n  }\n}\n"]}