"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.regexp.exec.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommandBar = CommandBar;

function _extends2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

  _extends2 = function () {
    return data;
  };

  return data;
}

function _objectWithoutProperties2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

  _objectWithoutProperties2 = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireWildcard(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _classnames() {
  const data = _interopRequireDefault(require("classnames"));

  _classnames = function () {
    return data;
  };

  return data;
}

function _baseUiSurfaces() {
  const data = require("@teambit/base-ui.surfaces.card");

  _baseUiSurfaces = function () {
    return data;
  };

  return data;
}

function _autocompleteInput() {
  const data = require("../autocomplete-input");

  _autocompleteInput = function () {
    return data;
  };

  return data;
}

function _commandBarItem() {
  const data = require("../command-bar-item");

  _commandBarItem = function () {
    return data;
  };

  return data;
}

function _commandBarModule() {
  const data = _interopRequireDefault(require("./command-bar.module.scss"));

  _commandBarModule = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const MIN_IDX = 0;

function CommandBar(_ref) {
  let {
    search,
    commander,
    elevation = 'high',
    className
  } = _ref,
      rest = (0, _objectWithoutProperties2().default)(_ref, ["search", "commander", "elevation", "className"]);
  const [term, setTerm] = (0, _react().useState)('');
  const options = (0, _react().useMemo)(() => search(term), [term, search]);
  const [activeIdx, setActive] = (0, _react().useState)(MIN_IDX);
  const increment = (0, _react().useCallback)(() => setActive(x => Math.min(x + 1, options.length - 1)), [options.length]);
  const decrement = (0, _react().useCallback)(() => setActive(x => Math.max(x - 1, MIN_IDX)), []);
  const [visible, setVisibility] = (0, _react().useState)(false);
  commander.setVisibility = setVisibility;
  const handleEnter = (0, _react().useCallback)(() => {
    var _options$activeIdx;

    setVisibility(false);
    (_options$activeIdx = options[activeIdx]) === null || _options$activeIdx === void 0 ? void 0 : _options$activeIdx.handler();
  }, [options, activeIdx]);
  (0, _react().useEffect)(() => setTerm(''), [visible]);
  (0, _react().useEffect)(() => setActive(MIN_IDX), [options]);
  return /*#__PURE__*/_react().default.createElement(_baseUiSurfaces().Card, (0, _extends2().default)({}, rest, {
    elevation: elevation,
    className: (0, _classnames().default)(className, _commandBarModule().default.commandBar, visible && _commandBarModule().default.visible)
  }), /*#__PURE__*/_react().default.createElement(_autocompleteInput().AutoCompleteInput, {
    value: term,
    focus: visible,
    className: _commandBarModule().default.input,
    placeholder: "Search anything or type > to only search commands",
    onChange: e => setTerm(e.target.value),
    onDown: increment,
    onUp: decrement,
    onEnter: handleEnter,
    onEscape: () => setVisibility(false),
    onBlur: () => setVisibility(false)
  }), /*#__PURE__*/_react().default.createElement("div", {
    className: _commandBarModule().default.results
  }, options.map((x, idx) => /*#__PURE__*/_react().default.createElement(_commandBarItem().CommandBarItem, {
    key: idx // use index instead of id to avoid duplicate keys
    ,
    entry: x,
    active: idx === activeIdx // mouseDown happens before blur, which closes the command bar
    ,
    onMouseDown: x.handler
  }))));
}

//# sourceMappingURL=command-bar.js.map