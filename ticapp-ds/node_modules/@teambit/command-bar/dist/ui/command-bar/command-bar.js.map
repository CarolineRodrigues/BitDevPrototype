{"version":3,"sources":["command-bar.tsx"],"names":["MIN_IDX","CommandBar","search","commander","elevation","className","rest","term","setTerm","options","activeIdx","setActive","increment","x","Math","min","length","decrement","max","visible","setVisibility","handleEnter","handler","styles","commandBar","input","e","target","value","results","map","idx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAOA,MAAMA,OAAO,GAAG,CAAhB;;AAEO,SAASC,UAAT,OAAoG;AAAA,MAAhF;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,SAAS,GAAG,MAAjC;AAAyCC,IAAAA;AAAzC,GAAgF;AAAA,MAAzBC,IAAyB;AACzG,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB,uBAAS,EAAT,CAAxB;AACA,QAAMC,OAAO,GAAG,sBAAQ,MAAMP,MAAM,CAACK,IAAD,CAApB,EAA4B,CAACA,IAAD,EAAOL,MAAP,CAA5B,CAAhB;AACA,QAAM,CAACQ,SAAD,EAAYC,SAAZ,IAAyB,uBAASX,OAAT,CAA/B;AACA,QAAMY,SAAS,GAAG,0BAAY,MAAMD,SAAS,CAAEE,CAAD,IAAOC,IAAI,CAACC,GAAL,CAASF,CAAC,GAAG,CAAb,EAAgBJ,OAAO,CAACO,MAAR,GAAiB,CAAjC,CAAR,CAA3B,EAAyE,CAACP,OAAO,CAACO,MAAT,CAAzE,CAAlB;AACA,QAAMC,SAAS,GAAG,0BAAY,MAAMN,SAAS,CAAEE,CAAD,IAAOC,IAAI,CAACI,GAAL,CAASL,CAAC,GAAG,CAAb,EAAgBb,OAAhB,CAAR,CAA3B,EAA8D,EAA9D,CAAlB;AACA,QAAM,CAACmB,OAAD,EAAUC,aAAV,IAA2B,uBAAS,KAAT,CAAjC;AAEAjB,EAAAA,SAAS,CAACiB,aAAV,GAA0BA,aAA1B;AAEA,QAAMC,WAAW,GAAG,0BAAY,MAAM;AAAA;;AACpCD,IAAAA,aAAa,CAAC,KAAD,CAAb;AACA,0BAAAX,OAAO,CAACC,SAAD,CAAP,0EAAoBY,OAApB;AACD,GAHmB,EAGjB,CAACb,OAAD,EAAUC,SAAV,CAHiB,CAApB;AAKA,0BAAU,MAAMF,OAAO,CAAC,EAAD,CAAvB,EAA6B,CAACW,OAAD,CAA7B;AACA,0BAAU,MAAMR,SAAS,CAACX,OAAD,CAAzB,EAAoC,CAACS,OAAD,CAApC;AAEA,sBACE,+BAAC,sBAAD,+BACMH,IADN;AAEE,IAAA,SAAS,EAAEF,SAFb;AAGE,IAAA,SAAS,EAAE,2BAAWC,SAAX,EAAsBkB,4BAAOC,UAA7B,EAAyCL,OAAO,IAAII,4BAAOJ,OAA3D;AAHb,mBAKE,+BAAC,sCAAD;AACE,IAAA,KAAK,EAAEZ,IADT;AAEE,IAAA,KAAK,EAAEY,OAFT;AAGE,IAAA,SAAS,EAAEI,4BAAOE,KAHpB;AAIE,IAAA,WAAW,EAAC,mDAJd;AAKE,IAAA,QAAQ,EAAGC,CAAD,IAAOlB,OAAO,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAL1B;AAME,IAAA,MAAM,EAAEhB,SANV;AAOE,IAAA,IAAI,EAAEK,SAPR;AAQE,IAAA,OAAO,EAAEI,WARX;AASE,IAAA,QAAQ,EAAE,MAAMD,aAAa,CAAC,KAAD,CAT/B;AAUE,IAAA,MAAM,EAAE,MAAMA,aAAa,CAAC,KAAD;AAV7B,IALF,eAiBE;AAAK,IAAA,SAAS,EAAEG,4BAAOM;AAAvB,KACGpB,OAAO,CAACqB,GAAR,CAAY,CAACjB,CAAD,EAAIkB,GAAJ,kBACX,+BAAC,gCAAD;AACE,IAAA,GAAG,EAAEA,GADP,CACY;AADZ;AAEE,IAAA,KAAK,EAAElB,CAFT;AAGE,IAAA,MAAM,EAAEkB,GAAG,KAAKrB,SAHlB,CAIE;AAJF;AAKE,IAAA,WAAW,EAAEG,CAAC,CAACS;AALjB,IADD,CADH,CAjBF,CADF;AA+BD","sourcesContent":["import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { Card, CardProps } from '@teambit/base-ui.surfaces.card';\nimport type { CommandBarUI } from '../../command-bar.ui.runtime';\nimport { CommanderSearchResult } from '../../types';\nimport { AutoCompleteInput } from '../autocomplete-input';\nimport { CommandBarItem } from '../command-bar-item';\nimport styles from './command-bar.module.scss';\n\nexport type CommandBarProps = {\n  search: (term: string, limit?: number) => CommanderSearchResult[];\n  commander: CommandBarUI;\n} & CardProps;\n\nconst MIN_IDX = 0;\n\nexport function CommandBar({ search, commander, elevation = 'high', className, ...rest }: CommandBarProps) {\n  const [term, setTerm] = useState('');\n  const options = useMemo(() => search(term), [term, search]);\n  const [activeIdx, setActive] = useState(MIN_IDX);\n  const increment = useCallback(() => setActive((x) => Math.min(x + 1, options.length - 1)), [options.length]);\n  const decrement = useCallback(() => setActive((x) => Math.max(x - 1, MIN_IDX)), []);\n  const [visible, setVisibility] = useState(false);\n\n  commander.setVisibility = setVisibility;\n\n  const handleEnter = useCallback(() => {\n    setVisibility(false);\n    options[activeIdx]?.handler();\n  }, [options, activeIdx]);\n\n  useEffect(() => setTerm(''), [visible]);\n  useEffect(() => setActive(MIN_IDX), [options]);\n\n  return (\n    <Card\n      {...rest}\n      elevation={elevation}\n      className={classNames(className, styles.commandBar, visible && styles.visible)}\n    >\n      <AutoCompleteInput\n        value={term}\n        focus={visible}\n        className={styles.input}\n        placeholder=\"Search anything or type > to only search commands\"\n        onChange={(e) => setTerm(e.target.value)}\n        onDown={increment}\n        onUp={decrement}\n        onEnter={handleEnter}\n        onEscape={() => setVisibility(false)}\n        onBlur={() => setVisibility(false)}\n      />\n      <div className={styles.results}>\n        {options.map((x, idx) => (\n          <CommandBarItem\n            key={idx} // use index instead of id to avoid duplicate keys\n            entry={x}\n            active={idx === activeIdx}\n            // mouseDown happens before blur, which closes the command bar\n            onMouseDown={x.handler}\n          />\n        ))}\n      </div>\n    </Card>\n  );\n}\n"]}