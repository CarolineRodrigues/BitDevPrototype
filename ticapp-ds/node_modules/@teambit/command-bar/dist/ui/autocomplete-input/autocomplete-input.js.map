{"version":3,"sources":["autocomplete-input.tsx"],"names":["AutoCompleteInput","className","onEscape","onDown","onUp","onEnter","onKeyDown","focus","rest","inputRef","current","handleKeyDown","e","defaultPrevented","handlers","Escape","preventDefault","ArrowDown","ArrowUp","Enter","key","styles","input"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAYO,SAASA,iBAAT,OASoB;AAAA,MATO;AAChCC,IAAAA,SADgC;AAEhCC,IAAAA,QAFgC;AAGhCC,IAAAA,MAHgC;AAIhCC,IAAAA,IAJgC;AAKhCC,IAAAA,OALgC;AAMhCC,IAAAA,SANgC;AAOhCC,IAAAA;AAPgC,GASP;AAAA,MADtBC,IACsB;AACzB,QAAMC,QAAQ,gBAAG,yBAAjB;AAEA,0BAAU,MAAM;AAAA;;AACd,QAAIF,KAAJ,EAAW,qBAAAE,QAAQ,CAACC,OAAT,wEAAkBH,KAAlB;AACZ,GAFD,EAEG,CAACA,KAAD,CAFH;AAIA,QAAMI,aAAa,GAAG,0BACnBC,CAAD,IAA8C;AAC5CN,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAGM,CAAH,CAAT;AACA,QAAIA,CAAC,CAACC,gBAAN,EAAwB;AAExB,UAAMC,QAAQ,GAAG;AACfC,MAAAA,MAAM,EAAE,MAAM;AACZH,QAAAA,CAAC,CAACI,cAAF;AACAd,QAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAGU,CAAH,CAAR;AACD,OAJc;AAKfK,MAAAA,SAAS,EAAE,MAAM;AACfL,QAAAA,CAAC,CAACI,cAAF;AACAb,QAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAGS,CAAH,CAAN;AACD,OARc;AASfM,MAAAA,OAAO,EAAE,MAAM;AACbN,QAAAA,CAAC,CAACI,cAAF;AACAZ,QAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAGQ,CAAH,CAAJ;AACD,OAZc;AAafO,MAAAA,KAAK,EAAE,MAAM;AACXP,QAAAA,CAAC,CAACI,cAAF;AACAX,QAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAGO,CAAH,CAAP;AACD;AAhBc,KAAjB;AAmBA,QAAIA,CAAC,CAACQ,GAAF,IAASN,QAAb,EAAuBA,QAAQ,CAACF,CAAC,CAACQ,GAAH,CAAR;AACxB,GAzBmB,EA0BpB,CAAClB,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,EAAyBC,OAAzB,CA1BoB,CAAtB,CAPyB,CAoCzB;;AACA,sBAAO,qEAAWG,IAAX;AAAiB,IAAA,GAAG,EAAEC,QAAtB;AAAgC,IAAA,SAAS,EAAE,2BAAWY,mCAAOC,KAAlB,EAAyBrB,SAAzB,CAA3C;AAAgF,IAAA,SAAS,EAAEU;AAA3F,KAAP;AACD","sourcesContent":["import React, { useCallback, useEffect, createRef, InputHTMLAttributes } from 'react';\nimport classNames from 'classnames';\nimport styles from './autocomplete-input.module.scss';\n\ntype AutoCompleteInputProps = InputHTMLAttributes<HTMLInputElement> & {\n  onEscape?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onUp?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onEnter?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  focus?: Truthy;\n};\n\ntype Truthy = boolean | number | string | null | undefined;\n\nexport function AutoCompleteInput({\n  className,\n  onEscape,\n  onDown,\n  onUp,\n  onEnter,\n  onKeyDown,\n  focus,\n  ...rest\n}: AutoCompleteInputProps) {\n  const inputRef = createRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (focus) inputRef.current?.focus();\n  }, [focus]);\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      onKeyDown?.(e);\n      if (e.defaultPrevented) return;\n\n      const handlers = {\n        Escape: () => {\n          e.preventDefault();\n          onEscape?.(e);\n        },\n        ArrowDown: () => {\n          e.preventDefault();\n          onDown?.(e);\n        },\n        ArrowUp: () => {\n          e.preventDefault();\n          onUp?.(e);\n        },\n        Enter: () => {\n          e.preventDefault();\n          onEnter?.(e);\n        },\n      };\n\n      if (e.key in handlers) handlers[e.key]();\n    },\n    [onEscape, onDown, onUp, onEnter]\n  );\n\n  // @ts-ignore (https://github.com/teambit/bit/issues/4908)\n  return <input {...rest} ref={inputRef} className={classNames(styles.input, className)} onKeyDown={handleKeyDown} />;\n}\n"]}