"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.regexp.exec.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentSearcher = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _fuse() {
  const data = _interopRequireDefault(require("fuse.js"));

  _fuse = function () {
    return data;
  };

  return data;
}

function _memoizeOne() {
  const data = _interopRequireDefault(require("memoize-one"));

  _memoizeOne = function () {
    return data;
  };

  return data;
}

const searchedKeys = ['displayName', 'name'];

class ComponentSearcher {
  constructor(navigate) {
    this.navigate = navigate;
    (0, _defineProperty2().default)(this, "fuseCommands", new (_fuse().default)([], {
      // weight can be included here.
      // fields loses weight the longer they get, so it seems ok for now.
      keys: searchedKeys
    }));
    (0, _defineProperty2().default)(this, "update", (0, _memoizeOne().default)(components => {
      const {
        navigate
      } = this;
      const searchResults = components.map(c => {
        var _c$environment, _c$environment2;

        return {
          id: c.id.fullName,
          displayName: c.id.fullName,
          name: c.id.name,
          handler: () => navigate(`/${c.id.fullName}`),
          icon: (_c$environment = c.environment) === null || _c$environment === void 0 ? void 0 : _c$environment.icon,
          iconAlt: (_c$environment2 = c.environment) === null || _c$environment2 === void 0 ? void 0 : _c$environment2.id
        };
      });
      this.fuseCommands.setCollection(searchResults);
    }));
  } // this method can be called on every render. memoize to prevent redundant calls


  search(term, limit) {
    const searchResults = this.fuseCommands.search(term, {
      limit
    }); // @ts-ignore this shows error on Circle for some weird reason

    return searchResults.map(x => x.item);
  }

  test(term) {
    return !term.startsWith('>') && term.length > 0;
  }

}

exports.ComponentSearcher = ComponentSearcher;

//# sourceMappingURL=component-searcher.js.map