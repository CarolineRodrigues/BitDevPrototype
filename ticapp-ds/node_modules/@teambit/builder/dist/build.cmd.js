"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.trim.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BuilderCmd = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("@teambit/legacy/dist/consumer/exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

class BuilderCmd {
  constructor(builder, workspace, logger) {
    this.builder = builder;
    this.workspace = workspace;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "name", 'build [pattern]');
    (0, _defineProperty2().default)(this, "description", 'run set of tasks for build');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "options", [['a', 'all', 'build all components, not only modified and new'], ['d', 'dev', 'run the pipeline in dev mode'], ['', 'install', 'install core aspects in capsules'], ['', 'reuse-capsules', 'avoid deleting the capsules root-dir before starting the build'], ['', 'tasks <string>', `build the specified task(s) only. for multiple tasks, separate by a comma and wrap with quotes.
specify the task-name (e.g. "TypescriptCompiler") or the task-aspect-id (e.g. teambit.compilation/compiler)`], ['', 'cache-packages-on-capsule-root', 'set the package-manager cache on the capsule root'], ['', 'list-tasks <string>', 'list tasks of an env or a component-id for each one of the pipelines: build, tag and snap']]);
  }

  async report([userPattern], {
    all = false,
    dev = false,
    install = false,
    cachePackagesOnCapsulesRoot = false,
    reuseCapsules = false,
    tasks,
    listTasks
  }) {
    if (!this.workspace) throw new (_exceptions().ConsumerNotFound)();

    if (listTasks) {
      return this.getListTasks(listTasks);
    }

    const longProcessLogger = this.logger.createLongProcessLogger('build');
    const components = await this.workspace.getComponentsByUserInput(all, userPattern, true);

    if (!components.length) {
      return _chalk().default.bold(`no components found to build. use "--all" flag to build all components or specify the ids to build, otherwise, only new and modified components will be built`);
    }

    this.logger.consoleSuccess(`found ${components.length} components to build`);
    const envsExecutionResults = await this.builder.build(components, {
      installOptions: {
        installTeambitBit: install,
        packageManagerConfigRootDir: this.workspace.path
      },
      linkingOptions: {
        linkTeambitBit: !install
      },
      emptyRootDir: !reuseCapsules,
      getExistingAsIs: reuseCapsules,
      cachePackagesOnCapsulesRoot
    }, {
      dev,
      tasks: tasks ? tasks.split(',').map(task => task.trim()) : []
    });
    longProcessLogger.end();
    envsExecutionResults.throwErrorsIfExist();
    this.logger.consoleSuccess();
    return _chalk().default.green(`the build has been completed. total: ${envsExecutionResults.tasksQueue.length} tasks`);
  }

  async getListTasks(componentIdStr) {
    const compId = await this.workspace.resolveComponentId(componentIdStr);
    const component = await this.workspace.get(compId);
    const results = this.builder.listTasks(component);
    return `${_chalk().default.green('Tasks List')}
id:    ${results.id.toString()}
envId: ${results.envId}

${_chalk().default.bold('Build Pipeline Tasks:')}
${results.buildTasks.join('\n')}

${_chalk().default.bold('Tag Pipeline Tasks:')}
${results.tagTasks.join('\n')}

${_chalk().default.bold('Snap Pipeline Tasks:')}
${results.snapTasks.join('\n') || '<N/A>'}`;
  }

}

exports.BuilderCmd = BuilderCmd;

//# sourceMappingURL=build.cmd.js.map