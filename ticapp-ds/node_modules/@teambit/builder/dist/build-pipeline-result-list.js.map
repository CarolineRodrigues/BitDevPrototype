{"version":3,"sources":["build-pipeline-result-list.ts"],"names":["BuildPipelineResultList","constructor","tasksResults","components","artifactListsMap","getFlattenedArtifactListsMapFromAllTasks","artifactListsMaps","flatMap","t","artifacts","ComponentMap","as","component","forEach","artifactListMap","artifactList","getValueByComponentId","id","push","toArray","ArtifactList","getMetadataFromTaskResults","componentId","compResults","reduce","acc","current","foundComponent","componentsResults","find","c","isEqual","taskId","task","aspectId","metadata","mergeDataIfPossible","getPipelineReportOfComponent","map","taskResults","pipelineReport","taskName","name","taskDescription","description","errors","warnings","startTime","endTime","getDataOfComponent","tasksData","Object","keys","data","getArtifactsDataOfComponent","toObject","currentData","existingData","Error","Array","isArray"],"mappings":"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","sourcesContent":["import { ComponentID, ComponentMap, Component } from '@teambit/component';\nimport { isEmpty, compact } from 'lodash';\nimport type { ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport { Artifact, ArtifactList } from './artifact';\nimport { TaskResults } from './build-pipe';\nimport { Serializable, TaskMetadata } from './types';\n\nexport type PipelineReport = {\n  taskId: string; // task aspect-id\n  taskName: string;\n  taskDescription?: string;\n  startTime?: number;\n  endTime?: number;\n  errors?: Array<Error | string>;\n  warnings?: string[];\n};\n\nexport type AspectData = {\n  aspectId: string;\n  data: Serializable;\n};\n\n/**\n * Helper to get the data and artifacts from the TasksResultsList before saving during the tag\n */\nexport class BuildPipelineResultList {\n  private artifactListsMap: ComponentMap<ArtifactList>;\n  constructor(private tasksResults: TaskResults[], private components: Component[]) {\n    this.artifactListsMap = this.getFlattenedArtifactListsMapFromAllTasks();\n  }\n\n  private getFlattenedArtifactListsMapFromAllTasks(): ComponentMap<ArtifactList> {\n    const artifactListsMaps = this.tasksResults.flatMap((t) => (t.artifacts ? [t.artifacts] : []));\n    return ComponentMap.as<ArtifactList>(this.components, (component) => {\n      const artifacts: Artifact[] = [];\n      artifactListsMaps.forEach((artifactListMap) => {\n        const artifactList = artifactListMap.getValueByComponentId(component.id);\n        if (artifactList) artifacts.push(...artifactList.toArray());\n      });\n      return new ArtifactList(artifacts);\n    });\n  }\n\n  public getMetadataFromTaskResults(componentId: ComponentID): { [taskId: string]: TaskMetadata } {\n    const compResults = this.tasksResults.reduce((acc, current: TaskResults) => {\n      const foundComponent = current.componentsResults.find((c) => c.component.id.isEqual(componentId));\n      const taskId = current.task.aspectId;\n      if (foundComponent && foundComponent.metadata) {\n        acc[taskId] = this.mergeDataIfPossible(foundComponent.metadata, acc[taskId], taskId);\n      }\n      return acc;\n    }, {});\n    return compResults;\n  }\n\n  public getPipelineReportOfComponent(componentId: ComponentID): PipelineReport[] {\n    const compResults = this.tasksResults.map((taskResults: TaskResults) => {\n      const foundComponent = taskResults.componentsResults.find((c) => c.component.id.isEqual(componentId));\n      if (!foundComponent) return null;\n      const pipelineReport: PipelineReport = {\n        taskId: taskResults.task.aspectId,\n        taskName: taskResults.task.name,\n        taskDescription: taskResults.task.description,\n        errors: foundComponent.errors,\n        warnings: foundComponent.warnings,\n        startTime: foundComponent.startTime,\n        endTime: foundComponent.endTime,\n      };\n      return pipelineReport;\n    });\n    return compact(compResults);\n  }\n\n  public getDataOfComponent(componentId: ComponentID): AspectData[] {\n    const tasksData = this.getMetadataFromTaskResults(componentId);\n    return Object.keys(tasksData).map((taskId) => ({\n      aspectId: taskId,\n      data: tasksData[taskId],\n    }));\n  }\n\n  public getArtifactsDataOfComponent(componentId: ComponentID): ArtifactObject[] | undefined {\n    return this.artifactListsMap.getValueByComponentId(componentId)?.toObject();\n  }\n\n  private mergeDataIfPossible(currentData: Serializable, existingData: Serializable | undefined, taskId: string) {\n    if (!existingData || isEmpty(existingData)) return currentData;\n    // both exist\n    if (typeof currentData !== 'object') {\n      throw new Error(`task data must be \"object\", get ${typeof currentData} for ${taskId}`);\n    }\n    if (Array.isArray(currentData)) {\n      throw new Error(`task data must be \"object\", get Array for ${taskId}`);\n    }\n    return { ...currentData, ...existingData };\n  }\n}\n"]}