{"version":3,"sources":["build.cmd.ts"],"names":["BuilderCmd","constructor","builder","workspace","logger","report","userPattern","all","dev","install","cachePackagesOnCapsulesRoot","reuseCapsules","tasks","listTasks","ConsumerNotFound","getListTasks","longProcessLogger","createLongProcessLogger","components","getComponentsByUserInput","length","chalk","bold","consoleSuccess","envsExecutionResults","build","installOptions","installTeambitBit","packageManagerConfigRootDir","path","linkingOptions","linkTeambitBit","emptyRootDir","getExistingAsIs","split","map","task","trim","end","throwErrorsIfExist","green","tasksQueue","componentIdStr","compId","resolveComponentId","component","get","results","id","toString","envId","buildTasks","join","tagTasks","snapTasks"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAcO,MAAMA,UAAN,CAAoC;AAwBzCC,EAAAA,WAAW,CAASC,OAAT,EAAuCC,SAAvC,EAAqEC,MAArE,EAAqF;AAAA,SAA5EF,OAA4E,GAA5EA,OAA4E;AAAA,SAA9CC,SAA8C,GAA9CA,SAA8C;AAAA,SAAhBC,MAAgB,GAAhBA,MAAgB;AAAA,kDAvBzF,iBAuByF;AAAA,yDAtBlF,4BAsBkF;AAAA,mDArBxF,EAqBwF;AAAA,mDApBxF,aAoBwF;AAAA,qDAnBtF,CACR,CAAC,GAAD,EAAM,KAAN,EAAa,iDAAb,CADQ,EAER,CAAC,GAAD,EAAM,KAAN,EAAa,8BAAb,CAFQ,EAGR,CAAC,EAAD,EAAK,SAAL,EAAgB,kCAAhB,CAHQ,EAIR,CAAC,EAAD,EAAK,gBAAL,EAAuB,gEAAvB,CAJQ,EAKR,CACE,EADF,EAEE,gBAFF,EAGG;AACP,4GAJI,CALQ,EAWR,CAAC,EAAD,EAAK,gCAAL,EAAuC,mDAAvC,CAXQ,EAYR,CACE,EADF,EAEE,qBAFF,EAGE,2FAHF,CAZQ,CAmBsF;AAAE;;AAEtF,QAANC,MAAM,CACV,CAACC,WAAD,CADU,EAEV;AACEC,IAAAA,GAAG,GAAG,KADR;AAEEC,IAAAA,GAAG,GAAG,KAFR;AAGEC,IAAAA,OAAO,GAAG,KAHZ;AAIEC,IAAAA,2BAA2B,GAAG,KAJhC;AAKEC,IAAAA,aAAa,GAAG,KALlB;AAMEC,IAAAA,KANF;AAOEC,IAAAA;AAPF,GAFU,EAWO;AACjB,QAAI,CAAC,KAAKV,SAAV,EAAqB,MAAM,KAAIW,8BAAJ,GAAN;;AACrB,QAAID,SAAJ,EAAe;AACb,aAAO,KAAKE,YAAL,CAAkBF,SAAlB,CAAP;AACD;;AAED,UAAMG,iBAAiB,GAAG,KAAKZ,MAAL,CAAYa,uBAAZ,CAAoC,OAApC,CAA1B;AACA,UAAMC,UAAU,GAAG,MAAM,KAAKf,SAAL,CAAegB,wBAAf,CAAwCZ,GAAxC,EAA6CD,WAA7C,EAA0D,IAA1D,CAAzB;;AACA,QAAI,CAACY,UAAU,CAACE,MAAhB,EAAwB;AACtB,aAAOC,iBAAMC,IAAN,CACJ,+JADI,CAAP;AAGD;;AACD,SAAKlB,MAAL,CAAYmB,cAAZ,CAA4B,SAAQL,UAAU,CAACE,MAAO,sBAAtD;AAEA,UAAMI,oBAAoB,GAAG,MAAM,KAAKtB,OAAL,CAAauB,KAAb,CACjCP,UADiC,EAEjC;AACEQ,MAAAA,cAAc,EAAE;AACdC,QAAAA,iBAAiB,EAAElB,OADL;AAEdmB,QAAAA,2BAA2B,EAAE,KAAKzB,SAAL,CAAe0B;AAF9B,OADlB;AAKEC,MAAAA,cAAc,EAAE;AAAEC,QAAAA,cAAc,EAAE,CAACtB;AAAnB,OALlB;AAMEuB,MAAAA,YAAY,EAAE,CAACrB,aANjB;AAOEsB,MAAAA,eAAe,EAAEtB,aAPnB;AAQED,MAAAA;AARF,KAFiC,EAYjC;AACEF,MAAAA,GADF;AAEEI,MAAAA,KAAK,EAAEA,KAAK,GAAGA,KAAK,CAACsB,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAsBC,IAAD,IAAUA,IAAI,CAACC,IAAL,EAA/B,CAAH,GAAiD;AAF/D,KAZiC,CAAnC;AAiBArB,IAAAA,iBAAiB,CAACsB,GAAlB;AACAd,IAAAA,oBAAoB,CAACe,kBAArB;AACA,SAAKnC,MAAL,CAAYmB,cAAZ;AACA,WAAOF,iBAAMmB,KAAN,CAAa,wCAAuChB,oBAAoB,CAACiB,UAArB,CAAgCrB,MAAO,QAA3F,CAAP;AACD;;AAEyB,QAAZL,YAAY,CAAC2B,cAAD,EAA0C;AAClE,UAAMC,MAAM,GAAG,MAAM,KAAKxC,SAAL,CAAeyC,kBAAf,CAAkCF,cAAlC,CAArB;AACA,UAAMG,SAAS,GAAG,MAAM,KAAK1C,SAAL,CAAe2C,GAAf,CAAmBH,MAAnB,CAAxB;AACA,UAAMI,OAAO,GAAG,KAAK7C,OAAL,CAAaW,SAAb,CAAuBgC,SAAvB,CAAhB;AACA,WAAQ,GAAExB,iBAAMmB,KAAN,CAAY,YAAZ,CAA0B;AACxC,SAASO,OAAO,CAACC,EAAR,CAAWC,QAAX,EAAsB;AAC/B,SAASF,OAAO,CAACG,KAAM;AACvB;AACA,EAAE7B,iBAAMC,IAAN,CAAW,uBAAX,CAAoC;AACtC,EAAEyB,OAAO,CAACI,UAAR,CAAmBC,IAAnB,CAAwB,IAAxB,CAA8B;AAChC;AACA,EAAE/B,iBAAMC,IAAN,CAAW,qBAAX,CAAkC;AACpC,EAAEyB,OAAO,CAACM,QAAR,CAAiBD,IAAjB,CAAsB,IAAtB,CAA4B;AAC9B;AACA,EAAE/B,iBAAMC,IAAN,CAAW,sBAAX,CAAmC;AACrC,EAAEyB,OAAO,CAACO,SAAR,CAAkBF,IAAlB,CAAuB,IAAvB,KAAgC,OAAQ,EAXtC;AAYD;;AA3FwC","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport { Logger } from '@teambit/logger';\nimport { Workspace } from '@teambit/workspace';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport chalk from 'chalk';\nimport { BuilderMain } from './builder.main.runtime';\n\ntype BuildOpts = {\n  all: boolean;\n  dev: boolean;\n  rebuild: boolean;\n  install: boolean;\n  cachePackagesOnCapsulesRoot: boolean;\n  reuseCapsules: boolean;\n  tasks: string;\n  listTasks?: string;\n};\n\nexport class BuilderCmd implements Command {\n  name = 'build [pattern]';\n  description = 'run set of tasks for build';\n  alias = '';\n  group = 'development';\n  options = [\n    ['a', 'all', 'build all components, not only modified and new'],\n    ['d', 'dev', 'run the pipeline in dev mode'],\n    ['', 'install', 'install core aspects in capsules'],\n    ['', 'reuse-capsules', 'avoid deleting the capsules root-dir before starting the build'],\n    [\n      '',\n      'tasks <string>',\n      `build the specified task(s) only. for multiple tasks, separate by a comma and wrap with quotes.\nspecify the task-name (e.g. \"TypescriptCompiler\") or the task-aspect-id (e.g. teambit.compilation/compiler)`,\n    ],\n    ['', 'cache-packages-on-capsule-root', 'set the package-manager cache on the capsule root'],\n    [\n      '',\n      'list-tasks <string>',\n      'list tasks of an env or a component-id for each one of the pipelines: build, tag and snap',\n    ],\n  ] as CommandOptions;\n\n  constructor(private builder: BuilderMain, private workspace: Workspace, private logger: Logger) {}\n\n  async report(\n    [userPattern]: [string],\n    {\n      all = false,\n      dev = false,\n      install = false,\n      cachePackagesOnCapsulesRoot = false,\n      reuseCapsules = false,\n      tasks,\n      listTasks,\n    }: BuildOpts\n  ): Promise<string> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    if (listTasks) {\n      return this.getListTasks(listTasks);\n    }\n\n    const longProcessLogger = this.logger.createLongProcessLogger('build');\n    const components = await this.workspace.getComponentsByUserInput(all, userPattern, true);\n    if (!components.length) {\n      return chalk.bold(\n        `no components found to build. use \"--all\" flag to build all components or specify the ids to build, otherwise, only new and modified components will be built`\n      );\n    }\n    this.logger.consoleSuccess(`found ${components.length} components to build`);\n\n    const envsExecutionResults = await this.builder.build(\n      components,\n      {\n        installOptions: {\n          installTeambitBit: install,\n          packageManagerConfigRootDir: this.workspace.path,\n        },\n        linkingOptions: { linkTeambitBit: !install },\n        emptyRootDir: !reuseCapsules,\n        getExistingAsIs: reuseCapsules,\n        cachePackagesOnCapsulesRoot,\n      },\n      {\n        dev,\n        tasks: tasks ? tasks.split(',').map((task) => task.trim()) : [],\n      }\n    );\n    longProcessLogger.end();\n    envsExecutionResults.throwErrorsIfExist();\n    this.logger.consoleSuccess();\n    return chalk.green(`the build has been completed. total: ${envsExecutionResults.tasksQueue.length} tasks`);\n  }\n\n  private async getListTasks(componentIdStr: string): Promise<string> {\n    const compId = await this.workspace.resolveComponentId(componentIdStr);\n    const component = await this.workspace.get(compId);\n    const results = this.builder.listTasks(component);\n    return `${chalk.green('Tasks List')}\nid:    ${results.id.toString()}\nenvId: ${results.envId}\n\n${chalk.bold('Build Pipeline Tasks:')}\n${results.buildTasks.join('\\n')}\n\n${chalk.bold('Tag Pipeline Tasks:')}\n${results.tagTasks.join('\\n')}\n\n${chalk.bold('Snap Pipeline Tasks:')}\n${results.snapTasks.join('\\n') || '<N/A>'}`;\n  }\n}\n"]}