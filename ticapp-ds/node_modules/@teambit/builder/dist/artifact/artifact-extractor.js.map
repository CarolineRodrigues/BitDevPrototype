{"version":3,"sources":["artifact-extractor.ts"],"names":["ArtifactExtractor","constructor","scope","builder","patterns","options","list","components","byPattern","artifactObjectsPerId","map","component","id","artifacts","getArtifacts","filterByOptions","saveFilesInFileSystemIfAsked","artifactsObjectsToExtractorResults","groupResultsByAspect","extractorResult","result","reduce","acc","current","aspectId","push","outDir","vinyls","Promise","all","artifactObject","files","getVinylsAndImportIfMissing","legacyScope","flattenedVinyls","flat","compPath","path","join","toStringWithoutVersion","vinyl","fs","outputFile","contents","results","artifact","task","taskName","name","generatedBy","refs","ref","relativePath","aspect","forEach","item","filter","ArtifactFiles","length"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport { ScopeMain } from '@teambit/scope';\nimport { ComponentID } from '@teambit/component-id';\nimport pMapSeries from 'p-map-series';\nimport minimatch from 'minimatch';\nimport { ArtifactFiles, ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport { BuilderMain } from '../builder.main.runtime';\nimport { ArtifactsOpts } from './artifacts.cmd';\n\nexport type ExtractorResult = {\n  id: ComponentID;\n  artifacts: ExtractorArtifactResult[];\n};\n\nexport type ExtractorArtifactResult = {\n  aspectId: string;\n  taskName: string;\n  files: string[];\n};\n\nexport type ExtractorResultGrouped = {\n  id: ComponentID;\n  artifacts: { [aspectId: string]: ExtractorArtifactResult[] };\n};\n\ntype ArtifactObjectsPerId = {\n  id: ComponentID;\n  artifacts: ArtifactObject[];\n};\n\nexport class ArtifactExtractor {\n  constructor(\n    private scope: ScopeMain,\n    private builder: BuilderMain,\n    private patterns: string[],\n    private options: ArtifactsOpts\n  ) {}\n\n  async list(): Promise<ExtractorResult[]> {\n    const components = await this.scope.byPattern(this.patterns);\n    const artifactObjectsPerId: ArtifactObjectsPerId[] = components.map((component) => {\n      return {\n        id: component.id,\n        artifacts: this.builder.getArtifacts(component) || [],\n      };\n    });\n    this.filterByOptions(artifactObjectsPerId);\n    await this.saveFilesInFileSystemIfAsked(artifactObjectsPerId);\n\n    return this.artifactsObjectsToExtractorResults(artifactObjectsPerId);\n  }\n\n  groupResultsByAspect(extractorResult: ExtractorResult[]) {\n    return extractorResult.map((result) => {\n      const artifacts = result.artifacts.reduce((acc, current) => {\n        (acc[current.aspectId] ||= []).push(current);\n        return acc;\n      }, {});\n      return { id: result.id, artifacts };\n    });\n  }\n\n  private async saveFilesInFileSystemIfAsked(artifactObjectsPerId: ArtifactObjectsPerId[]) {\n    const outDir = this.options.outDir;\n    if (!outDir) {\n      return;\n    }\n    // @todo: optimize this to first import all missing hashes.\n    await pMapSeries(artifactObjectsPerId, async ({ id, artifacts }) => {\n      const vinyls = await Promise.all(\n        artifacts.map((artifactObject) =>\n          artifactObject.files.getVinylsAndImportIfMissing(id.scope as string, this.scope.legacyScope)\n        )\n      );\n      const flattenedVinyls = vinyls.flat();\n      const compPath = path.join(outDir, id.toStringWithoutVersion());\n      await Promise.all(flattenedVinyls.map((vinyl) => fs.outputFile(path.join(compPath, vinyl.path), vinyl.contents)));\n    });\n  }\n\n  private artifactsObjectsToExtractorResults(artifactObjectsPerId: ArtifactObjectsPerId[]): ExtractorResult[] {\n    return artifactObjectsPerId.map(({ id, artifacts }) => {\n      const results: ExtractorArtifactResult[] = artifacts.map((artifact) => {\n        return {\n          aspectId: artifact.task.id,\n          taskName: artifact.task.name || artifact.generatedBy,\n          files: artifact.files.refs.map((ref) => ref.relativePath),\n        };\n      });\n      return {\n        id,\n        artifacts: results,\n      };\n    });\n  }\n\n  private filterByOptions(artifactObjectsPerId: ArtifactObjectsPerId[]) {\n    const { aspect, task, files } = this.options;\n    artifactObjectsPerId.forEach((item) => {\n      item.artifacts = item.artifacts.filter((artifact) => {\n        if (aspect && aspect !== artifact.task.id) return false;\n        if (task && task !== artifact.task.name) return false;\n        return true;\n      });\n      if (files) {\n        item.artifacts.forEach((artifact) => {\n          const refs = artifact.files.refs.filter((ref) => minimatch(ref.relativePath, files));\n          artifact.files = new ArtifactFiles([], [], refs);\n        });\n        // remove artifacts with no files\n        item.artifacts = item.artifacts.filter((artifact) => artifact.files.refs.length);\n      }\n    });\n  }\n}\n"]}