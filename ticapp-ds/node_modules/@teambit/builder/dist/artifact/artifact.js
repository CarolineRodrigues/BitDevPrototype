"use strict";

require("core-js/modules/es.symbol.description.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Artifact = void 0;

class Artifact {
  constructor(
  /**
   * definition of the artifact.
   */
  def,
  /**
   * storage resolver. can be used to replace where artifacts are stored.
   */
  storageResolver, files,
  /**
   * join this with `this.paths` to get the absolute paths
   */
  rootDir,
  /**
   * the declaring task.
   * todo: change this to taskDescriptor that has only the metadata of the task, so it could be
   * saved into the model.
   */
  task,
  /**
   * timestamp of the artifact creation.
   */
  timestamp = Date.now()) {
    this.def = def;
    this.storageResolver = storageResolver;
    this.files = files;
    this.rootDir = rootDir;
    this.task = task;
    this.timestamp = timestamp;
  }

  get storage() {
    return this.storageResolver;
  }
  /**
   * name of the artifact.
   */


  get name() {
    return this.def.name;
  }
  /**
   * description of the artifact.
   */


  get description() {
    return this.def.description;
  }
  /**
   * aspect id (string) that generated the artifact
   */


  get generatedBy() {
    return this.def.generatedBy || this.task.aspectId;
  }
  /**
   * archive all artifact files into a tar.
   */


  tar() {}

  toObject() {
    return {
      name: this.name,
      description: this.description,
      generatedBy: this.generatedBy,
      storage: this.storageResolver.name,
      task: {
        id: this.task.aspectId,
        name: this.task.name
      },
      files: this.files
    };
  }

}

exports.Artifact = Artifact;

//# sourceMappingURL=artifact.js.map