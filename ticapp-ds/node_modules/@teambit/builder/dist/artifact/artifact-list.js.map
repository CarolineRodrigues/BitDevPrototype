{"version":3,"sources":["artifact-list.ts"],"names":["ArtifactList","constructor","artifacts","toArray","groupByResolver","resolverMap","forEach","artifact","storageResolver","resolverArray","name","length","push","toObject","map","groupByTaskId","reduce","acc","taskId","task","aspectId","store","component","byResolvers","promises","Object","keys","key","artifactList","artifactPromises","storeArtifact","Promise","all","defaultResolver","DefaultResolver","storeWholeArtifactByResolver","storeArtifactFilesByResolver","results","files","vinyls","file","url","relative","storeFile"],"mappings":"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","sourcesContent":["import { Component } from '@teambit/component';\nimport type { ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport type { Artifact } from './artifact';\nimport {\n  ArtifactStorageResolver,\n  FileStorageResolver,\n  WholeArtifactStorageResolver,\n  DefaultResolver,\n} from '../storage';\n\nexport type ResolverMap = { [key: string]: Artifact[] };\n\nexport class ArtifactList {\n  constructor(readonly artifacts: Artifact[]) {}\n\n  /**\n   * return an array of artifact objects.\n   */\n  toArray() {\n    return this.artifacts;\n  }\n\n  /**\n   * group artifacts by the storage resolver.\n   */\n  groupByResolver(): ResolverMap {\n    const resolverMap: ResolverMap = {};\n    this.artifacts.forEach((artifact) => {\n      const storageResolver = artifact.storageResolver;\n      const resolverArray = resolverMap[storageResolver.name];\n      if (!resolverArray) {\n        resolverMap[storageResolver.name] = [artifact];\n        return;\n      }\n      if (resolverArray.length) {\n        resolverMap[storageResolver.name].push(artifact);\n      }\n    });\n\n    return resolverMap;\n  }\n\n  toObject(): ArtifactObject[] {\n    return this.artifacts.map((artifact) => artifact.toObject());\n  }\n\n  groupByTaskId() {\n    return this.artifacts.reduce((acc: { [key: string]: Artifact }, artifact) => {\n      const taskId = artifact.task.aspectId;\n      acc[taskId] = artifact;\n      return acc;\n    }, {});\n  }\n\n  /**\n   * store all artifacts using the configured storage resolvers.\n   */\n  async store(component: Component) {\n    const byResolvers = this.groupByResolver();\n    const promises = Object.keys(byResolvers).map(async (key) => {\n      const artifacts = byResolvers[key];\n      if (!artifacts.length) return;\n      const storageResolver = artifacts[0].storageResolver;\n      const artifactList = new ArtifactList(artifacts);\n      const artifactPromises = artifactList.artifacts.map(async (artifact) => {\n        return this.storeArtifact(storageResolver, artifact, component);\n      });\n      await Promise.all(artifactPromises);\n    });\n\n    return Promise.all(promises);\n  }\n\n  private async storeArtifact(storageResolver: ArtifactStorageResolver, artifact: Artifact, component: Component) {\n    // For now we are always storing also using the default resolver\n    if (storageResolver.name !== 'default') {\n      const defaultResolver = new DefaultResolver();\n      await defaultResolver.store(component, artifact);\n    }\n    // @ts-ignore\n    if (storageResolver.store && typeof storageResolver.store === 'function') {\n      return this.storeWholeArtifactByResolver(storageResolver as WholeArtifactStorageResolver, artifact, component);\n    }\n    return this.storeArtifactFilesByResolver(storageResolver as FileStorageResolver, artifact, component);\n  }\n\n  /**\n   * Send the entire artifact to the resolver then get back the result for all files from the resolver\n   * @param storageResolver\n   * @param artifact\n   * @param component\n   */\n  private async storeWholeArtifactByResolver(\n    storageResolver: WholeArtifactStorageResolver,\n    artifact: Artifact,\n    component: Component\n  ) {\n    const results = await storageResolver.store(component, artifact);\n    if (!results) return;\n    artifact.files.vinyls.map(async (file) => {\n      const url = results[file.relative];\n      if (url) {\n        file.url = url;\n      }\n    });\n  }\n\n  /**\n   * Go over the artifact files and send them to the resolver one by one\n   * @param storageResolver\n   * @param artifact\n   * @param component\n   */\n  private storeArtifactFilesByResolver(storageResolver: FileStorageResolver, artifact: Artifact, component: Component) {\n    const promises = artifact.files.vinyls.map(async (file) => {\n      const url = await storageResolver.storeFile(component, artifact, file);\n      if (url) {\n        file.url = url;\n      }\n    });\n    return Promise.all(promises);\n  }\n}\n"]}