{"version":3,"sources":["artifact.ts"],"names":["Artifact","constructor","def","storageResolver","files","rootDir","task","timestamp","Date","now","storage","name","description","generatedBy","aspectId","tar","toObject","id"],"mappings":";;;;;;;;;AAKO,MAAMA,QAAN,CAAe;AACpBC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,GAJA;AAMT;AACJ;AACA;AACaC,EAAAA,eATA,EAWAC,KAXA;AAaT;AACJ;AACA;AACaC,EAAAA,OAhBA;AAkBT;AACJ;AACA;AACA;AACA;AACaC,EAAAA,IAvBA;AAyBT;AACJ;AACA;AACaC,EAAAA,SAAiB,GAAGC,IAAI,CAACC,GAAL,EA5BpB,EA6BT;AAAA,SAzBSP,GAyBT,GAzBSA,GAyBT;AAAA,SApBSC,eAoBT,GApBSA,eAoBT;AAAA,SAlBSC,KAkBT,GAlBSA,KAkBT;AAAA,SAbSC,OAaT,GAbSA,OAaT;AAAA,SANSC,IAMT,GANSA,IAMT;AAAA,SADSC,SACT,GADSA,SACT;AAAE;;AAEO,MAAPG,OAAO,GAAG;AACZ,WAAO,KAAKP,eAAZ;AACD;AAED;AACF;AACA;;;AACU,MAAJQ,IAAI,GAAW;AACjB,WAAO,KAAKT,GAAL,CAASS,IAAhB;AACD;AAED;AACF;AACA;;;AACiB,MAAXC,WAAW,GAAG;AAChB,WAAO,KAAKV,GAAL,CAASU,WAAhB;AACD;AAED;AACF;AACA;;;AACiB,MAAXC,WAAW,GAAW;AACxB,WAAO,KAAKX,GAAL,CAASW,WAAT,IAAwB,KAAKP,IAAL,CAAUQ,QAAzC;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,GAAG,GAAG,CAAE;;AAERC,EAAAA,QAAQ,GAAmB;AACzB,WAAO;AACLL,MAAAA,IAAI,EAAE,KAAKA,IADN;AAELC,MAAAA,WAAW,EAAE,KAAKA,WAFb;AAGLC,MAAAA,WAAW,EAAE,KAAKA,WAHb;AAILH,MAAAA,OAAO,EAAE,KAAKP,eAAL,CAAqBQ,IAJzB;AAKLL,MAAAA,IAAI,EAAE;AACJW,QAAAA,EAAE,EAAE,KAAKX,IAAL,CAAUQ,QADV;AAEJH,QAAAA,IAAI,EAAE,KAAKL,IAAL,CAAUK;AAFZ,OALD;AASLP,MAAAA,KAAK,EAAE,KAAKA;AATP,KAAP;AAWD;;AA1EmB","sourcesContent":["import type { ArtifactFiles, ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport type { BuildTask } from '../build-task';\nimport type { ArtifactStorageResolver } from '../storage';\nimport type { ArtifactDefinition } from './artifact-definition';\n\nexport class Artifact {\n  constructor(\n    /**\n     * definition of the artifact.\n     */\n    readonly def: ArtifactDefinition,\n\n    /**\n     * storage resolver. can be used to replace where artifacts are stored.\n     */\n    readonly storageResolver: ArtifactStorageResolver,\n\n    readonly files: ArtifactFiles,\n\n    /**\n     * join this with `this.paths` to get the absolute paths\n     */\n    readonly rootDir: string,\n\n    /**\n     * the declaring task.\n     * todo: change this to taskDescriptor that has only the metadata of the task, so it could be\n     * saved into the model.\n     */\n    readonly task: BuildTask,\n\n    /**\n     * timestamp of the artifact creation.\n     */\n    readonly timestamp: number = Date.now()\n  ) {}\n\n  get storage() {\n    return this.storageResolver;\n  }\n\n  /**\n   * name of the artifact.\n   */\n  get name(): string {\n    return this.def.name;\n  }\n\n  /**\n   * description of the artifact.\n   */\n  get description() {\n    return this.def.description;\n  }\n\n  /**\n   * aspect id (string) that generated the artifact\n   */\n  get generatedBy(): string {\n    return this.def.generatedBy || this.task.aspectId;\n  }\n\n  /**\n   * archive all artifact files into a tar.\n   */\n  tar() {}\n\n  toObject(): ArtifactObject {\n    return {\n      name: this.name,\n      description: this.description,\n      generatedBy: this.generatedBy,\n      storage: this.storageResolver.name,\n      task: {\n        id: this.task.aspectId,\n        name: this.task.name,\n      },\n      files: this.files,\n    };\n  }\n}\n"]}