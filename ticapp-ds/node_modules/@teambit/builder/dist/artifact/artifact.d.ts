import type { ArtifactFiles, ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';
import type { BuildTask } from '../build-task';
import type { ArtifactStorageResolver } from '../storage';
import type { ArtifactDefinition } from './artifact-definition';
export declare class Artifact {
    /**
     * definition of the artifact.
     */
    readonly def: ArtifactDefinition;
    /**
     * storage resolver. can be used to replace where artifacts are stored.
     */
    readonly storageResolver: ArtifactStorageResolver;
    readonly files: ArtifactFiles;
    /**
     * join this with `this.paths` to get the absolute paths
     */
    readonly rootDir: string;
    /**
     * the declaring task.
     * todo: change this to taskDescriptor that has only the metadata of the task, so it could be
     * saved into the model.
     */
    readonly task: BuildTask;
    /**
     * timestamp of the artifact creation.
     */
    readonly timestamp: number;
    constructor(
    /**
     * definition of the artifact.
     */
    def: ArtifactDefinition, 
    /**
     * storage resolver. can be used to replace where artifacts are stored.
     */
    storageResolver: ArtifactStorageResolver, files: ArtifactFiles, 
    /**
     * join this with `this.paths` to get the absolute paths
     */
    rootDir: string, 
    /**
     * the declaring task.
     * todo: change this to taskDescriptor that has only the metadata of the task, so it could be
     * saved into the model.
     */
    task: BuildTask, 
    /**
     * timestamp of the artifact creation.
     */
    timestamp?: number);
    get storage(): ArtifactStorageResolver;
    /**
     * name of the artifact.
     */
    get name(): string;
    /**
     * description of the artifact.
     */
    get description(): string | undefined;
    /**
     * aspect id (string) that generated the artifact
     */
    get generatedBy(): string;
    /**
     * archive all artifact files into a tar.
     */
    tar(): void;
    toObject(): ArtifactObject;
}
