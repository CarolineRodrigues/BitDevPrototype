{"version":3,"sources":["artifacts.cmd.ts"],"names":["INDENT_TITLE","repeat","INDENT_SUB_TITLE","INDENT_FILES","ArtifactsCmd","constructor","builder","scope","report","userPattern","artifactsOpts","artifactExtractor","ArtifactExtractor","list","grouped","groupResultsByAspect","outputArtifacts","aspectId","artifactData","title","chalk","green","artifactDataStr","map","artifact","subTitle","white","taskName","files","f","dim","join","outputResult","result","idStr","cyan","id","toString","artifacts","Object","keys","footer","outDir"],"mappings":"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","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { ScopeMain } from '@teambit/scope';\nimport { BuilderMain } from '../builder.main.runtime';\nimport { ArtifactExtractor, ExtractorArtifactResult, ExtractorResultGrouped } from './artifact-extractor';\n\nconst INDENT_TITLE = ' '.repeat(2);\nconst INDENT_SUB_TITLE = ' '.repeat(4);\nconst INDENT_FILES = ' '.repeat(6);\n\nexport type ArtifactsOpts = {\n  aspect?: string;\n  task?: string;\n  files?: string;\n  outDir?: string;\n};\n\nexport class ArtifactsCmd implements Command {\n  name = 'artifacts <pattern...>';\n  shortDescription = 'EXPERIMENTAL. list and download components artifacts';\n  description = `EXPERIMENTAL. list and download components artifacts.\nartifacts are created on isolated capsules during tag or snap commands.\nexample of artifacts are dists files generated by a compiler, a JUnit.xml file generated by a tester\nand a package.tgz file generated by pkg aspect.\n`;\n  alias = '';\n  group = 'development';\n  options = [\n    ['', 'aspect <aspect-id>', 'show/download only artifacts generated by this aspect-id'],\n    ['', 'task <task-id>', 'show/download only artifacts generated by this task-id'],\n    [\n      '',\n      'files <glob>',\n      'show/download only artifacts matching the given files or the glob pattern (wrap glob patterns in quotes)',\n    ],\n    ['', 'out-dir <string>', 'download the files to the specified dir'],\n  ] as CommandOptions;\n\n  constructor(private builder: BuilderMain, private scope: ScopeMain) {}\n\n  async report([userPattern]: [string[]], artifactsOpts: ArtifactsOpts): Promise<string> {\n    const artifactExtractor = new ArtifactExtractor(this.scope, this.builder, userPattern, artifactsOpts);\n    const list = await artifactExtractor.list();\n    const grouped = artifactExtractor.groupResultsByAspect(list);\n    const outputArtifacts = (aspectId: string, artifactData: ExtractorArtifactResult[]) => {\n      const title = chalk.green(aspectId);\n      const artifactDataStr = artifactData\n        .map((artifact) => {\n          const subTitle = chalk.white(artifact.taskName);\n          const files = artifact.files.map((f) => INDENT_FILES + chalk.dim(f)).join('\\n');\n          return `${INDENT_SUB_TITLE}${subTitle}\\n${files}`;\n        })\n        .join('\\n');\n      return `${INDENT_TITLE}${title}\\n${artifactDataStr}`;\n    };\n    const outputResult = (result: ExtractorResultGrouped) => {\n      const idStr = chalk.cyan(result.id.toString());\n      const artifacts = Object.keys(result.artifacts)\n        .map((aspectId) => outputArtifacts(aspectId, result.artifacts[aspectId]))\n        .join('\\n\\n');\n      return `${idStr}\\n${artifacts}`;\n    };\n    const footer = artifactsOpts.outDir\n      ? chalk.green('\\n\\nThe above files were saved successfully to the file system')\n      : '';\n    return grouped.map(outputResult).join('\\n\\n') + footer;\n  }\n}\n"]}