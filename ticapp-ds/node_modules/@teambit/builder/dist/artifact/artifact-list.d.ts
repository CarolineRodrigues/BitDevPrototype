import { Component } from '@teambit/component';
import type { ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';
import type { Artifact } from './artifact';
export declare type ResolverMap = {
    [key: string]: Artifact[];
};
export declare class ArtifactList {
    readonly artifacts: Artifact[];
    constructor(artifacts: Artifact[]);
    /**
     * return an array of artifact objects.
     */
    toArray(): Artifact[];
    /**
     * group artifacts by the storage resolver.
     */
    groupByResolver(): ResolverMap;
    toObject(): ArtifactObject[];
    groupByTaskId(): {
        [key: string]: Artifact;
    };
    /**
     * store all artifacts using the configured storage resolvers.
     */
    store(component: Component): Promise<void[]>;
    private storeArtifact;
    /**
     * Send the entire artifact to the resolver then get back the result for all files from the resolver
     * @param storageResolver
     * @param artifact
     * @param component
     */
    private storeWholeArtifactByResolver;
    /**
     * Go over the artifact files and send them to the resolver one by one
     * @param storageResolver
     * @param artifact
     * @param component
     */
    private storeArtifactFilesByResolver;
}
