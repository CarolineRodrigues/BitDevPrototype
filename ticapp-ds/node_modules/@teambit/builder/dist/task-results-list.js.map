{"version":3,"sources":["task-results-list.ts"],"names":["TaskResultsList","constructor","tasksQueue","tasksResults","hasErrors","some","taskResult","componentsResults","find","c","errors","length","throwErrorsIfExist","errorMessage","getErrorMessageFormatted","BitError","tasksErrors","totalErrors","forEach","compsWithErrors","filter","title","chalk","bold","BuildTaskHelper","serializeId","task","env","id","errorsStr","map","compWithErrors","aggregateTaskErrorsToOneString","join","taskErrors","reduce","acc","current","summery","push","totalTasks","totalFailed","totalSucceed","totalSkipped","componentResult","rawErrors","e","toString","component"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { BitError } from '@teambit/bit-error';\nimport { BuildTaskHelper } from './build-task';\nimport { TasksQueue } from './tasks-queue';\nimport { TaskResults } from './build-pipe';\nimport { ComponentResult } from './types';\n\nexport class TaskResultsList {\n  constructor(\n    public tasksQueue: TasksQueue,\n    /**\n     * results of all tasks executed in the build pipeline.\n     */\n    public tasksResults: TaskResults[]\n  ) {}\n\n  hasErrors(): boolean {\n    return this.tasksResults.some((taskResult) => taskResult.componentsResults.find((c) => c.errors?.length));\n  }\n\n  throwErrorsIfExist() {\n    const errorMessage = this.getErrorMessageFormatted();\n    if (errorMessage) {\n      throw new BitError(errorMessage);\n    }\n  }\n\n  /**\n   * group errors from all tasks and show them nicely to the user\n   */\n  public getErrorMessageFormatted(): string | null {\n    const tasksErrors: string[] = [];\n    let totalErrors = 0;\n    this.tasksResults.forEach((taskResult) => {\n      const compsWithErrors = taskResult.componentsResults.filter((c) => c.errors?.length);\n      if (!compsWithErrors.length) return;\n      const title = chalk.bold(\n        `Failed task ${tasksErrors.length + 1}: \"${BuildTaskHelper.serializeId(taskResult.task)}\" of env \"${\n          taskResult.env.id\n        }\"\\n`\n      );\n      const errorsStr = compsWithErrors\n        .map((compWithErrors) => this.aggregateTaskErrorsToOneString(compWithErrors))\n        .join('\\n\\n');\n      const taskErrors = compsWithErrors.reduce((acc, current) => acc + (current.errors || []).length, 0);\n      const summery = `\\n\\nFound ${taskErrors} errors in ${compsWithErrors.length} components`;\n      totalErrors += taskErrors;\n      tasksErrors.push(title + errorsStr + summery);\n    });\n    if (!tasksErrors.length) return null;\n    const title = `\\nThe following errors were found while running the build pipeline\\n`;\n    const errorsStr = tasksErrors.join('\\n\\n');\n    const totalTasks = this.tasksQueue.length;\n    const totalFailed = tasksErrors.length;\n    const totalSucceed = this.tasksResults.length - totalFailed;\n    const totalSkipped = totalTasks - this.tasksResults.length;\n    const summery = `\\n\\n\\nâœ– Total ${totalTasks} tasks. ${totalSucceed} succeeded. ${totalFailed} failed. ${totalSkipped} skipped. Total errors: ${totalErrors}.`;\n    return title + errorsStr + summery;\n  }\n\n  private aggregateTaskErrorsToOneString(componentResult: ComponentResult) {\n    const rawErrors = componentResult.errors || [];\n    const errors = rawErrors.map((e) => (typeof e === 'string' ? e : e.toString()));\n    return `component: ${componentResult.component.id.toString()}\\n${errors.join('\\n')}`;\n  }\n}\n"]}