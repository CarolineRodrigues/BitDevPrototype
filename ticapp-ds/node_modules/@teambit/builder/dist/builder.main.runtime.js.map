{"version":3,"sources":["builder.main.runtime.ts"],"names":["BuilderMain","constructor","envs","workspace","buildService","tagService","snapService","scope","isolator","aspectLoader","buildTaskSlot","tagTaskSlot","snapTaskSlot","storeArtifacts","tasksResults","artifacts","flatMap","t","storeP","map","artifactMap","Promise","all","toArray","component","artifactList","store","err","ArtifactStorageError","pipelineResultsToBuilderData","components","buildPipelineResults","buildPipelineResultList","BuildPipelineResultList","ComponentMap","as","aspectsData","getDataOfComponent","id","pipelineReport","getPipelineReportOfComponent","artifactsData","getArtifactsDataOfComponent","pipeline","tagListener","options","isolateOptions","pipeResults","throwOnError","forceDeploy","disableTagAndSnapPipelines","isSnap","envsExecutionResults","build","emptyRootDir","skipTests","throwErrorsIfExist","allTasksResults","push","hasErrors","deployEnvsExecutionResults","runSnapTasks","runTagTasks","builderDataMap","validateBuilderDataMap","forEach","buildData","taskSerializedIds","BuildTaskHelper","serializeId","aspectId","taskId","name","taskName","duplications","length","Error","toString","join","getArtifactsVinylByExtension","aspectName","artifactsObjects","getArtifactsByExtension","vinyls","artifactObject","files","getVinylsAndImportIfMissing","legacyScope","getArtifactsVinylByExtensionAndName","getArtifactsByExtensionAndName","getArtifactsVinylByExtensionAndTaskName","getArtifactsByExtensionAndTaskName","getArtifactsByName","getArtifacts","filter","artifact","task","getDataByAspect","getBuilderData","data","find","aspectData","state","aspects","get","BuilderAspect","undefined","ArtifactFiles","fromObject","builderOptions","ids","c","network","isolateComponents","createEnvironment","graphCapsules","getAllComponents","builderServiceOptions","seedersOnly","originalSeeders","buildResult","runOnce","previousTasksResults","listTasks","compEnv","getEnv","buildTasks","getCurrentPipeTasks","tagTasks","snapTasks","envId","registerBuildTasks","tasks","register","registerDeployTasks","registerTagTasks","registerSnapTasks","provider","cli","loggerExt","graphql","generator","config","artifactFactory","ArtifactFactory","logger","createLogger","BuilderService","registerService","builder","registerComponentTemplate","buildTaskTemplate","func","bind","onTag","consumer","isLegacy","commands","BuilderCmd","ArtifactsCmd","unregister","Slot","withType","MainRuntime","CLIAspect","EnvsAspect","WorkspaceAspect","ScopeAspect","IsolatorAspect","LoggerAspect","AspectLoaderAspect","GraphqlAspect","GeneratorAspect","addRuntime"],"mappings":"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","sourcesContent":["import { flatten } from 'lodash';\nimport { ArtifactVinyl } from '@teambit/legacy/dist/consumer/component/sources/artifact';\nimport { AspectLoaderAspect, AspectLoaderMain } from '@teambit/aspect-loader';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component, ComponentMap } from '@teambit/component';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { ScopeAspect, ScopeMain, OnTagResults } from '@teambit/scope';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { IsolateComponentsOptions, IsolatorAspect, IsolatorMain } from '@teambit/isolator';\nimport { OnTagOpts } from '@teambit/legacy/dist/scope/scope';\nimport findDuplications from '@teambit/legacy/dist/utils/array/find-duplications';\nimport { ArtifactFiles, ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport { GeneratorAspect, GeneratorMain } from '@teambit/generator';\nimport { ArtifactList } from './artifact';\nimport { ArtifactFactory } from './artifact/artifact-factory'; // it gets undefined when importing it from './artifact'\nimport { BuilderAspect } from './builder.aspect';\nimport { builderSchema } from './builder.graphql';\nimport { BuilderService, BuilderServiceOptions } from './builder.service';\nimport { BuilderCmd } from './build.cmd';\nimport { BuildTask, BuildTaskHelper } from './build-task';\nimport { TaskResults } from './build-pipe';\nimport { TaskResultsList } from './task-results-list';\nimport { ArtifactStorageError } from './exceptions';\nimport { BuildPipelineResultList, AspectData, PipelineReport } from './build-pipeline-result-list';\nimport { Serializable } from './types';\nimport { ArtifactsCmd } from './artifact/artifacts.cmd';\nimport { buildTaskTemplate } from './templates/build-task';\n\nexport type TaskSlot = SlotRegistry<BuildTask[]>;\n\nexport type BuilderData = {\n  pipeline: PipelineReport[];\n  artifacts: ArtifactObject[] | undefined;\n  aspectsData: AspectData[];\n};\n\nexport class BuilderMain {\n  constructor(\n    private envs: EnvsMain,\n    private workspace: Workspace,\n    private buildService: BuilderService,\n    private tagService: BuilderService,\n    private snapService: BuilderService,\n    private scope: ScopeMain,\n    private isolator: IsolatorMain,\n    private aspectLoader: AspectLoaderMain,\n    private buildTaskSlot: TaskSlot,\n    private tagTaskSlot: TaskSlot,\n    private snapTaskSlot: TaskSlot\n  ) {}\n\n  private async storeArtifacts(tasksResults: TaskResults[]) {\n    const artifacts = tasksResults.flatMap((t) => (t.artifacts ? [t.artifacts] : []));\n    const storeP = artifacts.map(async (artifactMap: ComponentMap<ArtifactList>) => {\n      return Promise.all(\n        artifactMap.toArray().map(async ([component, artifactList]) => {\n          try {\n            return await artifactList.store(component);\n          } catch (err: any) {\n            throw new ArtifactStorageError(err, component);\n          }\n        })\n      );\n    });\n    await Promise.all(storeP);\n  }\n\n  private pipelineResultsToBuilderData(\n    components: Component[],\n    buildPipelineResults: TaskResults[]\n  ): ComponentMap<BuilderData> {\n    const buildPipelineResultList = new BuildPipelineResultList(buildPipelineResults, components);\n    return ComponentMap.as<BuilderData>(components, (component) => {\n      const aspectsData = buildPipelineResultList.getDataOfComponent(component.id);\n      const pipelineReport = buildPipelineResultList.getPipelineReportOfComponent(component.id);\n      const artifactsData = buildPipelineResultList.getArtifactsDataOfComponent(component.id);\n      return { pipeline: pipelineReport, artifacts: artifactsData, aspectsData };\n    });\n  }\n\n  async tagListener(\n    components: Component[],\n    options: OnTagOpts = {},\n    isolateOptions: IsolateComponentsOptions = {}\n  ): Promise<OnTagResults> {\n    const pipeResults: TaskResultsList[] = [];\n    const { throwOnError, forceDeploy, disableTagAndSnapPipelines, isSnap } = options;\n    const envsExecutionResults = await this.build(\n      components,\n      { emptyRootDir: true, ...isolateOptions },\n      { skipTests: options.skipTests }\n    );\n    if (throwOnError && !forceDeploy) envsExecutionResults.throwErrorsIfExist();\n    const allTasksResults = [...envsExecutionResults.tasksResults];\n    pipeResults.push(envsExecutionResults);\n    if (forceDeploy || (!disableTagAndSnapPipelines && !envsExecutionResults.hasErrors())) {\n      const deployEnvsExecutionResults = isSnap\n        ? await this.runSnapTasks(components, isolateOptions, envsExecutionResults.tasksResults)\n        : await this.runTagTasks(components, isolateOptions, envsExecutionResults.tasksResults);\n      if (throwOnError && !forceDeploy) deployEnvsExecutionResults.throwErrorsIfExist();\n      allTasksResults.push(...deployEnvsExecutionResults.tasksResults);\n      pipeResults.push(deployEnvsExecutionResults);\n    }\n    await this.storeArtifacts(allTasksResults);\n    const builderDataMap = this.pipelineResultsToBuilderData(components, allTasksResults);\n    this.validateBuilderDataMap(builderDataMap);\n    return { builderDataMap, pipeResults };\n  }\n\n  private validateBuilderDataMap(builderDataMap: ComponentMap<BuilderData>) {\n    builderDataMap.forEach((buildData: BuilderData, component) => {\n      const taskSerializedIds = buildData.pipeline.map((t) =>\n        BuildTaskHelper.serializeId({ aspectId: t.taskId, name: t.taskName })\n      );\n      const duplications = findDuplications(taskSerializedIds);\n      if (duplications.length) {\n        throw new Error(\n          `build-task-results validation has failed. the following task(s) of \"${component.id.toString()}\" are duplicated: ${duplications.join(\n            ', '\n          )}`\n        );\n      }\n    });\n  }\n\n  // TODO: merge with getArtifactsVinylByExtensionAndName by getting aspect name and name as object with optional props\n  async getArtifactsVinylByExtension(component: Component, aspectName: string): Promise<ArtifactVinyl[]> {\n    const artifactsObjects = this.getArtifactsByExtension(component, aspectName);\n    const vinyls = await Promise.all(\n      (artifactsObjects || []).map((artifactObject) =>\n        artifactObject.files.getVinylsAndImportIfMissing(component.id.scope as string, this.scope.legacyScope)\n      )\n    );\n    return flatten(vinyls);\n  }\n\n  async getArtifactsVinylByExtensionAndName(\n    component: Component,\n    aspectName: string,\n    name: string\n  ): Promise<ArtifactVinyl[]> {\n    const artifactsObjects = this.getArtifactsByExtensionAndName(component, aspectName, name);\n    const vinyls = await Promise.all(\n      (artifactsObjects || []).map((artifactObject) =>\n        artifactObject.files.getVinylsAndImportIfMissing(component.id.scope as string, this.scope.legacyScope)\n      )\n    );\n    return flatten(vinyls);\n  }\n\n  async getArtifactsVinylByExtensionAndTaskName(\n    component: Component,\n    aspectName: string,\n    taskName: string\n  ): Promise<ArtifactVinyl[]> {\n    const artifactsObjects = this.getArtifactsByExtensionAndTaskName(component, aspectName, taskName);\n    const vinyls = await Promise.all(\n      (artifactsObjects || []).map((artifactObject) =>\n        artifactObject.files.getVinylsAndImportIfMissing(component.id.scope as string, this.scope.legacyScope)\n      )\n    );\n    return flatten(vinyls);\n  }\n\n  getArtifactsByName(component: Component, name: string): ArtifactObject[] | undefined {\n    const artifacts = this.getArtifacts(component);\n    return artifacts?.filter((artifact) => artifact.name === name);\n  }\n\n  getArtifactsByExtension(component: Component, aspectName: string): ArtifactObject[] | undefined {\n    const artifacts = this.getArtifacts(component);\n    return artifacts?.filter((artifact) => artifact.task.id === aspectName);\n  }\n\n  getArtifactsByExtensionAndName(component: Component, aspectName: string, name: string): ArtifactObject[] | undefined {\n    const artifacts = this.getArtifacts(component);\n    return artifacts?.filter((artifact) => artifact.task.id === aspectName && artifact.name === name);\n  }\n\n  getArtifactsByExtensionAndTaskName(\n    component: Component,\n    aspectName: string,\n    taskName: string\n  ): ArtifactObject[] | undefined {\n    const artifacts = this.getArtifacts(component);\n    return artifacts?.filter((artifact) => artifact.task.id === aspectName && artifact.task.name === taskName);\n  }\n\n  getDataByAspect(component: Component, aspectName: string): Serializable | undefined {\n    const aspectsData = this.getBuilderData(component)?.aspectsData;\n    const data = aspectsData?.find((aspectData) => aspectData.aspectId === aspectName);\n    return data?.data;\n  }\n\n  getArtifacts(component: Component): ArtifactObject[] | undefined {\n    return this.getBuilderData(component)?.artifacts;\n  }\n\n  getBuilderData(component: Component): BuilderData | undefined {\n    const data = component.state.aspects.get(BuilderAspect.id)?.data as BuilderData | undefined;\n    if (!data) return undefined;\n    data.artifacts?.forEach((artifact) => {\n      if (!(artifact.files instanceof ArtifactFiles)) {\n        artifact.files = ArtifactFiles.fromObject(artifact.files);\n      }\n    });\n    return data;\n  }\n\n  /**\n   * build given components for release.\n   * for each one of the envs it runs a series of tasks.\n   * in case of an error in a task, it stops the execution of that env and continue to the next\n   * env. at the end, the results contain the data and errors per env.\n   */\n  async build(\n    components: Component[],\n    isolateOptions?: IsolateComponentsOptions,\n    builderOptions?: BuilderServiceOptions\n  ): Promise<TaskResultsList> {\n    const ids = components.map((c) => c.id);\n    const network = await this.isolator.isolateComponents(ids, isolateOptions);\n    const envs = await this.envs.createEnvironment(network.graphCapsules.getAllComponents());\n    const builderServiceOptions = {\n      seedersOnly: isolateOptions?.seedersOnly,\n      originalSeeders: ids,\n      ...(builderOptions || {}),\n    };\n    const buildResult = await envs.runOnce(this.buildService, builderServiceOptions);\n    return buildResult;\n  }\n\n  async runTagTasks(\n    components: Component[],\n    isolateOptions?: IsolateComponentsOptions,\n    previousTasksResults?: TaskResults[]\n  ): Promise<TaskResultsList> {\n    const envs = await this.envs.createEnvironment(components);\n    const buildResult = await envs.runOnce(this.tagService, {\n      seedersOnly: isolateOptions?.seedersOnly,\n      previousTasksResults,\n    });\n\n    return buildResult;\n  }\n\n  async runSnapTasks(\n    components: Component[],\n    isolateOptions?: IsolateComponentsOptions,\n    previousTasksResults?: TaskResults[]\n  ): Promise<TaskResultsList> {\n    const envs = await this.envs.createEnvironment(components);\n    const buildResult = await envs.runOnce(this.snapService, {\n      seedersOnly: isolateOptions?.seedersOnly,\n      previousTasksResults,\n    });\n\n    return buildResult;\n  }\n\n  listTasks(component: Component) {\n    const compEnv = this.envs.getEnv(component);\n    const buildTasks = this.buildService.getCurrentPipeTasks(compEnv);\n    const tagTasks = this.tagService.getCurrentPipeTasks(compEnv);\n    const snapTasks = this.snapService.getCurrentPipeTasks(compEnv);\n    return { id: component.id, envId: compEnv.id, buildTasks, tagTasks, snapTasks };\n  }\n\n  /**\n   * register a build task to apply on all component build pipelines.\n   * build happens on `bit build` and as part of `bit tag --persist`.\n   */\n  registerBuildTasks(tasks: BuildTask[]) {\n    this.buildTaskSlot.register(tasks);\n    return this;\n  }\n\n  /**\n   * @deprecated use registerTagTasks or registerSnapTasks\n   */\n  registerDeployTasks(tasks: BuildTask[]) {\n    this.tagTaskSlot.register(tasks);\n    return this;\n  }\n\n  /**\n   * tag tasks that don't get executed on `bit build`, only on `bit tag'.\n   * this pipeline is running once the build-pipeline has completed.\n   */\n  registerTagTasks(tasks: BuildTask[]) {\n    this.tagTaskSlot.register(tasks);\n    return this;\n  }\n\n  /**\n   * tag tasks that don't get executed on `bit build`, only on `bit snap'.\n   * this pipeline is running once the build-pipeline has completed.\n   */\n  registerSnapTasks(tasks: BuildTask[]) {\n    this.snapTaskSlot.register(tasks);\n    return this;\n  }\n\n  static slots = [Slot.withType<BuildTask>(), Slot.withType<BuildTask>(), Slot.withType<BuildTask>()];\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    CLIAspect,\n    EnvsAspect,\n    WorkspaceAspect,\n    ScopeAspect,\n    IsolatorAspect,\n    LoggerAspect,\n    AspectLoaderAspect,\n    GraphqlAspect,\n    GeneratorAspect,\n  ];\n\n  static async provider(\n    [cli, envs, workspace, scope, isolator, loggerExt, aspectLoader, graphql, generator]: [\n      CLIMain,\n      EnvsMain,\n      Workspace,\n      ScopeMain,\n      IsolatorMain,\n      LoggerMain,\n      AspectLoaderMain,\n      GraphqlMain,\n      GeneratorMain\n    ],\n    config,\n    [buildTaskSlot, tagTaskSlot, snapTaskSlot]: [TaskSlot, TaskSlot, TaskSlot]\n  ) {\n    const artifactFactory = new ArtifactFactory();\n    const logger = loggerExt.createLogger(BuilderAspect.id);\n    const buildService = new BuilderService(\n      isolator,\n      logger,\n      buildTaskSlot,\n      'getBuildPipe',\n      'build',\n      artifactFactory,\n      scope\n    );\n    envs.registerService(buildService);\n    const tagService = new BuilderService(isolator, logger, tagTaskSlot, 'getTagPipe', 'tag', artifactFactory, scope);\n    const snapService = new BuilderService(\n      isolator,\n      logger,\n      snapTaskSlot,\n      'getSnapPipe',\n      'snap',\n      artifactFactory,\n      scope\n    );\n    const builder = new BuilderMain(\n      envs,\n      workspace,\n      buildService,\n      tagService,\n      snapService,\n      scope,\n      isolator,\n      aspectLoader,\n      buildTaskSlot,\n      tagTaskSlot,\n      snapTaskSlot\n    );\n\n    graphql.register(builderSchema(builder));\n    generator.registerComponentTemplate([buildTaskTemplate]);\n    const func = builder.tagListener.bind(builder);\n    if (scope) scope.onTag(func);\n    if (workspace && !workspace.consumer.isLegacy) {\n      const commands = [new BuilderCmd(builder, workspace, logger), new ArtifactsCmd(builder, scope)];\n      cli.unregister('build');\n      cli.register(...commands);\n    }\n    return builder;\n  }\n}\n\nBuilderAspect.addRuntime(BuilderMain);\n"]}