{"version":3,"sources":["builder.service.tsx"],"names":["pipeNames","getBuildPipe","getTagPipe","getSnapPipe","BuilderService","constructor","isolator","logger","taskSlot","pipeNameOnEnv","displayPipeName","artifactFactory","scope","runOnce","envsExecutionContext","options","envs","map","executionContext","envDefinition","tasksQueue","tasks","skipTests","validate","info","toString","title","length","longProcessLogger","createLongProcessLogger","consoleTitle","envsBuildContext","Promise","all","componentIds","components","component","id","originalSeeders","originalSeedersOfThisEnv","filter","compId","find","seeder","isEqual","capsuleNetwork","isolateComponents","getExistingAsIs","seedersOnly","_originalSeeders","console","seedersCapsules","graphCapsules","buildContext","Object","assign","previousTasksResults","dev","buildPipe","BuildPipe","from","buildResults","execute","end","hasErrors","consoleFailure","consoleSuccess","render","env","pipes","getDescriptor","BuilderAspect","pipeName","renderOnePipe","task","index","keys","pipeFuncName","getTasksNamesByPipeFunc","BuildTaskHelper","serializeId","getCurrentPipeTasks"],"mappings":"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","sourcesContent":["import { EnvDefinition, EnvService, ExecutionContext } from '@teambit/envs';\nimport React from 'react';\nimport { ScopeMain } from '@teambit/scope';\nimport { Text, Newline } from 'ink';\nimport { Logger } from '@teambit/logger';\nimport { IsolatorMain } from '@teambit/isolator';\nimport { Component, ComponentID } from '@teambit/component';\nimport { BuildPipe, TaskResults } from './build-pipe';\nimport { TaskResultsList } from './task-results-list';\nimport { TaskSlot } from './builder.main.runtime';\nimport { BuildContext, BuildTaskHelper } from './build-task';\nimport { ArtifactFactory } from './artifact';\nimport { calculatePipelineOrder } from './build-pipeline-order';\nimport { BuilderAspect } from './builder.aspect';\n\nexport type BuildServiceResults = {\n  id: string;\n  buildResults: TaskResultsList;\n  components: Component[];\n  errors?: [];\n};\n\nexport type BuilderServiceOptions = {\n  seedersOnly?: boolean;\n  originalSeeders?: ComponentID[];\n  tasks?: string[];\n  skipTests?: boolean;\n  previousTasksResults?: TaskResults[];\n  dev?: boolean;\n};\n\nexport type EnvsBuildContext = { [envId: string]: BuildContext };\n\nconst pipeNames = {\n  getBuildPipe: 'build',\n  getTagPipe: 'tag',\n  getSnapPipe: 'snap',\n};\n\ntype PipeName = 'build' | 'tag' | 'snap';\n\nexport type BuilderDescriptor = Array<{ pipeName: PipeName; tasks: string[] }>;\n\ntype PipeFunctionNames = keyof typeof pipeNames;\nexport class BuilderService implements EnvService<BuildServiceResults, BuilderDescriptor> {\n  name = 'builder';\n\n  constructor(\n    /**\n     * isolator extension.\n     */\n    private isolator: IsolatorMain,\n\n    /**\n     * logger extension.\n     */\n    private logger: Logger,\n\n    /**\n     * task slot (e.g tasks registered by other extensions.).\n     */\n    private taskSlot: TaskSlot,\n\n    /**\n     * a method with such name should be implemented on the env in order to run the pipe tasks.\n     */\n    private pipeNameOnEnv: PipeFunctionNames,\n\n    /**\n     * pipe name to display on the console during the execution\n     */\n    private displayPipeName: string,\n    private artifactFactory: ArtifactFactory,\n    private scope: ScopeMain\n  ) {}\n\n  /**\n   * runs all tasks for all envs\n   */\n  async runOnce(envsExecutionContext: ExecutionContext[], options: BuilderServiceOptions): Promise<TaskResultsList> {\n    const envs = envsExecutionContext.map((executionContext) => executionContext.envDefinition);\n    const tasksQueue = calculatePipelineOrder(\n      this.taskSlot,\n      envs,\n      this.pipeNameOnEnv,\n      options.tasks,\n      options.skipTests\n    );\n    tasksQueue.validate();\n    this.logger.info(`going to run tasks in the following order:\\n${tasksQueue.toString()}`);\n    const title = `running ${this.displayPipeName} pipe for ${envs.length} environments, total ${tasksQueue.length} tasks`;\n    const longProcessLogger = this.logger.createLongProcessLogger(title);\n    this.logger.consoleTitle(title);\n    const envsBuildContext: EnvsBuildContext = {};\n    await Promise.all(\n      envsExecutionContext.map(async (executionContext) => {\n        const componentIds = executionContext.components.map((component) => component.id);\n        const { originalSeeders } = options;\n        const originalSeedersOfThisEnv = componentIds.filter((compId) =>\n          originalSeeders ? originalSeeders.find((seeder) => compId.isEqual(seeder)) : true\n        );\n        const capsuleNetwork = await this.isolator.isolateComponents(componentIds, {\n          getExistingAsIs: true,\n          seedersOnly: options.seedersOnly,\n        });\n        capsuleNetwork._originalSeeders = originalSeedersOfThisEnv;\n        this.logger.console(\n          `generated graph for env \"${executionContext.id}\", originalSeedersOfThisEnv: ${originalSeedersOfThisEnv.length}, graphOfThisEnv: ${capsuleNetwork.seedersCapsules.length}, graph total: ${capsuleNetwork.graphCapsules.length}`\n        );\n        const buildContext = Object.assign(executionContext, {\n          capsuleNetwork,\n          previousTasksResults: [],\n          dev: options.dev,\n        });\n        envsBuildContext[executionContext.id] = buildContext;\n      })\n    );\n    const buildPipe = BuildPipe.from(\n      tasksQueue,\n      envsBuildContext,\n      this.logger,\n      this.artifactFactory,\n      options.previousTasksResults\n    );\n    const buildResults = await buildPipe.execute();\n    longProcessLogger.end();\n    buildResults.hasErrors() ? this.logger.consoleFailure() : this.logger.consoleSuccess();\n\n    return buildResults;\n  }\n\n  render(env: EnvDefinition) {\n    const pipes = this.getDescriptor(env);\n\n    return (\n      <Text key={BuilderAspect.id}>{pipes.map(({ pipeName, tasks }) => this.renderOnePipe(pipeName, tasks))}</Text>\n    );\n  }\n\n  private renderOnePipe(pipeName, tasks) {\n    if (!tasks || !tasks.length) return null;\n    return (\n      <Text key={pipeName}>\n        <Text underline color=\"green\">\n          {pipeName} pipe\n        </Text>\n        <Newline />\n        <Text color=\"cyan\">total {tasks.length} tasks are configured to be executed in the following order</Text>\n        <Newline />\n        {tasks.map((task, index) => (\n          <Text key={index}>\n            <Text>\n              {index + 1}. {task}\n            </Text>\n            <Newline />\n          </Text>\n        ))}\n        <Newline />\n      </Text>\n    );\n  }\n\n  getDescriptor(env: EnvDefinition) {\n    // @ts-ignore\n    const tasks = Object.keys(pipeNames).map((pipeFuncName: PipeFunctionNames) => {\n      const tasksQueue = this.getTasksNamesByPipeFunc(env, pipeFuncName);\n      return { pipeName: pipeNames[pipeFuncName], tasks: tasksQueue };\n    });\n    return tasks as BuilderDescriptor;\n  }\n\n  private getTasksNamesByPipeFunc(env: EnvDefinition, pipeFuncName: PipeFunctionNames): string[] {\n    const tasksQueue = calculatePipelineOrder(this.taskSlot, [env], pipeFuncName).map(({ task }) =>\n      BuildTaskHelper.serializeId(task)\n    );\n    return tasksQueue;\n  }\n\n  getCurrentPipeTasks(env: EnvDefinition) {\n    return this.getTasksNamesByPipeFunc(env, this.pipeNameOnEnv);\n  }\n}\n"]}