{"version":3,"sources":["build-pipe.ts"],"names":["BuildPipe","constructor","tasksQueue","envsBuildContext","logger","artifactFactory","previousTaskResults","allTasksResults","taskResults","execute","addSignalListener","executePreBuild","longProcessLogger","createLongProcessLogger","length","task","env","executeTask","end","tasksResultsList","TaskResultsList","executePostBuild","process","on","exit","setStatusLine","preBuild","getBuildContext","id","consoleSuccess","taskId","BuildTaskHelper","serializeId","taskName","description","logProgress","updateFailedDependencyTask","shouldSkipTask","startTask","hrtime","taskStartTime","Date","now","buildContext","buildTaskResult","endTime","compsWithErrors","componentsResults","filter","c","errors","artifacts","consoleFailure","failedTasks","push","duration","defs","generate","startTime","tasksResults","postBuild","failedDependencyTask","dependencies","forEach","dependency","aspectId","name","deserializeIdAllowEmptyName","find","failedTask","envId","failedTaskId","consoleWarning","Error","previousTasksResults","from"],"mappings":"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","sourcesContent":["import { EnvDefinition } from '@teambit/envs';\nimport { ComponentMap } from '@teambit/component';\nimport { Logger, LongProcessLogger } from '@teambit/logger';\nimport mapSeries from 'p-map-series';\nimport prettyTime from 'pretty-time';\nimport { ArtifactFactory, ArtifactList } from './artifact';\nimport { BuildTask, BuildTaskHelper } from './build-task';\nimport { ComponentResult } from './types';\nimport { TasksQueue } from './tasks-queue';\nimport { EnvsBuildContext } from './builder.service';\nimport { TaskResultsList } from './task-results-list';\n\nexport type TaskResults = {\n  /**\n   * task itself. useful for getting its id/description later on.\n   */\n  task: BuildTask;\n\n  /**\n   * environment were the task was running\n   */\n  env: EnvDefinition;\n\n  /**\n   * component build results.\n   */\n  componentsResults: ComponentResult[];\n\n  /**\n   * artifacts generated by the build pipeline.\n   * in case the task finished with errors, this prop is undefined.\n   */\n  artifacts: ComponentMap<ArtifactList> | undefined;\n\n  /**\n   * timestamp of start initiation.\n   */\n  startTime: number;\n\n  /**\n   * timestamp of task completion.\n   */\n  endTime: number;\n};\n\nexport class BuildPipe {\n  private failedTasks: BuildTask[] = [];\n  private failedDependencyTask: BuildTask | undefined;\n  private longProcessLogger: LongProcessLogger;\n  private taskResults: TaskResults[] = [];\n  constructor(\n    /**\n     * array of services to apply on the components.\n     */\n    readonly tasksQueue: TasksQueue,\n    readonly envsBuildContext: EnvsBuildContext,\n    readonly logger: Logger,\n    readonly artifactFactory: ArtifactFactory,\n    private previousTaskResults?: TaskResults[]\n  ) {}\n\n  get allTasksResults(): TaskResults[] {\n    return [...(this.previousTaskResults || []), ...(this.taskResults || [])];\n  }\n\n  /**\n   * execute a pipeline of build tasks.\n   */\n  async execute(): Promise<TaskResultsList> {\n    this.addSignalListener();\n    await this.executePreBuild();\n    this.longProcessLogger = this.logger.createLongProcessLogger('running tasks', this.tasksQueue.length);\n    await mapSeries(this.tasksQueue, async ({ task, env }) => this.executeTask(task, env));\n    this.longProcessLogger.end();\n    const tasksResultsList = new TaskResultsList(this.tasksQueue, this.taskResults);\n    await this.executePostBuild(tasksResultsList);\n\n    return tasksResultsList;\n  }\n\n  /**\n   * for some reason, some tasks (such as typescript compilation) ignore ctrl+C. this fixes it.\n   */\n  private addSignalListener() {\n    process.on('SIGTERM', () => {\n      process.exit();\n    });\n\n    process.on('SIGINT', () => {\n      process.exit();\n    });\n  }\n\n  private async executePreBuild() {\n    this.logger.setStatusLine('executing pre-build for all tasks');\n    await mapSeries(this.tasksQueue, async ({ task, env }) => {\n      if (!task.preBuild) return;\n      await task.preBuild(this.getBuildContext(env.id));\n    });\n    this.logger.consoleSuccess();\n  }\n\n  private async executeTask(task: BuildTask, env: EnvDefinition): Promise<void> {\n    const taskId = BuildTaskHelper.serializeId(task);\n    const taskName = `${taskId}${task.description ? ` (${task.description})` : ''}`;\n    this.longProcessLogger.logProgress(`env \"${env.id}\", task \"${taskName}\"`);\n    this.updateFailedDependencyTask(task);\n    if (this.shouldSkipTask(taskId, env.id)) {\n      return;\n    }\n    const startTask = process.hrtime();\n    const taskStartTime = Date.now();\n    const buildContext = this.getBuildContext(env.id);\n    const buildTaskResult = await task.execute(buildContext);\n    const endTime = Date.now();\n    const compsWithErrors = buildTaskResult.componentsResults.filter((c) => c.errors?.length);\n    let artifacts;\n    if (compsWithErrors.length) {\n      this.logger.consoleFailure(`env: ${env.id}, task \"${taskId}\" has failed`);\n      this.failedTasks.push(task);\n    } else {\n      const duration = prettyTime(process.hrtime(startTask));\n      this.logger.consoleSuccess(`env \"${env.id}\", task \"${taskName}\" has completed successfully in ${duration}`);\n      const defs = buildTaskResult.artifacts || [];\n      artifacts = this.artifactFactory.generate(buildContext, defs, task);\n    }\n\n    const taskResults: TaskResults = {\n      task,\n      env,\n      componentsResults: buildTaskResult.componentsResults,\n      artifacts,\n      startTime: taskStartTime,\n      endTime,\n    };\n\n    this.taskResults.push(taskResults);\n  }\n\n  private async executePostBuild(tasksResults: TaskResultsList) {\n    this.logger.setStatusLine('executing post-build for all tasks');\n    await mapSeries(this.tasksQueue, async ({ task, env }) => {\n      if (!task.postBuild) return;\n      await task.postBuild(this.getBuildContext(env.id), tasksResults);\n    });\n    this.logger.consoleSuccess();\n  }\n\n  private updateFailedDependencyTask(task: BuildTask) {\n    if (!this.failedDependencyTask && this.failedTasks.length && task.dependencies) {\n      task.dependencies.forEach((dependency) => {\n        const { aspectId, name } = BuildTaskHelper.deserializeIdAllowEmptyName(dependency);\n        this.failedDependencyTask = this.failedTasks.find((failedTask) => {\n          if (name && name !== failedTask.name) return false;\n          return aspectId === failedTask.aspectId;\n        });\n      });\n    }\n  }\n\n  private shouldSkipTask(taskId: string, envId: string): boolean {\n    if (!this.failedDependencyTask) return false;\n    const failedTaskId = BuildTaskHelper.serializeId(this.failedDependencyTask);\n    this.logger.consoleWarning(`env: ${envId}, task \"${taskId}\" has skipped due to \"${failedTaskId}\" failure`);\n    return true;\n  }\n\n  private getBuildContext(envId: string) {\n    const buildContext = this.envsBuildContext[envId];\n    if (!buildContext) throw new Error(`unable to find buildContext for ${envId}`);\n    buildContext.previousTasksResults = this.allTasksResults;\n    return buildContext;\n  }\n\n  /**\n   * create a build pipe from an array of tasks.\n   */\n  static from(\n    tasksQueue: TasksQueue,\n    envsBuildContext: EnvsBuildContext,\n    logger: Logger,\n    artifactFactory: ArtifactFactory,\n    previousTaskResults?: TaskResults[]\n  ) {\n    return new BuildPipe(tasksQueue, envsBuildContext, logger, artifactFactory, previousTaskResults);\n  }\n}\n"]}