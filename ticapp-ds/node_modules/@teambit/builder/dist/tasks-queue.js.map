{"version":3,"sources":["tasks-queue.ts"],"names":["TasksQueue","Array","toString","map","env","task","id","BuildTaskHelper","serializeId","join","validate","forEach","validateTaskName","validateDuplications","name","InvalidTask","aspectId","regexWord","isValid","test","uniqueTasks","uniqTask","filter","u","length"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIO,MAAMA,UAAN,SAAyBC,KAAzB,CAAwC;AAC7CC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKC,GAAL,CAAS,CAAC;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,KAAoB,OAAMD,GAAG,CAACE,EAAG,UAASC,6BAAgBC,WAAhB,CAA4BH,IAA5B,CAAkC,EAArF,EAAwFI,IAAxF,CAA6F,IAA7F,CAAP;AACD;AACD;AACF;AACA;;;AACEC,EAAAA,QAAQ,GAAG;AACT,SAAKC,OAAL,CAAa,CAAC;AAAEN,MAAAA;AAAF,KAAD,KAAc;AACzB,WAAKO,gBAAL,CAAsBP,IAAtB;AACD,KAFD;AAGA,SAAKQ,oBAAL;AACD;;AAEOD,EAAAA,gBAAgB,CAACP,IAAD,EAAkB;AACxC,QAAI,CAACA,IAAI,CAACS,IAAV,EAAgB,MAAM,KAAIC,yBAAJ,EAAgBV,IAAI,CAACW,QAArB,EAA+B,iBAA/B,CAAN;AAChB,UAAMC,SAAS,GAAG,OAAlB,CAFwC,CAEb;;AAC3B,UAAMC,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAed,IAAI,CAACS,IAApB,CAAhB;AACA,QAAI,CAACI,OAAL,EACE,MAAM,KAAIH,yBAAJ,EAAgBV,IAAI,CAACW,QAArB,EAAgC,SAAQX,IAAI,CAACS,IAAK,wDAAlD,CAAN;AACH;;AAEOD,EAAAA,oBAAoB,GAAG;AAC7B,UAAMO,WAAW,GAAG,KAAKjB,GAAL,CAAS,CAAC;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,KAAoB,GAAED,GAAG,CAACE,EAAG,IAAGD,IAAI,CAACW,QAAS,IAAGX,IAAI,CAACS,IAAK,EAApE,CAApB;AACAM,IAAAA,WAAW,CAACT,OAAZ,CAAqBU,QAAD,IAAc;AAChC,UAAID,WAAW,CAACE,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,KAAKF,QAAhC,EAA0CG,MAA1C,GAAmD,CAAvD,EAA0D;AACxD,cAAM,KAAIT,yBAAJ,EACJM,QADI,EAEJ,qFAFI,CAAN;AAID;AACF,KAPD;AAQD;;AAhC4C","sourcesContent":["import { EnvDefinition } from '@teambit/envs';\nimport { BuildTask, BuildTaskHelper } from './build-task';\nimport { InvalidTask } from './exceptions';\n\ntype EnvTask = { env: EnvDefinition; task: BuildTask };\n\nexport class TasksQueue extends Array<EnvTask> {\n  toString() {\n    return this.map(({ env, task }) => `env ${env.id}, task ${BuildTaskHelper.serializeId(task)}`).join('\\n');\n  }\n  /**\n   * make sure tasks names are valid and there are no duplications\n   */\n  validate() {\n    this.forEach(({ task }) => {\n      this.validateTaskName(task);\n    });\n    this.validateDuplications();\n  }\n\n  private validateTaskName(task: BuildTask) {\n    if (!task.name) throw new InvalidTask(task.aspectId, 'name is missing');\n    const regexWord = /^\\w+$/; // match any word: a-zA-Z0-9 and underscore.\n    const isValid = regexWord.test(task.name);\n    if (!isValid)\n      throw new InvalidTask(task.aspectId, `name \"${task.name}\" is invalid, only alphanumeric characters are allowed`);\n  }\n\n  private validateDuplications() {\n    const uniqueTasks = this.map(({ env, task }) => `${env.id} ${task.aspectId}:${task.name}`);\n    uniqueTasks.forEach((uniqTask) => {\n      if (uniqueTasks.filter((u) => u === uniqTask).length > 1) {\n        throw new InvalidTask(\n          uniqTask,\n          'there are two or more tasks with the same name and aspectId in the same environment'\n        );\n      }\n    });\n  }\n}\n"]}