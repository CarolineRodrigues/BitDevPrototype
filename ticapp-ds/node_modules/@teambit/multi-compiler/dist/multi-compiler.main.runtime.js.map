{"version":3,"sources":["multi-compiler.main.runtime.ts"],"names":["MultiCompilerMain","createCompiler","compilers","options","MultiCompiler","MultiCompilerAspect","id","provider","MainRuntime","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,iBAAN,CAAwB;AAC7B;AACF;AACA;AACA;AACEC,EAAAA,cAAc,CAACC,SAAD,EAAwBC,OAAiC,GAAG,EAA5D,EAAgE;AAC5E,WAAO,KAAIC,+BAAJ,EAAkBC,qCAAoBC,EAAtC,EAA0CJ,SAA1C,EAAqDC,OAArD,EAA8D,EAA9D,CAAP;AACD;;AAIoB,eAARI,QAAQ,GAAG;AACtB,WAAO,IAAIP,iBAAJ,EAAP;AACD;;AAb4B;;;gCAAlBA,iB,aASMQ,kB;;AAOnBH,qCAAoBI,UAApB,CAA+BT,iBAA/B","sourcesContent":["import { MainRuntime } from '@teambit/cli';\nimport { Compiler, CompilerOptions } from '@teambit/compiler';\nimport { MultiCompilerAspect } from './multi-compiler.aspect';\nimport { MultiCompiler } from './multi-compiler.compiler';\n\nexport class MultiCompilerMain {\n  /**\n   * create a multi-compiler `Compiler` instance.\n   * @param compilers list of compilers to include.\n   */\n  createCompiler(compilers: Compiler[], options: Partial<CompilerOptions> = {}) {\n    return new MultiCompiler(MultiCompilerAspect.id, compilers, options, {});\n  }\n\n  static runtime = MainRuntime;\n\n  static async provider() {\n    return new MultiCompilerMain();\n  }\n}\n\nMultiCompilerAspect.addRuntime(MultiCompilerMain);\n"]}