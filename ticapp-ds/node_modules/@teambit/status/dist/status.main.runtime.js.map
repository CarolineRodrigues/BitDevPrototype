{"version":3,"sources":["status.main.runtime.ts"],"names":["StatusMain","constructor","workspace","issues","status","ConsumerNotFound","loader","start","BEFORE_STATUS","consumer","laneObj","getCurrentLaneObject","componentsList","ComponentsList","newComponents","listNewComponents","modifiedComponent","listModifiedComponents","stagedComponents","listExportPendingComponents","autoTagPendingComponents","listAutoTagPendingComponents","autoTagPendingComponentsIds","map","component","id","allInvalidComponents","listInvalidComponents","importPendingComponents","filter","c","error","ComponentsPendingImport","i","invalidComponents","outdatedComponents","listOutdatedComponents","mergePendingComponents","listMergePendingComponents","newAndModified","concat","issuesToIgnore","getIssuesToIgnore","componentsWithIssues","forEach","issueToIgnore","delete","IssuesClasses","isLegacy","RelativeComponentsAuthored","isEmpty","componentsDuringMergeState","listDuringMergeStateComponents","softTaggedComponents","listSoftTaggedComponents","snappedComponents","listSnappedComponentsOnMain","toBitId","currentLane","getCurrentLaneId","laneName","isDefault","name","Analytics","setExtraData","length","onDestroy","sortComponentsByName","componentsWithIndividualFiles","listComponentsWithIndividualFiles","componentsWithTrackDirs","listComponentsWithTrackDir","provider","cli","statusMain","register","StatusCmd","CLIAspect","WorkspaceAspect","IssuesAspect","MainRuntime","StatusAspect","addRuntime"],"mappings":"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","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { IssuesClasses } from '@teambit/component-issues';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { Analytics } from '@teambit/legacy/dist/analytics/analytics';\nimport { BitId, BitIds } from '@teambit/legacy/dist/bit-id';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport { BEFORE_STATUS } from '@teambit/legacy/dist/cli/loader/loader-messages';\nimport Component from '@teambit/legacy/dist/consumer/component';\nimport ComponentsPendingImport from '@teambit/legacy/dist/consumer/component-ops/exceptions/components-pending-import';\nimport ComponentsList, { DivergedComponent } from '@teambit/legacy/dist/consumer/component/components-list';\nimport { InvalidComponent } from '@teambit/legacy/dist/consumer/component/consumer-component';\nimport { ModelComponent } from '@teambit/legacy/dist/scope/models';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport IssuesAspect, { IssuesMain } from '@teambit/issues';\nimport { StatusCmd } from './status-cmd';\nimport { StatusAspect } from './status.aspect';\n\nexport type StatusResult = {\n  newComponents: Component[];\n  modifiedComponent: Component[];\n  stagedComponents: ModelComponent[];\n  componentsWithIssues: Component[];\n  importPendingComponents: BitId[];\n  autoTagPendingComponents: BitId[];\n  invalidComponents: InvalidComponent[];\n  outdatedComponents: Component[];\n  mergePendingComponents: DivergedComponent[];\n  componentsDuringMergeState: BitIds;\n  componentsWithIndividualFiles: Component[];\n  componentsWithTrackDirs: Component[];\n  softTaggedComponents: BitId[];\n  snappedComponents: BitId[];\n  laneName: string | null; // null if default\n};\n\nexport class StatusMain {\n  constructor(private workspace: Workspace, private issues: IssuesMain) {}\n\n  async status(): Promise<StatusResult> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    loader.start(BEFORE_STATUS);\n    const consumer = this.workspace.consumer;\n    const laneObj = await consumer.getCurrentLaneObject();\n    const componentsList = new ComponentsList(consumer);\n    const newComponents: Component[] = (await componentsList.listNewComponents(true)) as Component[];\n    const modifiedComponent = (await componentsList.listModifiedComponents(true)) as Component[];\n    const stagedComponents: ModelComponent[] = await componentsList.listExportPendingComponents(laneObj);\n    const autoTagPendingComponents = await componentsList.listAutoTagPendingComponents();\n    const autoTagPendingComponentsIds = autoTagPendingComponents.map((component) => component.id);\n    const allInvalidComponents = await componentsList.listInvalidComponents();\n    const importPendingComponents = allInvalidComponents\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      .filter((c) => c.error instanceof ComponentsPendingImport)\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      .map((i) => i.id);\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    const invalidComponents = allInvalidComponents.filter((c) => !(c.error instanceof ComponentsPendingImport));\n    const outdatedComponents = await componentsList.listOutdatedComponents();\n    const mergePendingComponents = await componentsList.listMergePendingComponents();\n    const newAndModified: Component[] = newComponents.concat(modifiedComponent);\n    const issuesToIgnore = this.issues.getIssuesToIgnore();\n    const componentsWithIssues = newAndModified.filter((component: Component) => {\n      issuesToIgnore.forEach((issueToIgnore) => component.issues.delete(IssuesClasses[issueToIgnore]));\n      if (consumer.isLegacy && component.issues) {\n        component.issues.delete(IssuesClasses.RelativeComponentsAuthored);\n      }\n      return component.issues && !component.issues.isEmpty();\n    });\n    const componentsDuringMergeState = componentsList.listDuringMergeStateComponents();\n    const softTaggedComponents = componentsList.listSoftTaggedComponents();\n    const snappedComponents = (await componentsList.listSnappedComponentsOnMain()).map((c) => c.toBitId());\n    const currentLane = consumer.getCurrentLaneId();\n    const laneName = currentLane.isDefault() ? null : currentLane.name;\n    Analytics.setExtraData('new_components', newComponents.length);\n    Analytics.setExtraData('staged_components', stagedComponents.length);\n    Analytics.setExtraData('num_components_with_missing_dependencies', componentsWithIssues.length);\n    Analytics.setExtraData('autoTagPendingComponents', autoTagPendingComponents.length);\n    Analytics.setExtraData('deleted', invalidComponents.length);\n    await consumer.onDestroy();\n    return {\n      newComponents: ComponentsList.sortComponentsByName(newComponents),\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      modifiedComponent: ComponentsList.sortComponentsByName(modifiedComponent),\n      stagedComponents: ComponentsList.sortComponentsByName(stagedComponents),\n      componentsWithIssues, // no need to sort, we don't print it as is\n      importPendingComponents, // no need to sort, we use only its length\n      autoTagPendingComponents: ComponentsList.sortComponentsByName(autoTagPendingComponentsIds),\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      invalidComponents,\n      outdatedComponents,\n      mergePendingComponents,\n      componentsDuringMergeState,\n      componentsWithIndividualFiles: await componentsList.listComponentsWithIndividualFiles(),\n      componentsWithTrackDirs: await componentsList.listComponentsWithTrackDir(),\n      softTaggedComponents,\n      snappedComponents,\n      laneName,\n    };\n  }\n\n  static slots = [];\n  static dependencies = [CLIAspect, WorkspaceAspect, IssuesAspect];\n  static runtime = MainRuntime;\n  static async provider([cli, workspace, issues]: [CLIMain, Workspace, IssuesMain]) {\n    const statusMain = new StatusMain(workspace, issues);\n    cli.register(new StatusCmd(statusMain));\n    return statusMain;\n  }\n}\n\nStatusAspect.addRuntime(StatusMain);\n"]}