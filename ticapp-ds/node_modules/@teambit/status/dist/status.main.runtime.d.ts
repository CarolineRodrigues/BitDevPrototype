import { CLIMain } from '@teambit/cli';
import { Workspace } from '@teambit/workspace';
import { BitId, BitIds } from '@teambit/legacy/dist/bit-id';
import Component from '@teambit/legacy/dist/consumer/component';
import { DivergedComponent } from '@teambit/legacy/dist/consumer/component/components-list';
import { InvalidComponent } from '@teambit/legacy/dist/consumer/component/consumer-component';
import { ModelComponent } from '@teambit/legacy/dist/scope/models';
import { IssuesMain } from '@teambit/issues';
export declare type StatusResult = {
    newComponents: Component[];
    modifiedComponent: Component[];
    stagedComponents: ModelComponent[];
    componentsWithIssues: Component[];
    importPendingComponents: BitId[];
    autoTagPendingComponents: BitId[];
    invalidComponents: InvalidComponent[];
    outdatedComponents: Component[];
    mergePendingComponents: DivergedComponent[];
    componentsDuringMergeState: BitIds;
    componentsWithIndividualFiles: Component[];
    componentsWithTrackDirs: Component[];
    softTaggedComponents: BitId[];
    snappedComponents: BitId[];
    laneName: string | null;
};
export declare class StatusMain {
    private workspace;
    private issues;
    constructor(workspace: Workspace, issues: IssuesMain);
    status(): Promise<StatusResult>;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([cli, workspace, issues]: [CLIMain, Workspace, IssuesMain]): Promise<StatusMain>;
}
