{"version":3,"sources":["status-cmd.ts"],"names":["TROUBLESHOOTING_MESSAGE","chalk","yellow","BASE_DOCS_DOMAIN","individualFilesDesc","trackDirDesc","StatusCmd","constructor","status","json","newComponents","modifiedComponent","stagedComponents","componentsWithIssues","importPendingComponents","autoTagPendingComponents","invalidComponents","outdatedComponents","mergePendingComponents","componentsDuringMergeState","componentsWithIndividualFiles","componentsWithTrackDirs","softTaggedComponents","snappedComponents","map","c","id","toString","issues","toObject","s","report","_args","strict","laneName","showTroubleshootingLink","format","component","showVersions","message","getBitId","BitId","Component","ModelComponent","toBitId","Error","bitId","find","compWithIssue","isEqual","softTagged","softTaggedId","messageStatusText","messageStatusTextWithSoftTag","color","messageStatus","toStringWithoutVersion","bitFormatted","localVersions","getLocalTagsOrHashes","join","red","statusFailureMsg","importPendingWarning","length","IMPORT_PENDING_MSG","splitByMissing","R","groupBy","includes","missing","nonMissing","outdatedTitle","underline","white","outdatedDesc","outdatedComps","cyan","version","latestVersion","outdatedStr","pendingMergeTitle","pendingMergeDesc","pendingMergeComps","diverge","snapsOnLocalOnly","snapsOnRemoteOnly","pendingMergeStr","compWithConflictsTitle","compWithConflictsDesc","compWithConflictsComps","compWithConflictsStr","newComponentDescription","newComponentsTitle","newComponentsOutput","modifiedDesc","modifiedComponentOutput","autoTagPendingOutput","invalidDesc","invalidComponentOutput","error","sort","statusInvalidComponentsMsg","individualFilesOutput","trackDirOutput","stagedDesc","stagedComponentsOutput","snappedDesc","snappedComponentsOutput","laneStr","bold","troubleshootingStr","statusMsg","filter","x","results","statusWorkspaceIsCleanMsg","exitCode","data","code"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport R from 'ramda';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport Component from '@teambit/legacy/dist/consumer/component';\nimport { immutableUnshift } from '@teambit/legacy/dist/utils';\nimport { formatBitString, formatNewBit } from '@teambit/legacy/dist/cli/chalk-box';\nimport { getInvalidComponentLabel, formatIssues } from '@teambit/legacy/dist/cli/templates/component-issues-template';\nimport { ModelComponent } from '@teambit/legacy/dist/scope/models';\nimport {\n  BASE_DOCS_DOMAIN,\n  IMPORT_PENDING_MSG,\n  statusFailureMsg,\n  statusInvalidComponentsMsg,\n  statusWorkspaceIsCleanMsg,\n} from '@teambit/legacy/dist/constants';\nimport { StatusMain, StatusResult } from './status.main.runtime';\n\nconst TROUBLESHOOTING_MESSAGE = `${chalk.yellow(\n  `learn more at https://${BASE_DOCS_DOMAIN}/components/adding-components`\n)}`;\n\nconst individualFilesDesc = `these components were added as individual files and not as directories, which are invalid in Harmony\nplease make sure each component has its own directory and re-add it. alternatively, use \"bit move --component\" to help with the move.`;\nconst trackDirDesc = `these components were added by an older version of Bit and therefore have \"trackDir\" record in the .bitmap file\nplease run \"bit migrate --harmony\" to convert these records to \"rootDir\".`;\n\nexport class StatusCmd implements Command {\n  name = 'status';\n  shortDescription = 'show the working area component(s) status';\n  group = 'development';\n  description = `show the working area component(s) status.\\n  https://${BASE_DOCS_DOMAIN}/workspace/workspace-status`;\n  alias = 's';\n  options = [\n    ['j', 'json', 'return a json version of the component'],\n    ['', 'strict', 'in case issues found, exit with code 1'],\n  ] as CommandOptions;\n  loader = true;\n  migration = true;\n\n  constructor(private status: StatusMain) {}\n\n  async json() {\n    const {\n      newComponents,\n      modifiedComponent,\n      stagedComponents,\n      componentsWithIssues,\n      importPendingComponents,\n      autoTagPendingComponents,\n      invalidComponents,\n      outdatedComponents,\n      mergePendingComponents,\n      componentsDuringMergeState,\n      componentsWithIndividualFiles,\n      componentsWithTrackDirs,\n      softTaggedComponents,\n      snappedComponents,\n    }: StatusResult = await this.status.status();\n    return {\n      newComponents,\n      modifiedComponent: modifiedComponent.map((c) => c.id.toString()),\n      stagedComponents: stagedComponents.map((c) => c.id()),\n      componentsWithIssues: componentsWithIssues.map((c) => ({\n        id: c.id.toString(),\n        issues: c.issues?.toObject(),\n      })),\n      importPendingComponents: importPendingComponents.map((id) => id.toString()),\n      autoTagPendingComponents: autoTagPendingComponents.map((s) => s.toString()),\n      invalidComponents,\n      outdatedComponents: outdatedComponents.map((c) => c.id.toString()),\n      mergePendingComponents: mergePendingComponents.map((c) => c.id.toString()),\n      componentsDuringMergeState: componentsDuringMergeState.map((id) => id.toString()),\n      componentsWithIndividualFiles: componentsWithIndividualFiles.map((c) => c.id.toString()),\n      componentsWithTrackDirs: componentsWithTrackDirs.map((c) => c.id.toString()),\n      softTaggedComponents: softTaggedComponents.map((s) => s.toString()),\n      snappedComponents: snappedComponents.map((s) => s.toString()),\n    };\n  }\n\n  async report(_args, { strict }: { strict?: boolean }) {\n    const {\n      newComponents,\n      modifiedComponent,\n      stagedComponents,\n      componentsWithIssues,\n      importPendingComponents,\n      autoTagPendingComponents,\n      invalidComponents,\n      outdatedComponents,\n      mergePendingComponents,\n      componentsDuringMergeState,\n      componentsWithIndividualFiles,\n      componentsWithTrackDirs,\n      softTaggedComponents,\n      snappedComponents,\n      laneName,\n    }: StatusResult = await this.status.status();\n    // If there is problem with at least one component we want to show a link to the\n    // troubleshooting doc\n    let showTroubleshootingLink = false;\n\n    function format(component: BitId | Component | ModelComponent, showVersions = false, message?: string): string {\n      const getBitId = () => {\n        if (component instanceof BitId) return component;\n        if (component instanceof Component) return component.id;\n        if (component instanceof ModelComponent) return component.toBitId();\n        throw new Error(`type of component ${component} is not supported`);\n      };\n      const bitId = getBitId();\n      const issues = componentsWithIssues.find((compWithIssue: Component) => compWithIssue.id.isEqual(bitId));\n      const softTagged = softTaggedComponents.find((softTaggedId) => softTaggedId.isEqual(bitId));\n\n      const messageStatusText = message || 'ok';\n      const messageStatusTextWithSoftTag = softTagged ? `${messageStatusText} (soft-tagged)` : messageStatusText;\n      const color = message ? 'yellow' : 'green';\n      const messageStatus = chalk[color](messageStatusTextWithSoftTag);\n\n      if (component instanceof BitId) {\n        return `${formatBitString(component.toStringWithoutVersion())} ... ${messageStatus}`;\n      }\n      let bitFormatted = `${formatNewBit(component)}`;\n      if (showVersions) {\n        if (!(component instanceof ModelComponent)) {\n          throw new Error(`expect \"${component}\" to be instance of ModelComponent`);\n        }\n        const localVersions = component.getLocalTagsOrHashes();\n        bitFormatted += `. versions: ${localVersions.join(', ')}`;\n      }\n      bitFormatted += ' ... ';\n      if (!issues) return `${bitFormatted}${messageStatus}`;\n      showTroubleshootingLink = true;\n      return `${bitFormatted} ${chalk.red(statusFailureMsg)}${formatIssues(issues)}`;\n    }\n\n    const importPendingWarning = importPendingComponents.length ? chalk.yellow(`${IMPORT_PENDING_MSG}.\\n`) : '';\n\n    const splitByMissing = R.groupBy((component) => {\n      return component.includes(statusFailureMsg) ? 'missing' : 'nonMissing';\n    });\n    const { missing, nonMissing } = splitByMissing(newComponents.map((c) => format(c)));\n\n    const outdatedTitle = chalk.underline.white('pending updates');\n    const outdatedDesc =\n      '(use \"bit checkout [version] [component_id]\" to merge changes)\\n(use \"bit diff [component_id] [new_version]\" to compare changes)\\n(use \"bit log [component_id]\" to list all available versions)\\n';\n    const outdatedComps = outdatedComponents\n      .map((component) => {\n        return `    > ${chalk.cyan(component.id.toStringWithoutVersion())} current: ${component.id.version} latest: ${\n          // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n          component.latestVersion\n        }\\n`;\n      })\n      .join('');\n\n    const outdatedStr = outdatedComponents.length ? [outdatedTitle, outdatedDesc, outdatedComps].join('\\n') : '';\n\n    const pendingMergeTitle = chalk.underline.white('pending merge');\n    const pendingMergeDesc = `(use \"bit untag\" to add local changes on top of the remote and discard local tags.\nalternatively, to keep local tags/snaps history, use \"bit merge <remote-name>/<lane-name> [component-id]\")\\n`;\n    const pendingMergeComps = mergePendingComponents\n      .map((component) => {\n        return `    > ${chalk.cyan(component.id.toString())} local and remote have diverged and have ${\n          component.diverge.snapsOnLocalOnly.length\n        } and ${component.diverge.snapsOnRemoteOnly.length} different snaps each, respectively\\n`;\n      })\n      .join('');\n\n    const pendingMergeStr = pendingMergeComps.length\n      ? [pendingMergeTitle, pendingMergeDesc, pendingMergeComps].join('\\n')\n      : '';\n\n    const compWithConflictsTitle = chalk.underline.white('components during merge state');\n    const compWithConflictsDesc = `(use \"bit merge [component-id] --resolve\" to mark them as resolved and snap the changes\nor use \"bit merge [component-id] --abort\" to cancel the merge operation)\\n`;\n    const compWithConflictsComps = componentsDuringMergeState\n      .map((id) => {\n        return `    > ${chalk.cyan(id.toString())}`;\n      })\n      .join('');\n\n    const compWithConflictsStr = compWithConflictsComps.length\n      ? [compWithConflictsTitle, compWithConflictsDesc, compWithConflictsComps].join('\\n')\n      : '';\n\n    const newComponentDescription = '\\n(use \"bit tag --all [version]\" to lock a version with all your changes)\\n';\n    const newComponentsTitle = newComponents.length\n      ? chalk.underline.white('new components') + newComponentDescription\n      : '';\n\n    const newComponentsOutput = [newComponentsTitle, ...(nonMissing || []), ...(missing || [])].join('\\n');\n\n    const modifiedDesc = '(use \"bit diff\" to compare changes)\\n';\n    const modifiedComponentOutput = immutableUnshift(\n      modifiedComponent.map((c) => format(c)),\n      modifiedComponent.length\n        ? chalk.underline.white('modified components') + newComponentDescription + modifiedDesc\n        : ''\n    ).join('\\n');\n\n    const autoTagPendingOutput = immutableUnshift(\n      autoTagPendingComponents.map((c) => format(c)),\n      autoTagPendingComponents.length\n        ? chalk.underline.white('components pending to be tagged automatically (when their dependencies are tagged)')\n        : ''\n    ).join('\\n');\n\n    const invalidDesc = '\\nthese components were failed to load.\\n';\n    const invalidComponentOutput = immutableUnshift(\n      invalidComponents.map((c) => format(c.id, true, getInvalidComponentLabel(c.error))).sort(),\n      invalidComponents.length ? chalk.underline.white(statusInvalidComponentsMsg) + invalidDesc : ''\n    ).join('\\n');\n\n    const individualFilesOutput = immutableUnshift(\n      componentsWithIndividualFiles.map((c) => format(c.id, false, 'individual files')).sort(),\n      componentsWithIndividualFiles.length\n        ? `${chalk.underline.white('components with individual files')}\\n${individualFilesDesc}\\n`\n        : ''\n    ).join('\\n');\n\n    const trackDirOutput = immutableUnshift(\n      componentsWithTrackDirs.map((c) => format(c.id, false, 'trackDir record')).sort(),\n      componentsWithTrackDirs.length\n        ? `${chalk.underline.white('components with trackDir record')}\\n${trackDirDesc}\\n`\n        : ''\n    ).join('\\n');\n\n    const stagedDesc = '\\n(use \"bit export to push these components to a remote scope\")\\n';\n    const stagedComponentsOutput = immutableUnshift(\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      stagedComponents.map((c) => format(c, true)),\n      stagedComponents.length ? chalk.underline.white('staged components') + stagedDesc : ''\n    ).join('\\n');\n\n    const snappedDesc = '\\n(use \"bit tag --all [version]\" or \"bit tag --snapped [version]\" to lock a version)\\n';\n    const snappedComponentsOutput = immutableUnshift(\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      snappedComponents.map((c) => format(c, true)),\n      snappedComponents.length ? chalk.underline.white('snapped components') + snappedDesc : ''\n    ).join('\\n');\n\n    const laneStr = laneName ? `\\non ${chalk.bold(laneName)} lane` : '';\n\n    const troubleshootingStr = showTroubleshootingLink ? `\\n${TROUBLESHOOTING_MESSAGE}` : '';\n\n    const statusMsg =\n      importPendingWarning +\n      [\n        outdatedStr,\n        pendingMergeStr,\n        compWithConflictsStr,\n        newComponentsOutput,\n        modifiedComponentOutput,\n        snappedComponentsOutput,\n        stagedComponentsOutput,\n        autoTagPendingOutput,\n        invalidComponentOutput,\n        individualFilesOutput,\n        trackDirOutput,\n      ]\n        .filter((x) => x)\n        .join(chalk.underline('\\n                         \\n') + chalk.white('\\n')) +\n      troubleshootingStr;\n\n    const results = (statusMsg || chalk.yellow(statusWorkspaceIsCleanMsg)) + laneStr;\n\n    const exitCode = componentsWithIssues.length && strict ? 1 : 0;\n\n    return {\n      data: results,\n      code: exitCode,\n    };\n  }\n}\n"]}