{"version":3,"sources":["dependency-version-resolver.ts"],"names":["DEFAULT_REMOTE_RESOLVE_VERSIONS","fetchToCache","update","DependencyVersionResolver","constructor","packageManager","cacheRootDir","networkConcurrency","limitRequests","resolveRemoteVersion","packageName","options","calculatedOpts","Object","assign","resolved"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA,MAAMA,+BAA+B,GAAG;AACtCC,EAAAA,YAAY,EAAE,IADwB;AAEtCC,EAAAA,MAAM,EAAE;AAF8B,CAAxC;;AAKO,MAAMC,yBAAN,CAAgC;AAGrCC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,cAJC,EAMDC,YANC,EAQTC,kBARS,EAST;AAAA,SALQF,cAKR,GALQA,cAKR;AAAA,SAHQC,YAGR,GAHQA,YAGR;AAAA;AACA,SAAKE,aAAL,GAAqB,uBAAOD,kBAAP,aAAOA,kBAAP,cAAOA,kBAAP,GAA6B,EAA7B,CAArB;AACD;;AAEyB,QAApBE,oBAAoB,CACxBC,WADwB,EAExBC,OAFwB,EAGS;AACjC;AACA,UAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CACrB,EADqB,EAErBd,+BAFqB,EAGrB;AAAEM,MAAAA,YAAY,EAAE,KAAKA;AAArB,KAHqB,EAIrBK,OAJqB,CAAvB,CAFiC,CAQjC;;AACA,UAAMI,QAAQ,GAAG,KAAKP,aAAL,CAAmB,MAAM,KAAKH,cAAL,CAAoBI,oBAApB,CAAyCC,WAAzC,EAAsDE,cAAtD,CAAzB,CAAjB;AACA,WAAOG,QAAP;AACD;;AA9BoC","sourcesContent":["import { PathAbsolute } from '@teambit/legacy/dist/utils/path';\nimport pLimit from 'p-limit';\n\nimport { PackageManager, PackageManagerResolveRemoteVersionOptions, ResolvedPackageVersion } from './package-manager';\n\nconst DEFAULT_REMOTE_RESOLVE_VERSIONS = {\n  fetchToCache: true,\n  update: true,\n};\n\nexport class DependencyVersionResolver {\n  private limitRequests: pLimit.Limit;\n\n  constructor(\n    /**\n     * package manager instance.\n     */\n    private packageManager: PackageManager,\n\n    private cacheRootDir?: string | PathAbsolute,\n\n    networkConcurrency?: number\n  ) {\n    this.limitRequests = pLimit(networkConcurrency ?? 16);\n  }\n\n  async resolveRemoteVersion(\n    packageName: string,\n    options: PackageManagerResolveRemoteVersionOptions\n  ): Promise<ResolvedPackageVersion> {\n    // Make sure to take other default if passed options with only one option\n    const calculatedOpts = Object.assign(\n      {},\n      DEFAULT_REMOTE_RESOLVE_VERSIONS,\n      { cacheRootDir: this.cacheRootDir },\n      options\n    );\n    // TODO: the cache should be probably passed to the package manager constructor not to the install function\n    const resolved = this.limitRequests(() => this.packageManager.resolveRemoteVersion(packageName, calculatedOpts));\n    return resolved;\n  }\n}\n"]}