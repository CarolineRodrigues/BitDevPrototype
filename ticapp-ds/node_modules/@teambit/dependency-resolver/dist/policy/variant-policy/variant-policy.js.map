{"version":3,"sources":["variant-policy.ts"],"names":["VariantPolicy","constructor","_policiesEntries","uniqEntries","entries","length","find","depId","lifecycleType","matchedEntry","entry","idEqual","dependencyId","lifecycleEqual","filter","predicate","filtered","getResolvedFromEnv","dep","value","resolveFromEnv","getDepVersion","undefined","version","serialize","toConfigObject","res","dependencies","devDependencies","peerDependencies","reduce","acc","keyName","KEY_NAME_BY_LIFECYCLE_TYPE","toLegacyDepsOverrides","mergePolices","policies","allEntries","curr","concat","reverse","uniq","entry1","entry2"],"mappings":"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","sourcesContent":["import { uniqWith } from 'lodash';\nimport { DependenciesOverridesData } from '@teambit/legacy/dist/consumer/config/component-overrides';\nimport { Policy, PolicyConfigKeys, PolicyEntry, SemverVersion } from '../policy';\nimport { DependencyLifecycleType, KEY_NAME_BY_LIFECYCLE_TYPE } from '../../dependencies';\n\nexport type VariantPolicyConfigObject = Partial<Record<keyof PolicyConfigKeys, VariantPolicyLifecycleConfigObject>>;\n\ntype VariantPolicyLifecycleConfigObject = {\n  [dependencyId: string]: VariantPolicyConfigEntryValue;\n};\n\nexport type VariantPolicyConfigEntryValue = VariantPolicyEntryValue | VariantPolicyEntryVersion;\n\n/**\n * Allowed values are valid semver values, git urls, fs path.\n */\nexport type VariantPolicyEntryVersion = SemverVersion;\n\nexport type VariantPolicyEntryValue = {\n  version: VariantPolicyEntryVersion;\n  resolveFromEnv?: boolean;\n};\n\nexport type DependencySource = 'auto' | 'env' | 'slots' | 'config';\n\nexport type VariantPolicyEntry = PolicyEntry & {\n  value: VariantPolicyEntryValue;\n  source?: DependencySource; // determines where the dependency was resolved from, e.g. from its env, or config\n};\n\nexport type SerializedVariantPolicyEntry = VariantPolicyEntry;\nexport type SerializedVariantPolicy = SerializedVariantPolicyEntry[];\n\nexport class VariantPolicy implements Policy<VariantPolicyConfigObject> {\n  constructor(private _policiesEntries: VariantPolicyEntry[]) {\n    this._policiesEntries = uniqEntries(_policiesEntries);\n  }\n\n  get entries(): VariantPolicyEntry[] {\n    return this._policiesEntries;\n  }\n\n  get length(): number {\n    return this.entries.length;\n  }\n\n  find(depId: string, lifecycleType?: DependencyLifecycleType): VariantPolicyEntry | undefined {\n    const matchedEntry = this.entries.find((entry) => {\n      const idEqual = entry.dependencyId === depId;\n      const lifecycleEqual = lifecycleType ? entry.lifecycleType === lifecycleType : true;\n      return idEqual && lifecycleEqual;\n    });\n    return matchedEntry;\n  }\n\n  filter(predicate: (dep: VariantPolicyEntry, index?: number) => boolean): VariantPolicy {\n    const filtered = this.entries.filter(predicate);\n    return new VariantPolicy(filtered);\n  }\n\n  /**\n   * Filter only deps which should be resolved from the env\n   */\n  getResolvedFromEnv() {\n    return this.filter((dep) => {\n      return !!dep.value.resolveFromEnv;\n    });\n  }\n\n  getDepVersion(depId: string, lifecycleType?: DependencyLifecycleType): VariantPolicyEntryVersion | undefined {\n    const entry = this.find(depId, lifecycleType);\n    if (!entry) {\n      return undefined;\n    }\n    return entry.value.version;\n  }\n\n  serialize(): SerializedVariantPolicy {\n    return this.entries;\n  }\n\n  toConfigObject(): VariantPolicyConfigObject {\n    const res: VariantPolicyConfigObject = {\n      dependencies: {},\n      devDependencies: {},\n      peerDependencies: {},\n    };\n    this._policiesEntries.reduce((acc, entry) => {\n      const keyName = KEY_NAME_BY_LIFECYCLE_TYPE[entry.lifecycleType];\n      const value = entry.value.resolveFromEnv ? entry.value : entry.value.version;\n      acc[keyName][entry.dependencyId] = value;\n      return acc;\n    }, res);\n    return res;\n  }\n\n  toLegacyDepsOverrides(): DependenciesOverridesData {\n    const res: DependenciesOverridesData = {\n      dependencies: {},\n      devDependencies: {},\n      peerDependencies: {},\n    };\n    this._policiesEntries.reduce((acc, entry) => {\n      const keyName = KEY_NAME_BY_LIFECYCLE_TYPE[entry.lifecycleType];\n      acc[keyName][entry.dependencyId] = entry.value.version;\n      return acc;\n    }, res);\n    return res;\n  }\n\n  static mergePolices(policies: VariantPolicy[]): VariantPolicy {\n    let allEntries: VariantPolicyEntry[] = [];\n    allEntries = policies.reduce((acc, curr) => {\n      return acc.concat(curr.entries);\n    }, allEntries);\n    // We reverse it to make sure the latest policy will be stronger in case of conflict\n    allEntries = allEntries.reverse();\n    return new VariantPolicy(allEntries);\n  }\n}\n\nfunction uniqEntries(entries: Array<VariantPolicyEntry>): Array<VariantPolicyEntry> {\n  const uniq = uniqWith(entries, (entry1: VariantPolicyEntry, entry2: VariantPolicyEntry) => {\n    return entry1.dependencyId === entry2.dependencyId && entry1.lifecycleType === entry2.lifecycleType;\n  });\n  return uniq;\n}\n"]}