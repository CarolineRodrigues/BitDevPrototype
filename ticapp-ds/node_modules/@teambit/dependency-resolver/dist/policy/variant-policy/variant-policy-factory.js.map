{"version":3,"sources":["variant-policy-factory.ts"],"names":["VariantPolicyFactory","fromConfigObject","configObject","source","runtimeEntries","entriesFromKey","devEntries","peerEntries","entries","concat","VariantPolicy","parse","serializedEntries","getEmpty","keyName","obj","lifecycleType","LIFECYCLE_TYPE_BY_KEY_NAME","Object","map","depId","value","createEntry","version","resolveFromEnv","entryValue","entry","dependencyId"],"mappings":";;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AASA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,oBAAN,CAA2B;AAChCC,EAAAA,gBAAgB,CAACC,YAAD,EAAeC,MAAf,EAAyD;AACvE,UAAMC,cAAc,GAAGC,cAAc,CAACH,YAAD,EAAe,cAAf,EAA+BC,MAA/B,CAArC;AACA,UAAMG,UAAU,GAAGD,cAAc,CAACH,YAAD,EAAe,iBAAf,EAAkCC,MAAlC,CAAjC;AACA,UAAMI,WAAW,GAAGF,cAAc,CAACH,YAAD,EAAe,kBAAf,EAAmCC,MAAnC,CAAlC;AACA,UAAMK,OAAO,GAAGJ,cAAc,CAACK,MAAf,CAAsBH,UAAtB,EAAkCG,MAAlC,CAAyCF,WAAzC,CAAhB;AACA,WAAO,KAAIG,8BAAJ,EAAkBF,OAAlB,CAAP;AACD;;AAEDG,EAAAA,KAAK,CAACC,iBAAD,EAA6C;AAChD,WAAO,KAAIF,8BAAJ,EAAkBE,iBAAlB,CAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAkB;AACxB,WAAO,KAAIH,8BAAJ,EAAkB,EAAlB,CAAP;AACD;;AAf+B;;;;AAkBlC,SAASL,cAAT,CACEH,YADF,EAEEY,OAFF,EAGEX,MAHF,EAIwB;AACtB,QAAMY,GAAG,GAAGb,YAAY,CAACY,OAAD,CAAxB;;AACA,MAAI,CAACC,GAAL,EAAU;AACR,WAAO,EAAP;AACD;;AACD,QAAMC,aAAa,GAAGC,2CAA2BH,OAA3B,CAAtB;;AACA,QAAMN,OAAO,GAAGU,MAAM,CAACV,OAAP,CAAeO,GAAf,EAAoBI,GAApB,CAAwB,CAAC,CAACC,KAAD,EAAQC,KAAR,CAAD,KAA6D;AACnG,WAAOC,WAAW,CAACF,KAAD,EAAQC,KAAR,EAAeL,aAAf,EAA8Bb,MAA9B,CAAlB;AACD,GAFe,CAAhB;AAGA,SAAOK,OAAP;AACD;;AAED,SAASc,WAAT,CACEF,KADF,EAEEC,KAFF,EAGEL,aAHF,EAIEb,MAJF,EAKsB;AACpB,QAAMoB,OAAO,GAAG,OAAOF,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACE,OAA1D;AACA,QAAMC,cAAc,GAAG,OAAOH,KAAP,KAAiB,QAAjB,GAA4B,KAA5B,GAAoCA,KAAK,CAACG,cAAjE;AAEA,QAAMC,UAAmC,GAAG;AAC1CF,IAAAA,OAD0C;AAE1CC,IAAAA;AAF0C,GAA5C;AAIA,QAAME,KAAyB,GAAG;AAChCC,IAAAA,YAAY,EAAEP,KADkB;AAEhCC,IAAAA,KAAK,EAAEI,UAFyB;AAGhCT,IAAAA,aAHgC;AAIhCb,IAAAA;AAJgC,GAAlC;AAMA,SAAOuB,KAAP;AACD","sourcesContent":["import { PolicyConfigKeysNames } from '../policy';\nimport {\n  VariantPolicy,\n  VariantPolicyConfigObject,\n  VariantPolicyEntryValue,\n  VariantPolicyEntry,\n  VariantPolicyConfigEntryValue,\n  SerializedVariantPolicy,\n  DependencySource,\n} from './variant-policy';\nimport { LIFECYCLE_TYPE_BY_KEY_NAME, DependencyLifecycleType } from '../../dependencies';\n\nexport class VariantPolicyFactory {\n  fromConfigObject(configObject, source?: DependencySource): VariantPolicy {\n    const runtimeEntries = entriesFromKey(configObject, 'dependencies', source);\n    const devEntries = entriesFromKey(configObject, 'devDependencies', source);\n    const peerEntries = entriesFromKey(configObject, 'peerDependencies', source);\n    const entries = runtimeEntries.concat(devEntries).concat(peerEntries);\n    return new VariantPolicy(entries);\n  }\n\n  parse(serializedEntries: SerializedVariantPolicy) {\n    return new VariantPolicy(serializedEntries);\n  }\n\n  getEmpty(): VariantPolicy {\n    return new VariantPolicy([]);\n  }\n}\n\nfunction entriesFromKey(\n  configObject: VariantPolicyConfigObject,\n  keyName: PolicyConfigKeysNames,\n  source?: DependencySource\n): VariantPolicyEntry[] {\n  const obj = configObject[keyName];\n  if (!obj) {\n    return [];\n  }\n  const lifecycleType = LIFECYCLE_TYPE_BY_KEY_NAME[keyName];\n  const entries = Object.entries(obj).map(([depId, value]: [string, VariantPolicyConfigEntryValue]) => {\n    return createEntry(depId, value, lifecycleType, source);\n  });\n  return entries;\n}\n\nfunction createEntry(\n  depId: string,\n  value: VariantPolicyConfigEntryValue,\n  lifecycleType: DependencyLifecycleType,\n  source?: DependencySource\n): VariantPolicyEntry {\n  const version = typeof value === 'string' ? value : value.version;\n  const resolveFromEnv = typeof value === 'string' ? false : value.resolveFromEnv;\n\n  const entryValue: VariantPolicyEntryValue = {\n    version,\n    resolveFromEnv,\n  };\n  const entry: VariantPolicyEntry = {\n    dependencyId: depId,\n    value: entryValue,\n    lifecycleType,\n    source,\n  };\n  return entry;\n}\n"]}