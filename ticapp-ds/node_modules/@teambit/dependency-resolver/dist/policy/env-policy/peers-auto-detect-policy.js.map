{"version":3,"sources":["peers-auto-detect-policy.ts"],"names":["PeersAutoDetectPolicy","constructor","_policiesEntries","uniqEntries","entries","length","find","name","matchedEntry","entry","filter","predicate","filtered","getDepVersion","depId","undefined","version","getDepSupportedRange","supportedRange","toNameSupportedRangeMap","reduce","acc","toVersionManifest","mergePolices","policies","allEntries","curr","concat","reverse","uniq","entry1","entry2"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAYO,MAAMA,qBAAN,CAA4B;AACjCC,EAAAA,WAAW,CAASC,gBAAT,EAAyD;AAAA,SAAhDA,gBAAgD,GAAhDA,gBAAgD;AAClE,SAAKA,gBAAL,GAAwBC,WAAW,CAACD,gBAAD,CAAnC;AACD;;AAEU,MAAPE,OAAO,GAAiC;AAC1C,WAAO,KAAKF,gBAAZ;AACD;;AAES,MAANG,MAAM,GAAW;AACnB,WAAO,KAAKD,OAAL,CAAaC,MAApB;AACD;;AAEDC,EAAAA,IAAI,CAACC,IAAD,EAAuD;AACzD,UAAMC,YAAY,GAAG,KAAKJ,OAAL,CAAaE,IAAb,CAAmBG,KAAD,IAAWA,KAAK,CAACF,IAAN,KAAeA,IAA5C,CAArB;AACA,WAAOC,YAAP;AACD;;AAEDE,EAAAA,MAAM,CAACC,SAAD,EAAiG;AACrG,UAAMC,QAAQ,GAAG,KAAKR,OAAL,CAAaM,MAAb,CAAoBC,SAApB,CAAjB;AACA,WAAO,IAAIX,qBAAJ,CAA0BY,QAA1B,CAAP;AACD;;AAEDC,EAAAA,aAAa,CAACC,KAAD,EAAmD;AAC9D,UAAML,KAAK,GAAG,KAAKH,IAAL,CAAUQ,KAAV,CAAd;;AACA,QAAI,CAACL,KAAL,EAAY;AACV,aAAOM,SAAP;AACD;;AACD,WAAON,KAAK,CAACO,OAAb;AACD;;AAEDC,EAAAA,oBAAoB,CAACH,KAAD,EAA0D;AAC5E,UAAML,KAAK,GAAG,KAAKH,IAAL,CAAUQ,KAAV,CAAd;;AACA,QAAI,CAACL,KAAL,EAAY;AACV,aAAOM,SAAP;AACD;;AACD,WAAON,KAAK,CAACS,cAAb;AACD;;AAEDC,EAAAA,uBAAuB,GAA+B;AACpD,WAAO,KAAKf,OAAL,CAAagB,MAAb,CAAoB,CAACC,GAAD,EAAMZ,KAAN,KAAgB;AACzCY,MAAAA,GAAG,CAACZ,KAAK,CAACF,IAAP,CAAH,GAAkBE,KAAK,CAACS,cAAxB;AACA,aAAOG,GAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;;AAEDC,EAAAA,iBAAiB,GAA+B;AAC9C,WAAO,KAAKlB,OAAL,CAAagB,MAAb,CAAoB,CAACC,GAAD,EAAMZ,KAAN,KAAgB;AACzCY,MAAAA,GAAG,CAACZ,KAAK,CAACF,IAAP,CAAH,GAAkBE,KAAK,CAACO,OAAxB;AACA,aAAOK,GAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;;AAEkB,SAAZE,YAAY,CAACC,QAAD,EAA2D;AAC5E,QAAIC,UAAwC,GAAG,EAA/C;AACAA,IAAAA,UAAU,GAAGD,QAAQ,CAACJ,MAAT,CAAgB,CAACC,GAAD,EAAMK,IAAN,KAAe;AAC1C,aAAOL,GAAG,CAACM,MAAJ,CAAWD,IAAI,CAACtB,OAAhB,CAAP;AACD,KAFY,EAEVqB,UAFU,CAAb,CAF4E,CAK5E;;AACAA,IAAAA,UAAU,GAAGA,UAAU,CAACG,OAAX,EAAb;AACA,WAAO,IAAI5B,qBAAJ,CAA0ByB,UAA1B,CAAP;AACD;;AA7DgC;;;;AAgEnC,SAAStB,WAAT,CAAqBC,OAArB,EAAoG;AAClG,QAAMyB,IAAI,GAAG,wBAASzB,OAAT,EAAkB,CAAC0B,MAAD,EAAqCC,MAArC,KAA4E;AACzG,WAAOD,MAAM,CAACvB,IAAP,KAAgBwB,MAAM,CAACxB,IAA9B;AACD,GAFY,CAAb;AAGA,SAAOsB,IAAP;AACD","sourcesContent":["import { uniqWith } from 'lodash';\nimport { SemverVersion } from '../policy';\n\nexport type EnvPolicyEntryVersion = SemverVersion;\nexport type EnvPolicyEntrySupportedRange = SemverVersion;\n\nexport type PeersAutoDetectPolicyEntry = {\n  name: string;\n  version: string;\n  supportedRange: string;\n};\n\nexport class PeersAutoDetectPolicy {\n  constructor(private _policiesEntries: PeersAutoDetectPolicyEntry[]) {\n    this._policiesEntries = uniqEntries(_policiesEntries);\n  }\n\n  get entries(): PeersAutoDetectPolicyEntry[] {\n    return this._policiesEntries;\n  }\n\n  get length(): number {\n    return this.entries.length;\n  }\n\n  find(name: string): PeersAutoDetectPolicyEntry | undefined {\n    const matchedEntry = this.entries.find((entry) => entry.name === name);\n    return matchedEntry;\n  }\n\n  filter(predicate: (dep: PeersAutoDetectPolicyEntry, index?: number) => boolean): PeersAutoDetectPolicy {\n    const filtered = this.entries.filter(predicate);\n    return new PeersAutoDetectPolicy(filtered);\n  }\n\n  getDepVersion(depId: string): EnvPolicyEntryVersion | undefined {\n    const entry = this.find(depId);\n    if (!entry) {\n      return undefined;\n    }\n    return entry.version;\n  }\n\n  getDepSupportedRange(depId: string): EnvPolicyEntrySupportedRange | undefined {\n    const entry = this.find(depId);\n    if (!entry) {\n      return undefined;\n    }\n    return entry.supportedRange;\n  }\n\n  toNameSupportedRangeMap(): { [name: string]: string } {\n    return this.entries.reduce((acc, entry) => {\n      acc[entry.name] = entry.supportedRange;\n      return acc;\n    }, {});\n  }\n\n  toVersionManifest(): { [name: string]: string } {\n    return this.entries.reduce((acc, entry) => {\n      acc[entry.name] = entry.version;\n      return acc;\n    }, {});\n  }\n\n  static mergePolices(policies: PeersAutoDetectPolicy[]): PeersAutoDetectPolicy {\n    let allEntries: PeersAutoDetectPolicyEntry[] = [];\n    allEntries = policies.reduce((acc, curr) => {\n      return acc.concat(curr.entries);\n    }, allEntries);\n    // We reverse it to make sure the latest policy will be stronger in case of conflict\n    allEntries = allEntries.reverse();\n    return new PeersAutoDetectPolicy(allEntries);\n  }\n}\n\nfunction uniqEntries(entries: Array<PeersAutoDetectPolicyEntry>): Array<PeersAutoDetectPolicyEntry> {\n  const uniq = uniqWith(entries, (entry1: PeersAutoDetectPolicyEntry, entry2: PeersAutoDetectPolicyEntry) => {\n    return entry1.name === entry2.name;\n  });\n  return uniq;\n}\n"]}