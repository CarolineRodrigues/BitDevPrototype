{"version":3,"sources":["workspace-policy.ts"],"names":["WorkspacePolicy","constructor","_policiesEntries","uniqEntries","entries","add","entry","options","defaultOptions","updateExisting","calculatedOpts","Object","assign","existing","find","dependencyId","EntryAlreadyExist","remove","push","forEach","predicate","filter","filtered","depId","lifecycleType","matchedEntry","idEqual","lifecycleEqual","depIds","includes","getDepVersion","undefined","value","version","toConfigObject","res","dependencies","peerDependencies","reduce","acc","keyName","KEY_NAME_BY_LIFECYCLE_TYPE","preserve","toManifest","byLifecycleType","mergePolices","policies","allEntries","curr","concat","reverse","uniq","entry1","entry2"],"mappings":"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","sourcesContent":["import { uniqWith } from 'lodash';\nimport { sortObject } from '@teambit/legacy/dist/utils';\nimport { Policy, SemverVersion, GitUrlVersion, FileSystemPath, PolicyConfigKeys } from '../policy';\nimport { KEY_NAME_BY_LIFECYCLE_TYPE, WorkspaceDependencyLifecycleType } from '../../dependencies';\nimport { EntryAlreadyExist } from './exceptions';\n\nexport type WorkspacePolicyConfigKeys = Omit<PolicyConfigKeys, 'devDependencies'>;\nexport type WorkspacePolicyConfigKeysNames = keyof WorkspacePolicyConfigKeys;\n\nexport type WorkspacePolicyConfigObject = Partial<\n  Record<WorkspacePolicyConfigKeysNames, WorkspacePolicyLifecycleConfigObject>\n>;\nexport type WorkspacePolicyManifest = Partial<\n  Record<WorkspacePolicyConfigKeysNames, WorkspacePolicyLifecycleManifestObject>\n>;\n\nexport type WorkspacePolicyLifecycleConfigObject = {\n  [dependencyId: string]: WorkspacePolicyConfigEntryValue;\n};\n\ntype WorkspacePolicyLifecycleManifestObject = {\n  [dependencyId: string]: WorkspacePolicyEntryVersion;\n};\n\nexport type WorkspacePolicyConfigEntryValue = WorkspacePolicyEntryValue | WorkspacePolicyEntryVersion;\n\nexport type AddEntryOptions = {\n  updateExisting: boolean;\n};\n/**\n * Allowed values are valid semver values, git urls, fs path.\n */\nexport type WorkspacePolicyEntryVersion = SemverVersion | GitUrlVersion | FileSystemPath;\n\nexport type WorkspacePolicyEntryValue = {\n  version: WorkspacePolicyEntryVersion;\n  preserve?: boolean;\n};\n\nexport type WorkspacePolicyEntry = {\n  dependencyId: string;\n  lifecycleType: WorkspaceDependencyLifecycleType;\n  value: WorkspacePolicyEntryValue;\n};\n\nexport class WorkspacePolicy implements Policy<WorkspacePolicyConfigObject> {\n  constructor(private _policiesEntries: WorkspacePolicyEntry[]) {\n    this._policiesEntries = uniqEntries(_policiesEntries);\n  }\n\n  get entries() {\n    return this._policiesEntries;\n  }\n\n  add(entry: WorkspacePolicyEntry, options?: AddEntryOptions): void {\n    const defaultOptions: AddEntryOptions = {\n      updateExisting: false,\n    };\n\n    const calculatedOpts = Object.assign({}, defaultOptions, options);\n\n    const existing = this.find(entry.dependencyId);\n    if (existing) {\n      if (!calculatedOpts.updateExisting) {\n        throw new EntryAlreadyExist(entry);\n      }\n      this.remove([entry.dependencyId]);\n    }\n    this._policiesEntries.push(entry);\n  }\n\n  forEach(predicate: (dep: WorkspacePolicyEntry, index?: number) => void): void {\n    this.entries.forEach(predicate);\n  }\n\n  filter(predicate: (dep: WorkspacePolicyEntry, index?: number) => boolean): WorkspacePolicy {\n    const filtered = this.entries.filter(predicate);\n    return new WorkspacePolicy(filtered);\n  }\n\n  find(depId: string, lifecycleType?: WorkspaceDependencyLifecycleType): WorkspacePolicyEntry | undefined {\n    const matchedEntry = this.entries.find((entry) => {\n      const idEqual = entry.dependencyId === depId;\n      const lifecycleEqual = lifecycleType ? entry.lifecycleType === lifecycleType : true;\n      return idEqual && lifecycleEqual;\n    });\n    return matchedEntry;\n  }\n\n  remove(depIds: string[]): WorkspacePolicy {\n    const entries = this.entries.filter((entry) => {\n      return !depIds.includes(entry.dependencyId);\n    });\n    return new WorkspacePolicy(entries);\n  }\n\n  getDepVersion(\n    depId: string,\n    lifecycleType?: WorkspaceDependencyLifecycleType\n  ): WorkspacePolicyEntryVersion | undefined {\n    const entry = this.find(depId, lifecycleType);\n    if (!entry) {\n      return undefined;\n    }\n    return entry.value.version;\n  }\n\n  toConfigObject(): WorkspacePolicyConfigObject {\n    const res: WorkspacePolicyConfigObject = {\n      dependencies: {},\n      peerDependencies: {},\n    };\n    this._policiesEntries.reduce((acc, entry) => {\n      const keyName = KEY_NAME_BY_LIFECYCLE_TYPE[entry.lifecycleType];\n      const value = entry.value.preserve ? entry.value : entry.value.version;\n      acc[keyName][entry.dependencyId] = value;\n      return acc;\n    }, res);\n    if (res.dependencies) {\n      res.dependencies = sortObject(res.dependencies);\n    }\n    if (res.peerDependencies) {\n      res.peerDependencies = sortObject(res.peerDependencies);\n    }\n    return res;\n  }\n\n  /**\n   * Create an object ready for package manager installation\n   * this is similar to \"toConfigObject\" but it will make the value of a specific dep always a string (the version / url)\n   */\n  toManifest(): WorkspacePolicyManifest {\n    const res: WorkspacePolicyManifest = {\n      dependencies: {},\n      peerDependencies: {},\n    };\n    this._policiesEntries.reduce((acc, entry) => {\n      const keyName = KEY_NAME_BY_LIFECYCLE_TYPE[entry.lifecycleType];\n      acc[keyName][entry.dependencyId] = entry.value.version;\n      return acc;\n    }, res);\n    return res;\n  }\n\n  byLifecycleType(lifecycleType: WorkspaceDependencyLifecycleType): WorkspacePolicy {\n    const filtered = this._policiesEntries.filter((entry) => entry.lifecycleType === lifecycleType);\n    return new WorkspacePolicy(filtered);\n  }\n\n  static mergePolices(policies: WorkspacePolicy[]): WorkspacePolicy {\n    let allEntries: WorkspacePolicyEntry[] = [];\n    allEntries = policies.reduce((acc, curr) => {\n      return acc.concat(curr.entries);\n    }, allEntries);\n    // We reverse it to make sure the latest policy will be stronger in case of conflict\n    allEntries = allEntries.reverse();\n    return new WorkspacePolicy(allEntries);\n  }\n}\n\nfunction uniqEntries(entries: Array<WorkspacePolicyEntry>): Array<WorkspacePolicyEntry> {\n  const uniq = uniqWith(entries, (entry1: WorkspacePolicyEntry, entry2: WorkspacePolicyEntry) => {\n    return entry1.dependencyId === entry2.dependencyId && entry1.lifecycleType === entry2.lifecycleType;\n  });\n  return uniq;\n}\n"]}