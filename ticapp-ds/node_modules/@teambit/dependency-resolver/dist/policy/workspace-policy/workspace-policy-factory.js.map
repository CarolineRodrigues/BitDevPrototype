{"version":3,"sources":["workspace-policy-factory.ts"],"names":["WorkspacePolicyFactory","fromConfigObject","configObject","WorkspacePolicy","runtimeEntries","entriesFromKey","peerEntries","entries","concat","fromPackageJson","packageJson","obj","dependencies","devDependencies","peerDependencies","keyName","lifecycleType","LIFECYCLE_TYPE_BY_KEY_NAME","Object","map","depId","value","createEntry","version","preserve","entryValue","entry","dependencyId"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAQA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEO,MAAMA,sBAAN,CAA6B;AAClCC,EAAAA,gBAAgB,CAACC,YAAD,EAA6D;AAC3E,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAO,KAAIC,kCAAJ,EAAoB,EAApB,CAAP;AACD;;AACD,UAAMC,cAAc,GAAGC,cAAc,CAACH,YAAD,EAAe,cAAf,CAArC;AACA,UAAMI,WAAW,GAAGD,cAAc,CAACH,YAAD,EAAe,kBAAf,CAAlC;AACA,UAAMK,OAAO,GAAGH,cAAc,CAACI,MAAf,CAAsBF,WAAtB,CAAhB;AACA,WAAO,KAAIH,kCAAJ,EAAoBI,OAApB,CAAP;AACD;;AAEDE,EAAAA,eAAe,CAACC,WAAD,EAAmC;AAChD,UAAMC,GAAG,GAAG;AACVC,MAAAA,YAAY,kCACNF,WAAW,CAACG,eAAZ,IAA+B,EADzB,GAENH,WAAW,CAACE,YAAZ,IAA4B,EAFtB,CADF;AAKVE,MAAAA,gBAAgB,oBACVJ,WAAW,CAACI,gBAAZ,IAAgC,EADtB;AALN,KAAZ;AASA,WAAO,KAAKb,gBAAL,CAAsBU,GAAtB,CAAP;AACD;;AAtBiC;;;;AAyBpC,SAASN,cAAT,CACEH,YADF,EAEEa,OAFF,EAG0B;AACxB,QAAMJ,GAAG,GAAGT,YAAY,CAACa,OAAD,CAAxB;;AACA,MAAI,CAACJ,GAAL,EAAU;AACR,WAAO,EAAP;AACD;;AACD,QAAMK,aAAa,GAAGC,2CAA2BF,OAA3B,CAAtB;;AACA,QAAMR,OAAO,GAAGW,MAAM,CAACX,OAAP,CAAeI,GAAf,EAAoBQ,GAApB,CAAwB,CAAC,CAACC,KAAD,EAAQC,KAAR,CAAD,KAA+D;AACrG,WAAOC,WAAW,CAACF,KAAD,EAAQC,KAAR,EAAeL,aAAf,CAAlB;AACD,GAFe,CAAhB;AAGA,SAAOT,OAAP;AACD;;AAED,SAASe,WAAT,CACEF,KADF,EAEEC,KAFF,EAGEL,aAHF,EAIwB;AACtB,QAAMO,OAAO,GAAG,OAAOF,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACE,OAA1D;AACA,QAAMC,QAAQ,GAAG,OAAOH,KAAP,KAAiB,QAAjB,GAA4B,KAA5B,GAAoCA,KAAK,CAACG,QAA3D;AACA,QAAMC,UAAqC,GAAG;AAC5CF,IAAAA,OAD4C;AAE5CC,IAAAA;AAF4C,GAA9C;AAIA,QAAME,KAA2B,GAAG;AAClCC,IAAAA,YAAY,EAAEP,KADoB;AAElCC,IAAAA,KAAK,EAAEI,UAF2B;AAGlCT,IAAAA;AAHkC,GAApC;AAKA,SAAOU,KAAP;AACD","sourcesContent":["import {\n  WorkspacePolicy,\n  WorkspacePolicyConfigObject,\n  WorkspacePolicyConfigKeysNames,\n  WorkspacePolicyEntry,\n  WorkspacePolicyConfigEntryValue,\n  WorkspacePolicyEntryValue,\n} from './workspace-policy';\nimport { LIFECYCLE_TYPE_BY_KEY_NAME, WorkspaceDependencyLifecycleType } from '../../dependencies';\n\nexport class WorkspacePolicyFactory {\n  fromConfigObject(configObject: WorkspacePolicyConfigObject): WorkspacePolicy {\n    if (!configObject) {\n      return new WorkspacePolicy([]);\n    }\n    const runtimeEntries = entriesFromKey(configObject, 'dependencies');\n    const peerEntries = entriesFromKey(configObject, 'peerDependencies');\n    const entries = runtimeEntries.concat(peerEntries);\n    return new WorkspacePolicy(entries);\n  }\n\n  fromPackageJson(packageJson: Record<string, any>) {\n    const obj = {\n      dependencies: {\n        ...(packageJson.devDependencies || {}),\n        ...(packageJson.dependencies || {}),\n      },\n      peerDependencies: {\n        ...(packageJson.peerDependencies || {}),\n      },\n    };\n    return this.fromConfigObject(obj);\n  }\n}\n\nfunction entriesFromKey(\n  configObject: WorkspacePolicyConfigObject,\n  keyName: WorkspacePolicyConfigKeysNames\n): WorkspacePolicyEntry[] {\n  const obj = configObject[keyName];\n  if (!obj) {\n    return [];\n  }\n  const lifecycleType = LIFECYCLE_TYPE_BY_KEY_NAME[keyName];\n  const entries = Object.entries(obj).map(([depId, value]: [string, WorkspacePolicyConfigEntryValue]) => {\n    return createEntry(depId, value, lifecycleType);\n  });\n  return entries;\n}\n\nfunction createEntry(\n  depId: string,\n  value: WorkspacePolicyConfigEntryValue,\n  lifecycleType: WorkspaceDependencyLifecycleType\n): WorkspacePolicyEntry {\n  const version = typeof value === 'string' ? value : value.version;\n  const preserve = typeof value === 'string' ? false : value.preserve;\n  const entryValue: WorkspacePolicyEntryValue = {\n    version,\n    preserve,\n  };\n  const entry: WorkspacePolicyEntry = {\n    dependencyId: depId,\n    value: entryValue,\n    lifecycleType,\n  };\n  return entry;\n}\n"]}