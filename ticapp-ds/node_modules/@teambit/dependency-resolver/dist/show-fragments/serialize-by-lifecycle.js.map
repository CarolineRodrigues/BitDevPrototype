{"version":3,"sources":["serialize-by-lifecycle.ts"],"names":["serializeByLifecycle","deps","lifecycle","filteredByLifecycle","filter","dep","longestLength","getLongestDepName","paddedNames","dependencies","map","paddedName","getNameWithVersion","padEnd","type","join","longestDep","length","nameWithVersion","getPackageName","version","id"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,SAASA,oBAAT,CAA8BC,IAA9B,EAAoDC,SAApD,EAAwF;AAC7F,QAAMC,mBAAmB,GAAGF,IAAI,CAACG,MAAL,CAAaC,GAAD,IAASA,GAAG,CAACH,SAAJ,KAAkBA,SAAvC,CAA5B;AACA,QAAMI,aAAa,GAAGC,iBAAiB,CAACJ,mBAAD,CAAvC;AACA,QAAMK,WAAW,GAAGL,mBAAmB,CAACM,YAApB,CAAiCC,GAAjC,CAAsCL,GAAD,IAAS;AAChE,UAAMM,UAAU,GAAGC,kBAAkB,CAACP,GAAD,CAAlB,CAAwBQ,MAAxB,CAA+BP,aAAa,GAAG,CAA/C,EAAkD,GAAlD,CAAnB;AACA,WAAQ,GAAEK,UAAW,KAAIN,GAAG,CAACS,IAAK,GAAlC;AACD,GAHmB,CAApB;AAIA,SAAON,WAAW,CAACO,IAAZ,CAAiB,IAAjB,CAAP;AACD;;AAED,SAASR,iBAAT,CAA2BN,IAA3B,EAAyD;AACvD,QAAMe,UAAU,GAAG,qBAAMf,IAAI,CAACQ,YAAX,EAA0BJ,GAAD,IAASO,kBAAkB,CAACP,GAAD,CAAlB,CAAwBY,MAA1D,CAAnB;AACA,MAAI,CAACD,UAAL,EAAiB,OAAO,EAAP;AACjB,SAAOJ,kBAAkB,CAACI,UAAD,CAAlB,CAA+BC,MAAtC;AACD;;AAED,SAASL,kBAAT,CAA4BP,GAA5B,EAA6C;AAAA;;AAC3C,QAAMa,eAAe,GAAG,uBAAAb,GAAG,CAACc,cAAJ,yEAAAd,GAAG,IACtB,GAAD,wBAAGA,GAAG,CAACc,cAAP,yDAAG,0BAAAd,GAAG,CAAoB,IAAGA,GAAG,CAACe,OAAQ,EADlB,GAEtB,GAAEf,GAAG,CAACgB,EAAG,IAAGhB,GAAG,CAACe,OAAQ,EAF7B;AAGA,SAAOF,eAAP;AACD","sourcesContent":["import { maxBy } from 'lodash';\nimport type { DependencyList, DependencyLifecycleType, Dependency } from '../dependencies';\n\nexport function serializeByLifecycle(deps: DependencyList, lifecycle: DependencyLifecycleType) {\n  const filteredByLifecycle = deps.filter((dep) => dep.lifecycle === lifecycle);\n  const longestLength = getLongestDepName(filteredByLifecycle);\n  const paddedNames = filteredByLifecycle.dependencies.map((dep) => {\n    const paddedName = getNameWithVersion(dep).padEnd(longestLength + 1, '-');\n    return `${paddedName} (${dep.type})`;\n  });\n  return paddedNames.join('\\n');\n}\n\nfunction getLongestDepName(deps: DependencyList): number {\n  const longestDep = maxBy(deps.dependencies, (dep) => getNameWithVersion(dep).length);\n  if (!longestDep) return 50;\n  return getNameWithVersion(longestDep).length;\n}\n\nfunction getNameWithVersion(dep: Dependency) {\n  const nameWithVersion = dep.getPackageName?.()\n    ? `${dep.getPackageName?.()}@${dep.version}`\n    : `${dep.id}@${dep.version}`;\n  return nameWithVersion;\n}\n"]}