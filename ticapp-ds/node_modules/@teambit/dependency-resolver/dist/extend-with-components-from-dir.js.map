{"version":3,"sources":["extend-with-components-from-dir.ts"],"names":["extendWithComponentsFromDir","rootDir","manifestsByPaths","files","fs","readdir","withFileTypes","Promise","all","filter","file","isDirectory","name","map","dir","path","join","dirPath","readJson","err","code"],"mappings":";;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,2BAAf,CAA2CC,OAA3C,EAA4DC,gBAA5D,EAA8E;AACnF,QAAMC,KAAK,GAAG,MAAMC,mBAAGC,OAAH,CAAWJ,OAAX,EAAoB;AAAEK,IAAAA,aAAa,EAAE;AAAjB,GAApB,CAApB;AACA,SAAOC,OAAO,CAACC,GAAR,CACLL,KAAK,CACFM,MADH,CACWC,IAAD,IAAUA,IAAI,CAACC,WAAL,MAAsBD,IAAI,CAACE,IAAL,KAAc,cADxD,EAEGC,GAFH,CAEQC,GAAD,IAASC,gBAAKC,IAAL,CAAUf,OAAV,EAAmBa,GAAG,CAACF,IAAvB,CAFhB,EAGGH,MAHH,CAGWQ,OAAD,IAAa,CAACf,gBAAgB,CAACe,OAAD,CAHxC,EAIGJ,GAJH,CAIO,MAAOI,OAAP,IAAmB;AACtB,QAAI;AACFf,MAAAA,gBAAgB,CAACe,OAAD,CAAhB,GAA4B,MAAMb,mBAAGc,QAAH,CAAYH,gBAAKC,IAAL,CAAUC,OAAV,EAAmB,cAAnB,CAAZ,CAAlC;AACD,KAFD,CAEE,OAAOE,GAAP,EAAiB;AACjB,UAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B,MAAMD,GAAN;AAC5B;AACF,GAVH,CADK,CAAP;AAaD","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\n/**\n * Currently, the same capsule directory is used multiple times during installation.\n * The issue is that the state between installations is not preserved,\n * so the node_modules directory gets broken on each sunseqent install.\n * This function is for finding all components in the root of the capsule and reading their manifests.\n * This way the package manager will have all the necessary information to keep the node_modules directory\n * in the correct state.\n */\nexport async function extendWithComponentsFromDir(rootDir: string, manifestsByPaths) {\n  const files = await fs.readdir(rootDir, { withFileTypes: true });\n  return Promise.all(\n    files\n      .filter((file) => file.isDirectory() && file.name !== 'node_modules')\n      .map((dir) => path.join(rootDir, dir.name))\n      .filter((dirPath) => !manifestsByPaths[dirPath])\n      .map(async (dirPath) => {\n        try {\n          manifestsByPaths[dirPath] = await fs.readJson(path.join(dirPath, 'package.json'));\n        } catch (err: any) {\n          if (err.code !== 'ENOENT') throw err;\n        }\n      })\n  );\n}\n"]}