{"version":3,"sources":["dependency-installer.ts"],"names":["DEFAULT_PM_INSTALL_OPTIONS","dedupe","copyPeerToRuntimeOnRoot","copyPeerToRuntimeOnComponents","installPeersFromEnvs","DEFAULT_INSTALL_OPTIONS","installTeambitBit","DependencyInstaller","constructor","packageManager","aspectLoader","logger","rootDir","cacheRootDir","preInstallSubscriberList","postInstallSubscriberList","nodeLinker","install","rootPolicy","componentDirectoryMap","options","packageManagerOptions","args","runPrePostSubscribers","mainAspect","finalRootDir","RootDirNotDefined","calculatedPmOpts","packageManagerConfigRootDir","version","packageName","MainAspectNotInstallable","add","dependencyId","lifecycleType","value","cleanCompsNodeModules","promises","toArray","map","dir","nmDir","path","join","fs","remove","Promise","all","subscribers","type","message","setStatusLine","subscriber","consoleSuccess"],"mappings":"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","sourcesContent":["import mapSeries from 'p-map-series';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport { MainAspect, AspectLoaderMain } from '@teambit/aspect-loader';\nimport { ComponentMap } from '@teambit/component';\nimport { Logger } from '@teambit/logger';\nimport { PathAbsolute } from '@teambit/legacy/dist/utils/path';\nimport { MainAspectNotInstallable, RootDirNotDefined } from './exceptions';\nimport { PackageManager, PackageManagerInstallOptions } from './package-manager';\nimport { WorkspacePolicy } from './policy';\n\nconst DEFAULT_PM_INSTALL_OPTIONS: PackageManagerInstallOptions = {\n  dedupe: true,\n  copyPeerToRuntimeOnRoot: true,\n  copyPeerToRuntimeOnComponents: false,\n  installPeersFromEnvs: false,\n};\n\nconst DEFAULT_INSTALL_OPTIONS: InstallOptions = {\n  installTeambitBit: false,\n};\n\nexport type InstallArgs = {\n  rootDir: string | undefined;\n  rootPolicy: WorkspacePolicy;\n  componentDirectoryMap: ComponentMap<string>;\n  options: InstallOptions;\n  packageManagerOptions: PackageManagerInstallOptions;\n};\n\nexport type InstallOptions = {\n  installTeambitBit: boolean;\n  packageManagerConfigRootDir?: string;\n};\n\nexport type PreInstallSubscriber = (installer: DependencyInstaller, installArgs: InstallArgs) => Promise<void>;\nexport type PreInstallSubscriberList = Array<PreInstallSubscriber>;\n\nexport type PostInstallSubscriber = (installer: DependencyInstaller, installArgs: InstallArgs) => Promise<void>;\nexport type PostInstallSubscriberList = Array<PostInstallSubscriber>;\n\nexport class DependencyInstaller {\n  constructor(\n    /**\n     * package manager instance.\n     */\n    private packageManager: PackageManager,\n\n    private aspectLoader: AspectLoaderMain,\n\n    private logger: Logger,\n\n    private rootDir?: string | PathAbsolute,\n\n    private cacheRootDir?: string | PathAbsolute,\n\n    private preInstallSubscriberList?: PreInstallSubscriberList,\n\n    private postInstallSubscriberList?: PostInstallSubscriberList,\n\n    private nodeLinker?: 'hoisted' | 'isolated'\n  ) {}\n\n  async install(\n    rootDir: string | undefined,\n    rootPolicy: WorkspacePolicy,\n    componentDirectoryMap: ComponentMap<string>,\n    options: InstallOptions = DEFAULT_INSTALL_OPTIONS,\n    packageManagerOptions: PackageManagerInstallOptions = DEFAULT_PM_INSTALL_OPTIONS\n  ) {\n    const args = {\n      componentDirectoryMap,\n      options,\n      packageManagerOptions,\n      rootDir,\n      rootPolicy,\n    };\n    await this.runPrePostSubscribers(this.preInstallSubscriberList, 'pre', args);\n    const mainAspect: MainAspect = this.aspectLoader.mainAspect;\n    const finalRootDir = rootDir || this.rootDir;\n    if (!finalRootDir) {\n      throw new RootDirNotDefined();\n    }\n    // Make sure to take other default if passed options with only one option\n    const calculatedPmOpts = {\n      ...DEFAULT_PM_INSTALL_OPTIONS,\n      cacheRootDir: this.cacheRootDir,\n      nodeLinker: this.nodeLinker,\n      packageManagerConfigRootDir: options.packageManagerConfigRootDir,\n      ...packageManagerOptions,\n    };\n    if (options.installTeambitBit) {\n      if (!mainAspect.version || !mainAspect.packageName) {\n        throw new MainAspectNotInstallable();\n      }\n      const version = mainAspect.version;\n      rootPolicy.add({\n        dependencyId: mainAspect.packageName,\n        lifecycleType: 'runtime',\n        value: {\n          version,\n        },\n      });\n    }\n\n    // remove node modules dir for all components dirs, since it might contain left overs from previous install\n    await this.cleanCompsNodeModules(componentDirectoryMap);\n\n    // TODO: the cache should be probably passed to the package manager constructor not to the install function\n    await this.packageManager.install(finalRootDir, rootPolicy, componentDirectoryMap, calculatedPmOpts);\n    await this.runPrePostSubscribers(this.postInstallSubscriberList, 'post', args);\n    return componentDirectoryMap;\n  }\n\n  private async cleanCompsNodeModules(componentDirectoryMap: ComponentMap<string>) {\n    const promises = componentDirectoryMap.toArray().map(([, dir]) => {\n      const nmDir = path.join(dir, 'node_modules');\n      return fs.remove(nmDir);\n    });\n    return Promise.all(promises);\n  }\n\n  private async runPrePostSubscribers(\n    subscribers: PreInstallSubscriberList | PostInstallSubscriberList = [],\n    type: 'pre' | 'post',\n    args: InstallArgs\n  ): Promise<void> {\n    let message = 'running pre install subscribers';\n    if (type === 'post') {\n      message = 'running post install subscribers';\n    }\n    this.logger.setStatusLine(message);\n    await mapSeries(subscribers, async (subscriber) => {\n      return subscriber(this, args);\n    });\n    this.logger.consoleSuccess(message);\n  }\n}\n"]}