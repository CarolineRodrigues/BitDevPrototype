{"version":3,"sources":["dependency-resolver.graphql.ts"],"names":["DependencyTypes","dependencyResolverSchema","dependencyResolver","typeDefs","resolvers","Component","componentPolicy","component","variantPolicy","getPolicy","serialize","dependencies","dependenciesList","getDependencies","serialized","map","type","__type","__typename","Dependency","__resolveType","dependency"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;IAKKA,e;;WAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAKE,SAASC,wBAAT,CAAkCC,kBAAlC,EAAsF;AAC3F,SAAO;AACLC,IAAAA,QAAQ,EAAE,0BAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjDS;AAkDLC,IAAAA,SAAS,EAAE;AACTC,MAAAA,SAAS,EAAE;AACTC,QAAAA,eAAe,EAAE,MAAOC,SAAP,IAAgC;AAC/C,gBAAMC,aAAa,GAAG,MAAMN,kBAAkB,CAACO,SAAnB,CAA6BF,SAA7B,CAA5B;AACA,iBAAOC,aAAa,CAACE,SAAd,EAAP;AACD,SAJQ;AAKTC,QAAAA,YAAY,EAAE,MAAOJ,SAAP,IAAgC;AAC5C,gBAAMK,gBAAgB,GAAG,MAAMV,kBAAkB,CAACW,eAAnB,CAAmCN,SAAnC,CAA/B;AACA,gBAAMO,UAAU,GAAGF,gBAAgB,CAACF,SAAjB,EAAnB;AACA,iBAAOI,UAAU,CAACC,GAAX,CAAgBL,SAAD,IAAe;AACnC,kBAAMM,IAAI,GAAGhB,eAAe,CAACU,SAAS,CAACO,MAAX,CAA5B,CADmC,CAEnC;;AACAP,YAAAA,SAAS,CAACM,IAAV,GAAiBN,SAAS,CAACO,MAA3B,CAHmC,CAInC;;AACA,mBAAOP,SAAS,CAACO,MAAjB;AACA;AACEC,cAAAA,UAAU,EAAEF;AADd,eAEKN,SAFL;AAID,WAVM,CAAP;AAWD,SAnBQ;AAoBTS,QAAAA,UAAU,EAAE;AACVC,UAAAA,aAAa,EAAGC,UAAD,IAA4B;AACzC,mBAAOrB,eAAe,CAACqB,UAAU,CAACL,IAAZ,CAAtB;AACD;AAHS;AApBH;AADF;AAlDN,GAAP;AA+ED","sourcesContent":["import { Component } from '@teambit/component';\nimport { Schema } from '@teambit/graphql';\nimport gql from 'graphql-tag';\n\nimport { DependencyResolverMain } from './dependency-resolver.main.runtime';\nimport { Dependency } from './dependencies';\n\nenum DependencyTypes {\n  component = 'ComponentDependency',\n  package = 'PackageDependency',\n}\n\nexport function dependencyResolverSchema(dependencyResolver: DependencyResolverMain): Schema {\n  return {\n    typeDefs: gql`\n      interface Dependency {\n        id: String!\n        version: String!\n        lifecycle: String!\n        type: String!\n        packageName: String # TODO - remove this after resolving the issue with apollo client when packages dont get packageName\n      }\n      # union Dependency = PackageDependency | ComponentDependency\n\n      type ComponentIdObject {\n        scope: String!\n        name: String!\n        version: String!\n      }\n\n      type PackageDependency implements Dependency {\n        id: String!\n        version: String!\n        lifecycle: String!\n        type: String!\n        packageName: String # TODO - remove this after resolving the issue with apollo client when packages dont get packageName\n      }\n\n      type ComponentDependency implements Dependency {\n        id: String!\n        version: String!\n        lifecycle: String!\n        isExtension: Boolean!\n        packageName: String!\n        type: String!\n      }\n\n      type PolicyValue {\n        version: String!\n        resolveFromEnv: Boolean\n      }\n\n      type Policy {\n        dependencyId: String!\n        lifecycleType: String!\n        value: PolicyValue!\n      }\n\n      extend type Component {\n        dependencies: [Dependency]\n        componentPolicy: [Policy]\n      }\n    `,\n    resolvers: {\n      Component: {\n        componentPolicy: async (component: Component) => {\n          const variantPolicy = await dependencyResolver.getPolicy(component);\n          return variantPolicy.serialize();\n        },\n        dependencies: async (component: Component) => {\n          const dependenciesList = await dependencyResolver.getDependencies(component);\n          const serialized = dependenciesList.serialize();\n          return serialized.map((serialize) => {\n            const type = DependencyTypes[serialize.__type];\n            // @ts-ignore\n            serialize.type = serialize.__type;\n            // @ts-ignore\n            delete serialize.__type;\n            return {\n              __typename: type,\n              ...serialize,\n            };\n          });\n        },\n        Dependency: {\n          __resolveType: (dependency: Dependency) => {\n            return DependencyTypes[dependency.type];\n          },\n        },\n      },\n    },\n  };\n}\n"]}