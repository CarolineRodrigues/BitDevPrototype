{"version":3,"sources":["index-by-dep-id.ts"],"names":["indexByDepId","rootPolicy","componentDependenciesMap","result","Map","forEach","depsObject","compPackageName","addSpecificLifeCycleDepsToIndex","addPreservedFromRoot","index","preserved","filter","entry","value","preserve","metadata","preservedVersion","version","preservedLifecycleType","lifecycleType","setMetadataToExistingIndexItem","dependencyId","depId","existingItem","get","origin","deps","depKeyName","LIFECYCLE_TYPE_BY_KEY_NAME","addComponentDepToDepIdIndex","range","componentItem","has","item","componentItems","set","push"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,YAAT,CACLC,UADK,EAELC,wBAFK,EAGa;AAClB,QAAMC,MAAwB,GAAG,IAAIC,GAAJ,EAAjC;AACAF,EAAAA,wBAAwB,CAACG,OAAzB,CAAiC,CAACC,UAAD,EAAaC,eAAb,KAAiC;AAChE,sCAAkBC,+BAA+B,CAACL,MAAD,EAASI,eAAT,CAAjD,EAA4ED,UAA5E;AACD,GAFD;AAGAG,EAAAA,oBAAoB,CAACN,MAAD,EAASF,UAAT,CAApB;AACA,SAAOE,MAAP;AACD;;AAED,SAASM,oBAAT,CAA8BC,KAA9B,EAAuDT,UAAvD,EAA0F;AACxF,QAAMU,SAAS,GAAGV,UAAU,CAACW,MAAX,CAAmBC,KAAD,IAAW,CAAC,CAACA,KAAK,CAACC,KAAN,CAAYC,QAA3C,CAAlB;AACAJ,EAAAA,SAAS,CAACN,OAAV,CAAmBQ,KAAD,IAAW;AAC3B,UAAMG,QAAsC,GAAG;AAC7CC,MAAAA,gBAAgB,EAAEJ,KAAK,CAACC,KAAN,CAAYI,OADe;AAE7CC,MAAAA,sBAAsB,EAAEN,KAAK,CAACO;AAFe,KAA/C;AAIAC,IAAAA,8BAA8B,CAACX,KAAD,EAAQG,KAAK,CAACS,YAAd,EAA4BN,QAA5B,CAA9B;AACD,GAND;AAOD;;AAED,SAASK,8BAAT,CACEX,KADF,EAEEa,KAFF,EAGEP,QAHF,EAIQ;AACN,QAAMQ,YAAY,GAAGd,KAAK,CAACe,GAAN,CAAUF,KAAV,CAArB,CADM,CAEN;;AACA,MAAIC,YAAJ,EAAkB;AAChBA,IAAAA,YAAY,CAACR,QAAb,GAAwBA,QAAxB;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASR,+BAAT,CAAyCE,KAAzC,EAAkEgB,MAAlE,EAAuF;AACrF,SAAO,CAACC,IAAD,EAAuBC,UAAvB,KAAqE;AAC1E,UAAMR,aAAa,GAAGS,wCAA2BD,UAA3B,CAAtB;;AACA,sCAAkBE,2BAA2B,CAACpB,KAAD,EAAQgB,MAAR,EAAgBN,aAAhB,CAA7C,EAA6EO,IAA7E;AACD,GAHD;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,2BAAT,CACEpB,KADF,EAEEgB,MAFF,EAGEN,aAHF,EAIE;AACA,SAAO,CAACW,KAAD,EAAuBR,KAAvB,KAA8C;AAAA;;AACnD,UAAMS,aAA4C,GAAG;AACnDN,MAAAA,MADmD;AAEnDK,MAAAA,KAFmD;AAGnDX,MAAAA;AAHmD,KAArD;;AAKA,QAAI,CAACV,KAAK,CAACuB,GAAN,CAAUV,KAAV,CAAL,EAAuB;AACrB,YAAMW,IAA0B,GAAG;AACjCC,QAAAA,cAAc,EAAE,CAACH,aAAD,CADiB;AAEjChB,QAAAA,QAAQ,EAAE;AAFuB,OAAnC;AAIAN,MAAAA,KAAK,CAAC0B,GAAN,CAAUb,KAAV,EAAiBW,IAAjB;AACA;AACD;;AACD,kBAAAxB,KAAK,CAACe,GAAN,CAAUF,KAAV,2DAAkBY,cAAlB,CAAiCE,IAAjC,CAAsCL,aAAtC;AACD,GAfD;AAgBD","sourcesContent":["import forEachObjIndexed from 'ramda/src/forEachObjIndexed';\nimport { LIFECYCLE_TYPE_BY_KEY_NAME } from '../../dependencies/constants';\nimport { ManifestDependenciesKeysNames, DepObjectValue } from '../manifest';\nimport { DependencyLifecycleType, SemverVersion, PackageName } from '../../dependencies';\nimport { ComponentDependenciesMap } from '../workspace-manifest-factory';\nimport { WorkspacePolicy } from '../../policy';\n\nexport type PackageNameIndexItem = {\n  metadata: PackageNameIndexItemMetadata;\n  componentItems: PackageNameIndexComponentItem[];\n};\n\nexport type PackageNameIndexItemMetadata = {\n  preservedVersion?: string;\n  preservedLifecycleType?: DependencyLifecycleType;\n};\n\nexport type PackageNameIndexComponentItem = {\n  range: SemverVersion;\n  origin: PackageName;\n  lifecycleType: DependencyLifecycleType;\n};\n\nexport type PackageNameIndex = Map<PackageName, PackageNameIndexItem>;\n\n/**\n * This will get the map of dependencies for each component and will create a new index with the dependencyId (package name) as key\n * and all components / ranges as value\n * It used as a pre processing as part of the deduping process\n *\n * @param {ComponentDependenciesMap} componentDependenciesMap\n * @returns {PackageNameIndex}\n */\nexport function indexByDepId(\n  rootPolicy: WorkspacePolicy,\n  componentDependenciesMap: ComponentDependenciesMap\n): PackageNameIndex {\n  const result: PackageNameIndex = new Map();\n  componentDependenciesMap.forEach((depsObject, compPackageName) => {\n    forEachObjIndexed(addSpecificLifeCycleDepsToIndex(result, compPackageName), depsObject);\n  });\n  addPreservedFromRoot(result, rootPolicy);\n  return result;\n}\n\nfunction addPreservedFromRoot(index: PackageNameIndex, rootPolicy: WorkspacePolicy): void {\n  const preserved = rootPolicy.filter((entry) => !!entry.value.preserve);\n  preserved.forEach((entry) => {\n    const metadata: PackageNameIndexItemMetadata = {\n      preservedVersion: entry.value.version,\n      preservedLifecycleType: entry.lifecycleType,\n    };\n    setMetadataToExistingIndexItem(index, entry.dependencyId, metadata);\n  });\n}\n\nfunction setMetadataToExistingIndexItem(\n  index: PackageNameIndex,\n  depId: PackageName,\n  metadata: PackageNameIndexItemMetadata\n): void {\n  const existingItem = index.get(depId);\n  // only change existing items\n  if (existingItem) {\n    existingItem.metadata = metadata;\n  }\n}\n\n/**\n * Mutate the index and add all deps from specific lifecycle type to the index\n *\n * @param {PackageNameIndex} index\n * @param {PackageName} origin\n * @returns\n */\nfunction addSpecificLifeCycleDepsToIndex(index: PackageNameIndex, origin: PackageName) {\n  return (deps: DepObjectValue, depKeyName: ManifestDependenciesKeysNames) => {\n    const lifecycleType = LIFECYCLE_TYPE_BY_KEY_NAME[depKeyName] as DependencyLifecycleType;\n    forEachObjIndexed(addComponentDepToDepIdIndex(index, origin, lifecycleType), deps);\n  };\n}\n\n/**\n * Mutate the index and add specific package into it\n *\n * @param {PackageNameIndex} index\n * @param {PackageName} origin\n * @param {DependencyLifecycleType} lifecycleType\n * @returns\n */\nfunction addComponentDepToDepIdIndex(\n  index: PackageNameIndex,\n  origin: PackageName,\n  lifecycleType: DependencyLifecycleType\n) {\n  return (range: SemverVersion, depId: PackageName) => {\n    const componentItem: PackageNameIndexComponentItem = {\n      origin,\n      range,\n      lifecycleType,\n    };\n    if (!index.has(depId)) {\n      const item: PackageNameIndexItem = {\n        componentItems: [componentItem],\n        metadata: {},\n      };\n      index.set(depId, item);\n      return;\n    }\n    index.get(depId)?.componentItems.push(componentItem);\n  };\n}\n"]}