{"version":3,"sources":["merge-with-root.ts"],"names":["mergeWithRootDeps","rootDependencies","dedupedDependencies","mergeSpecificLifeCycleRootDepsToDedupedDependencies","deps","depKeyName","mergeRootDepToDedupedDependencies","range","depId","isDepExistInAnyOfTheRootDedupedDependencies","existingRootDeps","toString","rootDedupedDeps","isDepExistInDepObject","dependencies","devDependencies","peerDependencies","depObjectValue"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,iBAAT,CACLC,gBADK,EAELC,mBAFK,EAGgB;AACrB,oCAAkBC,mDAAmD,CAACD,mBAAD,CAArE,EAA4FD,gBAA5F;AACA,SAAOC,mBAAP;AACD;;AAED,SAASC,mDAAT,CAA6DD,mBAA7D,EAAuG;AACrG,SAAO,CAACE,IAAD,EAAuBC,UAAvB,KAAqE;AAC1E,sCAAkBC,iCAAiC,CAACJ,mBAAD,EAAsBG,UAAtB,CAAnD,EAAsFD,IAAtF;AACD,GAFD;AAGD;;AAED,SAASE,iCAAT,CACEJ,mBADF,EAEEG,UAFF,EAGE;AACA,SAAO,CAACE,KAAD,EAAgBC,KAAhB,KAAuC;AAC5C;AACA,QAAIC,2CAA2C,CAACD,KAAD,EAAQN,mBAAR,CAA/C,EAA6E;AAC7E,UAAMQ,gBAAgB,GAAGR,mBAAmB,CAACD,gBAA7C;;AACA,QAAIS,gBAAgB,CAACL,UAAD,CAApB,EAAkC;AAChC;AACAK,MAAAA,gBAAgB,CAACL,UAAD,CAAhB,CAA6BG,KAA7B,IAAsCD,KAAK,CAACI,QAAN,EAAtC;AACD,KAHD,MAGO;AACLD,MAAAA,gBAAgB,CAACL,UAAD,CAAhB,GAA+B;AAC7B,SAACG,KAAD,GAASD,KAAK,CAACI,QAAN;AADoB,OAA/B;AAGD;AACF,GAZD;AAaD;;AAED,SAASF,2CAAT,CAAqDD,KAArD,EAAoEN,mBAApE,EAA8G;AAC5G,QAAMU,eAAe,GAAGV,mBAAmB,CAACD,gBAA5C;AACA,SACEY,qBAAqB,CAACL,KAAD,EAAQI,eAAe,CAACE,YAAxB,CAArB,IACAD,qBAAqB,CAACL,KAAD,EAAQI,eAAe,CAACG,eAAxB,CADrB,IAEAF,qBAAqB,CAACL,KAAD,EAAQI,eAAe,CAACI,gBAAxB,CAHvB;AAKD;;AAED,SAASH,qBAAT,CAA+BL,KAA/B,EAA8CS,cAA8B,GAAG,EAA/E,EAAmF;AACjF,SAAO,CAAC,CAACA,cAAc,CAACT,KAAD,CAAvB;AACD","sourcesContent":["import forEachObjIndexed from 'ramda/src/forEachObjIndexed';\nimport { SemVer } from 'semver';\n\nimport { PackageName } from '../../dependencies';\nimport { ManifestDependenciesObject, ManifestDependenciesKeysNames, DepObjectValue } from '../manifest';\nimport { DedupedDependencies } from './dedupe-dependencies';\n\n/**\n * This is the third phase of the deduping process\n * It's not exactly part of the dedupe process but its required for the bit install to work properly\n * it will take the deduped dependencies and will add them missing deps from the provided root deps\n * it used for installing deps in the root level before any component use it\n * otherwise they won't be install, and you will need to re-run install after writing the require statement in the code\n *\n * @returns {DedupedDependencies}\n */\nexport function mergeWithRootDeps(\n  rootDependencies: ManifestDependenciesObject,\n  dedupedDependencies: DedupedDependencies\n): DedupedDependencies {\n  forEachObjIndexed(mergeSpecificLifeCycleRootDepsToDedupedDependencies(dedupedDependencies), rootDependencies);\n  return dedupedDependencies;\n}\n\nfunction mergeSpecificLifeCycleRootDepsToDedupedDependencies(dedupedDependencies: DedupedDependencies) {\n  return (deps: DepObjectValue, depKeyName: ManifestDependenciesKeysNames) => {\n    forEachObjIndexed(mergeRootDepToDedupedDependencies(dedupedDependencies, depKeyName), deps);\n  };\n}\n\nfunction mergeRootDepToDedupedDependencies(\n  dedupedDependencies: DedupedDependencies,\n  depKeyName: ManifestDependenciesKeysNames\n) {\n  return (range: SemVer, depId: PackageName) => {\n    // Do not add it if it's already exist from the components calculation\n    if (isDepExistInAnyOfTheRootDedupedDependencies(depId, dedupedDependencies)) return;\n    const existingRootDeps = dedupedDependencies.rootDependencies;\n    if (existingRootDeps[depKeyName]) {\n      // @ts-ignore - for some reason ts thinks it might be undefined\n      existingRootDeps[depKeyName][depId] = range.toString();\n    } else {\n      existingRootDeps[depKeyName] = {\n        [depId]: range.toString(),\n      };\n    }\n  };\n}\n\nfunction isDepExistInAnyOfTheRootDedupedDependencies(depId: string, dedupedDependencies: DedupedDependencies) {\n  const rootDedupedDeps = dedupedDependencies.rootDependencies;\n  return (\n    isDepExistInDepObject(depId, rootDedupedDeps.dependencies) ||\n    isDepExistInDepObject(depId, rootDedupedDeps.devDependencies) ||\n    isDepExistInDepObject(depId, rootDedupedDeps.peerDependencies)\n  );\n}\n\nfunction isDepExistInDepObject(depId: string, depObjectValue: DepObjectValue = {}) {\n  return !!depObjectValue[depId];\n}\n"]}