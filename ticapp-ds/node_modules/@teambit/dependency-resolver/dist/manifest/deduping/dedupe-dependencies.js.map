{"version":3,"sources":["dedupe-dependencies.ts"],"names":["dedupeDependencies","rootPolicy","componentDependenciesMap","indexedByDepId","dedupedDependenciesWithoutRootOriginal","result","toManifest"],"mappings":";;;;;;;;;;;;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,kBAAT,CACLC,UADK,EAELC,wBAFK,EAGgB;AACrB,QAAMC,cAAc,GAAG,kCAAaF,UAAb,EAAyBC,wBAAzB,CAAvB;AACA,QAAME,sCAAsC,GAAG,4CAAkBD,cAAlB,CAA/C;AACA,QAAME,MAAM,GAAG,wCAAkBJ,UAAU,CAACK,UAAX,EAAlB,EAA2CF,sCAA3C,CAAf;AACA,SAAOC,MAAP;AACD","sourcesContent":["import { ManifestDependenciesObject } from '../manifest';\nimport { WorkspacePolicy } from '../../policy';\nimport { PackageName, SemverVersion } from '../../dependencies';\nimport { ComponentDependenciesMap } from '../workspace-manifest-factory';\nimport { hoistDependencies } from './hoist-dependencies';\nimport { indexByDepId } from './index-by-dep-id';\nimport { mergeWithRootDeps } from './merge-with-root';\n\nexport { getEmptyDedupedDependencies } from './hoist-dependencies';\n\nexport type conflictedComponent = {\n  componentPackageName: PackageName;\n  range: SemverVersion;\n};\n\nexport type DedupedDependenciesPeerConflicts = {\n  packageName: PackageName;\n  conflictedComponents: conflictedComponent[];\n  conflictMessage: string;\n};\n\nexport type DedupedDependenciesIssues = {\n  peerConflicts: DedupedDependenciesPeerConflicts[];\n};\n\nexport type DedupedDependencies = {\n  rootDependencies: ManifestDependenciesObject;\n  componentDependenciesMap: ComponentDependenciesMap;\n  issus?: DedupedDependenciesIssues;\n};\n\n/**\n * Main function to dedupe dependencies\n * It will optimized the dependencies structure to make sure there is minimum duplication of the same dependency (as a result of conflicted versions)\n * it will take everything possible to be defined in the root, and only conflicts in the components\n * it's similar to what happens when you use yarn workspaces\n *\n * @export\n * @returns {DedupedDependencies}\n */\nexport function dedupeDependencies(\n  rootPolicy: WorkspacePolicy,\n  componentDependenciesMap: ComponentDependenciesMap\n): DedupedDependencies {\n  const indexedByDepId = indexByDepId(rootPolicy, componentDependenciesMap);\n  const dedupedDependenciesWithoutRootOriginal = hoistDependencies(indexedByDepId);\n  const result = mergeWithRootDeps(rootPolicy.toManifest(), dedupedDependenciesWithoutRootOriginal);\n  return result;\n}\n"]}