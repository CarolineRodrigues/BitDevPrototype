{"version":3,"sources":["update-dependency-version.ts"],"names":["updateDependencyVersion","dependency","rootPolicy","variantPolicy","getPackageName","packageName","variantVersion","getDepVersion","lifecycle","variantVersionWithoutMinus","undefined","version","setVersion"],"mappings":";;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,uBAAT,CACLC,UADK,EAELC,UAFK,EAGLC,aAHK,EAIC;AACN,MAAIF,UAAU,CAACG,cAAf,EAA+B;AAC7B,UAAMC,WAAW,GAAGJ,UAAU,CAACG,cAAX,EAApB;AACA,UAAME,cAAc,GAAGH,aAAa,CAACI,aAAd,CAA4BF,WAA5B,EAAyCJ,UAAU,CAACO,SAApD,CAAvB;AACA,UAAMC,0BAA0B,GAAGH,cAAc,IAAIA,cAAc,KAAK,GAArC,GAA2CA,cAA3C,GAA4DI,SAA/F;AACA,UAAMC,OAAO,GACXF,0BAA0B,IAC1BP,UAAU,CAACK,aAAX,CAAyBF,WAAzB,EAAsCJ,UAAU,CAACO,SAAX,KAAyB,MAAzB,GAAkC,MAAlC,GAA2C,SAAjF,CADA,IAEAP,UAAU,CAACU,OAFX,IAGA,WAJF;AAKAV,IAAAA,UAAU,CAACW,UAAX,CAAsBD,OAAtB;AACD;AACF","sourcesContent":["import { Dependency } from '../dependencies';\nimport { VariantPolicy, WorkspacePolicy } from '../policy';\n\n/**\n * This will create a function that will modify the version of the component dependencies before calling the package manager install\n * It's important for this use case:\n * between 2 bit components we are not allowing a range, only a specific version as dependency\n * therefor, when resolve a component dependency we take the version from the actual installed version in the file system\n * imagine the following case\n * I have in my policy my-dep:0.0.10\n * during installation it is installed (hoisted to the root)\n * now i'm changing it to be ^0.0.11\n * On the next bit install, when I will look at the component deps I'll see it with version 0.0.10 always (that's resolved from the FS)\n * so the version ^0.0.11 will be never installed.\n * For installation purpose we want a different resolve method, we want to take the version from the policies so we will install the correct one\n * this function will get the root deps / policy, and a function to merge the component policies (by the dep resolver extension).\n * it will then search for the dep version in the component policy, than in the workspace policy and take it from there\n * now in the described case, it will be change to ^0.0.11 and will be install correctly\n * then on the next calculation for tagging it will have the installed version\n *\n * @param {Component} component\n * @param {ManifestDependenciesObject} rootDependencies\n * @param {MergeDependenciesFunc} mergeDependenciesFunc\n * @returns {DepVersionModifierFunc}\n */\nexport function updateDependencyVersion(\n  dependency: Dependency,\n  rootPolicy: WorkspacePolicy,\n  variantPolicy: VariantPolicy\n): void {\n  if (dependency.getPackageName) {\n    const packageName = dependency.getPackageName();\n    const variantVersion = variantPolicy.getDepVersion(packageName, dependency.lifecycle);\n    const variantVersionWithoutMinus = variantVersion && variantVersion !== '-' ? variantVersion : undefined;\n    const version =\n      variantVersionWithoutMinus ||\n      rootPolicy.getDepVersion(packageName, dependency.lifecycle === 'peer' ? 'peer' : 'runtime') ||\n      dependency.version ||\n      '0.0.1-new';\n    dependency.setVersion(version);\n  }\n}\n"]}