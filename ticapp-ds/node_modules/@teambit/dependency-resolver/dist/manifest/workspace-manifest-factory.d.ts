import { Component } from '@teambit/component';
import { SemVer } from 'semver';
import { DependencyList, PackageName } from '../dependencies';
import { WorkspacePolicy } from '../policy';
import { DependencyResolverMain } from '../dependency-resolver.main.runtime';
import { ManifestToJsonOptions, ManifestDependenciesObject } from './manifest';
import { WorkspaceManifest } from './workspace-manifest';
export declare type DepsFilterFn = (dependencies: DependencyList) => DependencyList;
export declare type ComponentDependenciesMap = Map<PackageName, ManifestDependenciesObject>;
export interface WorkspaceManifestToJsonOptions extends ManifestToJsonOptions {
    includeDir?: boolean;
}
export declare type CreateFromComponentsOptions = {
    filterComponentsFromManifests: boolean;
    createManifestForComponentsWithoutDependencies: boolean;
    dedupe?: boolean;
    dependencyFilterFn?: DepsFilterFn;
};
export declare class WorkspaceManifestFactory {
    private dependencyResolver;
    constructor(dependencyResolver: DependencyResolverMain);
    createFromComponents(name: string, version: SemVer, rootPolicy: WorkspacePolicy, rootDir: string, components: Component[], options?: CreateFromComponentsOptions): Promise<WorkspaceManifest>;
    private getEnvsPeersPolicy;
    /**
     * Get the components and build a map with the package name (from the component) as key and the dependencies as values
     *
     * @param {Component[]} components
     * @param {boolean} [filterComponentsFromManifests=true] - filter existing components from the dep graphs
     * @returns
     */
    private buildComponentDependenciesMap;
    private updateDependenciesVersions;
}
