{"version":3,"sources":["workspace-manifest.ts"],"names":["WorkspaceManifest","Manifest","constructor","name","version","dependencies","envPeersAutoDetectPolicy","rootDir","componentsManifestsMap","dir","getComponentMap","toJson","options","manifest","installPeersFromEnvs","peersManifest","toVersionManifest","Object","assign","toJsonWithDir"],"mappings":";;;;;;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMO,MAAMA,iBAAN,SAAgCC,oBAAhC,CAAyC;AAC9CC,EAAAA,WAAW,EACT;AACOC,EAAAA,IAFE,EAGFC,OAHE,EAIFC,YAJE,EAKDC,wBALC,EAMDC,OANC,EAOFC,sBAPE,EAQT;AACA,UAAML,IAAN,EAAYC,OAAZ,EAAqBC,YAArB;AADA,SANOF,IAMP,GANOA,IAMP;AAAA,SALOC,OAKP,GALOA,OAKP;AAAA,SAJOC,YAIP,GAJOA,YAIP;AAAA,SAHQC,wBAGR,GAHQA,wBAGR;AAAA,SAFQC,OAER,GAFQA,OAER;AAAA,SADOC,sBACP,GADOA,sBACP;AAED;;AAEM,MAAHC,GAAG,GAAG;AACR,WAAO,KAAKF,OAAZ;AACD;;AAEDG,EAAAA,eAAe,GAAG,CAAE;;AAEpBC,EAAAA,MAAM,CAACC,OAAuC,GAAG,EAA3C,EAAoE;AACxE,UAAMC,QAAQ,GAAG,MAAMF,MAAN,CAAaC,OAAb,CAAjB;;AACA,QAAIA,OAAO,CAACE,oBAAZ,EAAkC;AAAA;;AAChC,YAAMC,aAAa,4BAAG,KAAKT,wBAAR,0DAAG,sBAA+BU,iBAA/B,EAAtB;AACAH,MAAAA,QAAQ,CAACR,YAAT,GAAwBQ,QAAQ,CAACR,YAAT,IAAyB,EAAjD;AACAY,MAAAA,MAAM,CAACC,MAAP,CAAcL,QAAQ,CAACR,YAAvB,EAAqCU,aAArC;AACD;;AACD,WAAOF,QAAP;AACD;;AAEDM,EAAAA,aAAa,CAACP,OAAuC,GAAG,EAA3C,EAAmG;AAC9G,WAAO;AACLC,MAAAA,QAAQ,EAAE,KAAKF,MAAL,CAAYC,OAAZ,CADL;AAELL,MAAAA,OAAO,EAAE,KAAKA;AAFT,KAAP;AAID;;AAlC6C","sourcesContent":["import { SemVer } from 'semver';\nimport { PeersAutoDetectPolicy } from '..';\n\nimport { ComponentsManifestsMap } from '../types';\nimport { Manifest, ManifestToJsonOptions, ManifestDependenciesObject } from './manifest';\n\nexport interface WorkspaceManifestToJsonOptions extends ManifestToJsonOptions {\n  installPeersFromEnvs?: boolean;\n}\n\nexport class WorkspaceManifest extends Manifest {\n  constructor(\n    // TODO: please prefer readonly on public\n    public name: string,\n    public version: SemVer,\n    public dependencies: ManifestDependenciesObject,\n    private envPeersAutoDetectPolicy: PeersAutoDetectPolicy | undefined,\n    private rootDir: string,\n    public componentsManifestsMap: ComponentsManifestsMap\n  ) {\n    super(name, version, dependencies);\n  }\n\n  get dir() {\n    return this.rootDir;\n  }\n\n  getComponentMap() {}\n\n  toJson(options: WorkspaceManifestToJsonOptions = {}): Record<string, any> {\n    const manifest = super.toJson(options);\n    if (options.installPeersFromEnvs) {\n      const peersManifest = this.envPeersAutoDetectPolicy?.toVersionManifest();\n      manifest.dependencies = manifest.dependencies || {};\n      Object.assign(manifest.dependencies, peersManifest);\n    }\n    return manifest;\n  }\n\n  toJsonWithDir(options: WorkspaceManifestToJsonOptions = {}): { rootDir: string; manifest: Record<string, any> } {\n    return {\n      manifest: this.toJson(options),\n      rootDir: this.rootDir,\n    };\n  }\n}\n"]}