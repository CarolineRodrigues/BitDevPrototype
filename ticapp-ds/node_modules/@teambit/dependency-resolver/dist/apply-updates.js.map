{"version":3,"sources":["apply-updates.ts"],"names":["applyUpdates","outdatedPkgs","variantPoliciesByPatterns","componentPoliciesById","updatedWorkspacePolicyEntries","updatedVariants","Set","updatedComponents","outdatedPkg","source","push","dependencyId","name","value","version","latestRange","lifecycleType","targetField","variantPattern","add","componentId","Error","Array","from"],"mappings":";;;;;;;;;AAGA;AACA;AACA;AACO,SAASA,YAAT,CACLC,YADK,EAEL;AACEC,EAAAA,yBADF;AAEEC,EAAAA;AAFF,CAFK,EAaL;AACA,QAAMC,6BAAqD,GAAG,EAA9D;AACA,QAAMC,eAAe,GAAG,IAAIC,GAAJ,EAAxB;AACA,QAAMC,iBAAiB,GAAG,IAAID,GAAJ,EAA1B;;AAEA,OAAK,MAAME,WAAX,IAA0BP,YAA1B,EAAwC;AACtC,YAAQO,WAAW,CAACC,MAApB;AACE,WAAK,YAAL;AACEL,QAAAA,6BAA6B,CAACM,IAA9B,CAAmC;AACjCC,UAAAA,YAAY,EAAEH,WAAW,CAACI,IADO;AAEjCC,UAAAA,KAAK,EAAE;AACLC,YAAAA,OAAO,EAAEN,WAAW,CAACO;AADhB,WAF0B;AAKjCC,UAAAA,aAAa,EAAER,WAAW,CAACS,WAAZ,KAA4B,kBAA5B,GAAiD,MAAjD,GAA0D;AALxC,SAAnC;AAOA;;AACF,WAAK,UAAL;AACE,YAAIT,WAAW,CAACU,cAAhB,EAAgC;AAAA;;AAC9B,gBAAM;AAAEA,YAAAA,cAAF;AAAkBD,YAAAA,WAAlB;AAA+BL,YAAAA;AAA/B,cAAwCJ,WAA9C;AACAH,UAAAA,eAAe,CAACc,GAAhB,CAAoBX,WAAW,CAACU,cAAhC,EAF8B,CAG9B;;AACA,uCAAIhB,yBAAyB,CAACgB,cAAD,CAA7B,4EAAI,sBAA4CD,WAA5C,CAAJ,6EAAI,uBAA2DL,IAA3D,CAAJ,mDAAI,uBAAmE,SAAnE,CAAJ,EAAmF;AACjF;AACAV,YAAAA,yBAAyB,CAACgB,cAAD,CAAzB,CAA0CD,WAA1C,EAAwDL,IAAxD,EAA8D,SAA9D,IAA2EJ,WAAW,CAACO,WAAvF,CAFiF,CAEmB;AACrG,WAHD,MAGO;AACLb,YAAAA,yBAAyB,CAACgB,cAAD,CAAzB,CAA0CD,WAA1C,EAAwDL,IAAxD,IAAgEJ,WAAW,CAACO,WAA5E,CADK,CACoF;AAC1F;AACF;;AACD;;AACF,WAAK,WAAL;AACE,YAAIP,WAAW,CAACY,WAAhB,EAA6B;AAC3Bb,UAAAA,iBAAiB,CAACY,GAAlB,CAAsBX,WAAW,CAACY,WAAlC;;AACA,cAAIjB,qBAAqB,CAACK,WAAW,CAACY,WAAb,CAArB,CAA+CZ,WAAW,CAACS,WAA3D,EAAwET,WAAW,CAACI,IAApF,EAA0FE,OAA9F,EAAuG;AACrGX,YAAAA,qBAAqB,CAACK,WAAW,CAACY,WAAb,CAArB,CAA+CZ,WAAW,CAACS,WAA3D,EAAwET,WAAW,CAACI,IAApF,EAA0FE,OAA1F,GACEN,WAAW,CAACO,WADd;AAED,WAHD,MAGO;AACLZ,YAAAA,qBAAqB,CAACK,WAAW,CAACY,WAAb,CAArB,CAA+CZ,WAAW,CAACS,WAA3D,EAAwET,WAAW,CAACI,IAApF,IACEJ,WAAW,CAACO,WADd;AAED;AACF;;AACD;;AACF;AACE,cAAM,IAAIM,KAAJ,CAAW,yCAAwCb,WAAW,CAACC,MAAO,EAAtE,CAAN;AApCJ;AAsCD;;AACD,SAAO;AACLJ,IAAAA,eAAe,EAAEiB,KAAK,CAACC,IAAN,CAAWlB,eAAX,CADZ;AAELE,IAAAA,iBAAiB,EAAEe,KAAK,CAACC,IAAN,CAAWhB,iBAAX,CAFd;AAGLH,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { OutdatedPkg } from './get-all-policy-pkgs';\nimport { VariantPolicyConfigObject, WorkspacePolicyEntry } from './policy';\n\n/**\n * Applies updates to policies.\n */\nexport function applyUpdates(\n  outdatedPkgs: Array<Omit<OutdatedPkg, 'currentRange'>>,\n  {\n    variantPoliciesByPatterns,\n    componentPoliciesById,\n  }: {\n    variantPoliciesByPatterns: Record<string, VariantPolicyConfigObject>;\n    componentPoliciesById: Record<string, any>;\n  }\n): {\n  updatedVariants: string[];\n  updatedComponents: string[];\n  updatedWorkspacePolicyEntries: WorkspacePolicyEntry[];\n} {\n  const updatedWorkspacePolicyEntries: WorkspacePolicyEntry[] = [];\n  const updatedVariants = new Set<string>();\n  const updatedComponents = new Set<string>();\n\n  for (const outdatedPkg of outdatedPkgs) {\n    switch (outdatedPkg.source) {\n      case 'rootPolicy':\n        updatedWorkspacePolicyEntries.push({\n          dependencyId: outdatedPkg.name,\n          value: {\n            version: outdatedPkg.latestRange,\n          },\n          lifecycleType: outdatedPkg.targetField === 'peerDependencies' ? 'peer' : 'runtime',\n        });\n        break;\n      case 'variants':\n        if (outdatedPkg.variantPattern) {\n          const { variantPattern, targetField, name } = outdatedPkg;\n          updatedVariants.add(outdatedPkg.variantPattern);\n          // eslint-disable-next-line dot-notation\n          if (variantPoliciesByPatterns[variantPattern]?.[targetField]?.[name]?.['version']) {\n            // eslint-disable-line\n            variantPoliciesByPatterns[variantPattern][targetField]![name]['version'] = outdatedPkg.latestRange; // eslint-disable-line\n          } else {\n            variantPoliciesByPatterns[variantPattern][targetField]![name] = outdatedPkg.latestRange; // eslint-disable-line\n          }\n        }\n        break;\n      case 'component':\n        if (outdatedPkg.componentId) {\n          updatedComponents.add(outdatedPkg.componentId);\n          if (componentPoliciesById[outdatedPkg.componentId][outdatedPkg.targetField][outdatedPkg.name].version) {\n            componentPoliciesById[outdatedPkg.componentId][outdatedPkg.targetField][outdatedPkg.name].version =\n              outdatedPkg.latestRange;\n          } else {\n            componentPoliciesById[outdatedPkg.componentId][outdatedPkg.targetField][outdatedPkg.name] =\n              outdatedPkg.latestRange;\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported policy source for update: ${outdatedPkg.source}`);\n    }\n  }\n  return {\n    updatedVariants: Array.from(updatedVariants),\n    updatedComponents: Array.from(updatedComponents),\n    updatedWorkspacePolicyEntries,\n  };\n}\n"]}