{"version":3,"sources":["dependencies.service.tsx"],"names":["DependenciesService","render","env","descriptor","getDescriptor","id","config","language","ignoreIllegals","getDependencies","undefined","dependencies","name","JSON","stringify","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAQO,MAAMA,mBAAN,CAA4E;AAAA;AAAA,kDAC1E,cAD0E;AAAA;;AAGrE,QAANC,MAAM,CAACC,GAAD,EAAqB;AAC/B,UAAMC,UAAU,GAAG,MAAM,KAAKC,aAAL,CAAmBF,GAAnB,CAAzB;AAEA,wBACE,+BAAC,WAAD;AAAM,MAAA,GAAG,EAAEC,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEE;AAAvB,oBACE,+BAAC,WAAD;AAAM,MAAA,KAAK,EAAC;AAAZ,mCADF,eAEE,+BAAC,cAAD,OAFF,eAGE,+BAAC,WAAD,QACG,CAAAF,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEG,MAAZ,KAAsB,6BAAUH,UAAV,aAAUA,UAAV,uBAAUA,UAAU,CAAEG,MAAtB,EAA8B;AAAEC,MAAAA,QAAQ,EAAE,YAAZ;AAA0BC,MAAAA,cAAc,EAAE;AAA1C,KAA9B,CADzB,CAHF,eAME,+BAAC,cAAD,OANF,CADF;AAUD;;AAEkB,QAAbJ,aAAa,CAACF,GAAD,EAAkE;AACnF,QAAI,CAACA,GAAG,CAACA,GAAJ,CAAQO,eAAb,EAA8B,OAAOC,SAAP;AAC9B,UAAMC,YAAY,GAAG,MAAMT,GAAG,CAACA,GAAJ,CAAQO,eAAR,EAA3B;AACA,WAAO;AACLJ,MAAAA,EAAE,EAAE,KAAKO,IADJ;AAELN,MAAAA,MAAM,EAAEK,YAAY,GAAGE,IAAI,CAACC,SAAL,CAAeH,YAAf,EAA6B,IAA7B,EAAmC,CAAnC,CAAH,GAA2CD,SAF1D;AAGLK,MAAAA,WAAW,EAAE,KAAKH;AAHb,KAAP;AAKD;;AA1BgF","sourcesContent":["import React from 'react';\nimport { Text, Newline } from 'ink';\nimport { EnvService, EnvDefinition } from '@teambit/envs';\nimport highlight from 'cli-highlight';\n\nexport type DependenciesDescriptor = {\n  id: string;\n  displayName: string;\n  config?: string;\n};\n\nexport class DependenciesService implements EnvService<{}, DependenciesDescriptor> {\n  name = 'Dependencies';\n\n  async render(env: EnvDefinition) {\n    const descriptor = await this.getDescriptor(env);\n\n    return (\n      <Text key={descriptor?.id}>\n        <Text color=\"cyan\">configured dependencies: </Text>\n        <Newline />\n        <Text>\n          {descriptor?.config && highlight(descriptor?.config, { language: 'javascript', ignoreIllegals: true })}\n        </Text>\n        <Newline />\n      </Text>\n    );\n  }\n\n  async getDescriptor(env: EnvDefinition): Promise<DependenciesDescriptor | undefined> {\n    if (!env.env.getDependencies) return undefined;\n    const dependencies = await env.env.getDependencies();\n    return {\n      id: this.name,\n      config: dependencies ? JSON.stringify(dependencies, null, 2) : undefined,\n      displayName: this.name,\n    };\n  }\n}\n"]}