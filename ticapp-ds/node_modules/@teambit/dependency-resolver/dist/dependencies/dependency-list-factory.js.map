{"version":3,"sources":["dependency-list-factory.ts"],"names":["DependencyListFactory","constructor","factories","fromSerializedDependencies","serializedDependencies","dependencies","serializedDependency","type","__type","factory","UnknownDepType","dependency","parse","DependencyList","fromLegacyComponent","legacyComponent","lists","Object","values","missingDepsFromModel","getMissingDependenciesByComponentFromModel","push","merge","missingPackages","issues","getIssue","IssuesClasses","MissingPackagesDependenciesOnFs","data","componentFromModel","length","fromArray","depListFromModel","getDependenciesFromLegacyModelComponent","filteredDepList","filter","dep","packageName","getPackageName","includes","entry","extensions","findCoreExtension","DependencyResolverAspect","id"],"mappings":"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","sourcesContent":["import mapSeries from 'p-map-series';\nimport { get, flatten } from 'lodash';\nimport LegacyComponent from '@teambit/legacy/dist/consumer/component';\nimport { IssuesClasses } from '@teambit/component-issues';\nimport { DependencyFactory } from './dependency-factory';\nimport { SerializedDependency } from './dependency';\nimport { DependencyList } from './dependency-list';\nimport { UnknownDepType } from './exceptions';\nimport { DependencyResolverAspect } from '../dependency-resolver.aspect';\n\nexport class DependencyListFactory {\n  constructor(private factories: Record<string, DependencyFactory>) {}\n\n  async fromSerializedDependencies(serializedDependencies: SerializedDependency[]): Promise<DependencyList> {\n    const dependencies = await mapSeries(serializedDependencies, async (serializedDependency) => {\n      const type = serializedDependency.__type;\n      const factory = this.factories[type];\n      if (!factory) {\n        throw new UnknownDepType(type);\n      }\n      const dependency = await factory.parse(serializedDependency);\n      return dependency;\n    });\n    return new DependencyList(dependencies);\n  }\n\n  async fromLegacyComponent(legacyComponent: LegacyComponent): Promise<DependencyList> {\n    const lists = await mapSeries(Object.values(this.factories), async (factory) => {\n      if (factory.fromLegacyComponent && typeof factory.fromLegacyComponent === 'function') {\n        return factory.fromLegacyComponent(legacyComponent);\n      }\n      return new DependencyList([]);\n    });\n\n    // This is an important step, see comment for the function to better understand\n    const missingDepsFromModel = await this.getMissingDependenciesByComponentFromModel(legacyComponent);\n    lists.push(missingDepsFromModel);\n    return DependencyList.merge(lists);\n  }\n\n  /**\n   * Some time after importing component (for example), there are required dependencies which are not installed yet, they will consider as missing.\n   * since the installer it self used the calculated deps for installing we need them to be listed as well.\n   * what we do here, is to add deps from the model in case they considered as missing deps in the fs\n   * we don't want just to add all of them since some of them might be removed by the user in the fs (in the source code).\n   * by intersect the missing deps (deps which are still required in source code) with the deps from model we have a list of deps with all the required\n   * data of them\n   * @param legacyComponent\n   */\n  private async getMissingDependenciesByComponentFromModel(legacyComponent: LegacyComponent): Promise<DependencyList> {\n    const missingPackages: string[] = flatten(\n      Object.values(legacyComponent.issues?.getIssue(IssuesClasses.MissingPackagesDependenciesOnFs)?.data || {})\n    );\n    const componentFromModel = legacyComponent.componentFromModel;\n    if (!missingPackages || !missingPackages.length || !componentFromModel) {\n      return DependencyList.fromArray([]);\n    }\n    // All deps defined in model\n    const depListFromModel = await this.getDependenciesFromLegacyModelComponent(componentFromModel);\n    // Only deps from model which are also required in the current component on fs (currently missing)\n    const filteredDepList = depListFromModel.filter((dep) => {\n      const packageName = dep.getPackageName?.();\n      if (!packageName) {\n        return false;\n      }\n      return missingPackages.includes(packageName);\n    });\n    return filteredDepList;\n  }\n\n  /**\n   * Get dependencies based on the component from model attached to the legacy (consumer component)\n   * @param legacyComponent\n   */\n  private async getDependenciesFromLegacyModelComponent(legacyComponent: LegacyComponent): Promise<DependencyList> {\n    const entry = legacyComponent.extensions.findCoreExtension(DependencyResolverAspect.id);\n    if (!entry) {\n      return DependencyList.fromArray([]);\n    }\n    const serializedDependencies: SerializedDependency[] = get(entry, ['data', 'dependencies'], []);\n    return this.fromSerializedDependencies(serializedDependencies);\n  }\n}\n"]}