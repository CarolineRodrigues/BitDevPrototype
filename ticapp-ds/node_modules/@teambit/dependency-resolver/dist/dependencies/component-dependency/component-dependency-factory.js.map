{"version":3,"sources":["component-dependency-factory.ts"],"names":["ComponentDependencyFactory","constructor","componentAspect","type","TYPE","parse","serialized","id","componentId","scope","ComponentID","fromObject","getHost","resolveComponentId","ComponentDependency","isExtension","packageName","version","lifecycle","source","fromLegacyComponent","legacyComponent","runtimeDeps","dependencies","get","dep","transformLegacyComponentDepToSerializedDependency","devDeps","devDependencies","extensionDeps","extensions","extension","transformLegacyComponentExtensionToSerializedDependency","filteredExtensionDeps","serializedComponentDeps","componentDeps","dependencyList","DependencyList","legacyDep","host","depComponent","state","_consumer","toString","serialize","getVersion","__type","extensionId","undefined","extComponent"],"mappings":"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","sourcesContent":["import mapSeries from 'p-map-series';\nimport { ComponentMain } from '@teambit/component';\nimport { compact } from 'lodash';\nimport { ComponentID } from '@teambit/component-id';\nimport { Dependency as LegacyDependency } from '@teambit/legacy/dist/consumer/component/dependencies';\nimport LegacyComponent from '@teambit/legacy/dist/consumer/component';\nimport { ExtensionDataEntry } from '@teambit/legacy/dist/consumer/config';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport { ComponentDependency, SerializedComponentDependency, TYPE } from './component-dependency';\nimport { DependencyLifecycleType } from '../dependency';\nimport { DependencyFactory } from '../dependency-factory';\nimport { DependencyList } from '../dependency-list';\n\n// TODO: think about where is the right place to put this\n// export class ComponentDependencyFactory implements DependencyFactory<ComponentDependency, SerializedComponentDependency> {\n//   parse(serialized: SerializedComponentDependency) {\n//     const id = ComponentID.fromObject(serialized.componentId);\n//     return new ComponentDependency(id, serialized.id, serialized.version, serialized.type, serialized.lifecycle as DependencyLifecycleType);\n//   }\n// }\n\nexport class ComponentDependencyFactory implements DependencyFactory {\n  type: string;\n\n  constructor(private componentAspect: ComponentMain) {\n    this.type = TYPE;\n  }\n\n  // TODO: solve this generics issue and remove the ts-ignore\n  // @ts-ignore\n  async parse<ComponentDependency, S extends SerializedComponentDependency>(\n    serialized: S\n  ): Promise<ComponentDependency> {\n    let id;\n\n    if (serialized.componentId.scope) {\n      // @ts-ignore - ts is saying scope is possibly missing, but just checked it is defined\n      id = ComponentID.fromObject(serialized.componentId);\n    } else {\n      id = await this.componentAspect.getHost().resolveComponentId(serialized.id);\n    }\n\n    return (new ComponentDependency(\n      id,\n      serialized.isExtension,\n      serialized.packageName,\n      serialized.id,\n      serialized.version,\n      serialized.lifecycle as DependencyLifecycleType,\n      serialized.source\n    ) as unknown) as ComponentDependency;\n  }\n\n  async fromLegacyComponent(legacyComponent: LegacyComponent): Promise<DependencyList> {\n    const runtimeDeps = await mapSeries(legacyComponent.dependencies.get(), (dep) =>\n      this.transformLegacyComponentDepToSerializedDependency(dep, 'runtime')\n    );\n    const devDeps = await mapSeries(legacyComponent.devDependencies.get(), (dep) =>\n      this.transformLegacyComponentDepToSerializedDependency(dep, 'dev')\n    );\n    const extensionDeps = await mapSeries(legacyComponent.extensions, (extension) =>\n      this.transformLegacyComponentExtensionToSerializedDependency(extension, 'dev')\n    );\n    const filteredExtensionDeps: SerializedComponentDependency[] = compact(extensionDeps);\n    const serializedComponentDeps = [...runtimeDeps, ...devDeps, ...filteredExtensionDeps];\n    const componentDeps: ComponentDependency[] = await mapSeries(serializedComponentDeps, (dep) => this.parse(dep));\n    const dependencyList = new DependencyList(componentDeps);\n    return dependencyList;\n  }\n\n  private async transformLegacyComponentDepToSerializedDependency(\n    legacyDep: LegacyDependency,\n    lifecycle: DependencyLifecycleType\n  ): Promise<SerializedComponentDependency> {\n    let packageName = legacyDep.packageName || '';\n    if (!packageName) {\n      const host = this.componentAspect.getHost();\n      const id = await host.resolveComponentId(legacyDep.id);\n      const depComponent = await host.get(id);\n      if (depComponent) {\n        packageName = componentIdToPackageName(depComponent.state._consumer);\n      }\n    }\n\n    return {\n      id: legacyDep.id.toString(),\n      isExtension: false,\n      packageName,\n      componentId: legacyDep.id.serialize(),\n      version: legacyDep.id.getVersion().toString(),\n      __type: TYPE,\n      lifecycle,\n    };\n  }\n\n  private async transformLegacyComponentExtensionToSerializedDependency(\n    extension: ExtensionDataEntry,\n    lifecycle: DependencyLifecycleType\n  ): Promise<SerializedComponentDependency | undefined> {\n    if (!extension.extensionId) {\n      return undefined;\n    }\n    const host = this.componentAspect.getHost();\n    const id = await host.resolveComponentId(extension.extensionId);\n    const extComponent = await host.get(id);\n    let packageName = '';\n    if (extComponent) {\n      packageName = componentIdToPackageName(extComponent.state._consumer);\n    }\n    return {\n      id: extension.extensionId.toString(),\n      isExtension: true,\n      packageName,\n      componentId: extension.extensionId.serialize(),\n      version: extension.extensionId.getVersion().toString(),\n      __type: TYPE,\n      lifecycle,\n    };\n  }\n}\n"]}