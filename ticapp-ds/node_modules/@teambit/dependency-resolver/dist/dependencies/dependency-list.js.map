{"version":3,"sources":["dependency-list.ts"],"names":["DependencyList","constructor","_dependencies","uniqDeps","dependencies","findDependency","componentIdStr","opts","ignoreVersion","find","dep","id","componentIdStrWithoutVersion","removeVersion","forEach","predicate","map","filter","filtered","fromArray","toTypeArray","typeName","list","type","byTypeName","byLifecycle","lifecycle","serialize","serialized","toDependenciesManifest","manifest","devDependencies","peerDependencies","keyName","KEY_NAME_BY_LIFECYCLE_TYPE","entry","toManifest","packageName","version","merge","lists","res","deps","reduce","acc","curr","concat","uniq","split"],"mappings":"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","sourcesContent":["import { uniqBy, property } from 'lodash';\nimport { Dependency, DependencyLifecycleType, SerializedDependency, SemverVersion, PackageName } from './dependency';\nimport { KEY_NAME_BY_LIFECYCLE_TYPE } from './constants';\n\nexport type LifecycleDependenciesManifest = Record<PackageName, SemverVersion>;\n\nexport interface DependenciesManifest {\n  dependencies?: LifecycleDependenciesManifest;\n  devDependencies?: LifecycleDependenciesManifest;\n  peerDependencies?: LifecycleDependenciesManifest;\n}\n\nexport type FindDependencyOptions = {\n  ignoreVersion?: boolean;\n};\nexport class DependencyList {\n  constructor(private _dependencies: Array<Dependency>) {\n    this._dependencies = uniqDeps(_dependencies);\n  }\n  // constructor(private _dependencies: Dependency[]){}\n\n  get dependencies(): Dependency[] {\n    return this._dependencies;\n  }\n\n  /**\n   * @param componentIdStr complete string include the scope and the version\n   */\n  findDependency(componentIdStr: string, opts: FindDependencyOptions = {}): Dependency | undefined {\n    const ignoreVersion = opts.ignoreVersion;\n    if (!ignoreVersion) {\n      return this.dependencies.find((dep) => dep.id === componentIdStr);\n    }\n    const componentIdStrWithoutVersion = removeVersion(componentIdStr);\n    return this.dependencies.find((dep) => removeVersion(dep.id) === componentIdStrWithoutVersion);\n  }\n\n  forEach(predicate: (dep: Dependency, index?: number) => void): void {\n    this.dependencies.forEach(predicate);\n  }\n\n  map(predicate: (dep: Dependency, index?: number) => any) {\n    return this.dependencies.map(predicate);\n  }\n\n  filter(predicate: (dep: Dependency, index?: number) => boolean): DependencyList {\n    const filtered = this.dependencies.filter(predicate);\n    return DependencyList.fromArray(filtered);\n  }\n\n  toTypeArray<T extends Dependency>(typeName: string): T[] {\n    const list: T[] = this.dependencies.filter((dep) => dep.type === typeName) as any as T[];\n    return list;\n  }\n\n  byTypeName(typeName: string): DependencyList {\n    const filtered = this.dependencies.filter((dep) => dep.type === typeName);\n    return DependencyList.fromArray(filtered);\n  }\n\n  byLifecycle(lifecycle: DependencyLifecycleType): DependencyList {\n    const filtered = this.dependencies.filter((dep) => dep.lifecycle === lifecycle);\n    return DependencyList.fromArray(filtered);\n  }\n\n  serialize(): SerializedDependency[] {\n    const serialized = this.dependencies.map((dep) => {\n      return dep.serialize();\n    });\n    return serialized;\n  }\n\n  toDependenciesManifest(): DependenciesManifest {\n    const manifest: DependenciesManifest = {\n      dependencies: {},\n      devDependencies: {},\n      peerDependencies: {},\n    };\n    this.forEach((dep) => {\n      const keyName = KEY_NAME_BY_LIFECYCLE_TYPE[dep.lifecycle];\n      const entry = dep.toManifest();\n      if (entry) {\n        manifest[keyName][entry.packageName] = entry.version;\n      }\n    });\n    return manifest;\n  }\n\n  static merge(lists: DependencyList[]): DependencyList {\n    const res: Dependency[] = [];\n    const deps = lists.reduce((acc, curr) => {\n      acc = acc.concat(curr.dependencies);\n      return acc;\n    }, res);\n    return new DependencyList(deps);\n  }\n\n  static fromArray(dependencies: Array<Dependency>) {\n    return new DependencyList(dependencies);\n  }\n}\n\nfunction uniqDeps(dependencies: Array<Dependency>): Array<Dependency> {\n  const uniq = uniqBy(dependencies, property('id'));\n  return uniq;\n}\n\nfunction removeVersion(id: string): string {\n  return id.split('@')[0];\n}\n"]}