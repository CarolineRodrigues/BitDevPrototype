{"version":3,"sources":["dependency-linker.ts"],"names":["DEFAULT_LINKING_OPTIONS","legacyLink","rewire","linkTeambitBit","linkCoreAspects","linkNestedDepsInNM","DependencyLinker","constructor","dependencyResolver","aspectLoader","componentAspect","envs","logger","rootDir","linkingOptions","link","rootPolicy","componentDirectoryMap","options","setStatusLine","debug","result","finalRootDir","linkingOpts","Object","assign","RootDirNotDefined","linkToDir","components","toArray","map","component","linkToDirResults","bitIds","id","_legacy","consumer","Error","legacyResults","legacyLinkResults","linksResults","legacyLinkCodemodResults","codemodResults","resolvedFromEnvLinks","linkDepsResolvedFromEnv","nestedDepsInNmLinks","addSymlinkFromComponentDirNMToWorkspaceDirNM","componentIdsWithoutVersions","_dir","comp","push","toString","ignoreVersion","undefined","isBitRepoWorkspace","bitLink","linkBitAspectIfNotExist","path","join","teambitBitLink","hasLocalInstallation","coreAspectsLinks","linkNonExistingCoreAspects","teambitLegacyLink","linkTeambitLegacy","harmonyLink","linkHarmony","consoleSuccess","targetDir","results","componentPackageName","state","_consumer","componentId","linksDetail","from","to","forEach","rootNodeModules","getPackagesFoldersToLink","dir","parent","folders","fs","readdirSync","withFileTypes","filter","dirent","name","startsWith","isDirectory","isSymbolicLink","dirPath","moduleName","moduleNameToResolve","resolvedModuleFrom","resolveModuleFromDir","origPath","resolveModuleDirFromFile","linksOfAllComponents","compDirNM","existsSync","innerNMofComponentInNM","isPathSymlink","packagesFoldersToLink","ensureDirSync","oneComponentLinks","folderEntry","linkTarget","linkSrc","linkDetail","linkTargetParent","resolve","relativeSrc","relative","symlink","Symlink","info","write","filteredLinks","componentsNeedLinks","componentsNeedLinksP","policy","getPolicy","resolvedFromEnv","getResolvedFromEnv","length","env","getEnv","componentNeedLink","Promise","all","envsStringIds","obj","uniqEnvIds","host","getHost","resolvedEnvIds","resolveMultipleComponentIds","resolvedAspects","resolveAspects","resolvedAspectsIndex","reduce","acc","curr","getId","allLinksP","entry","oneComponentLinksP","entries","depEntry","dependencyId","envDir","aspectPath","resolvedModule","console","removeSync","depsLinkedToEnvResult","componentIds","mainAspect","mainAspectId","existing","find","linkBit","aspectId","packageName","MainAspectNotLinkable","target","shouldSymlink","removeSymlinkTarget","src","ensureDir","dirname","coreAspectsIds","getCoreAspectIds","coreAspectsIdsWithoutMain","linkCoreAspect","filtered","mainAspectPath","aspectDir","isAspectDirExist","pathExistsSync","module","require","err","CoreAspectLinkError","targetPath","targetStat","lstatSync","e","linkNonAspectCorePackages","skipExisting","distDir","isTargetExisting","isDistDirExist","newDir","getDistDirForDevEnv","resolvedPath","NonAspectCorePackageLinkError","dirMap","moduleDirectory","includes","nmDir","__dirname","substring","indexOf","paths","BitError","fromDir","moduleId","silent","resolveFrom","resolvedModulePath","NM","slice","lastIndexOf","start","end","split","versionStr","folderPath","stat"],"mappings":"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","sourcesContent":["import isBuiltinModule from 'is-builtin-module';\nimport path from 'path';\nimport { uniq, compact, flatten, head } from 'lodash';\nimport { Stats } from 'fs';\nimport fs from 'fs-extra';\nimport resolveFrom from 'resolve-from';\nimport { link as legacyLink } from '@teambit/legacy/dist/api/consumer/lib/link';\nimport { ComponentMap, Component, ComponentMain } from '@teambit/component';\nimport { Logger } from '@teambit/logger';\nimport { PathAbsolute } from '@teambit/legacy/dist/utils/path';\nimport { BitError } from '@teambit/bit-error';\nimport { createSymlinkOrCopy } from '@teambit/legacy/dist/utils';\nimport { LinksResult as LegacyLinksResult } from '@teambit/legacy/dist/links/node-modules-linker';\nimport { CodemodResult } from '@teambit/legacy/dist/consumer/component-ops/codemod-components';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport Symlink from '@teambit/legacy/dist/links/symlink';\nimport { Consumer } from '@teambit/legacy/dist/consumer';\nimport { EnvsMain } from '@teambit/envs';\nimport { AspectLoaderMain, getCoreAspectName, getCoreAspectPackageName, getAspectDir } from '@teambit/aspect-loader';\nimport {\n  MainAspectNotLinkable,\n  RootDirNotDefined,\n  CoreAspectLinkError,\n  NonAspectCorePackageLinkError,\n} from './exceptions';\nimport { WorkspacePolicy } from './policy';\nimport { DependencyResolverMain } from './dependency-resolver.main.runtime';\n\nexport type LinkingOptions = {\n  rewire?: boolean;\n  /**\n   * Whether to create link to @teambit/bit in the root node modules\n   */\n  linkTeambitBit?: boolean;\n  /**\n   * Whether to create links in the root dir node modules to all core aspects\n   */\n  linkCoreAspects?: boolean;\n\n  linkNestedDepsInNM?: boolean;\n\n  /**\n   * link to another project, so that project could use components from this workspace.\n   * similar to npm/yarn link\n   */\n  linkToDir?: string;\n\n  /**\n   * whether link should import objects before linking\n   */\n  fetchObject?: boolean;\n\n  /**\n   * make sure to provide the consumer\n   */\n  legacyLink?: boolean;\n\n  /**\n   * consumer is required for the legacyLink\n   */\n  consumer?: Consumer;\n};\n\nconst DEFAULT_LINKING_OPTIONS: LinkingOptions = {\n  legacyLink: true,\n  rewire: false,\n  linkTeambitBit: true,\n  linkCoreAspects: true,\n  linkNestedDepsInNM: true,\n};\n\nexport type LinkDetail = { from: string; to: string };\n\nexport type CoreAspectLinkResult = {\n  aspectId: string;\n  linkDetail: LinkDetail;\n};\n\nexport type DepsLinkedToEnvResult = {\n  componentId: string;\n  linksDetail: LinkDetail[];\n};\n\nexport type NestedNMDepsLinksResult = {\n  componentId: string;\n  linksDetail: LinkDetail[];\n};\n\nexport type LinkToDirResult = {\n  componentId: string;\n  linksDetail: LinkDetail;\n};\n\nexport type LinkResults = {\n  legacyLinkResults?: LegacyLinksResult[];\n  legacyLinkCodemodResults?: CodemodResult[];\n  teambitBitLink?: CoreAspectLinkResult;\n  coreAspectsLinks?: CoreAspectLinkResult[];\n  harmonyLink?: LinkDetail;\n  teambitLegacyLink?: LinkDetail;\n  resolvedFromEnvLinks?: DepsLinkedToEnvResult[];\n  nestedDepsInNmLinks?: NestedNMDepsLinksResult[];\n  linkToDirResults?: LinkToDirResult[];\n};\n\ntype NestedModuleFolderEntry = {\n  moduleName: string;\n  path: string;\n  origPath?: string;\n};\n\nexport class DependencyLinker {\n  constructor(\n    private dependencyResolver: DependencyResolverMain,\n\n    private aspectLoader: AspectLoaderMain,\n\n    private componentAspect: ComponentMain,\n\n    private envs: EnvsMain,\n\n    private logger: Logger,\n\n    private rootDir?: string | PathAbsolute,\n\n    private linkingOptions?: LinkingOptions\n  ) {}\n\n  async link(\n    rootDir: string | undefined,\n    rootPolicy: WorkspacePolicy,\n    componentDirectoryMap: ComponentMap<string>,\n    options: LinkingOptions = {}\n  ): Promise<LinkResults> {\n    this.logger.setStatusLine('linking components');\n    this.logger.debug('linking components with options', options);\n    const result: LinkResults = {};\n    const finalRootDir = rootDir || this.rootDir;\n    const linkingOpts = Object.assign({}, DEFAULT_LINKING_OPTIONS, this.linkingOptions || {}, options || {});\n    if (!finalRootDir) {\n      throw new RootDirNotDefined();\n    }\n    if (options.linkToDir) {\n      const components = componentDirectoryMap.toArray().map(([component]) => component);\n      const linkToDirResults = await this.linkToDir(finalRootDir, options.linkToDir, components);\n      result.linkToDirResults = linkToDirResults;\n      return result;\n    }\n    if (linkingOpts.legacyLink) {\n      const bitIds = componentDirectoryMap.toArray().map(([component]) => component.id._legacy);\n      if (!linkingOpts.consumer) throw new Error(`the consumer is needed to legacy-link`);\n      const legacyResults = await legacyLink(linkingOpts.consumer, bitIds, linkingOpts.rewire ?? false);\n      result.legacyLinkResults = legacyResults.linksResults;\n      result.legacyLinkCodemodResults = legacyResults.codemodResults;\n    }\n\n    // Link deps which should be linked to the env\n    result.resolvedFromEnvLinks = await this.linkDepsResolvedFromEnv(componentDirectoryMap);\n    if (linkingOpts.linkNestedDepsInNM) {\n      result.nestedDepsInNmLinks = await this.addSymlinkFromComponentDirNMToWorkspaceDirNM(\n        finalRootDir,\n        componentDirectoryMap\n      );\n    }\n\n    // We remove the version since it used in order to check if it's core aspects, and the core aspects arrived from aspect loader without versions\n    const componentIdsWithoutVersions: string[] = [];\n    componentDirectoryMap.map((_dir, comp) => {\n      componentIdsWithoutVersions.push(comp.id.toString({ ignoreVersion: true }));\n      return undefined;\n    });\n    if (linkingOpts.linkTeambitBit && !this.isBitRepoWorkspace(finalRootDir)) {\n      const bitLink = await this.linkBitAspectIfNotExist(\n        path.join(finalRootDir, 'node_modules'),\n        componentIdsWithoutVersions\n      );\n      result.teambitBitLink = bitLink;\n    }\n\n    if (linkingOpts.linkCoreAspects && !this.isBitRepoWorkspace(finalRootDir)) {\n      const hasLocalInstallation = !linkingOpts.linkTeambitBit;\n      const coreAspectsLinks = await this.linkNonExistingCoreAspects(\n        path.join(finalRootDir, 'node_modules'),\n        componentIdsWithoutVersions,\n        hasLocalInstallation\n      );\n      result.coreAspectsLinks = coreAspectsLinks;\n    }\n\n    const teambitLegacyLink = this.linkTeambitLegacy(componentDirectoryMap, finalRootDir);\n    result.teambitLegacyLink = teambitLegacyLink;\n    const harmonyLink = this.linkHarmony(componentDirectoryMap, finalRootDir);\n    result.harmonyLink = harmonyLink;\n    this.logger.consoleSuccess('linking components');\n    return result;\n  }\n\n  private async linkToDir(rootDir: string, targetDir: string, components: Component[]): Promise<LinkToDirResult[]> {\n    const results: LinkToDirResult[] = components.map((component) => {\n      const componentPackageName = componentIdToPackageName(component.state._consumer);\n      return {\n        componentId: component.id.toString(),\n        linksDetail: {\n          from: path.join(rootDir, 'node_modules', componentPackageName),\n          to: path.join(targetDir, 'node_modules', componentPackageName),\n        },\n      };\n    });\n    results.forEach(({ componentId, linksDetail }) => {\n      createSymlinkOrCopy(linksDetail.from, linksDetail.to, componentId);\n    });\n\n    return results;\n  }\n\n  /**\n   * add symlink from the node_modules in the component's root-dir to the workspace node-modules\n   * of the component. e.g.\n   * ws-root/node_modules/comp1/node_modules -> ws-root/components/comp1/node_modules\n   */\n  private addSymlinkFromComponentDirNMToWorkspaceDirNM(\n    rootDir: string,\n    componentDirectoryMap: ComponentMap<string>\n  ): NestedNMDepsLinksResult[] {\n    const rootNodeModules = path.join(rootDir, 'node_modules');\n    const getPackagesFoldersToLink = (dir: string, parent?: string): NestedModuleFolderEntry[] => {\n      const folders = fs\n        .readdirSync(dir, { withFileTypes: true })\n        .filter((dirent) => {\n          if (dirent.name.startsWith('.')) {\n            return false;\n          }\n          return dirent.isDirectory() || dirent.isSymbolicLink();\n        })\n        .map((dirent) => {\n          const dirPath = path.join(dir, dirent.name);\n          const moduleName = parent ? `${parent}/${dirent.name}` : dirent.name;\n          // If we have a folder with a name of built in module (like events)\n          // the resolve from will resolve it from the core, so it will return something like 'events'\n          // instead of the path.\n          // adding a '/' at the end solve this\n          const moduleNameToResolve = isBuiltinModule(moduleName) ? `${moduleName}/` : moduleName;\n          // This is a scoped package, need to go inside\n          if (dirent.name.startsWith('@')) {\n            return getPackagesFoldersToLink(dirPath, dirent.name);\n          }\n\n          if (dirent.isSymbolicLink()) {\n            const resolvedModuleFrom = resolveModuleFromDir(dir, moduleNameToResolve);\n            if (!resolvedModuleFrom) {\n              return {\n                moduleName,\n                path: dirPath,\n              };\n            }\n            return {\n              origPath: dirPath,\n              moduleName,\n              path: resolveModuleDirFromFile(resolvedModuleFrom, moduleName),\n            };\n          }\n          return {\n            moduleName,\n            path: dirPath,\n          };\n        });\n      return flatten(folders);\n    };\n    const linksOfAllComponents = componentDirectoryMap.toArray().map(([component, dir]) => {\n      const compDirNM = path.join(dir, 'node_modules');\n      if (!fs.existsSync(compDirNM)) return undefined;\n      // TODO: support modules with scoped packages (start with @) - we need to make this logic 2 levels\n\n      const componentPackageName = componentIdToPackageName(component.state._consumer);\n      const innerNMofComponentInNM = path.join(rootNodeModules, componentPackageName);\n      // If the folder itself is a symlink, do not try to symlink inside it\n      if (isPathSymlink(innerNMofComponentInNM)) {\n        return undefined;\n      }\n      const packagesFoldersToLink: NestedModuleFolderEntry[] = getPackagesFoldersToLink(compDirNM);\n      fs.ensureDirSync(innerNMofComponentInNM);\n\n      const oneComponentLinks: LinkDetail[] = packagesFoldersToLink.map((folderEntry: NestedModuleFolderEntry) => {\n        const linkTarget = path.join(innerNMofComponentInNM, 'node_modules', folderEntry?.moduleName);\n        const linkSrc = folderEntry.path;\n        // This works as well, consider using it instead\n        // const linkSrc = folderEntry.origPath || folderEntry.path;\n        const origPath = folderEntry.origPath ? `(${folderEntry.origPath})` : '';\n        const linkDetail: LinkDetail = {\n          from: `${linkSrc} ${origPath}`,\n          to: linkTarget,\n        };\n        const linkTargetParent = path.resolve(linkTarget, '..');\n        const relativeSrc = path.relative(linkTargetParent, linkSrc);\n        const symlink = new Symlink(relativeSrc, linkTarget, component.id._legacy, false);\n        this.logger.info(\n          `linking nested dependency ${folderEntry.moduleName} for component ${component}. link src: ${linkSrc} link target: ${linkTarget}`\n        );\n        symlink.write();\n        return linkDetail;\n      });\n\n      const filteredLinks = compact(oneComponentLinks);\n      return {\n        componentId: component.id.toString(),\n        linksDetail: filteredLinks,\n      };\n    });\n    const filteredLinks = compact(linksOfAllComponents);\n    return filteredLinks;\n  }\n\n  private async linkDepsResolvedFromEnv(\n    componentDirectoryMap: ComponentMap<string>\n  ): Promise<Array<DepsLinkedToEnvResult>> {\n    const componentsNeedLinks: {\n      component: Component;\n      dir: string;\n      env;\n      resolvedFromEnv;\n      envId?: string;\n      envDir?: string;\n    }[] = [];\n\n    const componentsNeedLinksP = componentDirectoryMap.toArray().map(async ([component, dir]) => {\n      const policy = await this.dependencyResolver.getPolicy(component);\n      const resolvedFromEnv = policy.getResolvedFromEnv();\n      // Nothing should be resolved from env, do nothing\n      if (!resolvedFromEnv.length) {\n        return;\n      }\n      const env = this.envs.getEnv(component);\n      const componentNeedLink = {\n        component,\n        dir,\n        env,\n        resolvedFromEnv,\n      };\n      componentsNeedLinks.push(componentNeedLink);\n    });\n\n    await Promise.all(componentsNeedLinksP);\n    // Stop if there are not components needs to be linked\n    if (!componentsNeedLinks || !componentsNeedLinks.length) return [];\n    const envsStringIds = componentsNeedLinks.map((obj) => obj.env.id);\n    const uniqEnvIds = uniq(envsStringIds);\n    const host = this.componentAspect.getHost();\n    const resolvedEnvIds = await host.resolveMultipleComponentIds(uniqEnvIds);\n    const resolvedAspects = await host.resolveAspects(undefined, resolvedEnvIds);\n    const resolvedAspectsIndex = resolvedAspects.reduce((acc, curr) => {\n      if (curr.getId) {\n        acc[curr.getId] = curr;\n      }\n      return acc;\n    }, {});\n    const allLinksP = componentsNeedLinks.map(async (entry) => {\n      const oneComponentLinksP: Array<LinkDetail | undefined> = entry.resolvedFromEnv.entries.map(async (depEntry) => {\n        const linkTarget = path.join(entry.dir, 'node_modules', depEntry.dependencyId);\n        const envDir = resolvedAspectsIndex[entry.env.id].aspectPath;\n        const resolvedModule = resolveModuleFromDir(envDir, depEntry.dependencyId);\n        if (!resolvedModule) {\n          this.logger.console(`could not resolve ${depEntry.dependencyId} from env directory ${envDir}`);\n          return undefined;\n        }\n        const linkSrc = resolveModuleDirFromFile(resolvedModule, depEntry.dependencyId);\n        const linkDetail: LinkDetail = {\n          from: linkSrc,\n          to: linkTarget,\n        };\n        fs.removeSync(linkTarget);\n        this.logger.info(\n          `linking dependency ${depEntry.dependencyId} from env directory ${envDir}. link src: ${linkSrc} link target: ${linkTarget}`\n        );\n\n        createSymlinkOrCopy(linkSrc, linkTarget);\n        return linkDetail;\n      });\n      const oneComponentLinks = await Promise.all(oneComponentLinksP);\n      const filteredLinks = compact(oneComponentLinks);\n      const depsLinkedToEnvResult: DepsLinkedToEnvResult = {\n        componentId: entry.component.id.toString(),\n        linksDetail: filteredLinks,\n      };\n      return depsLinkedToEnvResult;\n    });\n    return Promise.all(allLinksP);\n  }\n\n  private async linkBitAspectIfNotExist(\n    dir: string,\n    componentIds: string[]\n  ): Promise<CoreAspectLinkResult | undefined> {\n    if (!this.aspectLoader.mainAspect) return undefined;\n    const mainAspectId = this.aspectLoader.mainAspect.id;\n    const existing = componentIds.find((id) => {\n      return id === mainAspectId;\n    });\n\n    if (existing) {\n      return undefined;\n    }\n    const linkDetail = await this.linkBit(dir);\n    if (!linkDetail) return undefined;\n    return {\n      aspectId: mainAspectId,\n      linkDetail,\n    };\n  }\n\n  async linkBit(dir: string): Promise<LinkDetail | undefined> {\n    if (!this.aspectLoader.mainAspect.packageName) {\n      throw new MainAspectNotLinkable();\n    }\n    const target = path.join(dir, this.aspectLoader.mainAspect.packageName);\n    const shouldSymlink = this.removeSymlinkTarget(target);\n    if (!shouldSymlink) return undefined;\n    const src = this.aspectLoader.mainAspect.path;\n    await fs.ensureDir(path.dirname(target));\n    createSymlinkOrCopy(src, target);\n    return { from: src, to: target };\n  }\n\n  async linkCoreAspects(dir: string): Promise<Array<CoreAspectLinkResult | undefined>> {\n    const coreAspectsIds = this.aspectLoader.getCoreAspectIds();\n    const coreAspectsIdsWithoutMain = coreAspectsIds.filter((id) => id !== this.aspectLoader.mainAspect.id);\n    return coreAspectsIdsWithoutMain.map((id) => {\n      return this.linkCoreAspect(dir, id, getCoreAspectName(id), getCoreAspectPackageName(id));\n    });\n  }\n\n  private async linkNonExistingCoreAspects(\n    dir: string,\n    componentIds: string[],\n    hasLocalInstallation = false\n  ): Promise<CoreAspectLinkResult[]> {\n    const coreAspectsIds = this.aspectLoader.getCoreAspectIds();\n    const filtered = coreAspectsIds.filter((aspectId) => {\n      // Remove bit aspect\n      if (aspectId === this.aspectLoader.mainAspect?.id) {\n        return false;\n      }\n      // TODO: use the aspect id once default scope is resolved and the component dir map has the id with scope\n      const name = getCoreAspectName(aspectId);\n      const existing = componentIds.find((componentId) => {\n        return componentId === name || componentId === aspectId;\n      });\n      if (existing) {\n        return false;\n      }\n      return true;\n    });\n\n    this.logger.debug(`linkNonExistingCoreAspects: linking the following core aspects ${filtered.join()}`);\n\n    const results = filtered.map((id) => {\n      return this.linkCoreAspect(dir, id, getCoreAspectName(id), getCoreAspectPackageName(id), hasLocalInstallation);\n    });\n    return compact(results);\n  }\n\n  private isBitRepoWorkspace(dir: string) {\n    // A special condition to not link core aspects in bit workspace itself\n    if (this.aspectLoader.mainAspect?.path.startsWith(dir)) {\n      return true;\n    }\n    return false;\n  }\n\n  private linkCoreAspect(\n    dir: string,\n    id: string,\n    name: string,\n    packageName: string,\n    hasLocalInstallation = false\n  ): CoreAspectLinkResult | undefined {\n    if (!this.aspectLoader.mainAspect) return undefined;\n    if (!this.aspectLoader.mainAspect.packageName) {\n      throw new MainAspectNotLinkable();\n    }\n\n    const mainAspectPath = path.join(dir, this.aspectLoader.mainAspect.packageName);\n    let aspectDir = path.join(mainAspectPath, 'dist', name);\n    const target = path.join(dir, packageName);\n    const shouldSymlink = this.removeSymlinkTarget(target, hasLocalInstallation);\n    if (!shouldSymlink) return undefined;\n    const isAspectDirExist = fs.pathExistsSync(aspectDir);\n    if (!isAspectDirExist) {\n      this.logger.debug(`linkCoreAspect: aspectDir ${aspectDir} does not exist, linking it to ${target}`);\n      aspectDir = getAspectDir(id);\n      createSymlinkOrCopy(aspectDir, target);\n      return { aspectId: id, linkDetail: { from: aspectDir, to: target } };\n    }\n\n    try {\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      const module = require(aspectDir);\n      const aspectPath = path.resolve(path.join(module.path, '..', '..'));\n      // in this case we want the symlinks to be relative links\n      // Using the fs module to make sure it is relative to the target\n      if (fs.existsSync(target)) {\n        this.logger.debug(`linkCoreAspect: aspectPath ${aspectPath} skip linking`);\n        return undefined;\n      }\n      this.logger.debug(`linkCoreAspect: linking aspectPath ${aspectPath} to ${target}`);\n      createSymlinkOrCopy(aspectPath, target);\n      return { aspectId: id, linkDetail: { from: aspectPath, to: target } };\n    } catch (err: any) {\n      throw new CoreAspectLinkError(id, err);\n    }\n  }\n\n  /**\n   * returns true if it's safe to symlink it later.\n   */\n  private removeSymlinkTarget(targetPath: string, hasLocalInstallation = false): boolean {\n    // TODO: change to fs.lstatSync(dest, {throwIfNoEntry: false});\n    // TODO: this requires to upgrade node to v15.3.0 to have the throwIfNoEntry property (maybe upgrade fs-extra will work as well)\n    // TODO: we don't use fs.pathExistsSync since it will return false in case the dest is a symlink which will result error on write\n    let targetStat: Stats | undefined;\n    try {\n      targetStat = fs.lstatSync(targetPath);\n      // eslint-disable-next-line no-empty\n    } catch (e: any) {}\n    if (targetStat && !hasLocalInstallation) {\n      // Do not override links created by other means\n      if (!targetStat.isSymbolicLink()) {\n        this.logger.debug(`removing link target, target ${targetPath} already exist. skipping it`);\n        return false;\n      }\n      // it's a symlink, remove is as it might point to an older version\n      fs.removeSync(targetPath);\n      return true;\n    }\n    return true;\n  }\n\n  private linkNonAspectCorePackages(\n    rootDir: string,\n    name: string,\n    packageName = `@teambit/${name}`,\n    skipExisting = false\n  ): LinkDetail | undefined {\n    if (!this.aspectLoader.mainAspect) return undefined;\n    if (!this.aspectLoader.mainAspect.packageName) {\n      throw new MainAspectNotLinkable();\n    }\n    const mainAspectPath = path.join(rootDir, this.aspectLoader.mainAspect.packageName);\n    const distDir = path.join(mainAspectPath, 'dist', name);\n\n    const target = path.join(rootDir, 'node_modules', packageName);\n    const isTargetExisting = fs.pathExistsSync(target);\n    if (skipExisting && isTargetExisting) {\n      return undefined;\n    }\n    const shouldSymlink = this.removeSymlinkTarget(target);\n    if (!shouldSymlink) return undefined;\n    const isDistDirExist = fs.pathExistsSync(distDir);\n    if (!isDistDirExist) {\n      const newDir = getDistDirForDevEnv(packageName);\n      createSymlinkOrCopy(newDir, target);\n      return { from: newDir, to: target };\n    }\n\n    try {\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      const module = require(distDir);\n      const resolvedPath = path.resolve(path.join(module.path, '..', '..'));\n      // in this case we want the symlinks to be relative links\n      // Using the fs module to make sure it is relative to the target\n      if (fs.existsSync(target)) {\n        return undefined;\n      }\n      createSymlinkOrCopy(resolvedPath, target);\n      return { from: resolvedPath, to: target };\n    } catch (err: any) {\n      throw new NonAspectCorePackageLinkError(err, packageName);\n    }\n  }\n\n  private linkHarmony(dirMap: ComponentMap<string>, rootDir: string): LinkDetail | undefined {\n    const name = 'harmony';\n    return this.linkNonAspectCorePackages(rootDir, name);\n  }\n\n  private linkTeambitLegacy(dirMap: ComponentMap<string>, rootDir: string): LinkDetail | undefined {\n    const name = 'legacy';\n    return this.linkNonAspectCorePackages(rootDir, name);\n  }\n}\n\n/**\n * When running dev env (bd) we need to get the harmony/legacy folder from the node_modules of the clone\n */\nfunction getDistDirForDevEnv(packageName: string): string {\n  let moduleDirectory = require.resolve(packageName);\n  let dirPath;\n  if (moduleDirectory.includes(packageName)) {\n    dirPath = path.join(moduleDirectory, '../..'); // to remove the \"index.js\" at the end\n  } else {\n    // This is usually required for the @teambit/legacy, as we re inside the nm so we can't find it in the other way\n    const nmDir = __dirname.substring(0, __dirname.indexOf('@teambit'));\n    dirPath = path.join(nmDir, packageName);\n    moduleDirectory = require.resolve(packageName, { paths: [nmDir] });\n  }\n  if (!fs.existsSync(dirPath)) {\n    throw new BitError(`unable to find ${packageName} in ${dirPath}`);\n  }\n\n  return dirPath;\n}\n\n// TODO: extract to new component\nfunction resolveModuleFromDir(fromDir: string, moduleId: string, silent = true): string | undefined {\n  if (silent) {\n    return resolveFrom.silent(fromDir, moduleId);\n  }\n  return resolveFrom(fromDir, moduleId);\n}\n\n// TODO: extract to new component\nfunction resolveModuleDirFromFile(resolvedModulePath: string, moduleId: string): string {\n  const NM = 'node_modules';\n  if (resolvedModulePath.includes(NM)) {\n    return path.join(resolvedModulePath.slice(0, resolvedModulePath.lastIndexOf(NM) + NM.length), moduleId);\n  }\n\n  const [start, end] = resolvedModulePath.split('@');\n  const versionStr = head(end.split('/'));\n  return `${start}@${versionStr}`;\n}\n\nfunction isPathSymlink(folderPath: string): boolean | undefined {\n  // TODO: change to fs.lstatSync(dest, {throwIfNoEntry: false}); once upgrade fs-extra\n  try {\n    const stat = fs.lstatSync(folderPath);\n    return stat.isSymbolicLink();\n  } catch (e: any) {\n    return undefined;\n  }\n}\n"]}