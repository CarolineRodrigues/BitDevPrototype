{"version":3,"sources":["dependency-resolver.main.runtime.ts"],"names":["BIT_DEV_REGISTRY","BIT_CLOUD_REGISTRY","NPM_REGISTRY","defaultLinkingOptions","legacyLink","linkTeambitBit","linkCoreAspects","defaultCreateFromComponentsOptions","filterComponentsFromManifests","createManifestForComponentsWithoutDependencies","DependencyResolverMain","constructor","config","rootPolicyRegistry","policiesRegistry","envs","logger","configAspect","aspectLoader","globalConfig","componentAspect","packageManagerSlot","dependencyFactorySlot","preInstallSlot","postInstallSlot","registerPackageManager","packageManager","register","registerDependencyFactories","factories","registerPreInstallSubscribers","subscribers","registerPostInstallSubscribers","getSavePrefix","savePrefix","getVersionWithSavePrefix","version","overridePrefix","prefix","versionWithPrefix","semver","validRange","InvalidVersionWithPrefix","getPolicy","component","entry","state","aspects","get","DependencyResolverAspect","id","factory","VariantPolicyFactory","getEmpty","serializedPolicy","parse","extractDepsFromLegacy","policy","componentPolicy","legacyComponent","_consumer","listFactory","getDependencyListFactory","dependencyList","fromLegacyComponent","forEach","dep","found","find","source","serialize","values","flat","factoriesMap","reduce","acc","type","DependencyListFactory","getDependencies","DependencyList","fromArray","serializedDependencies","data","dependencies","getDependenciesFromSerializedDependencies","length","deps","fromSerializedDependencies","getWorkspacePolicy","policyFromConfig","getWorkspacePolicyFromConfig","externalPolicies","toArray","map","mergeWorkspacePolices","WorkspacePolicyFactory","fromConfigObject","getWorkspacePolicyFromPackageJson","packageJson","fromPackageJson","polices","WorkspacePolicy","mergePolices","getWorkspaceManifest","name","ROOT_NAME","SemVer","rootPolicy","rootDir","components","options","setStatusLine","concreteOpts","workspaceManifestFactory","WorkspaceManifestFactory","res","createFromComponents","consoleSuccess","getInstaller","packageManagerName","cacheRootDir","cacheRootDirectory","getSync","CFG_PACKAGE_MANAGER_CACHE","PackageManagerNotFound","fs","pathExistsSync","debug","ensureDirSync","preInstallSubscribers","getPreInstallSubscribers","postInstallSubscribers","getPostInstallSubscribers","DependencyInstaller","nodeLinker","getLinker","linkingOptions","Object","assign","DependencyLinker","getPackageManagerName","getVersionResolver","networkConcurrency","getNetworkConfig","DependencyVersionResolver","getSystemPackageManager","defaultPm","Error","getProxyConfig","proxyConfigFromDepResolverConfig","getProxyConfigFromDepResolverConfig","httpProxy","httpsProxy","proxyConfigFromPackageManager","getProxyConfigFromPackageManager","proxyConfigFromGlobalConfig","getProxyConfigFromGlobalConfig","ca","cert","proxy","key","noProxy","strictSSL","strictSsl","toLowerCase","getNetworkConfigFromGlobalConfig","getNetworkConfigFromPackageManager","getNetworkConfigFromDepResolverConfig","Http","getPackageManager","systemPm","getMissingPeerDependencies","componentDirectoryMap","peerDependencyIssues","getPeerDependencyIssues","intersections","getRegistries","registries","bitScope","scopes","bit","getDefaultBitRegistry","bitRegistry","uri","bitOriginalAuthType","bitAuthHeaderValue","bitOriginalAuthValue","getBitAuthConfig","alwaysAuth","undefined","bitDefaultRegistry","Registry","installFromBitDevRegistry","defaultRegistry","startsWith","setDefaultRegistry","updateScopedRegistry","addAuthToScopedBitRegistries","bitScopeRegistry","updatedRegistries","entries","registry","authHeaderValue","includes","registryWithAuth","bitGlobalConfigToken","CFG_USER_TOKEN_KEY","originalAuthType","originalAuthValue","addToRootPolicy","workspacePolicy","add","updateConfigPolicy","removeFromRootPolicy","dependencyIds","workspacePolicyUpdated","remove","workspacePolicyObject","toConfigObject","setExtension","overrideExisting","ignoreVersion","persistConfig","workspaceDir","workspaceConfig","write","dir","registerDependenciesPolicies","registerRootPolicy","getComponentEnvPolicyFromExtension","configuredExtensions","env","calculateEnvFromExtensions","getComponentEnvPolicyFromEnv","getComponentEnvPolicy","getEnv","policiesFromEnvConfig","allPoliciesFromEnv","EnvPolicyFactory","mergeVariantPolicies","variantPolicyFactory","policiesFromSlots","policiesFromConfig","policiesFromEnv","variantPolicy","configuredIds","ids","policiesTuples","extId","policyTupleToApply","policyRegistrar","currentPolicy","VariantPolicy","currentExtension","findExtension","currentConfig","result","updateDepsOnLegacyTag","idTransformer","extensions","findCoreExtension","__type","COMPONENT_DEP_TYPE","depId","BitId","componentId","newDepId","toString","updateDepsOnLegacyExport","registerDetector","detector","DetectorHook","hooks","push","onLoadRequireableExtensionSubscriber","requireableExtension","manifest","parentComponent","resolveRequireableExtensionManifestDepsVersionsRecursively","resolvedParentComponent","resolvedParentDeps","updateDirectDepsVersions","isCoreAspect","parentComponentId","getHost","resolveComponentId","error","resolvedDep","findDependency","cloneManifest","_runtimes","runtime","getOutdatedPkgsFromPolicies","variantPoliciesByPatterns","componentPoliciesById","allPkgs","getOutdatedPkgs","pkgs","resolver","resolve","spec","resolveRemoteVersion","outdatedPkgs","Promise","all","pkg","latestVersion","latestRange","repeatPrefix","currentRange","filter","applyUpdates","updatedVariants","updatedComponents","updatedWorkspacePolicyEntries","updateExisting","provider","loggerExt","configMain","graphql","createLogger","dependencyResolver","registerShowFragments","DependenciesFragment","DevDependenciesFragment","PeerDependenciesFragment","ComponentDependencyFactory","DependencyResolver","getDepResolverAspectName","LegacyComponent","registerOnComponentOverridesLoading","toLegacyDepsOverrides","registerWorkspacePolicyGetter","toManifest","registerHarmonyEnvPeersPolicyGetter","envPolicy","peersAutoDetectPolicy","toNameSupportedRangeMap","bind","registerOnLoadRequireableExtensionSlot","registerService","DependenciesService","getEmptyDepsObject","devDependencies","peerDependencies","MainRuntime","EnvsAspect","LoggerAspect","ConfigAspect","AspectLoaderAspect","ComponentAspect","GraphqlAspect","GlobalConfigAspect","Slot","withType","addRuntime","originalSpec","newVersion"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAkBA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAQA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;AAEA;AACA;AACA;AACO,MAAMA,gBAAgB,GAAG,uBAAzB;;AACA,MAAMC,kBAAkB,GAAG,yBAA3B;;AACA,MAAMC,YAAY,GAAG,6BAArB;;AAuKP,MAAMC,qBAAqC,GAAG;AAC5CC,EAAAA,UAAU,EAAE,IADgC;AAE5CC,EAAAA,cAAc,EAAE,IAF4B;AAG5CC,EAAAA,eAAe,EAAE;AAH2B,CAA9C;AAMA,MAAMC,kCAA+D,GAAG;AACtEC,EAAAA,6BAA6B,EAAE,IADuC;AAEtEC,EAAAA,8CAA8C,EAAE;AAFsB,CAAxE;;AAKO,MAAMC,sBAAN,CAA6B;AAClCC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,MAJA;AAMT;AACJ;AACA;AACYC,EAAAA,kBATC;AAWT;AACJ;AACA;AACYC,EAAAA,gBAdC;AAgBT;AACJ;AACA;AACYC,EAAAA,IAnBC,EAqBDC,MArBC,EAuBDC,YAvBC,EAyBDC,YAzBC,EA2BDC,YA3BC;AA6BT;AACJ;AACA;AACaC,EAAAA,eAhCA,EAkCDC,kBAlCC,EAoCDC,qBApCC,EAsCDC,cAtCC,EAwCDC,eAxCC,EAyCT;AAAA,SArCSZ,MAqCT,GArCSA,MAqCT;AAAA,SAhCQC,kBAgCR,GAhCQA,kBAgCR;AAAA,SA3BQC,gBA2BR,GA3BQA,gBA2BR;AAAA,SAtBQC,IAsBR,GAtBQA,IAsBR;AAAA,SApBQC,MAoBR,GApBQA,MAoBR;AAAA,SAlBQC,YAkBR,GAlBQA,YAkBR;AAAA,SAhBQC,YAgBR,GAhBQA,YAgBR;AAAA,SAdQC,YAcR,GAdQA,YAcR;AAAA,SATSC,eAST,GATSA,eAST;AAAA,SAPQC,kBAOR,GAPQA,kBAOR;AAAA,SALQC,qBAKR,GALQA,qBAKR;AAAA,SAHQC,cAGR,GAHQA,cAGR;AAAA,SADQC,eACR,GADQA,eACR;AAAE;AAEJ;AACF;AACA;;;AACEC,EAAAA,sBAAsB,CAACC,cAAD,EAAiC;AACrD,SAAKL,kBAAL,CAAwBM,QAAxB,CAAiCD,cAAjC;AACD;;AAEDE,EAAAA,2BAA2B,CAACC,SAAD,EAAiC;AAC1D,SAAKP,qBAAL,CAA2BK,QAA3B,CAAoCE,SAApC;AACD;;AAEDC,EAAAA,6BAA6B,CAACC,WAAD,EAAwC;AACnE,SAAKR,cAAL,CAAoBI,QAApB,CAA6BI,WAA7B;AACD;;AAEDC,EAAAA,8BAA8B,CAACD,WAAD,EAAwC;AACpE,SAAKP,eAAL,CAAqBG,QAArB,CAA8BI,WAA9B;AACD;;AAEDE,EAAAA,aAAa,GAAW;AACtB,WAAO,KAAKrB,MAAL,CAAYsB,UAAZ,IAA0B,EAAjC;AACD;;AAEDC,EAAAA,wBAAwB,CAACC,OAAD,EAAkBC,cAAlB,EAAmD;AACzE,UAAMC,MAAM,GAAGD,cAAc,IAAI,KAAKJ,aAAL,EAAjC;AACA,UAAMM,iBAAiB,GAAI,GAAED,MAAO,GAAEF,OAAQ,EAA9C;;AACA,QAAI,CAACI,kBAAOC,UAAP,CAAkBF,iBAAlB,CAAL,EAA2C;AACzC,YAAM,KAAIG,sCAAJ,EAA6BH,iBAA7B,CAAN;AACD;;AACD,WAAOA,iBAAP;AACD;;AAEc,QAATI,SAAS,CAACC,SAAD,EAA+C;AAC5D,UAAMC,KAAK,GAAGD,SAAS,CAACE,KAAV,CAAgBC,OAAhB,CAAwBC,GAAxB,CAA4BC,gDAAyBC,EAArD,CAAd;AACA,UAAMC,OAAO,GAAG,KAAIC,8BAAJ,GAAhB;;AACA,QAAI,CAACP,KAAL,EAAY;AACV,aAAOM,OAAO,CAACE,QAAR,EAAP;AACD;;AACD,UAAMC,gBAAyC,GAAG,mBAAIT,KAAJ,EAAW,CAAC,MAAD,EAAS,QAAT,CAAX,EAA+B,EAA/B,CAAlD;AACA,WAAOM,OAAO,CAACI,KAAR,CAAcD,gBAAd,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC6B,QAArBE,qBAAqB,CAACZ,SAAD,EAAuBa,MAAvB,EAAgF;AACzG,UAAMC,eAAe,GAAGD,MAAM,KAAK,MAAM,KAAKd,SAAL,CAAeC,SAAf,CAAX,CAA9B;AACA,UAAMe,eAAgC,GAAGf,SAAS,CAACE,KAAV,CAAgBc,SAAzD;AACA,UAAMC,WAAW,GAAG,KAAKC,wBAAL,EAApB;AACA,UAAMC,cAAc,GAAG,MAAMF,WAAW,CAACG,mBAAZ,CAAgCL,eAAhC,CAA7B;AACAI,IAAAA,cAAc,CAACE,OAAf,CAAwBC,GAAD,IAAS;AAC9B,YAAMC,KAAK,GAAGT,eAAe,CAACU,IAAhB,CAAqBF,GAAG,CAAChB,EAAzB,CAAd,CAD8B,CAE9B;;AACAgB,MAAAA,GAAG,CAACG,MAAJ,GAAa,CAAAF,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,MAAP,KAAiB,MAA9B;AACD,KAJD;AAKA,WAAON,cAAc,CAACO,SAAf,EAAP;AACD;;AAEOR,EAAAA,wBAAwB,GAA0B;AACxD,UAAMjC,SAAS,GAAG,KAAKP,qBAAL,CAA2BiD,MAA3B,GAAoCC,IAApC,EAAlB;AACA,UAAMC,YAAY,GAAG5C,SAAS,CAAC6C,MAAV,CAAiB,CAACC,GAAD,EAAMxB,OAAN,KAAkB;AACtDwB,MAAAA,GAAG,CAACxB,OAAO,CAACyB,IAAT,CAAH,GAAoBzB,OAApB;AACA,aAAOwB,GAAP;AACD,KAHoB,EAGlB,EAHkB,CAArB;AAIA,UAAMd,WAAW,GAAG,KAAIgB,qCAAJ,EAA0BJ,YAA1B,CAApB;AACA,WAAOZ,WAAP;AACD;AAED;AACF;AACA;AACA;;;AACuB,QAAfiB,eAAe,CAAClC,SAAD,EAAgD;AAAA;;AACnE,UAAMC,KAAK,GAAGD,SAAS,CAACE,KAAV,CAAgBC,OAAhB,CAAwBC,GAAxB,CAA4BC,gDAAyBC,EAArD,CAAd;;AACA,QAAI,CAACL,KAAL,EAAY;AACV,aAAOkC,+BAAeC,SAAf,CAAyB,EAAzB,CAAP;AACD;;AACD,UAAMC,sBAA8C,GAAG,CAAApC,KAAK,SAAL,IAAAA,KAAK,WAAL,2BAAAA,KAAK,CAAEqC,IAAP,4DAAaC,YAAb,KAA6B,EAApF;AACA,WAAO,KAAKC,yCAAL,CAA+CH,sBAA/C,CAAP;AACD;;AAEsD,QAAzCG,yCAAyC,CACrDD,YADqD,EAE5B;AACzB,QAAI,CAACA,YAAY,CAACE,MAAlB,EAA0B;AACxB,aAAON,+BAAeC,SAAf,CAAyB,EAAzB,CAAP;AACD;;AACD,UAAMnB,WAAW,GAAG,KAAKC,wBAAL,EAApB;AACA,UAAMwB,IAAI,GAAG,MAAMzB,WAAW,CAAC0B,0BAAZ,CAAuCJ,YAAvC,CAAnB;AACA,WAAOG,IAAP;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,kBAAkB,GAAoB;AACpC,UAAMC,gBAAgB,GAAG,KAAKC,4BAAL,EAAzB;AACA,UAAMC,gBAAgB,GAAG,KAAK9E,kBAAL,CAAwB+E,OAAxB,GAAkCC,GAAlC,CAAsC,CAAC,GAAGpC,MAAH,CAAD,KAAgBA,MAAtD,CAAzB;AACA,WAAO,KAAKqC,qBAAL,CAA2B,CAACL,gBAAD,EAAmB,GAAGE,gBAAtB,CAA3B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACED,EAAAA,4BAA4B,GAAoB;AAC9C,UAAMvC,OAAO,GAAG,KAAI4C,gCAAJ,GAAhB;AACA,WAAO5C,OAAO,CAAC6C,gBAAR,CAAyB,KAAKpF,MAAL,CAAY6C,MAArC,CAAP;AACD;;AAEDwC,EAAAA,iCAAiC,CAACC,WAAD,EAAoD;AACnF,UAAM/C,OAAO,GAAG,KAAI4C,gCAAJ,GAAhB;AACA,WAAO5C,OAAO,CAACgD,eAAR,CAAwBD,WAAxB,CAAP;AACD;;AAEDJ,EAAAA,qBAAqB,CAACM,OAAD,EAA8C;AACjE,WAAOC,0BAAgBC,YAAhB,CAA6BF,OAA7B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC4B,QAApBG,oBAAoB,CACxBC,IAAY,GAAGC,uBADS,EAExBrE,OAAe,GAAG,KAAIsE,gBAAJ,EAAW,OAAX,CAFM,EAGxBC,UAHwB,EAIxBC,OAJwB,EAKxBC,UALwB,EAMxBC,OAAoC,GAAGvG,kCANf,EAOI;AAC5B,SAAKS,MAAL,CAAY+F,aAAZ,CAA0B,wCAA1B;;AACA,UAAMC,YAAY,mCAAQzG,kCAAR,GAA+CuG,OAA/C,CAAlB;;AACA,UAAMG,wBAAwB,GAAG,KAAIC,oCAAJ,EAA6B,IAA7B,CAAjC;AACA,UAAMC,GAAG,GAAG,MAAMF,wBAAwB,CAACG,oBAAzB,CAChBZ,IADgB,EAEhBpE,OAFgB,EAGhBuE,UAHgB,EAIhBC,OAJgB,EAKhBC,UALgB,EAMhBG,YANgB,CAAlB;AAQA,SAAKhG,MAAL,CAAYqG,cAAZ;AACA,WAAOF,GAAP;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,YAAY,CAACR,OAA4B,GAAG,EAAhC,EAAoC;AAC9C,UAAMS,kBAAkB,GAAGT,OAAO,CAACpF,cAAR,IAA0B,KAAKd,MAAL,CAAYc,cAAjE;AACA,UAAMA,cAAc,GAAG,KAAKL,kBAAL,CAAwB2B,GAAxB,CAA4BuE,kBAA5B,CAAvB;AACA,UAAMC,YAAY,GAAGV,OAAO,CAACW,kBAAR,IAA8B,KAAKtG,YAAL,CAAkBuG,OAAlB,CAA0BC,sCAA1B,CAAnD;;AAEA,QAAI,CAACjG,cAAL,EAAqB;AACnB,YAAM,KAAIkG,oCAAJ,EAA2B,KAAKhH,MAAL,CAAYc,cAAvC,CAAN;AACD;;AAED,QAAI8F,YAAY,IAAI,CAACK,mBAAGC,cAAH,CAAkBN,YAAlB,CAArB,EAAsD;AACpD,WAAKxG,MAAL,CAAY+G,KAAZ,CAAmB,yCAAwCP,YAAa,EAAxE;;AACAK,yBAAGG,aAAH,CAAiBR,YAAjB;AACD;;AACD,UAAMS,qBAAqB,GAAG,KAAKC,wBAAL,EAA9B;AACA,UAAMC,sBAAsB,GAAG,KAAKC,yBAAL,EAA/B,CAd8C,CAe9C;;AACA,WAAO,KAAIC,0CAAJ,EACL3G,cADK,EAEL,KAAKR,YAFA,EAGL,KAAKF,MAHA,EAIL8F,OAAO,CAACF,OAJH,EAKLY,YALK,EAMLS,qBANK,EAOLE,sBAPK,EAQL,KAAKvH,MAAL,CAAY0H,UARP,CAAP;AAUD;;AAEOJ,EAAAA,wBAAwB,GAA6B;AAC3D,WAAO,KAAK3G,cAAL,CAAoBgD,MAApB,GAA6BC,IAA7B,EAAP;AACD;;AAEO4D,EAAAA,yBAAyB,GAA8B;AAC7D,WAAO,KAAK5G,eAAL,CAAqB+C,MAArB,GAA8BC,IAA9B,EAAP;AACD;AAED;AACF;AACA;;;AACE+D,EAAAA,SAAS,CAACzB,OAAyB,GAAG,EAA7B,EAAiC;AACxC,UAAM0B,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBvI,qBAAlB,EAAyC,CAAA2G,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAE0B,cAAT,KAA2B,EAApE,CAAvB,CADwC,CAExC;;AACA,WAAO,KAAIG,oCAAJ,EACL,IADK,EAEL,KAAKzH,YAFA,EAGL,KAAKE,eAHA,EAIL,KAAKL,IAJA,EAKL,KAAKC,MALA,EAML8F,OAAO,CAACF,OANH,EAOL4B,cAPK,CAAP;AASD;;AAEDI,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAKhI,MAAL,CAAYc,cAAnB;AACD;;AAEuB,QAAlBmH,kBAAkB,CAAC/B,OAAkC,GAAG,EAAtC,EAA0C;AAChE,UAAMpF,cAAc,GAAG,KAAKL,kBAAL,CAAwB2B,GAAxB,CAA4B,KAAKpC,MAAL,CAAYc,cAAxC,CAAvB;AACA,UAAM8F,YAAY,GAAGV,OAAO,CAACW,kBAAR,IAA8B,KAAKtG,YAAL,CAAkBuG,OAAlB,CAA0BC,sCAA1B,CAAnD;;AAEA,QAAI,CAACjG,cAAL,EAAqB;AACnB,YAAM,KAAIkG,oCAAJ,EAA2B,KAAKhH,MAAL,CAAYc,cAAvC,CAAN;AACD;;AAED,QAAI8F,YAAY,IAAI,CAACK,mBAAGC,cAAH,CAAkBN,YAAlB,CAArB,EAAsD;AACpD,WAAKxG,MAAL,CAAY+G,KAAZ,CAAmB,yCAAwCP,YAAa,EAAxE;;AACAK,yBAAGG,aAAH,CAAiBR,YAAjB;AACD;;AACD,UAAM;AAAEsB,MAAAA;AAAF,QAAyB,MAAM,KAAKC,gBAAL,EAArC,CAZgE,CAahE;;AACA,WAAO,KAAIC,sDAAJ,EAA8BtH,cAA9B,EAA8C8F,YAA9C,EAA4DsB,kBAA5D,CAAP;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,uBAAuB,GAAmB;AACxC,UAAMC,SAAS,GAAG,2BAAlB;AACA,UAAMxH,cAAc,GAAG,KAAKL,kBAAL,CAAwB2B,GAAxB,CAA4BkG,SAA5B,CAAvB;AACA,QAAI,CAACxH,cAAL,EAAqB,MAAM,IAAIyH,KAAJ,CAAW,4BAA2BD,SAAU,gBAAhD,CAAN;AACrB,WAAOxH,cAAP;AACD;;AAEmB,QAAd0H,cAAc,GAAyB;AAC3C,UAAMC,gCAAgC,GAAG,KAAKC,mCAAL,EAAzC;AACA,QAAIC,SAAS,GAAGF,gCAAgC,CAACE,SAAjD;AACA,QAAIC,UAAU,GAAGH,gCAAgC,CAACG,UAAlD,CAH2C,CAK3C;;AACA,QAAID,SAAS,IAAIC,UAAjB,EAA6B;AAC3B,WAAKxI,MAAL,CAAY+G,KAAZ,CACG,2DAA0DwB,SAAU,gBAAeC,UAAW,EADjG;AAGA,aAAOH,gCAAP;AACD,KAX0C,CAa3C;;;AACA,UAAMI,6BAA6B,GAAG,MAAM,KAAKC,gCAAL,EAA5C;;AACA,QAAID,6BAA6B,SAA7B,IAAAA,6BAA6B,WAA7B,IAAAA,6BAA6B,CAAEF,SAA/B,IAA4CE,6BAA5C,aAA4CA,6BAA5C,eAA4CA,6BAA6B,CAAED,UAA/E,EAA2F;AACzF,WAAKxI,MAAL,CAAY+G,KAAZ,CACG,sEAAqE0B,6BAA6B,CAACF,SAAU,gBAAeE,6BAA6B,CAACD,UAAW,EADxK;AAGA,aAAOC,6BAAP;AACD,KApB0C,CAsB3C;;;AACA,UAAME,2BAA2B,GAAG,MAAM,KAAKC,8BAAL,EAA1C;AACAL,IAAAA,SAAS,GAAGI,2BAA2B,CAACJ,SAAxC;AACAC,IAAAA,UAAU,GAAGG,2BAA2B,CAACH,UAAzC;;AACA,QAAID,SAAS,IAAIC,UAAjB,EAA6B;AAC3B,WAAKxI,MAAL,CAAY+G,KAAZ,CAAmB,yDAAwDwB,SAAU,gBAAeC,UAAW,EAA/G;AACA,aAAOG,2BAAP;AACD;;AACD,WAAO,EAAP;AACD;;AAEOL,EAAAA,mCAAmC,GAAgB;AAAA;;AACzD,WAAO;AACLO,MAAAA,EAAE,EAAE,KAAKjJ,MAAL,CAAYiJ,EADX;AAELC,MAAAA,IAAI,EAAE,KAAKlJ,MAAL,CAAYkJ,IAFb;AAGLP,MAAAA,SAAS,EAAE,KAAK3I,MAAL,CAAYmJ,KAHlB;AAILP,MAAAA,UAAU,EAAE,KAAK5I,MAAL,CAAY4I,UAAZ,IAA0B,KAAK5I,MAAL,CAAYmJ,KAJ7C;AAKLC,MAAAA,GAAG,EAAE,KAAKpJ,MAAL,CAAYoJ,GALZ;AAMLC,MAAAA,OAAO,EAAE,KAAKrJ,MAAL,CAAYqJ,OANhB;AAOLC,MAAAA,SAAS,EAAE,+BAAKtJ,MAAL,CAAYuJ,SAAZ,gFAAuBC,WAAvB,QAAyC;AAP/C,KAAP;AASD;;AAEqB,QAAhBrB,gBAAgB,GAA2B;AAC/C,yDACM,MAAM,KAAKsB,gCAAL,EADZ,GAEM,MAAM,KAAKC,kCAAL,EAFZ,GAGK,KAAKC,qCAAL,EAHL;AAKD;;AAE6C,QAAhCF,gCAAgC,GAA2B;AACvE,WAAOG,aAAKzB,gBAAL,EAAP;AACD;;AAEOwB,EAAAA,qCAAqC,GAAkB;AAC7D,WAAO,oBAAK,KAAK3J,MAAV,EAAkB,CACvB,cADuB,EAEvB,cAFuB,EAGvB,kBAHuB,EAIvB,sBAJuB,EAKvB,sBALuB,EAMvB,YANuB,EAOvB,oBAPuB,CAAlB,CAAP;AASD;;AAE+C,QAAlC0J,kCAAkC,GAA2B;AACzE,UAAM5I,cAAc,GAAG,KAAK+I,iBAAL,EAAvB;AACA,QAAI,QAAO/I,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAEqH,gBAAvB,MAA4C,UAAhD,EAA4D,OAAO,EAAP;AAC5D,WAAOrH,cAAc,CAACqH,gBAAf,EAAP;AACD;;AAEO0B,EAAAA,iBAAiB,GAAG;AAC1B,UAAM/I,cAAc,GAAG,KAAKL,kBAAL,CAAwB2B,GAAxB,CAA4B,KAAKpC,MAAL,CAAYc,cAAxC,CAAvB;AACA,WAAOA,cAAP,aAAOA,cAAP,cAAOA,cAAP,GAAyB,KAAKuH,uBAAL,EAAzB;AACD;;AAE6C,QAAhCS,gCAAgC,GAAyB;AACrE,UAAMhI,cAAc,GAAG,KAAKL,kBAAL,CAAwB2B,GAAxB,CAA4B,KAAKpC,MAAL,CAAYc,cAAxC,CAAvB;AACA,QAAI+H,6BAA0C,GAAG,EAAjD;;AACA,QAAI/H,cAAc,SAAd,IAAAA,cAAc,WAAd,IAAAA,cAAc,CAAE0H,cAAhB,IAAkC,QAAO1H,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAE0H,cAAvB,MAA0C,UAAhF,EAA4F;AAC1FK,MAAAA,6BAA6B,GAAG,OAAM/H,cAAN,aAAMA,cAAN,uBAAMA,cAAc,CAAE0H,cAAhB,EAAN,CAAhC;AACD,KAFD,MAEO;AACL,YAAMsB,QAAQ,GAAG,KAAKzB,uBAAL,EAAjB;AACA,UAAI,CAACyB,QAAQ,CAACtB,cAAd,EAA8B,MAAM,IAAID,KAAJ,CAAU,0DAAV,CAAN;AAC9BM,MAAAA,6BAA6B,GAAG,MAAMiB,QAAQ,CAACtB,cAAT,EAAtC;AACD;;AACD,WAAOK,6BAAP;AACD;;AAE2C,QAA9BG,8BAA8B,GAAyB;AACnE,WAAOY,aAAKpB,cAAL,EAAP;AACD;AAED;AACF;AACA;AACA;;;AACkC,QAA1BuB,0BAA0B,CAC9B/D,OAD8B,EAE9BD,UAF8B,EAG9BiE,qBAH8B,EAI9B9D,OAJ8B,EAKG;AAAA;;AACjC,SAAK9F,MAAL,CAAY+F,aAAZ,CAA0B,mCAA1B;AACA,UAAMrF,cAAc,GAAG,KAAKL,kBAAL,CAAwB2B,GAAxB,CAA4B,KAAKpC,MAAL,CAAYc,cAAxC,CAAvB;AACA,QAAImJ,oBAAJ;;AACA,QAAInJ,cAAc,SAAd,IAAAA,cAAc,WAAd,IAAAA,cAAc,CAAEoJ,uBAAhB,IAA2C,QAAOpJ,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAEoJ,uBAAvB,MAAmD,UAAlG,EAA8G;AAC5GD,MAAAA,oBAAoB,GAAG,OAAMnJ,cAAN,aAAMA,cAAN,uBAAMA,cAAc,CAAEoJ,uBAAhB,CAC3BlE,OAD2B,EAE3BD,UAF2B,EAG3BiE,qBAH2B,EAI3B9D,OAJ2B,CAAN,CAAvB;AAMD,KAPD,MAOO;AACL,YAAM4D,QAAQ,GAAG,KAAKzB,uBAAL,EAAjB;AACA,UAAI,CAACyB,QAAQ,CAACI,uBAAd,EACE,MAAM,IAAI3B,KAAJ,CAAU,mEAAV,CAAN;AACF0B,MAAAA,oBAAoB,GAAG,OAAMH,QAAN,aAAMA,QAAN,uBAAMA,QAAQ,CAAEI,uBAAV,CAC3BlE,OAD2B,EAE3BD,UAF2B,EAG3BiE,qBAH2B,EAI3B9D,OAJ2B,CAAN,CAAvB;AAMD;;AACD,SAAK9F,MAAL,CAAYqG,cAAZ;AACA,oCAAOwD,oBAAoB,CAAC,GAAD,CAA3B,0DAAO,sBAA2BE,aAAlC;AACD;;AAEkB,QAAbC,aAAa,GAAwB;AAAA;;AACzC,UAAMtJ,cAAc,GAAG,KAAKL,kBAAL,CAAwB2B,GAAxB,CAA4B,KAAKpC,MAAL,CAAYc,cAAxC,CAAvB;AACA,QAAIuJ,UAAJ;;AACA,QAAIvJ,cAAc,SAAd,IAAAA,cAAc,WAAd,IAAAA,cAAc,CAAEsJ,aAAhB,IAAiC,QAAOtJ,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAEsJ,aAAvB,MAAyC,UAA9E,EAA0F;AACxFC,MAAAA,UAAU,GAAG,OAAMvJ,cAAN,aAAMA,cAAN,uBAAMA,cAAc,CAAEsJ,aAAhB,EAAN,CAAb;AACD,KAFD,MAEO;AACL,YAAMN,QAAQ,GAAG,KAAKzB,uBAAL,EAAjB;AACA,UAAI,CAACyB,QAAQ,CAACM,aAAd,EAA6B,MAAM,IAAI7B,KAAJ,CAAU,yDAAV,CAAN;AAC7B8B,MAAAA,UAAU,GAAG,MAAMP,QAAQ,CAACM,aAAT,EAAnB;AACD;;AAED,UAAME,QAAQ,GAAGD,UAAU,CAACE,MAAX,CAAkBC,GAAnC;;AAEA,UAAMC,qBAAqB,GAAG,MAAgB;AAC5C,YAAMC,WAAW,GAAG,CAAAJ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEK,GAAV,KAAiBvL,gBAArC;AAEA,YAAM;AAAEwL,QAAAA,mBAAF;AAAuBC,QAAAA,kBAAvB;AAA2CC,QAAAA;AAA3C,UAAoE,KAAKC,gBAAL,CAAsBT,QAAtB,CAA1E;AAEA,YAAMU,UAAU,GAAGH,kBAAkB,KAAKI,SAA1C;AACA,YAAMC,kBAAkB,GAAG,KAAIC,oBAAJ,EACzBT,WADyB,EAEzBM,UAFyB,EAGzBH,kBAHyB,EAIzBD,mBAJyB,EAKzBE,oBALyB,CAA3B;AAOA,aAAOI,kBAAP;AACD,KAdD;;AAgBA,UAAMA,kBAAkB,GAAGT,qBAAqB,EAAhD;AAEA,UAAMW,yBAAyB,4BAAG,KAAKpL,MAAL,CAAYoL,yBAAf,yEAA4C,IAA3E,CA/ByC,CAiCzC;AACA;;AACA,QACEA,yBAAyB,KACxB,CAACf,UAAU,CAACgB,eAAX,CAA2BV,GAA5B,IACCN,UAAU,CAACgB,eAAX,CAA2BV,GAA3B,KAAmCrL,YADpC,IAECA,YAAY,CAACgM,UAAb,CAAwBjB,UAAU,CAACgB,eAAX,CAA2BV,GAAnD,CAHuB,CAD3B,EAKE;AACA;AACA;AACA;AACA;AACAN,MAAAA,UAAU,GAAGA,UAAU,CAACkB,kBAAX,CAA8BL,kBAA9B,CAAb;AACD,KA9CwC,CA+CzC;;;AACA,QAAI,CAACZ,QAAD,IAAcA,QAAQ,IAAI,CAACA,QAAQ,CAACU,UAAxC,EAAqD;AACnDX,MAAAA,UAAU,GAAGA,UAAU,CAACmB,oBAAX,CAAgC,KAAhC,EAAuCN,kBAAvC,CAAb;AACD;;AAEDb,IAAAA,UAAU,GAAG,KAAKoB,4BAAL,CAAkCpB,UAAlC,EAA8CC,QAA9C,CAAb;AACA,WAAOD,UAAP;AACD;AAED;AACF;AACA;;;AACUoB,EAAAA,4BAA4B,CAACpB,UAAD,EAAyBqB,gBAAzB,EAAiE;AACnG,UAAM;AAAEd,MAAAA,mBAAF;AAAuBC,MAAAA,kBAAvB;AAA2CC,MAAAA;AAA3C,QAAoE,KAAKC,gBAAL,CAAsBW,gBAAtB,CAA1E;AACA,UAAMV,UAAU,GAAGH,kBAAkB,KAAKI,SAA1C;AACA,QAAIU,iBAAiB,GAAGtB,UAAxB;AACAxC,IAAAA,MAAM,CAAC+D,OAAP,CAAevB,UAAU,CAACE,MAA1B,EAAkCtF,GAAlC,CAAsC,CAAC,CAACW,IAAD,EAAOiG,QAAP,CAAD,KAAsB;AAC1D,UAAI,CAACA,QAAQ,CAACC,eAAV,IAA6B1M,gBAAgB,CAAC2M,QAAjB,CAA0BF,QAAQ,CAAClB,GAAnC,CAAjC,EAA0E;AACxE,cAAMqB,gBAAgB,GAAG,KAAIb,oBAAJ,EACvBU,QAAQ,CAAClB,GADc,EAEvBK,UAFuB,EAGvBH,kBAHuB,EAIvBD,mBAJuB,EAKvBE,oBALuB,CAAzB;AAOAa,QAAAA,iBAAiB,GAAGA,iBAAiB,CAACH,oBAAlB,CAAuC5F,IAAvC,EAA6CoG,gBAA7C,CAApB;AACD;;AACD,aAAOL,iBAAP;AACD,KAZD;AAaA,WAAOA,iBAAP;AACD;;AAEOZ,EAAAA,gBAAgB,CACtBW,gBADsB,EAE8E;AACpG,UAAMO,oBAAoB,GAAG,KAAK1L,YAAL,CAAkBuG,OAAlB,CAA0BoF,+BAA1B,CAA7B;AACA,QAAIrB,kBAAkB,GAAGa,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEI,eAA3C;AACA,QAAIlB,mBAAmB,GAAGc,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAES,gBAA5C;AACA,QAAIrB,oBAAoB,GAAGY,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEU,iBAA7C,CAJoG,CAMpG;;AACA,QAAI,CAAC,CAACV,gBAAD,IAAqB,CAACA,gBAAgB,CAACI,eAAxC,KAA4DG,oBAAhE,EAAsF;AACpFrB,MAAAA,mBAAmB,GAAG,WAAtB;AACAC,MAAAA,kBAAkB,GAAI,UAASoB,oBAAqB,EAApD;AACAnB,MAAAA,oBAAoB,GAAGmB,oBAAvB;AACD;;AAED,WAAO;AACLrB,MAAAA,mBADK;AAELC,MAAAA,kBAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD;;AAEqB,MAAlBnE,kBAAkB,GAAW;AAC/B,WAAO,KAAK3G,MAAL,CAAYc,cAAnB;AACD;;AAEDuL,EAAAA,eAAe,CAACT,OAAD,EAAkC1F,OAAlC,EAA6F;AAC1G,UAAMoG,eAAe,GAAG,KAAKxH,4BAAL,EAAxB;AACA8G,IAAAA,OAAO,CAACvI,OAAR,CAAiBpB,KAAD,IAAWqK,eAAe,CAACC,GAAhB,CAAoBtK,KAApB,EAA2BiE,OAA3B,CAA3B;AACA,SAAKsG,kBAAL,CAAwBF,eAAxB;AACA,WAAOA,eAAP;AACD;;AAEDG,EAAAA,oBAAoB,CAACC,aAAD,EAA0B;AAC5C,UAAMJ,eAAe,GAAG,KAAKxH,4BAAL,EAAxB;AACA,UAAM6H,sBAAsB,GAAGL,eAAe,CAACM,MAAhB,CAAuBF,aAAvB,CAA/B;AACA,SAAKF,kBAAL,CAAwBG,sBAAxB;AACD;;AAEOH,EAAAA,kBAAkB,CAACF,eAAD,EAAmC;AAC3D,UAAMO,qBAAqB,GAAGP,eAAe,CAACQ,cAAhB,EAA9B;AACA,SAAK9M,MAAL,CAAY6C,MAAZ,GAAqBgK,qBAArB;AACA,SAAKxM,YAAL,CAAkB0M,YAAlB,CAA+B1K,gDAAyBC,EAAxD,EAA4D,KAAKtC,MAAjE,EAAyE;AACvEgN,MAAAA,gBAAgB,EAAE,IADqD;AAEvEC,MAAAA,aAAa,EAAE;AAFwD,KAAzE;AAID;;AAEkB,QAAbC,aAAa,CAACC,YAAD,EAAwB;AAAA;;AACzC,oCAAO,KAAK9M,YAAL,CAAkB+M,eAAzB,0DAAO,sBAAmCC,KAAnC,CAAyC;AAAEC,MAAAA,GAAG,EAAEH;AAAP,KAAzC,CAAP;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,4BAA4B,CAAC1K,MAAD,EAA0C;AACpE,WAAO,KAAK3C,gBAAL,CAAsBa,QAAtB,CAA+B8B,MAA/B,CAAP;AACD;AAED;AACF;AACA;;;AACE2K,EAAAA,kBAAkB,CAAC3K,MAAD,EAAgC;AAChD,WAAO,KAAK5C,kBAAL,CAAwBc,QAAxB,CAAiC8B,MAAjC,CAAP;AACD;;AAEuC,QAAlC4K,kCAAkC,CAACC,oBAAD,EAA8D;AACpG,UAAMC,GAAG,GAAG,KAAKxN,IAAL,CAAUyN,0BAAV,CAAqCF,oBAArC,EAA2DC,GAAvE;AACA,WAAO,KAAKE,4BAAL,CAAkCF,GAAlC,CAAP;AACD;;AAE0B,QAArBG,qBAAqB,CAAC9L,SAAD,EAA2C;AACpE,UAAM2L,GAAG,GAAG,KAAKxN,IAAL,CAAU4N,MAAV,CAAiB/L,SAAjB,EAA4B2L,GAAxC;AACA,WAAO,KAAKE,4BAAL,CAAkCF,GAAlC,CAAP;AACD;;AAEyC,QAA5BE,4BAA4B,CAACF,GAAD,EAA2C;AACnF,QAAIA,GAAG,CAACzJ,eAAJ,IAAuB,OAAOyJ,GAAG,CAACzJ,eAAX,KAA+B,UAA1D,EAAsE;AACpE,YAAM8J,qBAAqB,GAAG,MAAML,GAAG,CAACzJ,eAAJ,EAApC;;AACA,UAAI8J,qBAAJ,EAA2B;AACzB,cAAMC,kBAAkB,GAAG,KAAIC,6BAAJ,IAAuB9I,gBAAvB,CAAwC4I,qBAAxC,CAA3B;AACA,eAAOC,kBAAP;AACD;AACF;;AACD,WAAO,KAAIC,6BAAJ,IAAuBzL,QAAvB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AAC4B,QAApB0L,oBAAoB,CAACT,oBAAD,EAAkE;AAAA;;AAC1F,UAAMU,oBAAoB,GAAG,KAAI5L,8BAAJ,GAA7B;AACA,QAAI6L,iBAAgC,GAAGD,oBAAoB,CAAC3L,QAArB,EAAvC;AACA,QAAI6L,kBAAiC,GAAGF,oBAAoB,CAAC3L,QAArB,EAAxC;AACA,UAAM8L,eAA8B,4BAAI,MAAM,KAAKd,kCAAL,CAAwCC,oBAAxC,CAAV,0DAAG,sBACnCc,aADJ;AAEA,UAAMC,aAAa,GAAGf,oBAAoB,CAACgB,GAA3C;AACA,UAAMC,cAAc,GAAG,KAAKzO,gBAAL,CAAsB8E,OAAtB,EAAvB;AACAyJ,IAAAA,aAAa,CAACpL,OAAd,CAAuBuL,KAAD,IAAW;AAC/B;AACA;AACA;AACA;AACA;AACA,YAAMC,kBAAkB,GAAGF,cAAc,CAACnL,IAAf,CAAoB,CAAC,CAACsL,eAAD,CAAD,KAAuB;AACpE,eAAOA,eAAe,KAAKF,KAApB,IAA6BE,eAAe,CAAC/C,QAAhB,CAAyB6C,KAAzB,CAApC;AACD,OAF0B,CAA3B;;AAIA,UAAIC,kBAAkB,IAAIA,kBAAkB,CAAC,CAAD,CAA5C,EAAiD;AAC/C,cAAME,aAAa,GAAGX,oBAAoB,CAAChJ,gBAArB,CAAsCyJ,kBAAkB,CAAC,CAAD,CAAxD,EAA6D,OAA7D,CAAtB;AACAR,QAAAA,iBAAiB,GAAGW,wBAActJ,YAAd,CAA2B,CAAC2I,iBAAD,EAAoBU,aAApB,CAA3B,CAApB;AACD;AACF,KAdD;AAeA,UAAME,gBAAgB,GAAGvB,oBAAoB,CAACwB,aAArB,CAAmC7M,gDAAyBC,EAA5D,CAAzB;AACA,UAAM6M,aAAa,GAAGF,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEjP,MAAxC;;AACA,QAAImP,aAAa,IAAIA,aAAa,CAACtM,MAAnC,EAA2C;AACzCyL,MAAAA,kBAAkB,GAAGF,oBAAoB,CAAChJ,gBAArB,CAAsC+J,aAAa,CAACtM,MAApD,EAA4D,QAA5D,CAArB;AACD;;AAED,UAAMuM,MAAM,GAAGJ,wBAActJ,YAAd,CAA2B,CAAC6I,eAAD,EAAkBF,iBAAlB,EAAqCC,kBAArC,CAA3B,CAAf;;AACA,WAAOc,MAAP;AACD;;AAEDC,EAAAA,qBAAqB,CAACrN,SAAD,EAA6BsN,aAA7B,EAAiF;AACpG,UAAMrN,KAAK,GAAGD,SAAS,CAACuN,UAAV,CAAqBC,iBAArB,CAAuCnN,gDAAyBC,EAAhE,CAAd;;AACA,QAAI,CAACL,KAAL,EAAY;AACV,aAAOD,SAAP;AACD;;AACD,UAAMuC,YAAY,GAAG,mBAAItC,KAAJ,EAAW,CAAC,MAAD,EAAS,cAAT,CAAX,EAAqC,EAArC,CAArB;AACAsC,IAAAA,YAAY,CAAClB,OAAb,CAAsBC,GAAD,IAAS;AAC5B,UAAIA,GAAG,CAACmM,MAAJ,KAAeC,kCAAnB,EAAuC;AACrC,cAAMC,KAAK,GAAG,KAAIC,oBAAJ,EAAUtM,GAAG,CAACuM,WAAd,CAAd;AACA,cAAMC,QAAQ,GAAGR,aAAa,CAACK,KAAD,CAA9B;AACArM,QAAAA,GAAG,CAACuM,WAAJ,GAAkB,CAACC,QAAQ,IAAIH,KAAb,EAAoBjM,SAApB,EAAlB;AACAJ,QAAAA,GAAG,CAAChB,EAAJ,GAAS,CAACwN,QAAQ,IAAIH,KAAb,EAAoBI,QAApB,EAAT;AACAzM,QAAAA,GAAG,CAAC9B,OAAJ,GAAc,CAACsO,QAAQ,IAAIH,KAAb,EAAoBnO,OAAlC;AACD;AACF,KARD;AASA,WAAOQ,SAAP;AACD;;AAEDgO,EAAAA,wBAAwB,CAACxO,OAAD,EAAwB8N,aAAxB,EAA4E;AAClG,UAAMrN,KAAK,GAAGT,OAAO,CAAC+N,UAAR,CAAmBC,iBAAnB,CAAqCnN,gDAAyBC,EAA9D,CAAd;;AACA,QAAI,CAACL,KAAL,EAAY;AACV,aAAOT,OAAP;AACD;;AACD,UAAM+C,YAAY,GAAG,mBAAItC,KAAJ,EAAW,CAAC,MAAD,EAAS,cAAT,CAAX,EAAqC,EAArC,CAArB;AACAsC,IAAAA,YAAY,CAAClB,OAAb,CAAsBC,GAAD,IAAS;AAC5B,UAAIA,GAAG,CAACmM,MAAJ,KAAeC,kCAAnB,EAAuC;AACrC,cAAMC,KAAK,GAAG,KAAIC,oBAAJ,EAAUtM,GAAG,CAACuM,WAAd,CAAd;AACA,cAAMC,QAAQ,GAAGR,aAAa,CAACK,KAAD,CAA9B;AACArM,QAAAA,GAAG,CAACuM,WAAJ,GAAkB,CAACC,QAAQ,IAAIH,KAAb,EAAoBjM,SAApB,EAAlB;AACAJ,QAAAA,GAAG,CAAChB,EAAJ,GAAS,CAACwN,QAAQ,IAAIH,KAAb,EAAoBI,QAApB,EAAT;AACD;AACF,KAPD;AAQA,WAAOvO,OAAP;AACD;AAED;AACF;AACA;AACA;;;AACEyO,EAAAA,gBAAgB,CAACC,QAAD,EAA+B;AAC7CC,iCAAaC,KAAb,CAAmBC,IAAnB,CAAwBH,QAAxB;;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC4C,QAApCI,oCAAoC,CACxCC,oBADwC,EAExCC,QAFwC,EAGH;AACrC,UAAMC,eAAe,GAAGF,oBAAoB,CAACvO,SAA7C;AACA,WAAO,KAAK0O,0DAAL,CAAgED,eAAhE,EAAiFD,QAAjF,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AAC0E,QAA1DE,0DAA0D,EACtE;AACA;AACAD,EAAAA,eAHsE,EAItED,QAJsE,EAMjC;AACrC;AACA,QAAIG,uBAAJ;AACA,QAAIC,kBAAJ;;AACA,UAAMC,wBAAwB,GAAInM,IAAD,IAA8D;AAC7F,aAAO,2BAAUA,IAAV,EAAgB,MAAOpB,GAAP,IAAe;AAAA;;AACpC;AACA,YAAI,CAACA,GAAG,CAAChB,EAAT,EAAa,OAFuB,CAGpC;;AACA,YAAI,KAAKhC,YAAL,CAAkBwQ,YAAlB,CAA+BxN,GAAG,CAAChB,EAAnC,CAAJ,EAA4C,OAJR,CAKpC;;AACA,YAAI,OAAOmO,eAAP,KAA2B,QAA/B,EAAyC;AACvC,gBAAMM,iBAAiB,GAAG,MAAM,KAAKvQ,eAAL,CAAqBwQ,OAArB,GAA+BC,kBAA/B,CAAkDR,eAAlD,CAAhC;AACAE,UAAAA,uBAAuB,GAAG,MAAM,KAAKnQ,eAAL,CAAqBwQ,OAArB,GAA+B5O,GAA/B,CAAmC2O,iBAAnC,CAAhC;AACD,SAHD,MAGO;AACL;AACAJ,UAAAA,uBAAuB,GAAGF,eAA1B;AACD;;AACD,YAAI,CAACE,uBAAL,EAA8B;AAC5B,eAAKvQ,MAAL,CAAY8Q,KAAZ,CACG,mCAAkCT,eAAgB,uDADrD;AAGA;AACD,SAlBmC,CAmBpC;;;AACAG,QAAAA,kBAAkB,GAAGA,kBAAkB,KAAK,MAAM,KAAK1M,eAAL,CAAqByM,uBAArB,CAAX,CAAvC;AACA,cAAMQ,WAAW,GAAGP,kBAAkB,CAACQ,cAAnB,CAAkC9N,GAAG,CAAChB,EAAtC,EAA0C;AAAE2K,UAAAA,aAAa,EAAE;AAAjB,SAA1C,CAApB,CArBoC,CAsBpC;AACA;;AACA3J,QAAAA,GAAG,CAAChB,EAAJ,sBAAS6O,WAAT,aAASA,WAAT,uBAASA,WAAW,CAAE7O,EAAtB,6DAA4BgB,GAAG,CAAChB,EAAhC;AACA,cAAM,KAAKoO,0DAAL,CAAgEpN,GAAG,CAAChB,EAApE,EAAwEgB,GAAxE,CAAN;AACD,OA1BM,CAAP;AA2BD,KA5BD;;AA6BA,QAAIkN,QAAQ,CAACjM,YAAb,EAA2B;AACzB;AACA;AACAiM,MAAAA,QAAQ,CAACjM,YAAT,GAAwBiM,QAAQ,CAACjM,YAAT,CAAsBU,GAAtB,CAA2B3B,GAAD,IAAS,KAAKhD,YAAL,CAAkB+Q,aAAlB,CAAgC/N,GAAhC,CAAnC,CAAxB;AACA,YAAMuN,wBAAwB,CAACL,QAAQ,CAACjM,YAAV,CAA9B;AACD,KAtCoC,CAuCrC;AACA;;;AACA,QAAIiM,QAAQ,CAACc,SAAb,EAAwB;AACtB;AACA,YAAM,2BAAUd,QAAQ,CAACc,SAAnB,EAA8B,MAAOC,OAAP,IAAoC;AACtE,YAAIA,OAAO,CAAChN,YAAZ,EAA0B;AACxB;AACA;AACAgN,UAAAA,OAAO,CAAChN,YAAR,GAAuBgN,OAAO,CAAChN,YAAR,CAAqBU,GAArB,CAA0B3B,GAAD,IAAS,KAAKhD,YAAL,CAAkB+Q,aAAlB,CAAgC/N,GAAhC,CAAlC,CAAvB;AACA,gBAAMuN,wBAAwB,CAACU,OAAO,CAAChN,YAAT,CAA9B;AACD;AACF,OAPK,CAAN;AAQD;;AAED,WAAOiM,QAAP;AACD;AAED;AACF;AACA;;;AACEgB,EAAAA,2BAA2B,CAAC;AAC1BxL,IAAAA,OAD0B;AAE1ByL,IAAAA,yBAF0B;AAG1BC,IAAAA;AAH0B,GAAD,EAQA;AACzB,UAAMC,OAAO,GAAG,0CAAiB;AAC/B5L,MAAAA,UAAU,EAAE,KAAKjB,4BAAL,EADmB;AAE/B2M,MAAAA,yBAF+B;AAG/BC,MAAAA;AAH+B,KAAjB,CAAhB;AAKA,WAAO,KAAKE,eAAL,CAAqB5L,OAArB,EAA8B2L,OAA9B,CAAP;AACD;AAED;AACF;AACA;;;AACuB,QAAfC,eAAe,CACnB5L,OADmB,EAEnB6L,IAFmB,EAG8D;AACjF,SAAKzR,MAAL,CAAY+F,aAAZ,CAA0B,8CAA1B;AACA,UAAM2L,QAAQ,GAAG,MAAM,KAAK7J,kBAAL,EAAvB;;AACA,UAAM8J,OAAO,GAAG,MAAOC,IAAP,IACd,CACE,MAAMF,QAAQ,CAACG,oBAAT,CAA8BD,IAA9B,EAAoC;AACxChM,MAAAA;AADwC,KAApC,CADR,EAIExE,OALJ;;AAMA,UAAM0Q,YAAY,GAAG,CACnB,MAAMC,OAAO,CAACC,GAAR,CACJP,IAAI,CAAC5M,GAAL,CAAS,MAAOoN,GAAP,IAAe;AACtB,YAAMC,aAAa,GAAG,MAAMP,OAAO,CAAE,GAAEM,GAAG,CAACzM,IAAK,SAAb,CAAnC;AACA,6CACKyM,GADL;AAEEE,QAAAA,WAAW,EAAED,aAAa,GAAGE,YAAY,CAACH,GAAG,CAACI,YAAL,EAAmBH,aAAnB,CAAf,GAAmD;AAF/E;AAID,KAND,CADI,CADa,EAUnBI,MAVmB,CAUZ,CAAC;AAAEH,MAAAA,WAAF;AAAeE,MAAAA;AAAf,KAAD,KAAmCF,WAAW,IAAI,IAAf,IAAuBA,WAAW,KAAKE,YAV9D,CAArB;AAWA,SAAKrS,MAAL,CAAYqG,cAAZ;AACA,WAAOyL,YAAP;AACD;AAED;AACF;AACA;AACA;;;AACES,EAAAA,YAAY,CACVT,YADU,EAEVhM,OAFU,EASV;AACA,UAAM;AAAE0M,MAAAA,eAAF;AAAmBC,MAAAA,iBAAnB;AAAsCC,MAAAA;AAAtC,QAAwE,kCAAaZ,YAAb,EAA2B;AACvGT,MAAAA,yBAAyB,EAAEvL,OAAO,CAACuL,yBADoE;AAEvGC,MAAAA,qBAAqB,EAAExL,OAAO,CAACwL;AAFwE,KAA3B,CAA9E;AAIA,SAAKrF,eAAL,CAAqByG,6BAArB,EAAoD;AAClDC,MAAAA,cAAc,EAAE;AADkC,KAApD;AAGA,WAAO;AACLH,MAAAA,eADK;AAELC,MAAAA;AAFK,KAAP;AAID;;AAgCoB,eAARG,QAAQ,CACnB,CAAC7S,IAAD,EAAO8S,SAAP,EAAkBC,UAAlB,EAA8B5S,YAA9B,EAA4CE,eAA5C,EAA6D2S,OAA7D,EAAsE5S,YAAtE,CADmB,EAUnBP,MAVmB,EAWnB,CACEC,kBADF,EAEEC,gBAFF,EAGEO,kBAHF,EAIEC,qBAJF,EAKEC,cALF,EAMEC,eANF,CAXmB,EA0BnB;AACA;AACA,UAAMR,MAAM,GAAG6S,SAAS,CAACG,YAAV,CAAuB/Q,gDAAyBC,EAAhD,CAAf;AACA,UAAM+Q,kBAAkB,GAAG,IAAIvT,sBAAJ,CACzBE,MADyB,EAEzBC,kBAFyB,EAGzBC,gBAHyB,EAIzBC,IAJyB,EAKzBC,MALyB,EAMzB8S,UANyB,EAOzB5S,YAPyB,EAQzBC,YARyB,EASzBC,eATyB,EAUzBC,kBAVyB,EAWzBC,qBAXyB,EAYzBC,cAZyB,EAazBC,eAbyB,CAA3B;AAgBAJ,IAAAA,eAAe,CAAC8S,qBAAhB,CAAsC,CACpC,KAAIC,qCAAJ,EAAyBF,kBAAzB,CADoC,EAEpC,KAAIG,wCAAJ,EAA4BH,kBAA5B,CAFoC,EAGpC,KAAII,yCAAJ,EAA6BJ,kBAA7B,CAHoC,CAAtC,EAnBA,CAwBA;AACA;;AACAA,IAAAA,kBAAkB,CAACrS,2BAAnB,CAA+C,CAAC,KAAI0S,0CAAJ,EAA+BlT,eAA/B,CAAD,CAA/C;;AAEAmT,6CAAmBC,wBAAnB,GAA8C,MAAMvR,gDAAyBC,EAA7E;;AAEAuR,0BAAgBC,mCAAhB,CACEzR,gDAAyBC,EAD3B,EAEE,MAAOoL,oBAAP,IAAmD;AACjD,YAAM7K,MAAM,GAAG,MAAMwQ,kBAAkB,CAAClF,oBAAnB,CAAwCT,oBAAxC,CAArB;AACA,aAAO7K,MAAM,CAACkR,qBAAP,EAAP;AACD,KALH;;AAOAJ,6CAAmBK,6BAAnB,CAAiD,MAAM;AACrD,YAAM1H,eAAe,GAAG+G,kBAAkB,CAACzO,kBAAnB,EAAxB;AACA,aAAO0H,eAAe,CAAC2H,UAAhB,EAAP;AACD,KAHD;;AAIAN,6CAAmBO,mCAAnB,CAAuD,MAAOxG,oBAAP,IAAmD;AACxG,YAAMyG,SAAS,GAAG,MAAMd,kBAAkB,CAAC5F,kCAAnB,CAAsDC,oBAAtD,CAAxB;AACA,aAAOyG,SAAS,CAACC,qBAAV,CAAgCC,uBAAhC,EAAP;AACD,KAHD;;AAIA,8DAAgChB,kBAAkB,CAAChE,qBAAnB,CAAyCiF,IAAzC,CAA8CjB,kBAA9C,CAAhC;AACA,qEAAmCA,kBAAkB,CAACrD,wBAAnB,CAA4CsE,IAA5C,CAAiDjB,kBAAjD,CAAnC;AACA/S,IAAAA,YAAY,CAACiU,sCAAb,CACElB,kBAAkB,CAAC/C,oCAAnB,CAAwDgE,IAAxD,CAA6DjB,kBAA7D,CADF;AAIAF,IAAAA,OAAO,CAACpS,QAAR,CAAiB,qDAAyBsS,kBAAzB,CAAjB;AACAlT,IAAAA,IAAI,CAACqU,eAAL,CAAqB,KAAIC,oCAAJ,GAArB;AAEA,WAAOpB,kBAAP;AACD;;AAEDqB,EAAAA,kBAAkB,GAA+B;AAC/C,WAAO;AACLnQ,MAAAA,YAAY,EAAE,EADT;AAELoQ,MAAAA,eAAe,EAAE,EAFZ;AAGLC,MAAAA,gBAAgB,EAAE;AAHb,KAAP;AAKD;;AAr8BiC;;;gCAAvB9U,sB,aA80BM+U,kB;gCA90BN/U,sB,kBA+0BW,CACpBgV,kBADoB,EAEpBC,sBAFoB,EAGpBC,sBAHoB,EAIpBC,uBAJoB,EAKpBC,oBALoB,EAMpBC,wBANoB,EAOpBC,uBAPoB,C;gCA/0BXtV,sB,WAy1BI,CACbuV,gBAAKC,QAAL,EADa,EAEbD,gBAAKC,QAAL,EAFa,EAGbD,gBAAKC,QAAL,EAHa,EAIbD,gBAAKC,QAAL,EAJa,EAKbD,gBAAKC,QAAL,EALa,EAMbD,gBAAKC,QAAL,EANa,EAObD,gBAAKC,QAAL,EAPa,EAQbD,gBAAKC,QAAL,EARa,C;gCAz1BJxV,sB,mBAo2B+C;AACxD;AACJ;AACA;AACIgB,EAAAA,cAAc,EAAE,2BAJwC;AAKxD+B,EAAAA,MAAM,EAAE;AALgD,C;;AAoG5DR,gDAAyBkT,UAAzB,CAAoCzV,sBAApC;;AAEA,SAAS0S,YAAT,CAAsBgD,YAAtB,EAA4CC,UAA5C,EAAwE;AACtE,UAAQD,YAAY,CAAC,CAAD,CAApB;AACE,SAAK,GAAL;AACA,SAAK,GAAL;AACE,aAAQ,GAAEA,YAAY,CAAC,CAAD,CAAI,GAAEC,UAAW,EAAvC;;AACF;AACE,aAAOA,UAAP;AALJ;AAOD","sourcesContent":["import mapSeries from 'p-map-series';\nimport { MainRuntime } from '@teambit/cli';\nimport ComponentAspect, { Component, ComponentMap, ComponentMain } from '@teambit/component';\nimport type { ConfigMain } from '@teambit/config';\nimport { get, pick } from 'lodash';\nimport { ConfigAspect } from '@teambit/config';\nimport { DependenciesEnv, EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { Slot, SlotRegistry, ExtensionManifest, Aspect, RuntimeManifest } from '@teambit/harmony';\nimport { RequireableComponent } from '@teambit/harmony.modules.requireable-component';\nimport type { LoggerMain } from '@teambit/logger';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Logger, LoggerAspect } from '@teambit/logger';\nimport { CFG_PACKAGE_MANAGER_CACHE, CFG_USER_TOKEN_KEY } from '@teambit/legacy/dist/constants';\n// TODO: it's weird we take it from here.. think about it../workspace/utils\nimport { DependencyResolver } from '@teambit/legacy/dist/consumer/component/dependencies/dependency-resolver';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { DetectorHook } from '@teambit/legacy/dist/consumer/component/dependencies/files-dependency-builder/detector-hook';\nimport { Http, ProxyConfig, NetworkConfig } from '@teambit/legacy/dist/scope/network/http';\nimport {\n  registerUpdateDependenciesOnTag,\n  onTagIdTransformer,\n} from '@teambit/legacy/dist/scope/component-ops/tag-model-component';\nimport {\n  registerUpdateDependenciesOnExport,\n  OnExportIdTransformer,\n} from '@teambit/legacy/dist/scope/component-ops/export-scope-components';\nimport { Version as VersionModel } from '@teambit/legacy/dist/scope/models';\nimport LegacyComponent from '@teambit/legacy/dist/consumer/component';\nimport fs from 'fs-extra';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport semver, { SemVer } from 'semver';\nimport AspectLoaderAspect, { AspectLoaderMain } from '@teambit/aspect-loader';\nimport GlobalConfigAspect, { GlobalConfigMain } from '@teambit/global-config';\nimport { Registries, Registry } from './registry';\nimport { applyUpdates } from './apply-updates';\nimport { ROOT_NAME } from './dependencies/constants';\nimport { DependencyInstaller, PreInstallSubscriberList, PostInstallSubscriberList } from './dependency-installer';\nimport { DependencyResolverAspect } from './dependency-resolver.aspect';\nimport { DependencyVersionResolver } from './dependency-version-resolver';\nimport { DependencyLinker, LinkingOptions } from './dependency-linker';\nimport { getAllPolicyPkgs, OutdatedPkg } from './get-all-policy-pkgs';\nimport { InvalidVersionWithPrefix, PackageManagerNotFound } from './exceptions';\nimport {\n  CreateFromComponentsOptions,\n  WorkspaceManifest,\n  WorkspaceManifestFactory,\n  ManifestDependenciesObject,\n} from './manifest';\nimport {\n  WorkspacePolicyConfigObject,\n  VariantPolicyConfigObject,\n  WorkspacePolicy,\n  WorkspacePolicyFactory,\n  VariantPolicy,\n  VariantPolicyFactory,\n  WorkspacePolicyAddEntryOptions,\n  WorkspacePolicyEntry,\n  SerializedVariantPolicy,\n} from './policy';\nimport {\n  PackageImportMethod,\n  PackageManager,\n  PeerDependencyIssuesByProjects,\n  PackageManagerGetPeerDependencyIssuesOptions,\n} from './package-manager';\n\nimport {\n  SerializedDependency,\n  DependencyListFactory,\n  DependencyFactory,\n  ComponentDependencyFactory,\n  COMPONENT_DEP_TYPE,\n  DependencyList,\n} from './dependencies';\nimport { DependenciesFragment, DevDependenciesFragment, PeerDependenciesFragment } from './show-fragments';\nimport { dependencyResolverSchema } from './dependency-resolver.graphql';\nimport { DependencyDetector } from './dependency-detector';\nimport { DependenciesService } from './dependencies.service';\nimport { EnvPolicy, EnvPolicyFactory } from './policy/env-policy';\n\n/**\n * @deprecated use BIT_CLOUD_REGISTRY instead\n */\nexport const BIT_DEV_REGISTRY = 'https://node.bit.dev/';\nexport const BIT_CLOUD_REGISTRY = 'https://node.bit.cloud/';\nexport const NPM_REGISTRY = 'https://registry.npmjs.org/';\n\nexport { ProxyConfig, NetworkConfig } from '@teambit/legacy/dist/scope/network/http';\n\nexport interface DependencyResolverWorkspaceConfig {\n  policy: WorkspacePolicyConfigObject;\n  /**\n   * choose the package manager for Bit to use. you can choose between 'npm', 'yarn', 'pnpm'\n   * and 'librarian'. our recommendation is use 'librarian' which reduces package duplicates\n   * and totally removes the need of a 'node_modules' directory in your project.\n   */\n  packageManager: string;\n\n  /**\n   * A proxy server for out going network requests by the package manager\n   * Used for both http and https requests (unless the httpsProxy is defined)\n   */\n  proxy?: string;\n\n  /**\n   * A proxy server for outgoing https requests by the package manager (fallback to proxy server if not defined)\n   * Use this in case you want different proxy for http and https requests.\n   */\n  httpsProxy?: string;\n\n  /**\n   * A path to a file containing one or multiple Certificate Authority signing certificates.\n   * allows for multiple CA's, as well as for the CA information to be stored in a file on disk.\n   */\n  ca?: string;\n\n  /**\n   * Whether or not to do SSL key validation when making requests to the registry via https\n   */\n  strictSsl?: string;\n\n  /**\n   * A client certificate to pass when accessing the registry. Values should be in PEM format (Windows calls it \"Base-64 encoded X.509 (.CER)\") with newlines replaced by the string \"\\n\". For example:\n   * cert=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n   * It is not the path to a certificate file (and there is no \"certfile\" option).\n   */\n  cert?: string;\n\n  /**\n   * A client key to pass when accessing the registry. Values should be in PEM format with newlines replaced by the string \"\\n\". For example:\n   * key=\"-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----\"\n   * It is not the path to a key file (and there is no \"keyfile\" option).\n   */\n  key?: string;\n\n  /**\n   * A comma-separated string of domain extensions that a proxy should not be used for.\n   */\n  noProxy?: string;\n\n  /**\n   * The IP address of the local interface to use when making connections to the npm registry.\n   */\n  localAddress?: string;\n\n  /**\n   * How many times to retry if Bit fails to fetch from the registry.\n   */\n  fetchRetries?: number;\n\n  /*\n   * The exponential factor for retry backoff.\n   */\n  fetchRetryFactor?: number;\n\n  /*\n   * The minimum (base) timeout for retrying requests.\n   */\n  fetchRetryMintimeout?: number;\n\n  /*\n   * The maximum fallback timeout to ensure the retry factor does not make requests too long.\n   */\n  fetchRetryMaxtimeout?: number;\n\n  /*\n   * The maximum amount of time (in milliseconds) to wait for HTTP requests to complete.\n   */\n  fetchTimeout?: number;\n\n  /*\n   * The maximum number of connections to use per origin (protocol/host/port combination).\n   */\n  maxSockets?: number;\n\n  /*\n   * Controls the maximum number of HTTP(S) requests to process simultaneously.\n   */\n  networkConcurrency?: number;\n\n  /*\n   * Set the prefix to use when adding dependency to workspace.jsonc via bit install\n   * to lock version to exact version you can use empty string (default)\n   */\n  savePrefix?: string;\n\n  /*\n   * in case you want to disable this proxy set this config to false\n   *\n   */\n  installFromBitDevRegistry?: boolean;\n\n  /*\n   * map of extra arguments to pass to the configured package manager upon the installation\n   * of dependencies.\n   */\n  packageManagerArgs?: string[];\n\n  /*\n   * This field allows to instruct the package manager to override any dependency in the dependency graph.\n   * This is useful to enforce all your packages to use a single version of a dependency, backport a fix,\n   * or replace a dependency with a fork.\n   */\n  overrides?: Record<string, string>;\n\n  /**\n   * This is similar to overrides, but will only affect installation in capsules.\n   * In case overrides is configured and this not, the regular overrides will affect capsules as well.\n   * in case both configured, capsulesOverrides will be used for capsules, and overrides will affect the workspace.\n   */\n  capsulesOverrides?: Record<string, string>;\n\n  /*\n   * Defines what linker should be used for installing Node.js packages.\n   * Supported values are hoisted and isolated.\n   */\n  nodeLinker?: 'hoisted' | 'isolated';\n\n  /*\n   * Controls the way packages are imported from the store.\n   */\n  packageImportMethod?: PackageImportMethod;\n}\n\nexport interface DependencyResolverVariantConfig {\n  policy: VariantPolicyConfigObject;\n}\n\nexport type RootPolicyRegistry = SlotRegistry<WorkspacePolicy>;\nexport type PoliciesRegistry = SlotRegistry<VariantPolicyConfigObject>;\nexport type PackageManagerSlot = SlotRegistry<PackageManager>;\nexport type DependencyFactorySlot = SlotRegistry<DependencyFactory[]>;\nexport type PreInstallSlot = SlotRegistry<PreInstallSubscriberList>;\nexport type PostInstallSlot = SlotRegistry<PostInstallSubscriberList>;\n\nexport type MergeDependenciesFunc = (configuredExtensions: ExtensionDataList) => Promise<VariantPolicyConfigObject>;\n\nexport type GetInstallerOptions = {\n  rootDir?: string;\n  packageManager?: string;\n  cacheRootDirectory?: string;\n};\n\nexport type GetLinkerOptions = {\n  rootDir?: string;\n  linkingOptions?: LinkingOptions;\n};\n\nexport type GetVersionResolverOptions = {\n  cacheRootDirectory?: string;\n};\n\nconst defaultLinkingOptions: LinkingOptions = {\n  legacyLink: true,\n  linkTeambitBit: true,\n  linkCoreAspects: true,\n};\n\nconst defaultCreateFromComponentsOptions: CreateFromComponentsOptions = {\n  filterComponentsFromManifests: true,\n  createManifestForComponentsWithoutDependencies: true,\n};\n\nexport class DependencyResolverMain {\n  constructor(\n    /**\n     * Dependency resolver  extension configuration.\n     */\n    readonly config: DependencyResolverWorkspaceConfig,\n\n    /**\n     * Registry for changes by other extensions.\n     */\n    private rootPolicyRegistry: RootPolicyRegistry,\n\n    /**\n     * Registry for changes by other extensions.\n     */\n    private policiesRegistry: PoliciesRegistry,\n\n    /**\n     * envs extension.\n     */\n    private envs: EnvsMain,\n\n    private logger: Logger,\n\n    private configAspect: ConfigMain,\n\n    private aspectLoader: AspectLoaderMain,\n\n    private globalConfig: GlobalConfigMain,\n\n    /**\n     * component aspect.\n     */\n    readonly componentAspect: ComponentMain,\n\n    private packageManagerSlot: PackageManagerSlot,\n\n    private dependencyFactorySlot: DependencyFactorySlot,\n\n    private preInstallSlot: PreInstallSlot,\n\n    private postInstallSlot: PostInstallSlot\n  ) {}\n\n  /**\n   * register a new package manager to the dependency resolver.\n   */\n  registerPackageManager(packageManager: PackageManager) {\n    this.packageManagerSlot.register(packageManager);\n  }\n\n  registerDependencyFactories(factories: DependencyFactory[]) {\n    this.dependencyFactorySlot.register(factories);\n  }\n\n  registerPreInstallSubscribers(subscribers: PreInstallSubscriberList) {\n    this.preInstallSlot.register(subscribers);\n  }\n\n  registerPostInstallSubscribers(subscribers: PreInstallSubscriberList) {\n    this.postInstallSlot.register(subscribers);\n  }\n\n  getSavePrefix(): string {\n    return this.config.savePrefix || '';\n  }\n\n  getVersionWithSavePrefix(version: string, overridePrefix?: string): string {\n    const prefix = overridePrefix || this.getSavePrefix();\n    const versionWithPrefix = `${prefix}${version}`;\n    if (!semver.validRange(versionWithPrefix)) {\n      throw new InvalidVersionWithPrefix(versionWithPrefix);\n    }\n    return versionWithPrefix;\n  }\n\n  async getPolicy(component: Component): Promise<VariantPolicy> {\n    const entry = component.state.aspects.get(DependencyResolverAspect.id);\n    const factory = new VariantPolicyFactory();\n    if (!entry) {\n      return factory.getEmpty();\n    }\n    const serializedPolicy: SerializedVariantPolicy = get(entry, ['data', 'policy'], []);\n    return factory.parse(serializedPolicy);\n  }\n\n  /**\n   * This function called on component load in order to calculate the dependencies based on the legacy (consumer) component\n   * and write them to the dependencyResolver data.\n   * Do not use this function for other purpose.\n   * If you want to get the component dependencies call getDependencies (which will give you the dependencies from the data itself)\n   * TODO: once we switch deps resolver <> workspace relation we should make it private\n   * TODO: once we switch deps resolver <> workspace relation we should remove the resolveId func here\n   * @param component\n   */\n  async extractDepsFromLegacy(component: Component, policy?: VariantPolicy): Promise<SerializedDependency[]> {\n    const componentPolicy = policy || (await this.getPolicy(component));\n    const legacyComponent: LegacyComponent = component.state._consumer;\n    const listFactory = this.getDependencyListFactory();\n    const dependencyList = await listFactory.fromLegacyComponent(legacyComponent);\n    dependencyList.forEach((dep) => {\n      const found = componentPolicy.find(dep.id);\n      // if no policy found, the dependency was auto-resolved from the source code\n      dep.source = found?.source || 'auto';\n    });\n    return dependencyList.serialize();\n  }\n\n  private getDependencyListFactory(): DependencyListFactory {\n    const factories = this.dependencyFactorySlot.values().flat();\n    const factoriesMap = factories.reduce((acc, factory) => {\n      acc[factory.type] = factory;\n      return acc;\n    }, {});\n    const listFactory = new DependencyListFactory(factoriesMap);\n    return listFactory;\n  }\n\n  /**\n   * Main function to get the dependency list of a given component\n   * @param component\n   */\n  async getDependencies(component: Component): Promise<DependencyList> {\n    const entry = component.state.aspects.get(DependencyResolverAspect.id);\n    if (!entry) {\n      return DependencyList.fromArray([]);\n    }\n    const serializedDependencies: SerializedDependency[] = entry?.data?.dependencies || [];\n    return this.getDependenciesFromSerializedDependencies(serializedDependencies);\n  }\n\n  private async getDependenciesFromSerializedDependencies(\n    dependencies: SerializedDependency[]\n  ): Promise<DependencyList> {\n    if (!dependencies.length) {\n      return DependencyList.fromArray([]);\n    }\n    const listFactory = this.getDependencyListFactory();\n    const deps = await listFactory.fromSerializedDependencies(dependencies);\n    return deps;\n  }\n\n  /**\n   * Getting the merged workspace policy (from dep resolver config and others like root package.json)\n   * @returns\n   */\n  getWorkspacePolicy(): WorkspacePolicy {\n    const policyFromConfig = this.getWorkspacePolicyFromConfig();\n    const externalPolicies = this.rootPolicyRegistry.toArray().map(([, policy]) => policy);\n    return this.mergeWorkspacePolices([policyFromConfig, ...externalPolicies]);\n  }\n\n  /**\n   * Getting the workspace policy as defined in the workspace.jsonc in the dependencyResolver aspect\n   * This will not take into account packages that defined in the package.json of the root for example\n   * in most cases you should use getWorkspacePolicy\n   * @returns\n   */\n  getWorkspacePolicyFromConfig(): WorkspacePolicy {\n    const factory = new WorkspacePolicyFactory();\n    return factory.fromConfigObject(this.config.policy);\n  }\n\n  getWorkspacePolicyFromPackageJson(packageJson: Record<string, any>): WorkspacePolicy {\n    const factory = new WorkspacePolicyFactory();\n    return factory.fromPackageJson(packageJson);\n  }\n\n  mergeWorkspacePolices(polices: WorkspacePolicy[]): WorkspacePolicy {\n    return WorkspacePolicy.mergePolices(polices);\n  }\n\n  /**\n   * Create a workspace manifest\n   * The term workspace here is not the same as \"bit workspace\" but a workspace that represent a shared root\n   * for installation of many components (sometime it might point to the workspace path)\n   * in other case it can be for example the capsules root dir\n   *\n   * @param {string} [name=ROOT_NAME]\n   * @param {SemVer} [version=new SemVer('1.0.0')]\n   * @param {ManifestDependenciesObject} dependencies\n   * @param {string} rootDir\n   * @param {Component[]} components\n   * @param {CreateFromComponentsOptions} [options={\n   *       filterComponentsFromManifests: true,\n   *       createManifestForComponentsWithoutDependencies: true,\n   *     }]\n   * @returns {WorkspaceManifest}\n   * @memberof DependencyResolverMain\n   */\n  async getWorkspaceManifest(\n    name: string = ROOT_NAME,\n    version: SemVer = new SemVer('1.0.0'),\n    rootPolicy: WorkspacePolicy,\n    rootDir: string,\n    components: Component[],\n    options: CreateFromComponentsOptions = defaultCreateFromComponentsOptions\n  ): Promise<WorkspaceManifest> {\n    this.logger.setStatusLine('deduping dependencies for installation');\n    const concreteOpts = { ...defaultCreateFromComponentsOptions, ...options };\n    const workspaceManifestFactory = new WorkspaceManifestFactory(this);\n    const res = await workspaceManifestFactory.createFromComponents(\n      name,\n      version,\n      rootPolicy,\n      rootDir,\n      components,\n      concreteOpts\n    );\n    this.logger.consoleSuccess();\n    return res;\n  }\n\n  /**\n   * get a component dependency installer.\n   */\n  getInstaller(options: GetInstallerOptions = {}) {\n    const packageManagerName = options.packageManager || this.config.packageManager;\n    const packageManager = this.packageManagerSlot.get(packageManagerName);\n    const cacheRootDir = options.cacheRootDirectory || this.globalConfig.getSync(CFG_PACKAGE_MANAGER_CACHE);\n\n    if (!packageManager) {\n      throw new PackageManagerNotFound(this.config.packageManager);\n    }\n\n    if (cacheRootDir && !fs.pathExistsSync(cacheRootDir)) {\n      this.logger.debug(`creating package manager cache dir at ${cacheRootDir}`);\n      fs.ensureDirSync(cacheRootDir);\n    }\n    const preInstallSubscribers = this.getPreInstallSubscribers();\n    const postInstallSubscribers = this.getPostInstallSubscribers();\n    // TODO: we should somehow pass the cache root dir to the package manager constructor\n    return new DependencyInstaller(\n      packageManager,\n      this.aspectLoader,\n      this.logger,\n      options.rootDir,\n      cacheRootDir,\n      preInstallSubscribers,\n      postInstallSubscribers,\n      this.config.nodeLinker\n    );\n  }\n\n  private getPreInstallSubscribers(): PreInstallSubscriberList {\n    return this.preInstallSlot.values().flat();\n  }\n\n  private getPostInstallSubscribers(): PostInstallSubscriberList {\n    return this.postInstallSlot.values().flat();\n  }\n\n  /**\n   * get a component dependency linker.\n   */\n  getLinker(options: GetLinkerOptions = {}) {\n    const linkingOptions = Object.assign({}, defaultLinkingOptions, options?.linkingOptions || {});\n    // TODO: we should somehow pass the cache root dir to the package manager constructor\n    return new DependencyLinker(\n      this,\n      this.aspectLoader,\n      this.componentAspect,\n      this.envs,\n      this.logger,\n      options.rootDir,\n      linkingOptions\n    );\n  }\n\n  getPackageManagerName() {\n    return this.config.packageManager;\n  }\n\n  async getVersionResolver(options: GetVersionResolverOptions = {}) {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    const cacheRootDir = options.cacheRootDirectory || this.globalConfig.getSync(CFG_PACKAGE_MANAGER_CACHE);\n\n    if (!packageManager) {\n      throw new PackageManagerNotFound(this.config.packageManager);\n    }\n\n    if (cacheRootDir && !fs.pathExistsSync(cacheRootDir)) {\n      this.logger.debug(`creating package manager cache dir at ${cacheRootDir}`);\n      fs.ensureDirSync(cacheRootDir);\n    }\n    const { networkConcurrency } = await this.getNetworkConfig();\n    // TODO: we should somehow pass the cache root dir to the package manager constructor\n    return new DependencyVersionResolver(packageManager, cacheRootDir, networkConcurrency);\n  }\n\n  /**\n   * return the system configured package manager. by default pnpm.\n   */\n  getSystemPackageManager(): PackageManager {\n    const defaultPm = 'teambit.dependencies/pnpm';\n    const packageManager = this.packageManagerSlot.get(defaultPm);\n    if (!packageManager) throw new Error(`default package manager: ${defaultPm} was not found`);\n    return packageManager;\n  }\n\n  async getProxyConfig(): Promise<ProxyConfig> {\n    const proxyConfigFromDepResolverConfig = this.getProxyConfigFromDepResolverConfig();\n    let httpProxy = proxyConfigFromDepResolverConfig.httpProxy;\n    let httpsProxy = proxyConfigFromDepResolverConfig.httpsProxy;\n\n    // Take config from the aspect config if defined\n    if (httpProxy || httpsProxy) {\n      this.logger.debug(\n        `proxy config taken from the dep resolver config. proxy: ${httpProxy} httpsProxy: ${httpsProxy}`\n      );\n      return proxyConfigFromDepResolverConfig;\n    }\n\n    // Take config from the package manager (npmrc) config if defined\n    const proxyConfigFromPackageManager = await this.getProxyConfigFromPackageManager();\n    if (proxyConfigFromPackageManager?.httpProxy || proxyConfigFromPackageManager?.httpsProxy) {\n      this.logger.debug(\n        `proxy config taken from the package manager config (npmrc). proxy: ${proxyConfigFromPackageManager.httpProxy} httpsProxy: ${proxyConfigFromPackageManager.httpsProxy}`\n      );\n      return proxyConfigFromPackageManager;\n    }\n\n    // Take config from global bit config\n    const proxyConfigFromGlobalConfig = await this.getProxyConfigFromGlobalConfig();\n    httpProxy = proxyConfigFromGlobalConfig.httpProxy;\n    httpsProxy = proxyConfigFromGlobalConfig.httpsProxy;\n    if (httpProxy || httpsProxy) {\n      this.logger.debug(`proxy config taken from the global bit config. proxy: ${httpProxy} httpsProxy: ${httpsProxy}`);\n      return proxyConfigFromGlobalConfig;\n    }\n    return {};\n  }\n\n  private getProxyConfigFromDepResolverConfig(): ProxyConfig {\n    return {\n      ca: this.config.ca,\n      cert: this.config.cert,\n      httpProxy: this.config.proxy,\n      httpsProxy: this.config.httpsProxy || this.config.proxy,\n      key: this.config.key,\n      noProxy: this.config.noProxy,\n      strictSSL: this.config.strictSsl?.toLowerCase() === 'true',\n    };\n  }\n\n  async getNetworkConfig(): Promise<NetworkConfig> {\n    return {\n      ...(await this.getNetworkConfigFromGlobalConfig()),\n      ...(await this.getNetworkConfigFromPackageManager()),\n      ...this.getNetworkConfigFromDepResolverConfig(),\n    };\n  }\n\n  private async getNetworkConfigFromGlobalConfig(): Promise<NetworkConfig> {\n    return Http.getNetworkConfig();\n  }\n\n  private getNetworkConfigFromDepResolverConfig(): NetworkConfig {\n    return pick(this.config, [\n      'fetchTimeout',\n      'fetchRetries',\n      'fetchRetryFactor',\n      'fetchRetryMintimeout',\n      'fetchRetryMaxtimeout',\n      'maxSockets',\n      'networkConcurrency',\n    ]);\n  }\n\n  private async getNetworkConfigFromPackageManager(): Promise<NetworkConfig> {\n    const packageManager = this.getPackageManager();\n    if (typeof packageManager?.getNetworkConfig !== 'function') return {};\n    return packageManager.getNetworkConfig();\n  }\n\n  private getPackageManager() {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    return packageManager ?? this.getSystemPackageManager();\n  }\n\n  private async getProxyConfigFromPackageManager(): Promise<ProxyConfig> {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    let proxyConfigFromPackageManager: ProxyConfig = {};\n    if (packageManager?.getProxyConfig && typeof packageManager?.getProxyConfig === 'function') {\n      proxyConfigFromPackageManager = await packageManager?.getProxyConfig();\n    } else {\n      const systemPm = this.getSystemPackageManager();\n      if (!systemPm.getProxyConfig) throw new Error('system package manager must implement `getProxyConfig()`');\n      proxyConfigFromPackageManager = await systemPm.getProxyConfig();\n    }\n    return proxyConfigFromPackageManager;\n  }\n\n  private async getProxyConfigFromGlobalConfig(): Promise<ProxyConfig> {\n    return Http.getProxyConfig();\n  }\n\n  /**\n   * Return the peer dependencies and their ranges that may be installed\n   * without causing unmet peer dependency issues in some of the dependencies.\n   */\n  async getMissingPeerDependencies(\n    rootDir: string,\n    rootPolicy: WorkspacePolicy,\n    componentDirectoryMap: ComponentMap<string>,\n    options: PackageManagerGetPeerDependencyIssuesOptions\n  ): Promise<Record<string, string>> {\n    this.logger.setStatusLine('finding missing peer dependencies');\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    let peerDependencyIssues!: PeerDependencyIssuesByProjects;\n    if (packageManager?.getPeerDependencyIssues && typeof packageManager?.getPeerDependencyIssues === 'function') {\n      peerDependencyIssues = await packageManager?.getPeerDependencyIssues(\n        rootDir,\n        rootPolicy,\n        componentDirectoryMap,\n        options\n      );\n    } else {\n      const systemPm = this.getSystemPackageManager();\n      if (!systemPm.getPeerDependencyIssues)\n        throw new Error('system package manager must implement `getPeerDependencyIssues()`');\n      peerDependencyIssues = await systemPm?.getPeerDependencyIssues(\n        rootDir,\n        rootPolicy,\n        componentDirectoryMap,\n        options\n      );\n    }\n    this.logger.consoleSuccess();\n    return peerDependencyIssues['.']?.intersections;\n  }\n\n  async getRegistries(): Promise<Registries> {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    let registries;\n    if (packageManager?.getRegistries && typeof packageManager?.getRegistries === 'function') {\n      registries = await packageManager?.getRegistries();\n    } else {\n      const systemPm = this.getSystemPackageManager();\n      if (!systemPm.getRegistries) throw new Error('system package manager must implement `getRegistries()`');\n      registries = await systemPm.getRegistries();\n    }\n\n    const bitScope = registries.scopes.bit;\n\n    const getDefaultBitRegistry = (): Registry => {\n      const bitRegistry = bitScope?.uri || BIT_DEV_REGISTRY;\n\n      const { bitOriginalAuthType, bitAuthHeaderValue, bitOriginalAuthValue } = this.getBitAuthConfig(bitScope);\n\n      const alwaysAuth = bitAuthHeaderValue !== undefined;\n      const bitDefaultRegistry = new Registry(\n        bitRegistry,\n        alwaysAuth,\n        bitAuthHeaderValue,\n        bitOriginalAuthType,\n        bitOriginalAuthValue\n      );\n      return bitDefaultRegistry;\n    };\n\n    const bitDefaultRegistry = getDefaultBitRegistry();\n\n    const installFromBitDevRegistry = this.config.installFromBitDevRegistry ?? true;\n\n    // Override default registry to use bit registry in case npmjs is the default - bit registry will proxy it\n    // We check also NPM_REGISTRY.startsWith because the uri might not have the trailing / we have in NPM_REGISTRY\n    if (\n      installFromBitDevRegistry &&\n      (!registries.defaultRegistry.uri ||\n        registries.defaultRegistry.uri === NPM_REGISTRY ||\n        NPM_REGISTRY.startsWith(registries.defaultRegistry.uri))\n    ) {\n      // TODO: this will not handle cases where you have token for private npm registries stored on npmjs\n      // it should be handled by somehow in such case (default is npmjs and there is token for default) by sending the token of npmjs to the registry\n      // (for example by setting some special header in the request)\n      // then in the registry server it should be use it when proxies\n      registries = registries.setDefaultRegistry(bitDefaultRegistry);\n    }\n    // Make sure @bit scope is register with alwaysAuth\n    if (!bitScope || (bitScope && !bitScope.alwaysAuth)) {\n      registries = registries.updateScopedRegistry('bit', bitDefaultRegistry);\n    }\n\n    registries = this.addAuthToScopedBitRegistries(registries, bitScope);\n    return registries;\n  }\n\n  /**\n   * This will mutate any registry which point to BIT_DEV_REGISTRY to have the auth config from the @bit scoped registry or from the user.token in bit's config\n   */\n  private addAuthToScopedBitRegistries(registries: Registries, bitScopeRegistry: Registry): Registries {\n    const { bitOriginalAuthType, bitAuthHeaderValue, bitOriginalAuthValue } = this.getBitAuthConfig(bitScopeRegistry);\n    const alwaysAuth = bitAuthHeaderValue !== undefined;\n    let updatedRegistries = registries;\n    Object.entries(registries.scopes).map(([name, registry]) => {\n      if (!registry.authHeaderValue && BIT_DEV_REGISTRY.includes(registry.uri)) {\n        const registryWithAuth = new Registry(\n          registry.uri,\n          alwaysAuth,\n          bitAuthHeaderValue,\n          bitOriginalAuthType,\n          bitOriginalAuthValue\n        );\n        updatedRegistries = updatedRegistries.updateScopedRegistry(name, registryWithAuth);\n      }\n      return updatedRegistries;\n    });\n    return updatedRegistries;\n  }\n\n  private getBitAuthConfig(\n    bitScopeRegistry: Registry\n  ): Partial<{ bitOriginalAuthType: string; bitAuthHeaderValue: string; bitOriginalAuthValue: string }> {\n    const bitGlobalConfigToken = this.globalConfig.getSync(CFG_USER_TOKEN_KEY);\n    let bitAuthHeaderValue = bitScopeRegistry?.authHeaderValue;\n    let bitOriginalAuthType = bitScopeRegistry?.originalAuthType;\n    let bitOriginalAuthValue = bitScopeRegistry?.originalAuthValue;\n\n    // In case there is no auth configuration in the npmrc, but there is token in bit config, take it from the config\n    if ((!bitScopeRegistry || !bitScopeRegistry.authHeaderValue) && bitGlobalConfigToken) {\n      bitOriginalAuthType = 'authToken';\n      bitAuthHeaderValue = `Bearer ${bitGlobalConfigToken}`;\n      bitOriginalAuthValue = bitGlobalConfigToken;\n    }\n\n    return {\n      bitOriginalAuthType,\n      bitAuthHeaderValue,\n      bitOriginalAuthValue,\n    };\n  }\n\n  get packageManagerName(): string {\n    return this.config.packageManager;\n  }\n\n  addToRootPolicy(entries: WorkspacePolicyEntry[], options?: WorkspacePolicyAddEntryOptions): WorkspacePolicy {\n    const workspacePolicy = this.getWorkspacePolicyFromConfig();\n    entries.forEach((entry) => workspacePolicy.add(entry, options));\n    this.updateConfigPolicy(workspacePolicy);\n    return workspacePolicy;\n  }\n\n  removeFromRootPolicy(dependencyIds: string[]) {\n    const workspacePolicy = this.getWorkspacePolicyFromConfig();\n    const workspacePolicyUpdated = workspacePolicy.remove(dependencyIds);\n    this.updateConfigPolicy(workspacePolicyUpdated);\n  }\n\n  private updateConfigPolicy(workspacePolicy: WorkspacePolicy) {\n    const workspacePolicyObject = workspacePolicy.toConfigObject();\n    this.config.policy = workspacePolicyObject;\n    this.configAspect.setExtension(DependencyResolverAspect.id, this.config, {\n      overrideExisting: true,\n      ignoreVersion: true,\n    });\n  }\n\n  async persistConfig(workspaceDir?: string) {\n    return this.configAspect.workspaceConfig?.write({ dir: workspaceDir });\n  }\n\n  /**\n   * register new dependencies policies\n   */\n  registerDependenciesPolicies(policy: VariantPolicyConfigObject): void {\n    return this.policiesRegistry.register(policy);\n  }\n\n  /**\n   * register new dependencies policies\n   */\n  registerRootPolicy(policy: WorkspacePolicy): void {\n    return this.rootPolicyRegistry.register(policy);\n  }\n\n  async getComponentEnvPolicyFromExtension(configuredExtensions: ExtensionDataList): Promise<EnvPolicy> {\n    const env = this.envs.calculateEnvFromExtensions(configuredExtensions).env;\n    return this.getComponentEnvPolicyFromEnv(env);\n  }\n\n  async getComponentEnvPolicy(component: Component): Promise<EnvPolicy> {\n    const env = this.envs.getEnv(component).env;\n    return this.getComponentEnvPolicyFromEnv(env);\n  }\n\n  private async getComponentEnvPolicyFromEnv(env: DependenciesEnv): Promise<EnvPolicy> {\n    if (env.getDependencies && typeof env.getDependencies === 'function') {\n      const policiesFromEnvConfig = await env.getDependencies();\n      if (policiesFromEnvConfig) {\n        const allPoliciesFromEnv = new EnvPolicyFactory().fromConfigObject(policiesFromEnvConfig);\n        return allPoliciesFromEnv;\n      }\n    }\n    return new EnvPolicyFactory().getEmpty();\n  }\n\n  /**\n   * Merge the dependencies provided by:\n   * 1. envs configured in the component - via dependencies method\n   * 2. extensions that registered to the registerDependencyPolicy slot (and configured for the component)\n   * 3. props defined by the user (they are the strongest one)\n   * @param configuredExtensions\n   */\n  async mergeVariantPolicies(configuredExtensions: ExtensionDataList): Promise<VariantPolicy> {\n    const variantPolicyFactory = new VariantPolicyFactory();\n    let policiesFromSlots: VariantPolicy = variantPolicyFactory.getEmpty();\n    let policiesFromConfig: VariantPolicy = variantPolicyFactory.getEmpty();\n    const policiesFromEnv: VariantPolicy = (await this.getComponentEnvPolicyFromExtension(configuredExtensions))\n      ?.variantPolicy;\n    const configuredIds = configuredExtensions.ids;\n    const policiesTuples = this.policiesRegistry.toArray();\n    configuredIds.forEach((extId) => {\n      // TODO: change this way of search, once we have workspace as dep-resolver dependency\n      // we can use something like:\n      // const resolvedId = this.workspace.resolveComponentId(extId)\n      // const currentPolicy = this.policiesRegistry.get(resolvedId.toString());\n      // Only get props from configured extensions on this specific component\n      const policyTupleToApply = policiesTuples.find(([policyRegistrar]) => {\n        return policyRegistrar === extId || policyRegistrar.includes(extId);\n      });\n\n      if (policyTupleToApply && policyTupleToApply[1]) {\n        const currentPolicy = variantPolicyFactory.fromConfigObject(policyTupleToApply[1], 'slots');\n        policiesFromSlots = VariantPolicy.mergePolices([policiesFromSlots, currentPolicy]);\n      }\n    });\n    const currentExtension = configuredExtensions.findExtension(DependencyResolverAspect.id);\n    const currentConfig = currentExtension?.config as unknown as DependencyResolverVariantConfig;\n    if (currentConfig && currentConfig.policy) {\n      policiesFromConfig = variantPolicyFactory.fromConfigObject(currentConfig.policy, 'config');\n    }\n\n    const result = VariantPolicy.mergePolices([policiesFromEnv, policiesFromSlots, policiesFromConfig]);\n    return result;\n  }\n\n  updateDepsOnLegacyTag(component: LegacyComponent, idTransformer: onTagIdTransformer): LegacyComponent {\n    const entry = component.extensions.findCoreExtension(DependencyResolverAspect.id);\n    if (!entry) {\n      return component;\n    }\n    const dependencies = get(entry, ['data', 'dependencies'], []);\n    dependencies.forEach((dep) => {\n      if (dep.__type === COMPONENT_DEP_TYPE) {\n        const depId = new BitId(dep.componentId);\n        const newDepId = idTransformer(depId);\n        dep.componentId = (newDepId || depId).serialize();\n        dep.id = (newDepId || depId).toString();\n        dep.version = (newDepId || depId).version;\n      }\n    });\n    return component;\n  }\n\n  updateDepsOnLegacyExport(version: VersionModel, idTransformer: OnExportIdTransformer): VersionModel {\n    const entry = version.extensions.findCoreExtension(DependencyResolverAspect.id);\n    if (!entry) {\n      return version;\n    }\n    const dependencies = get(entry, ['data', 'dependencies'], []);\n    dependencies.forEach((dep) => {\n      if (dep.__type === COMPONENT_DEP_TYPE) {\n        const depId = new BitId(dep.componentId);\n        const newDepId = idTransformer(depId);\n        dep.componentId = (newDepId || depId).serialize();\n        dep.id = (newDepId || depId).toString();\n      }\n    });\n    return version;\n  }\n\n  /**\n   * Register a new dependency detector. Detectors allow to extend Bit's dependency detection\n   * mechanism to support new file extensions and types.\n   */\n  registerDetector(detector: DependencyDetector) {\n    DetectorHook.hooks.push(detector);\n    return this;\n  }\n\n  /**\n   * This function registered to the onLoadRequireableExtensionSlot of the aspect-loader\n   * Update the aspect / manifest deps versions in the runtimes (recursively)\n   * This function mutate the manifest directly as otherwise it becomes very complicated\n   * TODO: think if this funciton should be here as it about dependencies, or on the aspect loader\n   * (as it's aware of the internal structure of aspects)\n   * Maybe only register the dep resolution part to the aspect loader\n   * at the moment it here for simplify the process\n   * @param requireableExtension\n   * @param manifest\n   * @returns\n   */\n  async onLoadRequireableExtensionSubscriber(\n    requireableExtension: RequireableComponent,\n    manifest: ExtensionManifest | Aspect\n  ): Promise<ExtensionManifest | Aspect> {\n    const parentComponent = requireableExtension.component;\n    return this.resolveRequireableExtensionManifestDepsVersionsRecursively(parentComponent, manifest);\n  }\n\n  /**\n   * Update the aspect / manifest deps versions in the runtimes (recursively)\n   * @param parentComponent\n   * @param manifest\n   */\n  private async resolveRequireableExtensionManifestDepsVersionsRecursively(\n    // Allow getting here string for lazy load the component\n    // we only want to load the component in case there are deps to resolve\n    parentComponent: Component | string,\n    manifest: ExtensionManifest | Aspect\n    // TODO: add visited = new Map() for performence improve\n  ): Promise<ExtensionManifest | Aspect> {\n    // Not resolve it immediately for performance sake\n    let resolvedParentComponent: Component | undefined;\n    let resolvedParentDeps: DependencyList;\n    const updateDirectDepsVersions = (deps: Array<ExtensionManifest | Aspect>): Promise<void[]> => {\n      return mapSeries(deps, async (dep) => {\n        // Nothing to update (this shouldn't happen ever)\n        if (!dep.id) return;\n        // In case of core aspect, do not update the version, as it's loaded to harmony without version\n        if (this.aspectLoader.isCoreAspect(dep.id)) return;\n        // Lazily get the parent component\n        if (typeof parentComponent === 'string') {\n          const parentComponentId = await this.componentAspect.getHost().resolveComponentId(parentComponent);\n          resolvedParentComponent = await this.componentAspect.getHost().get(parentComponentId);\n        } else {\n          // it's of type component;\n          resolvedParentComponent = parentComponent;\n        }\n        if (!resolvedParentComponent) {\n          this.logger.error(\n            `could not resolve the component ${parentComponent} during manifest deps resolution. it shouldn't happen`\n          );\n          return;\n        }\n        // Lazily get the dependencies\n        resolvedParentDeps = resolvedParentDeps || (await this.getDependencies(resolvedParentComponent));\n        const resolvedDep = resolvedParentDeps.findDependency(dep.id, { ignoreVersion: true });\n        // TODO: add a way to update id in harmony\n        // @ts-ignore\n        dep.id = resolvedDep?.id ?? dep.id;\n        await this.resolveRequireableExtensionManifestDepsVersionsRecursively(dep.id, dep);\n      });\n    };\n    if (manifest.dependencies) {\n      // TODO: add a way to access it properly with harmony (currently it's readonly)\n      // @ts-ignore\n      manifest.dependencies = manifest.dependencies.map((dep) => this.aspectLoader.cloneManifest(dep));\n      await updateDirectDepsVersions(manifest.dependencies);\n    }\n    // TODO: add a function to get all runtimes and not access private member\n    // @ts-ignore\n    if (manifest._runtimes) {\n      // @ts-ignore\n      await mapSeries(manifest._runtimes, async (runtime: RuntimeManifest) => {\n        if (runtime.dependencies) {\n          // TODO: add a way to access it properly with harmony (currently it's readonly)\n          // @ts-ignore\n          runtime.dependencies = runtime.dependencies.map((dep) => this.aspectLoader.cloneManifest(dep));\n          await updateDirectDepsVersions(runtime.dependencies);\n        }\n      });\n    }\n\n    return manifest;\n  }\n\n  /**\n   * Return a list of outdated policy dependencies.\n   */\n  getOutdatedPkgsFromPolicies({\n    rootDir,\n    variantPoliciesByPatterns,\n    componentPoliciesById,\n  }: {\n    rootDir: string;\n    variantPoliciesByPatterns: Record<string, VariantPolicyConfigObject>;\n    componentPoliciesById: Record<string, any>;\n  }): Promise<OutdatedPkg[]> {\n    const allPkgs = getAllPolicyPkgs({\n      rootPolicy: this.getWorkspacePolicyFromConfig(),\n      variantPoliciesByPatterns,\n      componentPoliciesById,\n    });\n    return this.getOutdatedPkgs(rootDir, allPkgs);\n  }\n\n  /**\n   * Accepts a list of package dependency policies and returns a list of outdated policies extended with their \"latestRange\"\n   */\n  async getOutdatedPkgs<T>(\n    rootDir: string,\n    pkgs: Array<{ name: string; currentRange: string } & T>\n  ): Promise<Array<{ name: string; currentRange: string; latestRange: string } & T>> {\n    this.logger.setStatusLine('checking the latest versions of dependencies');\n    const resolver = await this.getVersionResolver();\n    const resolve = async (spec: string) =>\n      (\n        await resolver.resolveRemoteVersion(spec, {\n          rootDir,\n        })\n      ).version;\n    const outdatedPkgs = (\n      await Promise.all(\n        pkgs.map(async (pkg) => {\n          const latestVersion = await resolve(`${pkg.name}@latest`);\n          return {\n            ...pkg,\n            latestRange: latestVersion ? repeatPrefix(pkg.currentRange, latestVersion) : null,\n          } as any;\n        })\n      )\n    ).filter(({ latestRange, currentRange }) => latestRange != null && latestRange !== currentRange);\n    this.logger.consoleSuccess();\n    return outdatedPkgs;\n  }\n\n  /**\n   * Update the specified packages to their latest versions in all policies;\n   * root polcies, variant pocilicies, and component configuration policies (component.json).\n   */\n  applyUpdates(\n    outdatedPkgs: Array<Omit<OutdatedPkg, 'currentRange'>>,\n    options: {\n      variantPoliciesByPatterns: Record<string, any>;\n      componentPoliciesById: Record<string, any>;\n    }\n  ): {\n    updatedVariants: string[];\n    updatedComponents: string[];\n  } {\n    const { updatedVariants, updatedComponents, updatedWorkspacePolicyEntries } = applyUpdates(outdatedPkgs, {\n      variantPoliciesByPatterns: options.variantPoliciesByPatterns,\n      componentPoliciesById: options.componentPoliciesById,\n    });\n    this.addToRootPolicy(updatedWorkspacePolicyEntries, {\n      updateExisting: true,\n    });\n    return {\n      updatedVariants,\n      updatedComponents,\n    };\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    EnvsAspect,\n    LoggerAspect,\n    ConfigAspect,\n    AspectLoaderAspect,\n    ComponentAspect,\n    GraphqlAspect,\n    GlobalConfigAspect,\n  ];\n\n  static slots = [\n    Slot.withType<WorkspacePolicy>(),\n    Slot.withType<VariantPolicyConfigObject>(),\n    Slot.withType<PackageManager>(),\n    Slot.withType<RegExp>(),\n    Slot.withType<DependencyFactory>(),\n    Slot.withType<PreInstallSubscriberList>(),\n    Slot.withType<PostInstallSubscriberList>(),\n    Slot.withType<DependencyDetector>(),\n  ];\n\n  static defaultConfig: DependencyResolverWorkspaceConfig = {\n    /**\n     * default package manager.\n     */\n    packageManager: 'teambit.dependencies/pnpm',\n    policy: {},\n  };\n\n  static async provider(\n    [envs, loggerExt, configMain, aspectLoader, componentAspect, graphql, globalConfig]: [\n      EnvsMain,\n      LoggerMain,\n      ConfigMain,\n      AspectLoaderMain,\n      ComponentMain,\n      GraphqlMain,\n      GlobalConfigMain\n    ],\n    config: DependencyResolverWorkspaceConfig,\n    [\n      rootPolicyRegistry,\n      policiesRegistry,\n      packageManagerSlot,\n      dependencyFactorySlot,\n      preInstallSlot,\n      postInstallSlot,\n    ]: [\n      RootPolicyRegistry,\n      PoliciesRegistry,\n      PackageManagerSlot,\n      DependencyFactorySlot,\n      PreInstallSlot,\n      PostInstallSlot\n    ]\n  ) {\n    // const packageManager = new PackageManagerLegacy(config.packageManager, logger);\n    const logger = loggerExt.createLogger(DependencyResolverAspect.id);\n    const dependencyResolver = new DependencyResolverMain(\n      config,\n      rootPolicyRegistry,\n      policiesRegistry,\n      envs,\n      logger,\n      configMain,\n      aspectLoader,\n      globalConfig,\n      componentAspect,\n      packageManagerSlot,\n      dependencyFactorySlot,\n      preInstallSlot,\n      postInstallSlot\n    );\n\n    componentAspect.registerShowFragments([\n      new DependenciesFragment(dependencyResolver),\n      new DevDependenciesFragment(dependencyResolver),\n      new PeerDependenciesFragment(dependencyResolver),\n    ]);\n    // TODO: solve this generics issue and remove the ts-ignore\n    // @ts-ignore\n    dependencyResolver.registerDependencyFactories([new ComponentDependencyFactory(componentAspect)]);\n\n    DependencyResolver.getDepResolverAspectName = () => DependencyResolverAspect.id;\n\n    LegacyComponent.registerOnComponentOverridesLoading(\n      DependencyResolverAspect.id,\n      async (configuredExtensions: ExtensionDataList) => {\n        const policy = await dependencyResolver.mergeVariantPolicies(configuredExtensions);\n        return policy.toLegacyDepsOverrides();\n      }\n    );\n    DependencyResolver.registerWorkspacePolicyGetter(() => {\n      const workspacePolicy = dependencyResolver.getWorkspacePolicy();\n      return workspacePolicy.toManifest();\n    });\n    DependencyResolver.registerHarmonyEnvPeersPolicyGetter(async (configuredExtensions: ExtensionDataList) => {\n      const envPolicy = await dependencyResolver.getComponentEnvPolicyFromExtension(configuredExtensions);\n      return envPolicy.peersAutoDetectPolicy.toNameSupportedRangeMap();\n    });\n    registerUpdateDependenciesOnTag(dependencyResolver.updateDepsOnLegacyTag.bind(dependencyResolver));\n    registerUpdateDependenciesOnExport(dependencyResolver.updateDepsOnLegacyExport.bind(dependencyResolver));\n    aspectLoader.registerOnLoadRequireableExtensionSlot(\n      dependencyResolver.onLoadRequireableExtensionSubscriber.bind(dependencyResolver)\n    );\n\n    graphql.register(dependencyResolverSchema(dependencyResolver));\n    envs.registerService(new DependenciesService());\n\n    return dependencyResolver;\n  }\n\n  getEmptyDepsObject(): ManifestDependenciesObject {\n    return {\n      dependencies: {},\n      devDependencies: {},\n      peerDependencies: {},\n    };\n  }\n}\n\nDependencyResolverAspect.addRuntime(DependencyResolverMain);\n\nfunction repeatPrefix(originalSpec: string, newVersion: string): string {\n  switch (originalSpec[0]) {\n    case '~':\n    case '^':\n      return `${originalSpec[0]}${newVersion}`;\n    default:\n      return newVersion;\n  }\n}\n"]}