{"version":3,"sources":["registries.ts"],"names":["Registries","constructor","defaultRegistry","scopes","setDefaultRegistry","registry","updateScopedRegistry","name"],"mappings":";;;;;;;AAEO,MAAMA,UAAN,CAAiB;AACtBC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,eAJA;AAMT;AACJ;AACA;AACaC,EAAAA,MATA,EAUT;AAAA,SANSD,eAMT,GANSA,eAMT;AAAA,SADSC,MACT,GADSA,MACT;AAAE;;AAEJC,EAAAA,kBAAkB,CAACC,QAAD,EAAiC;AACjD,WAAO,IAAIL,UAAJ,CAAeK,QAAf,EAAyB,KAAKF,MAA9B,CAAP;AACD;;AAEDG,EAAAA,oBAAoB,CAACC,IAAD,EAAeF,QAAf,EAAmC;AACrD,UAAMF,MAAM,GAAG,KAAKA,MAApB;AACAA,IAAAA,MAAM,CAACI,IAAD,CAAN,GAAeF,QAAf;AACA,WAAO,IAAIL,UAAJ,CAAe,KAAKE,eAApB,EAAqCC,MAArC,CAAP;AACD;;AArBqB","sourcesContent":["import { Registry } from './registry';\n\nexport class Registries {\n  constructor(\n    /**\n     * default registry.\n     */\n    readonly defaultRegistry: Registry,\n\n    /**\n     * map of all scoped registries.\n     */\n    readonly scopes: Record<string, Registry>\n  ) {}\n\n  setDefaultRegistry(registry: Registry): Registries {\n    return new Registries(registry, this.scopes);\n  }\n\n  updateScopedRegistry(name: string, registry: Registry) {\n    const scopes = this.scopes;\n    scopes[name] = registry;\n    return new Registries(this.defaultRegistry, scopes);\n  }\n}\n"]}