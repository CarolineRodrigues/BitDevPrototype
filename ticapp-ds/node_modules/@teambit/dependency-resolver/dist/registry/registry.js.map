{"version":3,"sources":["registry.ts"],"names":["Registry","constructor","uri","alwaysAuth","authHeaderValue","originalAuthType","originalAuthValue","token","authData","type","credentials","undefined","baseToken"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,QAAN,CAAe;AACpBC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,GAJA;AAMT;AACJ;AACA;AACaC,EAAAA,UATA;AAWT;AACJ;AACA;AACaC,EAAAA,eAdA;AAgBT;AACJ;AACA;AACA;AACA;AACA;AACaC,EAAAA,gBAtBA;AAwBT;AACJ;AACA;AACA;AACaC,EAAAA,iBA5BA,EA6BT;AAAA,SAzBSJ,GAyBT,GAzBSA,GAyBT;AAAA,SApBSC,UAoBT,GApBSA,UAoBT;AAAA,SAfSC,eAeT,GAfSA,eAeT;AAAA,SAPSC,gBAOT,GAPSA,gBAOT;AAAA,SADSC,iBACT,GADSA,iBACT;AAAE;;AAEK,MAALC,KAAK,GAAuB;AAC9B,UAAMC,QAAQ,GAAG,mCAAsB,KAAKJ,eAA3B,CAAjB;AACA,WAAOI,QAAQ,IAAIA,QAAQ,CAACC,IAAT,KAAkB,QAA9B,GAAyCD,QAAQ,CAACE,WAAlD,GAAgEC,SAAvE;AACD;AAED;AACF;AACA;;;AACe,MAATC,SAAS,GAAuB;AAClC,UAAMJ,QAAQ,GAAG,mCAAsB,KAAKJ,eAA3B,CAAjB;AACA,WAAOI,QAAQ,IAAIA,QAAQ,CAACC,IAAT,KAAkB,OAA9B,GAAwCD,QAAQ,CAACE,WAAjD,GAA+DC,SAAtE;AACD;;AA3CmB","sourcesContent":["import { getAuthDataFromHeader } from '@teambit/legacy/dist/scope/network/http/http';\n\nexport class Registry {\n  constructor(\n    /**\n     * uri of the registry.\n     */\n    readonly uri: string,\n\n    /**\n     * always authenticate.\n     */\n    readonly alwaysAuth: boolean,\n\n    /**\n     * authentication header.\n     */\n    readonly authHeaderValue?: string,\n\n    /**\n     * Type of auth as it appears in the npmrc file\n     * authToken\n     * auth\n     * user-pass\n     */\n    readonly originalAuthType?: string,\n\n    /**\n     * original auth value as it appears in npmrc file\n     * for user/pass it will appear as user:pass\n     */\n    readonly originalAuthValue?: string\n  ) {}\n\n  get token(): string | undefined {\n    const authData = getAuthDataFromHeader(this.authHeaderValue);\n    return authData && authData.type === 'Bearer' ? authData.credentials : undefined;\n  }\n\n  /**\n   * Support for basic token or user/pass\n   */\n  get baseToken(): string | undefined {\n    const authData = getAuthDataFromHeader(this.authHeaderValue);\n    return authData && authData.type === 'Basic' ? authData.credentials : undefined;\n  }\n}\n"]}