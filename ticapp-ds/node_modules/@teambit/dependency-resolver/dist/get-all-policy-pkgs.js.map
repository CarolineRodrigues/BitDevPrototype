{"version":3,"sources":["get-all-policy-pkgs.ts"],"names":["getAllPolicyPkgs","rootPolicy","variantPoliciesByPatterns","componentPoliciesById","getPkgsFromRootPolicy","getPkgsFromVariants","getPkgsFromComponents","entries","map","entry","name","dependencyId","currentRange","value","version","source","variantPattern","targetField","lifecycleType","Object","filter","variant","readAllDependenciesFromPolicyObject","flat","componentId","policy","context","pkgs","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACO,SAASA,gBAAT,CAA0B;AAC/BC,EAAAA,UAD+B;AAE/BC,EAAAA,yBAF+B;AAG/BC,EAAAA;AAH+B,CAA1B,EAQqC;AAC1C,SAAO,CACL,GAAGC,qBAAqB,CAACH,UAAD,CADnB,EAEL,GAAGI,mBAAmB,CAACH,yBAAD,CAFjB,EAGL,GAAGI,qBAAqB,CAACH,qBAAD,CAHnB,CAAP;AAKD;;AAED,SAASC,qBAAT,CAA+BH,UAA/B,EAA0E;AACxE,SAAOA,UAAU,CAACM,OAAX,CAAmBC,GAAnB,CAAwBC,KAAD,KAAY;AACxCC,IAAAA,IAAI,EAAED,KAAK,CAACE,YAD4B;AAExCC,IAAAA,YAAY,EAAEH,KAAK,CAACI,KAAN,CAAYC,OAFc;AAGxCC,IAAAA,MAAM,EAAE,YAHgC;AAIxCC,IAAAA,cAAc,EAAE,IAJwB;AAKxCC,IAAAA,WAAW,EAAER,KAAK,CAACS,aAAN,KAAwB,SAAxB,GAAoC,cAApC,GAAqD;AAL1B,GAAZ,CAAvB,CAAP;AAOD;;AAED,SAASb,mBAAT,CAA6BH,yBAA7B,EAAiH;AAC/G,SAAOiB,MAAM,CAACZ,OAAP,CAAeL,yBAAf,EACJkB,MADI,CACG,CAAC,GAAGC,OAAH,CAAD,KAAiBA,OAAO,IAAI,IAD/B,EAEJb,GAFI,CAEA,CAAC,CAACQ,cAAD,EAAiBK,OAAjB,CAAD,KAA+B;AAClC,WAAOC,mCAAmC,CAAC;AAAEP,MAAAA,MAAM,EAAE,UAAV;AAAsBC,MAAAA;AAAtB,KAAD,EAAyCK,OAAzC,CAA1C;AACD,GAJI,EAKJE,IALI,EAAP;AAMD;;AAED,SAASjB,qBAAT,CAA+BH,qBAA/B,EAA+G;AAC7G,SAAOgB,MAAM,CAACZ,OAAP,CAAeJ,qBAAf,EACJK,GADI,CACA,CAAC,CAACgB,WAAD,EAAcC,MAAd,CAAD,KAA2B;AAC9B,WAAOH,mCAAmC,CAAC;AAAEP,MAAAA,MAAM,EAAE,WAAV;AAAuBS,MAAAA;AAAvB,KAAD,EAAuCC,MAAvC,CAA1C;AACD,GAHI,EAIJF,IAJI,EAAP;AAKD;;AAED,SAASD,mCAAT,CACEI,OADF,EAEED,MAFF,EAGgB;AACd,QAAME,IAAkB,GAAG,EAA3B;;AACA,OAAK,MAAMV,WAAX,IAA0B,CACxB,cADwB,EAExB,iBAFwB,EAGxB,kBAHwB,CAA1B,EAIsC;AACpC,SAAK,MAAM,CAACP,IAAD,EAAOE,YAAP,CAAX,IAAmCO,MAAM,CAACZ,OAAP,wBAAekB,MAAM,CAACR,WAAD,CAArB,qEAAsC,EAAtC,CAAnC,EAA8E;AAAA;;AAC5E,UAAIL,YAAY,KAAK,GAArB,EAA0B;AACxBe,QAAAA,IAAI,CAACC,IAAL,iCACKF,OADL;AAEEhB,UAAAA,IAFF;AAGEE,UAAAA,YAAY,EAAE,OAAOA,YAAP,KAAwB,QAAxB,GAAmCA,YAAnC,GAAkDA,YAAY,CAACE,OAH/E;AAIEG,UAAAA;AAJF;AAMD;AACF;AACF;;AACD,SAAOU,IAAP;AACD","sourcesContent":["import { ManifestDependenciesKeysNames } from './manifest';\nimport { VariantPolicyConfigObject, WorkspacePolicy } from './policy';\n\ntype CurrentPkg = {\n  name: string;\n  currentRange: string;\n  source: 'variants' | 'component' | 'rootPolicy';\n  variantPattern?: string | null;\n  componentId?: string;\n  targetField: ManifestDependenciesKeysNames;\n};\n\nexport type OutdatedPkg = CurrentPkg & {\n  latestRange: string;\n};\n\n/**\n * Get packages from root policy, variants, and component config files (component.json files).\n */\nexport function getAllPolicyPkgs({\n  rootPolicy,\n  variantPoliciesByPatterns,\n  componentPoliciesById,\n}: {\n  rootPolicy: WorkspacePolicy;\n  variantPoliciesByPatterns: Record<string, VariantPolicyConfigObject>;\n  componentPoliciesById: Record<string, VariantPolicyConfigObject>;\n}): Array<Omit<OutdatedPkg, 'latestRange'>> {\n  return [\n    ...getPkgsFromRootPolicy(rootPolicy),\n    ...getPkgsFromVariants(variantPoliciesByPatterns),\n    ...getPkgsFromComponents(componentPoliciesById),\n  ];\n}\n\nfunction getPkgsFromRootPolicy(rootPolicy: WorkspacePolicy): CurrentPkg[] {\n  return rootPolicy.entries.map((entry) => ({\n    name: entry.dependencyId,\n    currentRange: entry.value.version,\n    source: 'rootPolicy',\n    variantPattern: null as string | null,\n    targetField: entry.lifecycleType === 'runtime' ? 'dependencies' : 'peerDependencies',\n  }));\n}\n\nfunction getPkgsFromVariants(variantPoliciesByPatterns: Record<string, VariantPolicyConfigObject>): CurrentPkg[] {\n  return Object.entries(variantPoliciesByPatterns)\n    .filter(([, variant]) => variant != null)\n    .map(([variantPattern, variant]) => {\n      return readAllDependenciesFromPolicyObject({ source: 'variants', variantPattern }, variant);\n    })\n    .flat();\n}\n\nfunction getPkgsFromComponents(componentPoliciesById: Record<string, VariantPolicyConfigObject>): CurrentPkg[] {\n  return Object.entries(componentPoliciesById)\n    .map(([componentId, policy]) => {\n      return readAllDependenciesFromPolicyObject({ source: 'component', componentId }, policy);\n    })\n    .flat();\n}\n\nfunction readAllDependenciesFromPolicyObject(\n  context: Pick<CurrentPkg, 'source' | 'componentId' | 'variantPattern'>,\n  policy: VariantPolicyConfigObject\n): CurrentPkg[] {\n  const pkgs: CurrentPkg[] = [];\n  for (const targetField of [\n    'dependencies',\n    'devDependencies',\n    'peerDependencies',\n  ] as ManifestDependenciesKeysNames[]) {\n    for (const [name, currentRange] of Object.entries(policy[targetField] ?? {})) {\n      if (currentRange !== '-') {\n        pkgs.push({\n          ...context,\n          name,\n          currentRange: typeof currentRange === 'string' ? currentRange : currentRange.version,\n          targetField,\n        });\n      }\n    }\n  }\n  return pkgs;\n}\n"]}