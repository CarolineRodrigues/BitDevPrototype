{"version":3,"sources":["config.main.runtime.ts"],"names":["ConfigMain","constructor","workspaceConfig","scopeConfig","preAddingAspectsSlot","type","path","config","ensureWorkspace","dirPath","workspaceConfigProps","legacyInitProps","WorkspaceConfig","ensure","extensions","extension","extensionId","ignoreVersion","setExtension","options","getHarmonyConfigObject","forEach","stringId","registerPreAddingAspectsSlot","func","register","provider","cli","LegacyWorkspaceConfig","registerOnWorkspaceConfigIsExist","onLegacyWorkspaceConfigIsExist","registerOnWorkspaceConfigEnsuring","onLegacyWorkspaceEnsure","consumerInfo","process","cwd","configMain","configDirPath","loadIfExist","undefined","registerOnWorkspaceConfigLoading","onLegacyWorkspaceLoad","registerOnWorkspaceConfigReset","resetHard","reset","UseCmd","MainRuntime","Slot","withType","CLIAspect","ConfigAspect","addRuntime","isExist","normalize","dirname","toLegacy","newConfig","standAlone","legacyWorkspaceConfigProps"],"mappings":"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","sourcesContent":["import { getConsumerInfo } from '@teambit/legacy/dist/consumer';\nimport {\n  ExtensionDataEntry,\n  ExtensionDataList,\n  ILegacyWorkspaceConfig,\n  LegacyWorkspaceConfigProps,\n} from '@teambit/legacy/dist/consumer/config';\nimport LegacyWorkspaceConfig, {\n  WorkspaceConfigEnsureFunction,\n  WorkspaceConfigIsExistFunction,\n  WorkspaceConfigLoadFunction,\n} from '@teambit/legacy/dist/consumer/config/workspace-config';\nimport { PathOsBased, PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';\nimport { CLIAspect, MainRuntime, CLIMain } from '@teambit/cli';\nimport { Slot, SlotRegistry, GlobalConfig } from '@teambit/harmony';\nimport path from 'path';\nimport { UseCmd } from './use.cmd';\nimport {\n  LegacyInitProps,\n  transformLegacyPropsToExtensions,\n  WorkspaceConfig,\n  WorkspaceConfigFileProps,\n} from './workspace-config';\nimport { ConfigType, HostConfig } from './types';\nimport { ConfigAspect } from './config.aspect';\n\nexport type SetExtensionOptions = {\n  overrideExisting: boolean;\n  ignoreVersion: boolean;\n};\n\nexport type ConfigDeps = [];\n\nexport type ConfigConfig = {};\n\n/**\n * pass the aspectIds entered by the user. returns the complete ids including versions.\n */\nexport type PreAddingAspects = (aspectIds: string[]) => Promise<string[]>;\nexport type PreAddingAspectsSlot = SlotRegistry<PreAddingAspects>;\n\nexport class ConfigMain {\n  constructor(\n    public workspaceConfig?: WorkspaceConfig,\n    public scopeConfig?: WorkspaceConfig,\n    public preAddingAspectsSlot?: PreAddingAspectsSlot\n  ) {}\n\n  get type(): ConfigType {\n    if (this.workspaceConfig) {\n      return 'workspace';\n    }\n    return 'scope';\n  }\n\n  get path(): PathOsBased | undefined {\n    return this.config?.path;\n  }\n\n  get config(): HostConfig | undefined {\n    if (this.workspaceConfig) {\n      return this.workspaceConfig;\n    }\n    return this.scopeConfig;\n  }\n\n  /**\n   * Ensure the given directory has a workspace config\n   * Load if existing and create new if not\n   *\n   * @static\n   * @param {PathOsBasedAbsolute} dirPath\n   * @param {WorkspaceConfigFileProps} [workspaceConfigProps={} as any]\n   * @returns {Promise<WorkspaceConfig>}\n   * @memberof WorkspaceConfig\n   */\n  static async ensureWorkspace(\n    dirPath: PathOsBasedAbsolute,\n    workspaceConfigProps: WorkspaceConfigFileProps = {} as any,\n    legacyInitProps?: LegacyInitProps\n  ): Promise<ConfigMain> {\n    const workspaceConfig = await WorkspaceConfig.ensure(dirPath, workspaceConfigProps, legacyInitProps);\n    return new ConfigMain(workspaceConfig);\n  }\n\n  get extensions(): ExtensionDataList | undefined {\n    return this.config?.extensions;\n  }\n\n  extension(extensionId: string, ignoreVersion: boolean): ExtensionDataEntry | undefined {\n    return this.config?.extension(extensionId, ignoreVersion);\n  }\n\n  setExtension(extensionId: string, config: Record<string, any>, options: SetExtensionOptions) {\n    this.config?.setExtension(extensionId, config, options);\n  }\n\n  getHarmonyConfigObject(): GlobalConfig {\n    const config = {};\n    if (!this.extensions) return config;\n    this.extensions.forEach((extension) => {\n      config[extension.stringId] = extension.config;\n    });\n    return config;\n  }\n\n  registerPreAddingAspectsSlot(func: PreAddingAspects) {\n    this.preAddingAspectsSlot?.register(func);\n  }\n\n  static runtime = MainRuntime;\n  static slots = [Slot.withType<PreAddingAspects>()];\n  static dependencies = [CLIAspect];\n  static config = {};\n  static async provider([cli]: [CLIMain], config: any, [preAddingAspectsSlot]: [PreAddingAspectsSlot]) {\n    LegacyWorkspaceConfig.registerOnWorkspaceConfigIsExist(onLegacyWorkspaceConfigIsExist());\n    LegacyWorkspaceConfig.registerOnWorkspaceConfigEnsuring(onLegacyWorkspaceEnsure());\n    const consumerInfo = await getConsumerInfo(process.cwd());\n\n    let configMain: ConfigMain | any;\n    const configDirPath = consumerInfo?.path || process.cwd();\n    const workspaceConfig = await WorkspaceConfig.loadIfExist(configDirPath);\n    if (workspaceConfig) {\n      configMain = new ConfigMain(workspaceConfig, undefined, preAddingAspectsSlot);\n    } else {\n      // TODO: try load scope config here\n      configMain = {};\n    }\n    LegacyWorkspaceConfig.registerOnWorkspaceConfigLoading(onLegacyWorkspaceLoad(configMain));\n    LegacyWorkspaceConfig.registerOnWorkspaceConfigReset((dirPath, resetHard) =>\n      WorkspaceConfig.reset(dirPath, resetHard)\n    );\n    cli.register(new UseCmd(configMain));\n    return configMain;\n  }\n}\n\nConfigAspect.addRuntime(ConfigMain);\n\nfunction onLegacyWorkspaceConfigIsExist(): WorkspaceConfigIsExistFunction {\n  return async (dirPath: PathOsBased): Promise<boolean | undefined> => {\n    return WorkspaceConfig.isExist(dirPath);\n  };\n}\n\nfunction onLegacyWorkspaceLoad(config?: ConfigMain): WorkspaceConfigLoadFunction {\n  return async (dirPath: PathOsBased): Promise<ILegacyWorkspaceConfig | undefined> => {\n    if (config?.workspaceConfig && config.path && path.normalize(dirPath) === path.dirname(config.path)) {\n      return (config.config as WorkspaceConfig).toLegacy();\n    }\n    const newConfig = await WorkspaceConfig.loadIfExist(dirPath);\n    if (newConfig) {\n      return newConfig.toLegacy();\n    }\n    return undefined;\n  };\n}\n\nfunction onLegacyWorkspaceEnsure(): WorkspaceConfigEnsureFunction {\n  const func: WorkspaceConfigEnsureFunction = async (\n    dirPath: string,\n    standAlone = false,\n    legacyWorkspaceConfigProps?: LegacyWorkspaceConfigProps\n  ) => {\n    let workspaceConfigProps;\n    if (legacyWorkspaceConfigProps) {\n      workspaceConfigProps = transformLegacyPropsToExtensions(legacyWorkspaceConfigProps);\n    }\n    const legacyInitProps: LegacyInitProps = {\n      standAlone,\n    };\n    const config = await ConfigMain.ensureWorkspace(dirPath, workspaceConfigProps, legacyInitProps);\n    const workspaceConfig = config.config;\n    return (workspaceConfig as WorkspaceConfig).toLegacy();\n  };\n  return func;\n}\n"]}