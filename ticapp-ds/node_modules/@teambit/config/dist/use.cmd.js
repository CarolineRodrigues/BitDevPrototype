"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.flat.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.unscopables.flat.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UseCmd = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

class UseCmd {
  constructor(config) {
    this.config = config;
    (0, _defineProperty2().default)(this, "name", 'use [ids...]');
    (0, _defineProperty2().default)(this, "shortDescription", 'set up aspects in the workspace/scope config');
    (0, _defineProperty2().default)(this, "group", 'collaborate');
    (0, _defineProperty2().default)(this, "description", 'set up aspects in the workspace/scope config');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "remoteOp", true);
  }

  async report([ids = []]) {
    var _this$config$preAddin;

    const config = this.config.workspaceConfig || this.config.scopeConfig;

    if (!config) {
      throw new Error(`please run "bit use" from either a workspace or a scope`);
    }

    const preAddingAspectFunctions = (_this$config$preAddin = this.config.preAddingAspectsSlot) === null || _this$config$preAddin === void 0 ? void 0 : _this$config$preAddin.toArray();
    if (!preAddingAspectFunctions) throw new Error(`can't find any registration to the preAddingAspects slot`);
    const componentIds = (await Promise.all(preAddingAspectFunctions.map(([, func]) => func(ids)))).flat();
    componentIds.forEach(compId => {
      config.setExtension(compId, {}, {
        overrideExisting: false,
        ignoreVersion: false
      });
    });
    await config.write({
      dir: _path().default.dirname(config.path)
    });
    return _chalk().default.green(`the following aspect(s) were saved into ${this.config.workspaceConfig ? 'workspace.jsonc' : 'scopes.jsonc'} file:
${componentIds.join('\n')}`);
  }

}

exports.UseCmd = UseCmd;

//# sourceMappingURL=use.cmd.js.map