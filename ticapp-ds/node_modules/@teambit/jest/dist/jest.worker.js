"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JestWorker = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _flatted() {
  const data = require("flatted");

  _flatted = function () {
    return data;
  };

  return data;
}

function _worker() {
  const data = require("@teambit/worker");

  _worker = function () {
    return data;
  };

  return data;
}

class JestWorker {
  constructor() {
    (0, _defineProperty2().default)(this, "onTestCompleteCb", void 0);
  }

  onTestComplete(onTestComplete) {
    this.onTestCompleteCb = onTestComplete; // return this;
  }

  watch(jestConfigPath, testFiles, rootPath, jestModulePath) {
    return new Promise(resolve => {
      // TODO: remove this after jest publish new version to npm: https://github.com/facebook/jest/pull/10804
      // eslint-disable-next-line
      console.warn = function () {}; // eslint-disable-next-line import/no-dynamic-require,global-require


      const jestConfig = require(jestConfigPath); // eslint-disable-next-line import/no-dynamic-require,global-require


      const jestModule = require(jestModulePath);

      const jestConfigWithSpecs = Object.assign(jestConfig, {
        testMatch: testFiles
      });
      const config = {
        // useStderr: true,
        // TODO: check way to enable it
        runInBand: true,
        silent: false,
        rootDir: rootPath,
        watch: true,
        watchAll: true,
        watchPlugins: [[`${__dirname}/watch.js`, {
          specFiles: testFiles,
          onComplete: results => {
            if (!this.onTestCompleteCb) return;

            try {
              const json = (0, _flatted().parse)((0, _flatted().stringify)(results));
              this.onTestCompleteCb(json); // disable eslint because we want to catch error but not print it on worker
              // eslint-disable-next-line
            } catch (error) {}
          }
        }]]
      };
      const withEnv = Object.assign(jestConfigWithSpecs, config); // eslint-disable-next-line @typescript-eslint/no-floating-promises

      const res = jestModule.runCLI(withEnv, [jestConfigPath]); // eslint-disable-next-line no-console

      res.catch(err => console.error(err));
      resolve();
    });
  }

}

exports.JestWorker = JestWorker;
(0, _worker().expose)(new JestWorker());

//# sourceMappingURL=jest.worker.js.map