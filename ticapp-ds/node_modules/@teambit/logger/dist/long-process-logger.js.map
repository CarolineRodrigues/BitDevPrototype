{"version":3,"sources":["long-process-logger.ts"],"names":["LongProcessLogger","constructor","logPublisher","extensionName","processDescription","totalItems","currentItem","startTime","process","hrtime","start","logProgress","itemName","message","debug","setStatusLine","end","duration","logAndConsole","totalItemsStr","info"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,iBAAN,CAAwB;AAC7BC,EAAAA,WAAW,CACDC,YADC,EAEDC,aAFC,EAGDC,kBAHC,EAIDC,UAJC,EAKDC,WAAW,GAAG,CALb,EAMDC,SAAS,GAAGC,OAAO,CAACC,MAAR,EANX,EAOT;AAAA,SANQP,YAMR,GANQA,YAMR;AAAA,SALQC,aAKR,GALQA,aAKR;AAAA,SAJQC,kBAIR,GAJQA,kBAIR;AAAA,SAHQC,UAGR,GAHQA,UAGR;AAAA,SAFQC,WAER,GAFQA,WAER;AAAA,SADQC,SACR,GADQA,SACR;AACA,SAAKG,KAAL;AACD;;AAEDC,EAAAA,WAAW,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AACzB,SAAKN,WAAL,IAAoB,CAApB;AACA,UAAMO,OAAO,GAAI,GAAE,KAAKT,kBAAmB,KAAI,KAAKE,WAAY,IAAG,KAAKD,UAAW,MAAKO,QAAS,EAAjG;AACA,SAAKV,YAAL,CAAkBY,KAAlB,CAAwBD,OAAxB;AACA,SAAKX,YAAL,CAAkBa,aAAlB,CAAiC,GAAE,KAAKZ,aAAc,KAAIU,OAAQ,EAAlE;AACD;;AAEDG,EAAAA,GAAG,GAAG;AACJ,UAAMC,QAAQ,GAAGT,OAAO,CAACC,MAAR,CAAe,KAAKF,SAApB,CAAjB;AACA,UAAMM,OAAO,GAAI,GAAE,KAAKT,kBAAmB,kBAAiB,2BAAWa,QAAX,CAAqB,GAAjF;AACA,SAAKC,aAAL,CAAmBL,OAAnB;AACD;;AAEOH,EAAAA,KAAK,GAAG;AACd,UAAMS,aAAa,GAAG,KAAKd,UAAL,GAAmB,WAAU,KAAKA,UAAW,GAA7C,GAAkD,EAAxE;AACA,UAAMQ,OAAO,GAAI,GAAE,KAAKT,kBAAmB,IAAGe,aAAc,EAA5D;AACA,SAAKD,aAAL,CAAmBL,OAAnB;AACD;;AAEOK,EAAAA,aAAa,CAACL,OAAD,EAAkB;AACrC,SAAKX,YAAL,CAAkBkB,IAAlB,CAAuBP,OAAvB;AACA,SAAKX,YAAL,CAAkBa,aAAlB,CAAiC,GAAE,KAAKZ,aAAc,KAAIU,OAAQ,EAAlE;AACD;;AAlC4B","sourcesContent":["import prettyTime from 'pretty-time';\nimport type { Logger } from './logger';\n\n/**\n * use it for a long running process. upon creation it logs the `processDescription`.\n * if the process involves iteration over a list of items, such as running tag on a list of\n * components, then pass the `totalItems` as the total components in the list.\n * later, during the iteration, call `logProgress(componentName)`.\n * once done, call `end()`.\n * the status-line will show all messages in the terminal.\n * see README for more data.\n */\nexport class LongProcessLogger {\n  constructor(\n    private logPublisher: Logger,\n    private extensionName: string,\n    private processDescription: string,\n    private totalItems?: number,\n    private currentItem = 0,\n    private startTime = process.hrtime()\n  ) {\n    this.start();\n  }\n\n  logProgress(itemName = '') {\n    this.currentItem += 1;\n    const message = `${this.processDescription} (${this.currentItem}/${this.totalItems}). ${itemName}`;\n    this.logPublisher.debug(message);\n    this.logPublisher.setStatusLine(`${this.extensionName}, ${message}`);\n  }\n\n  end() {\n    const duration = process.hrtime(this.startTime);\n    const message = `${this.processDescription} (completed in ${prettyTime(duration)})`;\n    this.logAndConsole(message);\n  }\n\n  private start() {\n    const totalItemsStr = this.totalItems ? `(total: ${this.totalItems})` : '';\n    const message = `${this.processDescription} ${totalItemsStr}`;\n    this.logAndConsole(message);\n  }\n\n  private logAndConsole(message: string) {\n    this.logPublisher.info(message);\n    this.logPublisher.setStatusLine(`${this.extensionName}, ${message}`);\n  }\n}\n"]}