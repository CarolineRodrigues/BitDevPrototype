{"version":3,"sources":["webpack.config.base.ts"],"names":["styleLoaderPath","require","resolve","moduleFileExtensions","shouldUseSourceMap","process","env","GENERATE_SOURCEMAP","imageInlineSizeLimit","parseInt","IMAGE_INLINE_SIZE_LIMIT","isEnvProduction","isEnvProductionProfile","argv","includes","baseStyleLoadersOptions","injectingLoader","MiniCssExtractPlugin","loader","cssLoaderPath","postCssLoaderPath","postCssConfig","extensions","map","ext","alias","react","module","strictExportPresence","rules","test","fullySpecified","oneOf","stylesRegexps","cssNoModulesRegex","use","cssLoaderOpts","importLoaders","sourceMap","sideEffects","exclude","options","babelrc","configFile","customize","presets","cacheDirectory","cacheCompression","compact","cssModuleRegex","modules","getLocalIdent","getCSSModuleLocalIdent","sassNoModuleRegex","preProcessOptions","resolveUrlLoaderPath","preProcessorPath","sassModuleRegex","lessNoModuleRegex","lessModuleRegex","type","parser","dataUrlCondition","maxSize","dependency","not","titleProp","ref","plugins","filename","chunkFilename","IgnorePlugin","resourceRegExp","contextRegExp","filter","Boolean","performance"],"mappings":"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","sourcesContent":["import { merge } from 'lodash';\nimport 'style-loader';\nimport MiniCssExtractPlugin from 'mini-css-extract-plugin';\nimport getCSSModuleLocalIdent from 'react-dev-utils/getCSSModuleLocalIdent';\nimport { Configuration, IgnorePlugin } from 'webpack';\nimport * as stylesRegexps from '@teambit/webpack.modules.style-regexps';\nimport { generateStyleLoaders } from '@teambit/webpack.modules.generate-style-loaders';\nimport { postCssConfig } from './postcss.config';\n// Make sure the bit-react-transformer is a dependency\n// TODO: remove it once we can set policy from component to component then set it via the component.json\nimport '@teambit/react.babel.bit-react-transformer';\n// Make sure the mdx-loader is a dependency\nimport '@teambit/mdx.modules.mdx-loader';\n\nconst styleLoaderPath = require.resolve('style-loader');\n\nconst moduleFileExtensions = [\n  'web.mjs',\n  'mjs',\n  'web.js',\n  'js',\n  'web.ts',\n  'ts',\n  'web.tsx',\n  'tsx',\n  'json',\n  'web.jsx',\n  'jsx',\n  'mdx',\n  'md',\n];\n\n// Source maps are resource heavy and can cause out of memory issue for large source files.\nconst shouldUseSourceMap = process.env.GENERATE_SOURCEMAP !== 'false';\n\nconst imageInlineSizeLimit = parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT || '10000');\n\n// This is the production and development configuration.\n// It is focused on developer experience, fast rebuilds, and a minimal bundle.\n// eslint-disable-next-line complexity\nexport default function (isEnvProduction = false): Configuration {\n  // Variable used for enabling profiling in Production\n  // passed into alias object. Uses a flag if passed into the build command\n  const isEnvProductionProfile = process.argv.includes('--profile');\n\n  const baseStyleLoadersOptions = {\n    injectingLoader: isEnvProduction ? MiniCssExtractPlugin.loader : styleLoaderPath,\n    cssLoaderPath: require.resolve('css-loader'),\n    postCssLoaderPath: require.resolve('postcss-loader'),\n    postCssConfig,\n  };\n\n  // We will provide `paths.publicUrlOrPath` to our app\n  // as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\n  // Omit trailing slash as %PUBLIC_URL%/xyz looks better than %PUBLIC_URL%xyz.\n  // Get environment variables to inject into our app.\n  // const env = getClientEnvironment(publicUrlOrPath.slice(0, -1));\n\n  return {\n    resolve: {\n      // These are the reasonable defaults supported by the Node ecosystem.\n      // We also include JSX as a common component filename extension to support\n      // some tools, although we do not recommend using it, see:\n      // https://github.com/facebook/create-react-app/issues/290\n      // `web` extension prefixes have been added for better support\n      // for React Native Web.\n      extensions: moduleFileExtensions.map((ext) => `.${ext}`),\n\n      alias: {\n        'react/jsx-dev-runtime': require.resolve('react/jsx-dev-runtime.js'),\n        'react/jsx-runtime': require.resolve('react/jsx-runtime.js'),\n        // Support React Native Web\n        // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\n        // TODO: @uri please remember to remove after publishing evangelist and base-ui\n        react: require.resolve('react'),\n        '@teambit/mdx.ui.mdx-scope-context': require.resolve('@teambit/mdx.ui.mdx-scope-context'),\n        'react-dom/server': require.resolve('react-dom/server'),\n        'react-dom': require.resolve('react-dom'),\n        '@mdx-js/react': require.resolve('@mdx-js/react'),\n\n        // Allows for better profiling with ReactDevTools\n        ...(isEnvProductionProfile && {\n          'react-dom$': 'react-dom/profiling',\n          'scheduler/tracing': 'scheduler/tracing-profiling',\n        }),\n      },\n    },\n    module: {\n      strictExportPresence: true,\n      rules: [\n        {\n          test: /\\.m?js/,\n          resolve: {\n            fullySpecified: false,\n          },\n        },\n        {\n          // \"oneOf\" will traverse all following loaders until one will\n          // match the requirements. When no loader matches it will fall\n          // back to the \"file\" loader at the end of the loader list.\n          oneOf: [\n            // \"postcss\" loader applies autoprefixer to our CSS.\n            // \"css\" loader resolves paths in CSS and adds assets as dependencies.\n            // \"style\" loader turns CSS into JS modules that inject <style> tags.\n            // In production, we use MiniCSSExtractPlugin to extract that CSS\n            // to a file, but in development \"style\" loader enables hot editing\n            // of CSS.\n            // By default we support CSS Modules with the extension .module.css\n            {\n              test: stylesRegexps.cssNoModulesRegex,\n              use: generateStyleLoaders(\n                merge({}, baseStyleLoadersOptions, {\n                  cssLoaderOpts: {\n                    importLoaders: 1,\n                    sourceMap: isEnvProduction || shouldUseSourceMap,\n                  },\n                })\n              ),\n              // Don't consider CSS imports dead code even if the\n              // containing package claims to have no side effects.\n              // Remove this when webpack adds a warning or an error for this.\n              // See https://github.com/webpack/webpack/issues/6571\n              sideEffects: true,\n            },\n\n            // Process application JS with Babel.\n            // The preset includes JSX, Flow, TypeScript, and some ESnext features.\n            {\n              test: /\\.(js|mjs|jsx|ts|tsx)$/,\n              exclude: [/node_modules/, /\\/dist\\//],\n              // consider: limit loader to files only in a capsule that has bitid in package.json\n              // descriptionData: { componentId: ComponentID.isValidObject },\n              // // or\n              // include: capsulePaths\n              loader: require.resolve('babel-loader'),\n              options: {\n                babelrc: false,\n                configFile: false,\n                customize: require.resolve('babel-preset-react-app/webpack-overrides'),\n                presets: [require.resolve('@babel/preset-react')],\n                // This is a feature of `babel-loader` for webpack (not Babel itself).\n                // It enables caching results in ./node_modules/.cache/babel-loader/\n                // directory for faster rebuilds.\n                cacheDirectory: true,\n                // See #6846 for context on why cacheCompression is disabled\n                cacheCompression: false,\n                compact: isEnvProduction,\n              },\n            },\n            // Process any JS outside of the app with Babel.\n            // Unlike the application JS, we only compile the standard ES features.\n            // Probably not needed in our use case\n            // {\n            //   test: /\\.(js|mjs)$/,\n            //   exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n            //   loader: require.resolve('babel-loader'),\n            //   options: {\n            //     babelrc: false,\n            //     configFile: false,\n            //     compact: false,\n            //     presets: [[require.resolve('babel-preset-react-app/dependencies'), { helpers: true }]],\n            //     cacheDirectory: true,\n            //     // See #6846 for context on why cacheCompression is disabled\n            //     cacheCompression: false,\n\n            //     // Babel sourcemaps are needed for debugging into node_modules\n            //     // code.  Without the options below, debuggers like VSCode\n            //     // show incorrect code and set breakpoints on the wrong lines.\n            //     sourceMaps: shouldUseSourceMap,\n            //     inputSourceMap: shouldUseSourceMap,\n            //   },\n            // },\n            // MDX support (move to the mdx aspect and extend from there)\n            {\n              test: /\\.mdx?$/,\n              exclude: [/node_modules/],\n              use: [\n                {\n                  loader: require.resolve('babel-loader'),\n                  options: {\n                    babelrc: false,\n                    configFile: false,\n                    presets: [require.resolve('@babel/preset-react'), require.resolve('@babel/preset-env')],\n                  },\n                },\n                {\n                  loader: require.resolve('@teambit/mdx.modules.mdx-loader'),\n                },\n              ],\n            },\n            // Adds support for CSS Modules (https://github.com/css-modules/css-modules)\n            // using the extension .module.css\n            {\n              test: stylesRegexps.cssModuleRegex,\n              use: generateStyleLoaders(\n                merge({}, baseStyleLoadersOptions, {\n                  cssLoaderOpts: {\n                    importLoaders: 1,\n                    sourceMap: isEnvProduction || shouldUseSourceMap,\n                    modules: {\n                      getLocalIdent: getCSSModuleLocalIdent,\n                    },\n                  },\n                  shouldUseSourceMap: isEnvProduction || shouldUseSourceMap,\n                })\n              ),\n            },\n            // Opt-in support for SASS (using .scss or .sass extensions).\n            // By default we support SASS Modules with the\n            // extensions .module.scss or .module.sass\n            {\n              test: stylesRegexps.sassNoModuleRegex,\n              use: generateStyleLoaders(\n                merge({}, baseStyleLoadersOptions, {\n                  cssLoaderOpts: {\n                    importLoaders: 3,\n                    sourceMap: isEnvProduction || shouldUseSourceMap,\n                  },\n                  shouldUseSourceMap: isEnvProduction || shouldUseSourceMap,\n                  preProcessOptions: {\n                    resolveUrlLoaderPath: require.resolve('resolve-url-loader'),\n                    preProcessorPath: require.resolve('sass-loader'),\n                  },\n                })\n              ),\n              // Don't consider CSS imports dead code even if the\n              // containing package claims to have no side effects.\n              // Remove this when webpack adds a warning or an error for this.\n              // See https://github.com/webpack/webpack/issues/6571\n              sideEffects: true,\n            },\n            // Adds support for CSS Modules, but using SASS\n            // using the extension .module.scss or .module.sass\n            {\n              test: stylesRegexps.sassModuleRegex,\n              use: generateStyleLoaders(\n                merge({}, baseStyleLoadersOptions, {\n                  cssLoaderOpts: {\n                    importLoaders: 3,\n                    sourceMap: isEnvProduction || shouldUseSourceMap,\n                    modules: {\n                      getLocalIdent: getCSSModuleLocalIdent,\n                    },\n                  },\n                  shouldUseSourceMap: isEnvProduction || shouldUseSourceMap,\n                  preProcessOptions: {\n                    resolveUrlLoaderPath: require.resolve('resolve-url-loader'),\n                    preProcessorPath: require.resolve('sass-loader'),\n                  },\n                })\n              ),\n            },\n            {\n              test: stylesRegexps.lessNoModuleRegex,\n              use: generateStyleLoaders(\n                merge({}, baseStyleLoadersOptions, {\n                  cssLoaderOpts: {\n                    importLoaders: 1,\n                    sourceMap: isEnvProduction || shouldUseSourceMap,\n                  },\n                  shouldUseSourceMap: isEnvProduction || shouldUseSourceMap,\n                  preProcessOptions: {\n                    resolveUrlLoaderPath: require.resolve('resolve-url-loader'),\n                    preProcessorPath: require.resolve('less-loader'),\n                  },\n                })\n              ),\n              // Don't consider CSS imports dead code even if the\n              // containing package claims to have no side effects.\n              // Remove this when webpack adds a warning or an error for this.\n              // See https://github.com/webpack/webpack/issues/6571\n              sideEffects: true,\n            },\n            {\n              test: stylesRegexps.lessModuleRegex,\n              use: generateStyleLoaders(\n                merge({}, baseStyleLoadersOptions, {\n                  cssLoaderOpts: {\n                    importLoaders: 1,\n                    sourceMap: isEnvProduction || shouldUseSourceMap,\n                    modules: {\n                      getLocalIdent: getCSSModuleLocalIdent,\n                    },\n                  },\n                  shouldUseSourceMap: isEnvProduction || shouldUseSourceMap,\n                  preProcessOptions: {\n                    resolveUrlLoaderPath: require.resolve('resolve-url-loader'),\n                    preProcessorPath: require.resolve('less-loader'),\n                  },\n                })\n              ),\n            },\n            {\n              test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\n              type: 'asset',\n              parser: {\n                dataUrlCondition: {\n                  maxSize: imageInlineSizeLimit,\n                },\n              },\n            },\n            {\n              // loads svg as both inlineUrl and react component, like:\n              // import starUrl, { ReactComponent as StarIcon } from './star.svg';\n              // (remove when there is native support for both opitons from webpack5 / svgr)\n              test: /\\.svg$/,\n              oneOf: [\n                {\n                  dependency: { not: ['url'] }, // exclude new URL calls\n                  use: [\n                    {\n                      loader: require.resolve('@svgr/webpack'),\n                      options: { titleProp: true, ref: true },\n                    },\n                    require.resolve('new-url-loader'),\n                  ],\n                },\n                {\n                  type: 'asset', // export a data URI or emit a separate file\n                },\n              ],\n            },\n            // \"file\" loader makes sure those assets get served by WebpackDevServer.\n            // When you `import` an asset, you get its (virtual) filename.\n            // In production, they would get copied to the `build` folder.\n            // This loader doesn't use a \"test\" so it will catch all modules\n            // that fall through the other loaders.\n            {\n              // Exclude `js` files to keep \"css\" loader working as it injects\n              // its runtime that would otherwise be processed through \"file\" loader.\n              // Also exclude `html` and `json` extensions so they get processed\n              // by webpacks internal loaders.\n              exclude: [/\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.mdx?/, /\\.json$/, /\\.css$/],\n              type: 'asset',\n            },\n            // ** STOP ** Are you adding a new loader?\n            // Make sure to add the new loader(s) before the \"type:asset\" loader.\n          ],\n        },\n      ],\n    },\n    // @ts-ignore\n    plugins: [\n      isEnvProduction &&\n        new MiniCssExtractPlugin({\n          // Options similar to the same options in webpackOptions.output\n          // both options are optional\n          filename: 'static/css/[name].[contenthash:8].css',\n          chunkFilename: 'static/css/[name].[contenthash:8].chunk.css',\n        }),\n      // Moment.js is an extremely popular library that bundles large locale files\n      // by default due to how webpack interprets its code. This is a practical\n      // solution that requires the user to opt into importing specific locales.\n      // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack\n      // You can remove this if you don't use Moment.js:\n      new IgnorePlugin({\n        resourceRegExp: /^\\.\\/locale$/,\n        contextRegExp: /moment$/,\n      }),\n    ].filter(Boolean),\n    // Turn off performance processing because we utilize\n    // our own hints via the FileSizeReporter\n    performance: false,\n  };\n}\n"]}