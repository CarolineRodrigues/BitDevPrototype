{"version":3,"sources":["envs.cmd.tsx"],"names":["ListEnvsCmd","constructor","envs","componentAspect","report","allEnvs","getAllRegisteredEnvs","join","title","chalk","green","GetEnvCmd","showEnv","id","host","component","get","resolveComponentId","Error","env","getEnv","envRuntime","createEnvironment","envExecutionContext","getEnvExecutionContext","services","getServices","allP","map","serviceId","service","render","all","Promise","item","name","getHost","EnvsCmd","components","list","getTable","tableData","getDescriptor","toString","header","value","table","CLITable","fromObject"],"mappings":"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","sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport React from 'react';\nimport { Text, Newline } from 'ink';\nimport chalk from 'chalk';\nimport { CLITable } from '@teambit/cli-table';\nimport { Command } from '@teambit/cli';\nimport { ComponentMain, ComponentFactory, Component } from '@teambit/component';\nimport { EnvsMain } from './environments.main.runtime';\nimport { EnvOverview } from './components/env-overview';\n\nexport class ListEnvsCmd implements Command {\n  name = 'list';\n  description = 'list all envs available in the workspace';\n  options = [];\n  group = 'development';\n\n  constructor(private envs: EnvsMain, private componentAspect: ComponentMain) {}\n\n  async report() {\n    const allEnvs = this.envs.getAllRegisteredEnvs().join('\\n');\n    const title = chalk.green('the following envs are available in the workspace:');\n    return `${title}\\n${allEnvs}`;\n  }\n}\n\nexport class GetEnvCmd implements Command {\n  name = 'get <name>';\n  description = \"show component's env details\";\n  options = [];\n  group = 'development';\n\n  constructor(private envs: EnvsMain, private componentAspect: ComponentMain) {}\n\n  async showEnv(id: string, host: ComponentFactory) {\n    const component = await host.get(await host.resolveComponentId(id));\n    if (!component) throw new Error(`component for env ${id} was not found`);\n    const env = this.envs.getEnv(component);\n    const envRuntime = await this.envs.createEnvironment([component]);\n    const envExecutionContext = envRuntime.getEnvExecutionContext();\n    const services = this.envs.getServices(env);\n    const allP = services.services.map(async ([serviceId, service]) => {\n      if (service.render)\n        return (\n          <Text>\n            <Text bold underline color=\"cyan\">\n              {serviceId}\n            </Text>\n            <Newline />\n            <Newline />\n            {await service.render(env, envExecutionContext)}\n          </Text>\n        );\n      return (\n        <Text key={serviceId}>\n          <Text bold underline>\n            {serviceId}\n          </Text>\n        </Text>\n      );\n    });\n\n    const all = await Promise.all(allP);\n\n    return (\n      <Text>\n        <EnvOverview envDef={env} />\n        {all.map((item) => item)}\n      </Text>\n    );\n  }\n\n  async render([name]: [string]): Promise<JSX.Element> {\n    const host = this.componentAspect.getHost();\n    // TODO: think what to do re this line with gilad.\n    if (!host) throw new Error('error: workspace not found');\n    return this.showEnv(name, host);\n  }\n}\n\nexport class EnvsCmd implements Command {\n  name = 'envs';\n  alias = 'env';\n  description = 'list all components envs';\n  options = [];\n  group = 'development';\n  commands: Command[] = [];\n\n  constructor(private envs: EnvsMain, private componentAspect: ComponentMain) {}\n\n  async render(): Promise<JSX.Element> {\n    const host = this.componentAspect.getHost();\n    // TODO: think what to do re this line with gilad.\n    if (!host) throw new Error('error: workspace not found');\n    const components = await host.list();\n    // TODO: refactor to a react table\n    return <Text>{this.getTable(components)}</Text>;\n  }\n\n  private getTable(components: Component[]) {\n    const tableData = components.map((component) => {\n      const env = this.envs.getDescriptor(component);\n      return {\n        component: component.id.toString(),\n        env: env ? env.id : 'N/A',\n      };\n    });\n\n    const header = [\n      {\n        value: 'component',\n      },\n      {\n        value: 'env',\n      },\n    ];\n    const table = CLITable.fromObject(header, tableData);\n    return table.render();\n  }\n}\n"]}