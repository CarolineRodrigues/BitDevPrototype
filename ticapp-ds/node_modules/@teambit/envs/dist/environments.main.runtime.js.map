{"version":3,"sources":["environments.main.runtime.ts"],"names":["DEFAULT_ENV","EnvsMain","icon","constructor","config","context","envSlot","logger","serviceSlot","componentMain","createEnvironment","components","createRuntime","getDefaultEnv","defaultEnv","get","Error","EnvDefinition","getCoreEnvsIds","compose","targetEnv","envTransformers","a","reduce","acc","transformer","override","propsToOverride","env","merge","sourceEnv","allNames","Set","keys","o","Object","prototype","getPrototypeOf","name","getOwnPropertyNames","add","forEach","key","fn","includes","bind","getEnvData","component","envsData","state","aspects","EnvsAspect","id","toString","data","getEnvIdFromEnvsData","ignoreVersion","undefined","rawEnvId","envIdWithoutVersion","ComponentID","fromString","toStringWithoutVersion","getEnvId","envIdFromEnvData","withVersion","resolveEnv","withVersionMatch","toArray","find","envId","withVersionMatchId","exactMatch","exactMatchId","EnvNotConfiguredForComponent","getEnv","envDef","getEnvDefinitionByStringId","EnvNotFound","getDescriptor","services","matchedEntry","entries","aspectEntry","calculateEnv","envIdFromEnvsConfig","getEnvIdFromEnvsConfig","envIdFromEnvsConfigWithoutVersion","getEnvDefinitionById","printWarningIfFirstTime","errMsg","message","envDefFromList","getAllEnvsConfiguredOnComponent","getEnvFromEnvsConfig","getEnvsNotFromEnvsConfig","hasEnvConfigured","Boolean","length","getAllRegisteredEnvs","map","envData","push","calculateEnvFromExtensions","extensions","envsAspect","findCoreExtension","getEnvDefinitionByLegacyExtension","extension","newExtensionId","stringId","getEnvFromComponent","envComponent","getEnvsEnvDefinition","alreadyShownWarning","consoleWarning","isEnvRegistered","isUsingAspectEnv","type","isUsingEnvEnv","registerService","envServices","register","getServices","allServices","currentServices","service","implements","EnvServiceList","registerEnv","Runtime","aggregateByDefs","throwForDuplicateComponents","envsMap","EnvRuntime","idsStr","c","duplications","join","provider","graphql","loggerAspect","cli","createLogger","envs","registerShowFragments","EnvFragment","envsCmd","EnvsCmd","commands","ListEnvsCmd","GetEnvCmd","MainRuntime","Slot","withType","GraphqlAspect","LoggerAspect","ComponentAspect","CLIAspect","addRuntime"],"mappings":"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","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component, ComponentAspect, ComponentMain, ComponentID, AspectData } from '@teambit/component';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Harmony, Slot, SlotRegistry } from '@teambit/harmony';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { ExtensionDataList, ExtensionDataEntry } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport findDuplications from '@teambit/legacy/dist/utils/array/find-duplications';\nimport { EnvService } from './services';\nimport { Environment } from './environment';\nimport { EnvsAspect } from './environments.aspect';\nimport { environmentsSchema } from './environments.graphql';\nimport { EnvRuntime, Runtime } from './runtime';\nimport { EnvDefinition } from './env-definition';\nimport { EnvServiceList } from './env-service-list';\nimport { EnvsCmd, GetEnvCmd, ListEnvsCmd } from './envs.cmd';\nimport { EnvFragment } from './env.fragment';\nimport { EnvNotFound, EnvNotConfiguredForComponent } from './exceptions';\n\nexport type EnvsRegistry = SlotRegistry<Environment>;\n\nexport type EnvsConfig = {\n  env: string;\n  options: EnvOptions;\n};\n\nexport type EnvOptions = {};\n\nexport type EnvTransformer = (env: Environment) => Environment;\n\nexport type ServiceSlot = SlotRegistry<Array<EnvService<any>>>;\n\nexport type Descriptor = {\n  id: string;\n  icon: string;\n  services?: [];\n};\n\nexport const DEFAULT_ENV = 'teambit.harmony/node';\n\nexport class EnvsMain {\n  static runtime = MainRuntime;\n\n  private alreadyShownWarning = {};\n\n  /**\n   * icon of the extension.\n   */\n  icon() {\n    return `<svg width=\"50\" height=\"50\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"25\" cy=\"25\" r=\"20\"/>\n    </svg>`;\n  }\n\n  constructor(\n    /**\n     * environments extension configuration.\n     */\n    readonly config: EnvsConfig,\n\n    /**\n     * harmony context.\n     */\n    private context: Harmony,\n\n    /**\n     * slot for allowing extensions to register new environment.\n     */\n    private envSlot: EnvsRegistry,\n\n    private logger: Logger,\n\n    private serviceSlot: ServiceSlot,\n\n    private componentMain: ComponentMain\n  ) {}\n\n  /**\n   * creates a new runtime environments for a set of components.\n   */\n  async createEnvironment(components: Component[]): Promise<Runtime> {\n    return this.createRuntime(components);\n  }\n\n  /**\n   * get the configured default env.\n   */\n  getDefaultEnv(): EnvDefinition {\n    const defaultEnv = this.envSlot.get(DEFAULT_ENV);\n    if (!defaultEnv) throw new Error('default env must be set.');\n\n    return new EnvDefinition(DEFAULT_ENV, defaultEnv);\n  }\n\n  getCoreEnvsIds(): string[] {\n    return [\n      'teambit.harmony/aspect',\n      'teambit.react/react',\n      'teambit.harmony/node',\n      'teambit.react/react-native',\n      'teambit.html/html',\n      'teambit.mdx/mdx',\n      'teambit.envs/env',\n    ];\n  }\n\n  /**\n   * compose a new environment from a list of environment transformers.\n   */\n  compose(targetEnv: Environment, envTransformers: EnvTransformer[]) {\n    const a = envTransformers.reduce((acc, transformer) => {\n      acc = transformer(acc);\n      return acc;\n    }, targetEnv);\n\n    return a;\n  }\n\n  /**\n   * create an env transformer which overrides specific env properties.\n   */\n  override(propsToOverride: Environment): EnvTransformer {\n    return (env: Environment) => {\n      return this.merge(propsToOverride, env);\n    };\n  }\n\n  /**\n   * compose two environments into one.\n   */\n  merge<T extends Environment, S extends Environment>(targetEnv: Environment, sourceEnv: Environment): T & S {\n    const allNames = new Set<string>();\n    const keys = ['icon', 'name', 'description'];\n    for (let o = sourceEnv; o !== Object.prototype; o = Object.getPrototypeOf(o)) {\n      for (const name of Object.getOwnPropertyNames(o)) {\n        allNames.add(name);\n      }\n    }\n\n    allNames.forEach((key: string) => {\n      const fn = sourceEnv[key];\n      if (targetEnv[key]) return;\n      if (keys.includes(key)) targetEnv[key] = fn;\n      if (!fn || !fn.bind) {\n        return;\n      }\n      targetEnv[key] = fn.bind(sourceEnv);\n    });\n\n    return targetEnv as T & S;\n  }\n\n  getEnvData(component: Component): AspectData {\n    let envsData = component.state.aspects.get(EnvsAspect.id);\n    if (!envsData) {\n      // TODO: remove this once we re-export old components used to store the data here\n      envsData = component.state.aspects.get('teambit.workspace/workspace');\n    }\n    if (!envsData) throw new Error(`env was not configured on component ${component.id.toString()}`);\n    return envsData.data;\n  }\n\n  /**\n   * Return the id of the env as configured in the envs data (without version by default)\n   * The reason it's not contain version by default is that we want to take the version from the aspect defined on the component itself\n   * As this version is stay up to date during tagging the env along with the component\n   * @param component\n   * @param ignoreVersion\n   */\n  private getEnvIdFromEnvsData(component: Component, ignoreVersion = true): string | undefined {\n    const envsData = this.getEnvData(component);\n    if (!envsData) return undefined;\n    const rawEnvId = envsData.id;\n    if (!rawEnvId) return undefined;\n    if (!ignoreVersion) return rawEnvId;\n    const envIdWithoutVersion = ComponentID.fromString(rawEnvId).toStringWithoutVersion();\n    return envIdWithoutVersion;\n  }\n\n  /**\n   * get the env id of the given component.\n   */\n  getEnvId(component: Component): string {\n    const envIdFromEnvData = this.getEnvIdFromEnvsData(component);\n    if (!envIdFromEnvData) {\n      // This should never happen\n      throw new Error(`no env found for ${component.id.toString()}`);\n    }\n    const withVersion = this.resolveEnv(component, envIdFromEnvData);\n    const withVersionMatch = this.envSlot.toArray().find(([envId]) => {\n      return withVersion?.toString() === envId;\n    });\n    const withVersionMatchId = withVersionMatch?.[0];\n    if (withVersionMatchId) return withVersionMatchId;\n\n    // Handle core envs\n    const exactMatch = this.envSlot.toArray().find(([envId]) => {\n      return envIdFromEnvData === envId;\n    });\n\n    const exactMatchId = exactMatch?.[0];\n    if (exactMatchId) return exactMatchId;\n\n    if (!withVersion) throw new EnvNotConfiguredForComponent(envIdFromEnvData, component.id.toString());\n    return withVersion.toString();\n  }\n\n  /**\n   * get the env of the given component.\n   * In case you are asking for the env during on load you should use calculateEnv instead\n   */\n  getEnv(component: Component): EnvDefinition {\n    const id = this.getEnvId(component);\n    const envDef = this.getEnvDefinitionByStringId(id);\n    if (envDef) {\n      return envDef;\n    }\n    // Do not allow a non existing env\n    throw new EnvNotFound(id, component.id.toString());\n  }\n\n  /**\n   * get an environment Descriptor.\n   */\n  getDescriptor(component: Component): Descriptor | null {\n    const envsData = this.getEnvData(component);\n    return {\n      id: envsData.id,\n      icon: envsData.icon,\n      services: envsData.services,\n    };\n  }\n\n  resolveEnv(component: Component, id: string) {\n    const matchedEntry = component.state.aspects.entries.find((aspectEntry) => {\n      return id === aspectEntry.id.toString() || id === aspectEntry.id.toString({ ignoreVersion: true });\n    });\n\n    return matchedEntry?.id;\n  }\n\n  /**\n   * This used to calculate the actual env during the component load.\n   * Do not use it to get the env (use getEnv instead)\n   * This should be used only during on load\n   */\n  calculateEnv(component: Component): EnvDefinition {\n    // Search first for env configured via envs aspect itself\n    const envIdFromEnvsConfig = this.getEnvIdFromEnvsConfig(component);\n    let envIdFromEnvsConfigWithoutVersion;\n    if (envIdFromEnvsConfig) {\n      envIdFromEnvsConfigWithoutVersion = ComponentID.fromString(envIdFromEnvsConfig).toStringWithoutVersion();\n      const envDef = this.getEnvDefinitionByStringId(envIdFromEnvsConfigWithoutVersion);\n      if (envDef) {\n        return envDef;\n      }\n    }\n\n    // in some cases we have the id configured in the teambit.envs/envs but without the version\n    // in such cases we won't find it in the slot\n    // we search in the component aspect list a matching aspect which is match the id from the teambit.envs/envs\n    if (envIdFromEnvsConfigWithoutVersion) {\n      const matchedEntry = component.state.aspects.entries.find((aspectEntry) => {\n        return (\n          envIdFromEnvsConfigWithoutVersion === aspectEntry.id.toString() ||\n          envIdFromEnvsConfigWithoutVersion === aspectEntry.id.toString({ ignoreVersion: true })\n        );\n      });\n      if (matchedEntry) {\n        // during the tag process, the version in the aspect-entry-id is changed and is not the\n        // same as it was when it registered to the slot.\n        const envDef = this.getEnvDefinitionById(matchedEntry.id);\n        if (envDef) {\n          return envDef;\n        }\n        // Do not allow a non existing env\n        this.printWarningIfFirstTime(\n          matchedEntry.id.toString(),\n          `environment with ID: ${matchedEntry.id.toString()} configured on component ${component.id.toString()} was not found`\n        );\n      }\n      // Do not allow configure teambit.envs/envs on the component without configure the env aspect itself\n      const errMsg = new EnvNotConfiguredForComponent(envIdFromEnvsConfig as string, component.id.toString()).message;\n      this.printWarningIfFirstTime(envIdFromEnvsConfig as string, errMsg);\n    }\n\n    // in case there is no config in teambit.envs/envs search the aspects for the first env that registered as env\n    let envDefFromList;\n    component.state.aspects.entries.find((aspectEntry) => {\n      const envDef = this.getEnvDefinitionById(aspectEntry.id);\n      if (envDef) {\n        envDefFromList = envDef;\n      }\n      return !!envDef;\n    });\n\n    if (envDefFromList) {\n      return envDefFromList;\n    }\n    return this.getDefaultEnv();\n  }\n\n  /**\n   * an env can be configured on a component in two ways:\n   * 1) explicitly inside \"teambit.envs/envs\". `{ \"teambit.envs/envs\": { \"env\": \"my-env\" } }`\n   * 2) the env aspect is set on the variant as any other aspect, e.g. `{ \"my-env\": {} }`\n   *\n   * this method returns #1 if exists, otherwise, #2.\n   */\n  getAllEnvsConfiguredOnComponent(component: Component): EnvDefinition[] {\n    // if a component has \"envs\" config, use it and ignore other components that are set up\n    // in this components which happen to be envs.\n    const envDef = this.getEnvFromEnvsConfig(component);\n    if (envDef) {\n      return [envDef];\n    }\n\n    return this.getEnvsNotFromEnvsConfig(component);\n  }\n\n  /**\n   * whether a component has an env configured (either by variant or .bitmap).\n   */\n  hasEnvConfigured(component: Component): boolean {\n    return Boolean(this.getAllEnvsConfiguredOnComponent(component).length);\n  }\n\n  getAllRegisteredEnvs(): string[] {\n    return this.envSlot.toArray().map((envData) => envData[0]);\n  }\n\n  /**\n   * an env can be configured on a component in two ways:\n   * 1) explicitly inside \"teambit.envs/envs\". `{ \"teambit.envs/envs\": { \"env\": \"my-env\" } }`\n   * 2) the env aspect is set on the variant as any other aspect, e.g. `{ \"my-env\": {} }`\n   *\n   * this method returns only #1\n   */\n  getEnvFromEnvsConfig(component: Component): EnvDefinition | undefined {\n    const envIdFromEnvsConfig = this.getEnvIdFromEnvsConfig(component);\n    if (!envIdFromEnvsConfig) {\n      return undefined;\n    }\n    const envIdFromEnvsConfigWithoutVersion = ComponentID.fromString(envIdFromEnvsConfig).toStringWithoutVersion();\n    const envDef = this.getEnvDefinitionByStringId(envIdFromEnvsConfigWithoutVersion);\n    return envDef;\n  }\n\n  /**\n   * an env can be configured on a component in two ways:\n   * 1) explicitly inside \"teambit.envs/envs\". `{ \"teambit.envs/envs\": { \"env\": \"my-env\" } }`\n   * 2) the env aspect is set on the variant as any other aspect, e.g. `{ \"my-env\": {} }`\n   *\n   * this method returns only #2\n   */\n  getEnvsNotFromEnvsConfig(component: Component): EnvDefinition[] {\n    return component.state.aspects.entries.reduce((acc: EnvDefinition[], aspectEntry) => {\n      const envDef = this.getEnvDefinitionById(aspectEntry.id);\n      if (envDef) acc.push(envDef);\n      return acc;\n    }, []);\n  }\n\n  /**\n   * @deprecated DO NOT USE THIS METHOD ANYMORE!!! (PLEASE USE .calculateEnv() instead!)\n   */\n  calculateEnvFromExtensions(extensions: ExtensionDataList): EnvDefinition {\n    // Search first for env configured via envs aspect itself\n    const envsAspect = extensions.findCoreExtension(EnvsAspect.id);\n    const envIdFromEnvsConfig = envsAspect?.config.env;\n    let envIdFromEnvsConfigWithoutVersion;\n\n    if (envIdFromEnvsConfig) {\n      envIdFromEnvsConfigWithoutVersion = ComponentID.fromString(envIdFromEnvsConfig).toStringWithoutVersion();\n      const envDef = this.getEnvDefinitionByStringId(envIdFromEnvsConfigWithoutVersion);\n      if (envDef) {\n        return envDef;\n      }\n    }\n\n    const getEnvDefinitionByLegacyExtension = (extension: ExtensionDataEntry): EnvDefinition | undefined => {\n      const envDef = extension.newExtensionId\n        ? this.getEnvDefinitionById(extension.newExtensionId)\n        : this.getEnvDefinitionByStringId(extension.stringId);\n      return envDef;\n    };\n\n    // in some cases we have the id configured in the teambit.envs/envs but without the version\n    // in such cases we won't find it in the slot\n    // we search in the component aspect list a matching aspect which is match the id from the teambit.envs/envs\n    if (envIdFromEnvsConfigWithoutVersion) {\n      const matchedEntry = extensions.find((extension) => {\n        if (extension.newExtensionId) {\n          return (\n            envIdFromEnvsConfigWithoutVersion === extension.newExtensionId.toString() ||\n            envIdFromEnvsConfigWithoutVersion === extension.newExtensionId.toString({ ignoreVersion: true })\n          );\n        }\n        return envIdFromEnvsConfigWithoutVersion === extension.stringId;\n      });\n      if (matchedEntry) {\n        // during the tag process, the version in the aspect-entry-id is changed and is not the\n        // same as it was when it registered to the slot.\n        const envDef = getEnvDefinitionByLegacyExtension(matchedEntry);\n        if (envDef) {\n          return envDef;\n        }\n        // Do not allow a non existing env\n        this.printWarningIfFirstTime(\n          matchedEntry.id.toString(),\n          `environment with ID: ${matchedEntry.id.toString()} was not found`\n        );\n      }\n      // Do not allow configure teambit.envs/envs on the component without configure the env aspect itself\n      const errMsg = new EnvNotConfiguredForComponent(envIdFromEnvsConfig).message;\n      this.printWarningIfFirstTime(envIdFromEnvsConfig, errMsg);\n    }\n\n    // in case there is no config in teambit.envs/envs search the aspects for the first env that registered as env\n    let envDefFromList;\n    extensions.find((extension: ExtensionDataEntry) => {\n      const envDef = getEnvDefinitionByLegacyExtension(extension);\n      if (envDef) {\n        envDefFromList = envDef;\n      }\n      return !!envDef;\n    });\n\n    if (envDefFromList) {\n      return envDefFromList;\n    }\n    return this.getDefaultEnv();\n  }\n\n  private getEnvIdFromEnvsConfig(component: Component): string | undefined {\n    const envsAspect = component.state.aspects.get(EnvsAspect.id);\n    return envsAspect?.config.env;\n  }\n\n  getEnvDefinitionById(id: ComponentID): EnvDefinition | undefined {\n    const envDef =\n      this.getEnvDefinitionByStringId(id.toString()) ||\n      this.getEnvDefinitionByStringId(id.toString({ ignoreVersion: true }));\n    return envDef;\n  }\n\n  private getEnvDefinitionByStringId(envId: string): EnvDefinition | undefined {\n    const env = this.envSlot.get(envId);\n    if (env) {\n      return new EnvDefinition(envId, env as Environment);\n    }\n    return undefined;\n  }\n\n  getEnvFromComponent(envComponent: Component) {\n    const env = this.getEnvDefinitionById(envComponent.id);\n    return env;\n  }\n\n  /**\n   * Return the env definition of teambit.envs/env\n   */\n  getEnvsEnvDefinition(): EnvDefinition {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.getEnvDefinitionByStringId('teambit.envs/env')!;\n  }\n\n  private printWarningIfFirstTime(envId: string, message: string) {\n    if (!this.alreadyShownWarning[envId]) {\n      this.alreadyShownWarning[envId] = true;\n      this.logger.consoleWarning(message);\n    }\n  }\n\n  /**\n   * determines whether an env is registered.\n   */\n  isEnvRegistered(id: string) {\n    return Boolean(this.envSlot.get(id));\n  }\n\n  isUsingAspectEnv(component: Component): boolean {\n    const data = this.getEnvData(component);\n    if (!data) return false;\n    return data.type === 'aspect';\n  }\n\n  isUsingEnvEnv(component: Component): boolean {\n    const data = this.getEnvData(component);\n    if (!data) return false;\n    return data.type === 'env';\n  }\n\n  /**\n   * register a new environment service.\n   */\n  registerService(...envServices: EnvService<any>[]) {\n    this.serviceSlot.register(envServices);\n    return this;\n  }\n\n  /**\n   * get list of services enabled on an env.\n   */\n  getServices(env: EnvDefinition): EnvServiceList {\n    const allServices = this.serviceSlot.toArray();\n    const services: [string, EnvService<any>][] = [];\n    allServices.forEach(([id, currentServices]) => {\n      currentServices.forEach((service) => {\n        if (this.implements(env, service)) {\n          services.push([id, service]);\n        }\n      });\n    });\n    return new EnvServiceList(env, services);\n  }\n\n  implements(env: EnvDefinition, service: EnvService<any>) {\n    // TODO: remove this after refactoring everything and remove getDescriptor from being optional.\n    if (!service.getDescriptor) return false;\n    return !!service.getDescriptor(env);\n  }\n\n  /**\n   * register an environment.\n   */\n  registerEnv(env: Environment) {\n    return this.envSlot.register(env);\n  }\n\n  // refactor here\n  private createRuntime(components: Component[]): Runtime {\n    return new Runtime(this.aggregateByDefs(components), this.logger);\n  }\n\n  // :TODO can be refactored to few utilities who will make repeating this very easy.\n  private aggregateByDefs(components: Component[]): EnvRuntime[] {\n    this.throwForDuplicateComponents(components);\n    const envsMap = {};\n    components.forEach((component: Component) => {\n      const envDef = this.getEnv(component);\n      const envId = envDef.id;\n      const env = envDef.env;\n      // handle config as well when aggregating envs.\n      if (envsMap[envId]) envsMap[envId].components.push(component);\n      else\n        envsMap[envId] = {\n          components: [component],\n          env,\n        };\n    });\n\n    return Object.keys(envsMap).map((key) => {\n      return new EnvRuntime(key, envsMap[key].env, envsMap[key].components);\n    });\n  }\n\n  private throwForDuplicateComponents(components: Component[]) {\n    const idsStr = components.map((c) => c.id.toString());\n    const duplications = findDuplications(idsStr);\n    if (duplications.length) {\n      throw new Error(`found duplicated components: ${duplications.join(', ')}`);\n    }\n  }\n\n  static slots = [Slot.withType<Environment>(), Slot.withType<EnvService<any>>()];\n\n  static dependencies = [GraphqlAspect, LoggerAspect, ComponentAspect, CLIAspect];\n\n  static async provider(\n    [graphql, loggerAspect, component, cli]: [GraphqlMain, LoggerMain, ComponentMain, CLIMain],\n    config: EnvsConfig,\n    [envSlot, serviceSlot]: [EnvsRegistry, ServiceSlot],\n    context: Harmony\n  ) {\n    const logger = loggerAspect.createLogger(EnvsAspect.id);\n    const envs = new EnvsMain(config, context, envSlot, logger, serviceSlot, component);\n    component.registerShowFragments([new EnvFragment(envs)]);\n    const envsCmd = new EnvsCmd(envs, component);\n    envsCmd.commands = [new ListEnvsCmd(envs, component), new GetEnvCmd(envs, component)];\n    cli.register(envsCmd);\n    graphql.register(environmentsSchema(envs));\n    return envs;\n  }\n}\n\nEnvsAspect.addRuntime(EnvsMain);\n"]}