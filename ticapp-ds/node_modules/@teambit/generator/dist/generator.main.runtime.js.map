{"version":3,"sources":["generator.main.runtime.ts"],"names":["GeneratorMain","constructor","componentTemplateSlot","workspaceTemplateSlot","config","workspace","envs","aspectLoader","newComponentHelper","registerComponentTemplate","templates","register","registerWorkspaceTemplate","listTemplates","getTemplateDescriptor","id","template","shouldBeHidden","hidden","hideCoreTemplates","aspectId","name","description","isRunningInsideWorkspace","getAllComponentTemplatesFlattened","map","getAllWorkspaceTemplatesFlattened","listComponentTemplates","Boolean","getComponentTemplateByAspect","get","getComponentTemplate","found","find","findTemplateInGlobalScope","aspects","loadAspectsFromGlobalScope","fullAspectId","toString","searchRegisteredWorkspaceTemplate","findTemplateInOtherWorkspace","workspacePath","BitError","harmony","WorkspaceAspect","err","Error","aspectComponentId","resolveComponentId","loadAspects","aspectFullId","generator","GeneratorAspect","getWorkspaceTemplate","registeredTemplate","workspaceTemplate","aspect","fromGlobal","generateComponentTemplate","componentNames","templateName","options","ConsumerNotFound","namespace","templateWithId","componentIds","componentName","getNewComponentId","scope","componentGenerator","ComponentGenerator","generate","generateWorkspaceTemplate","workspaceName","loadFrom","aspectComponent","workspaceGenerator","WorkspaceGenerator","templatesByAspects","toArray","flatMap","componentTemplates","workspaceTemplates","aspectLoaded","provider","cli","graphql","community","commands","CreateCmd","getDocsDomain","TemplatesCmd","NewCmd","componentGeneratorTemplate","workspaceGeneratorTemplate","Slot","withType","CLIAspect","GraphqlAspect","EnvsAspect","AspectLoaderAspect","NewComponentHelperAspect","CommunityAspect","MainRuntime","addRuntime"],"mappings":"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","sourcesContent":["import { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { CommunityAspect } from '@teambit/community';\nimport type { CommunityMain } from '@teambit/community';\n\nimport { Component } from '@teambit/component';\nimport { isCoreAspect, loadBit } from '@teambit/bit';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { BitError } from '@teambit/bit-error';\nimport AspectLoaderAspect, { AspectLoaderMain } from '@teambit/aspect-loader';\nimport NewComponentHelperAspect, { NewComponentHelperMain } from '@teambit/new-component-helper';\nimport { ComponentTemplate } from './component-template';\nimport { GeneratorAspect } from './generator.aspect';\nimport { CreateCmd, CreateOptions } from './create.cmd';\nimport { TemplatesCmd } from './templates.cmd';\nimport { generatorSchema } from './generator.graphql';\nimport { ComponentGenerator, GenerateResult } from './component-generator';\nimport { WorkspaceGenerator } from './workspace-generator';\nimport { WorkspaceTemplate } from './workspace-template';\nimport { NewCmd, NewOptions } from './new.cmd';\nimport { componentGeneratorTemplate } from './templates/component-generator';\nimport { workspaceGeneratorTemplate } from './templates/workspace-generator';\n\nexport type ComponentTemplateSlot = SlotRegistry<ComponentTemplate[]>;\nexport type WorkspaceTemplateSlot = SlotRegistry<WorkspaceTemplate[]>;\n\nexport type TemplateDescriptor = { aspectId: string; name: string; description?: string; hidden?: boolean };\n\nexport type GeneratorConfig = {\n  /**\n   * array of aspects to include in the list of templates.\n   */\n  aspects: string[];\n\n  /**\n   * by default core templates are shown.\n   * use this to hide them unless `--show-all` flag of `bit templates` was used\n   */\n  hideCoreTemplates: boolean;\n};\n\nexport class GeneratorMain {\n  private aspectLoaded = false;\n  constructor(\n    private componentTemplateSlot: ComponentTemplateSlot,\n    private workspaceTemplateSlot: WorkspaceTemplateSlot,\n    private config: GeneratorConfig,\n    private workspace: Workspace,\n    private envs: EnvsMain,\n    private aspectLoader: AspectLoaderMain,\n    private newComponentHelper: NewComponentHelperMain\n  ) {}\n\n  /**\n   * register a new component template.\n   */\n  registerComponentTemplate(templates: ComponentTemplate[]) {\n    this.componentTemplateSlot.register(templates);\n    return this;\n  }\n\n  /**\n   * register a new component template.\n   */\n  registerWorkspaceTemplate(templates: WorkspaceTemplate[]) {\n    this.workspaceTemplateSlot.register(templates);\n    return this;\n  }\n\n  /**\n   * list all component templates registered in the workspace or workspace templates in case the\n   * workspace is not available\n   */\n  async listTemplates(): Promise<TemplateDescriptor[]> {\n    const getTemplateDescriptor = ({\n      id,\n      template,\n    }: {\n      id: string;\n      template: WorkspaceTemplate | ComponentTemplate;\n    }) => {\n      const shouldBeHidden = () => {\n        if (template.hidden) return true;\n        if (this.config.hideCoreTemplates && isCoreAspect(id)) return true;\n        return false;\n      };\n      return {\n        aspectId: id,\n        name: template.name,\n        description: template.description,\n        hidden: shouldBeHidden(),\n      };\n    };\n    return this.isRunningInsideWorkspace()\n      ? this.getAllComponentTemplatesFlattened().map(getTemplateDescriptor)\n      : this.getAllWorkspaceTemplatesFlattened().map(getTemplateDescriptor);\n  }\n\n  /**\n   * @deprecated use this.listTemplates()\n   */\n  async listComponentTemplates(): Promise<TemplateDescriptor[]> {\n    return this.listTemplates();\n  }\n\n  isRunningInsideWorkspace(): boolean {\n    return Boolean(this.workspace);\n  }\n\n  /**\n   * get all component templates registered by a specific aspect ID.\n   */\n  getComponentTemplateByAspect(aspectId: string): ComponentTemplate[] {\n    return this.componentTemplateSlot.get(aspectId) || [];\n  }\n\n  /**\n   * returns a specific component template.\n   */\n  getComponentTemplate(name: string, aspectId?: string): { id: string; template: ComponentTemplate } | undefined {\n    const templates = this.getAllComponentTemplatesFlattened();\n    const found = templates.find(({ id, template }) => {\n      if (aspectId && id !== aspectId) return false;\n      return template.name === name;\n    });\n    return found;\n  }\n\n  /**\n   * in the case the aspect-id is given and this aspect doesn't exist locally, import it to the\n   * global scope and load it from the capsule\n   */\n  async findTemplateInGlobalScope(aspectId: string, name?: string): Promise<WorkspaceTemplate | undefined> {\n    const aspects = await this.aspectLoader.loadAspectsFromGlobalScope([aspectId]);\n    const fullAspectId = aspects[0].id.toString();\n    return this.searchRegisteredWorkspaceTemplate(name, fullAspectId);\n  }\n\n  async findTemplateInOtherWorkspace(workspacePath: string, name: string, aspectId?: string) {\n    if (!aspectId)\n      throw new BitError(\n        `to load a template from a different workspace, please provide the aspect-id using --aspect flag`\n      );\n    const harmony = await loadBit(workspacePath);\n    let workspace: Workspace;\n    try {\n      workspace = harmony.get<Workspace>(WorkspaceAspect.id);\n    } catch (err: any) {\n      throw new Error(`fatal: \"${workspacePath}\" is not a valid Bit workspace, make sure the path is correct`);\n    }\n    const aspectComponentId = await workspace.resolveComponentId(aspectId);\n    await workspace.loadAspects([aspectId], true);\n    const aspectFullId = aspectComponentId.toString();\n    const generator = harmony.get<GeneratorMain>(GeneratorAspect.id);\n    return generator.searchRegisteredWorkspaceTemplate(name, aspectFullId);\n  }\n\n  /**\n   * returns a specific workspace template.\n   */\n  async getWorkspaceTemplate(\n    name: string,\n    aspectId?: string\n  ): Promise<{ workspaceTemplate: WorkspaceTemplate; aspect?: Component }> {\n    const registeredTemplate = await this.searchRegisteredWorkspaceTemplate(name, aspectId);\n    if (registeredTemplate) {\n      return { workspaceTemplate: registeredTemplate };\n    }\n    if (!aspectId) {\n      throw new BitError(`template \"${name}\" was not found, if this is a custom-template, please use --aspect flag`);\n    }\n    const aspects = await this.aspectLoader.loadAspectsFromGlobalScope([aspectId]);\n    const aspect = aspects[0];\n    const fullAspectId = aspect.id.toString();\n    const fromGlobal = await this.searchRegisteredWorkspaceTemplate(name, fullAspectId);\n    if (fromGlobal) {\n      return { workspaceTemplate: fromGlobal, aspect };\n    }\n    throw new BitError(`template \"${name}\" was not found`);\n  }\n\n  async searchRegisteredWorkspaceTemplate(name?: string, aspectId?: string): Promise<WorkspaceTemplate | undefined> {\n    const templates = this.getAllWorkspaceTemplatesFlattened();\n    const found = templates.find(({ id, template }) => {\n      if (aspectId && name) return aspectId === id && name === template.name;\n      if (aspectId) return aspectId === id;\n      if (name) return name === template.name;\n      throw new Error(`searchRegisteredWorkspaceTemplate expects to get \"name\" or \"aspectId\"`);\n    });\n    return found?.template;\n  }\n\n  async generateComponentTemplate(\n    componentNames: string[],\n    templateName: string,\n    options: CreateOptions\n  ): Promise<GenerateResult[]> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    await this.loadAspects();\n    const { namespace, aspect: aspectId } = options;\n    const templateWithId = this.getComponentTemplate(templateName, aspectId);\n    if (!templateWithId) throw new BitError(`template \"${templateName}\" was not found`);\n\n    const componentIds = componentNames.map((componentName) =>\n      this.newComponentHelper.getNewComponentId(componentName, namespace, options.scope)\n    );\n\n    const componentGenerator = new ComponentGenerator(\n      this.workspace,\n      componentIds,\n      options,\n      templateWithId.template,\n      this.envs,\n      this.newComponentHelper,\n      templateWithId.id\n    );\n    return componentGenerator.generate();\n  }\n\n  async generateWorkspaceTemplate(workspaceName: string, templateName: string, options: NewOptions) {\n    if (this.workspace) {\n      throw new BitError('Error: unable to generate a new workspace inside of an existing workspace');\n    }\n    const { aspect: aspectId, loadFrom } = options;\n    let template: WorkspaceTemplate | undefined;\n    let aspectComponent: Component | undefined;\n    if (loadFrom) {\n      template = await this.findTemplateInOtherWorkspace(loadFrom, templateName, aspectId);\n    } else {\n      const { workspaceTemplate, aspect } = await this.getWorkspaceTemplate(templateName, aspectId);\n      template = workspaceTemplate;\n      aspectComponent = aspect;\n    }\n    if (!template) throw new BitError(`template \"${templateName}\" was not found`);\n    const workspaceGenerator = new WorkspaceGenerator(workspaceName, options, template, aspectComponent);\n    const workspacePath = await workspaceGenerator.generate();\n\n    return workspacePath;\n  }\n\n  private getAllComponentTemplatesFlattened(): Array<{ id: string; template: ComponentTemplate }> {\n    const templatesByAspects = this.componentTemplateSlot.toArray();\n    return templatesByAspects.flatMap(([id, componentTemplates]) => {\n      return componentTemplates.map((template) => ({\n        id,\n        template,\n      }));\n    });\n  }\n\n  private getAllWorkspaceTemplatesFlattened(): Array<{ id: string; template: WorkspaceTemplate }> {\n    const templatesByAspects = this.workspaceTemplateSlot.toArray();\n    return templatesByAspects.flatMap(([id, workspaceTemplates]) => {\n      return workspaceTemplates.map((template) => ({\n        id,\n        template,\n      }));\n    });\n  }\n\n  private async loadAspects() {\n    if (this.aspectLoaded) return;\n    await this.workspace.loadAspects(this.config.aspects);\n    this.aspectLoaded = true;\n  }\n\n  static slots = [Slot.withType<ComponentTemplate[]>(), Slot.withType<WorkspaceTemplate[]>()];\n\n  static dependencies = [\n    WorkspaceAspect,\n    CLIAspect,\n    GraphqlAspect,\n    EnvsAspect,\n    AspectLoaderAspect,\n    NewComponentHelperAspect,\n    CommunityAspect,\n  ];\n\n  static runtime = MainRuntime;\n\n  static async provider(\n    [workspace, cli, graphql, envs, aspectLoader, newComponentHelper, community]: [\n      Workspace,\n      CLIMain,\n      GraphqlMain,\n      EnvsMain,\n      AspectLoaderMain,\n      NewComponentHelperMain,\n      CommunityMain\n    ],\n    config: GeneratorConfig,\n    [componentTemplateSlot, workspaceTemplateSlot]: [ComponentTemplateSlot, WorkspaceTemplateSlot]\n  ) {\n    const generator = new GeneratorMain(\n      componentTemplateSlot,\n      workspaceTemplateSlot,\n      config,\n      workspace,\n      envs,\n      aspectLoader,\n      newComponentHelper\n    );\n    const commands = [\n      new CreateCmd(generator, community.getDocsDomain()),\n      new TemplatesCmd(generator),\n      new NewCmd(generator),\n    ];\n    cli.register(...commands);\n    graphql.register(generatorSchema(generator));\n    generator.registerComponentTemplate([componentGeneratorTemplate, workspaceGeneratorTemplate]);\n    return generator;\n  }\n}\n\nGeneratorAspect.addRuntime(GeneratorMain);\n"]}