{"version":3,"sources":["workspace-generator.ts"],"names":["WorkspaceGenerator","constructor","workspaceName","options","template","aspectComponent","workspacePath","path","resolve","generate","fs","existsSync","Error","ensureDir","process","chdir","initGit","skipGit","writeWorkspaceFiles","reloadBitInWorkspaceDir","addComponentsFromRemote","workspace","install","undefined","dedupe","import","copyPeerToRuntimeOnRoot","copyPeerToRuntimeOnComponents","updateExisting","err","remove","gitExecutablePath","params","exitCodeName","GitNotFound","buildUI","uiMain","harmony","get","UIAspect","id","createRuntime","workspaceContext","name","defaultScope","empty","templateFiles","generateFiles","Promise","all","map","templateFile","outputFile","join","relativePath","content","WorkspaceAspect","loggerMain","LoggerAspect","logger","createLogger","GeneratorAspect","componentsToImport","importComponents","length","dependencyResolver","DependencyResolverAspect","componentsToImportResolved","c","ComponentID","fromLegacy","BitId","parse","targetName","componentIds","components","scope","getRemoteComponent","oldAndNewPackageNames","getNewPackageNames","oldAndNewComponentIds","getNewComponentIds","comp","replaceOriginalPackageNameWithNew","compData","find","_legacy","isEqualWithoutVersion","toString","write","track","rootDir","componentName","fullName","mainFile","state","_consumer","deps","getDependencies","currentPackages","Object","keys","workspacePolicyEntries","filter","dep","source","dependencyId","getPackageName","lifecycleType","lifecycle","value","version","entry","includes","addToRootPolicy","bitMap","persistConfig","clearCache","compileComponents","compiler","CompilerAspect","compileOnWorkspace","compsData","pkg","PkgAspect","packageToReplace","scopeToReplace","replace","forEach","newId","resolveNewCompId","currentPackageName","newName","newPackageName","componentToReplace","toStringWithoutVersion","isEqualWithoutScopeAndVersion","changeScope","filesystem","files","file","isBinary","contents","strContent","newContent","currentPackage","currentPkgRegex","RegExp","currentId","currentIdRegex","Buffer","from"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport { isBinaryFile } from 'isbinaryfile';\nimport { loadBit } from '@teambit/bit';\nimport { Harmony } from '@teambit/harmony';\nimport { Component } from '@teambit/component';\nimport execa from 'execa';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport pMapSeries from 'p-map-series';\nimport UIAspect, { UiMain } from '@teambit/ui';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { WorkspaceAspect, Workspace } from '@teambit/workspace';\nimport { PkgAspect, PkgMain } from '@teambit/pkg';\nimport { init } from '@teambit/legacy/dist/api/consumer';\nimport { CompilerAspect, CompilerMain } from '@teambit/compiler';\nimport getGitExecutablePath from '@teambit/legacy/dist/utils/git/git-executable';\nimport GitNotFound from '@teambit/legacy/dist/utils/git/exceptions/git-not-found';\nimport path from 'path';\nimport { DependencyResolverMain, DependencyResolverAspect } from '@teambit/dependency-resolver';\nimport { ComponentID } from '@teambit/component-id';\nimport { WorkspaceTemplate } from './workspace-template';\nimport { NewOptions } from './new.cmd';\nimport { GeneratorAspect } from './generator.aspect';\n\nexport type GenerateResult = { id: ComponentID; dir: string; files: string[]; envId: string };\n\ntype CompToImportResolved = {\n  id: ComponentID;\n  path: string;\n  targetName?: string;\n};\n\nexport class WorkspaceGenerator {\n  private workspacePath: string;\n  private harmony: Harmony;\n  private workspace: Workspace;\n  private logger: Logger;\n  constructor(\n    private workspaceName: string,\n    private options: NewOptions,\n    private template: WorkspaceTemplate,\n    private aspectComponent?: Component\n  ) {\n    this.workspacePath = path.resolve(this.workspaceName);\n  }\n\n  async generate(): Promise<string> {\n    if (fs.existsSync(this.workspacePath)) {\n      throw new Error(`unable to create a workspace at \"${this.workspaceName}\", this path already exist`);\n    }\n    await fs.ensureDir(this.workspacePath);\n    try {\n      process.chdir(this.workspacePath);\n      await this.initGit();\n      await init(this.workspacePath, this.options.skipGit, false, false, false, false, {});\n      await this.writeWorkspaceFiles();\n      await this.reloadBitInWorkspaceDir();\n      await this.addComponentsFromRemote();\n      await this.workspace.install(undefined, {\n        dedupe: true,\n        import: false,\n        copyPeerToRuntimeOnRoot: true,\n        copyPeerToRuntimeOnComponents: false,\n        updateExisting: false,\n      });\n      // await this.buildUI(); // disabled for now. it takes too long\n    } catch (err: any) {\n      await fs.remove(this.workspacePath);\n      throw err;\n    }\n\n    return this.workspacePath;\n  }\n\n  private async initGit() {\n    if (this.options.skipGit) return;\n    const gitExecutablePath = getGitExecutablePath();\n    const params = ['init'];\n    try {\n      await execa(gitExecutablePath, params);\n    } catch (err: any) {\n      if (err.exitCodeName === 'ENOENT') {\n        throw new GitNotFound(gitExecutablePath, err);\n      }\n      throw err;\n    }\n  }\n\n  private async buildUI() {\n    const uiMain = this.harmony.get<UiMain>(UIAspect.id);\n    await uiMain.createRuntime({});\n  }\n\n  /**\n   * writes the generated template files to the default directory set in the workspace config\n   */\n  private async writeWorkspaceFiles(): Promise<void> {\n    const workspaceContext = {\n      name: this.workspaceName,\n      defaultScope: this.options.defaultScope,\n      empty: this.options.empty,\n      aspectComponent: this.aspectComponent,\n    };\n    const templateFiles = await this.template.generateFiles(workspaceContext);\n    await Promise.all(\n      templateFiles.map(async (templateFile) => {\n        await fs.outputFile(path.join(this.workspacePath, templateFile.relativePath), templateFile.content);\n      })\n    );\n  }\n\n  private async reloadBitInWorkspaceDir() {\n    this.harmony = await loadBit(this.workspacePath);\n    this.workspace = this.harmony.get<Workspace>(WorkspaceAspect.id);\n    const loggerMain = this.harmony.get<LoggerMain>(LoggerAspect.id);\n    this.logger = loggerMain.createLogger(GeneratorAspect.id);\n  }\n\n  private async addComponentsFromRemote() {\n    if (this.options.empty) return;\n    const componentsToImport = this.template?.importComponents?.();\n    if (!componentsToImport || !componentsToImport.length) return;\n    const dependencyResolver = this.harmony.get<DependencyResolverMain>(DependencyResolverAspect.id);\n\n    const componentsToImportResolved = await Promise.all(\n      componentsToImport.map(async (c) => ({\n        id: ComponentID.fromLegacy(BitId.parse(c.id, true)),\n        path: c.path,\n        targetName: c.targetName,\n      }))\n    );\n    const componentIds = componentsToImportResolved.map((c) => c.id);\n    // @todo: improve performance by changing `getRemoteComponent` api to accept multiple ids\n    const components = await Promise.all(componentIds.map((id) => this.workspace.scope.getRemoteComponent(id)));\n    const oldAndNewPackageNames = this.getNewPackageNames(components, componentsToImportResolved);\n    const oldAndNewComponentIds = this.getNewComponentIds(components, componentsToImportResolved);\n    await Promise.all(\n      components.map((comp) =>\n        this.replaceOriginalPackageNameWithNew(comp, oldAndNewPackageNames, oldAndNewComponentIds)\n      )\n    );\n    await pMapSeries(components, async (comp) => {\n      const compData = componentsToImportResolved.find((c) => c.id._legacy.isEqualWithoutVersion(comp.id._legacy));\n      if (!compData) throw new Error(`workspace-generator, unable to find ${comp.id.toString()} in the given ids`);\n      await this.workspace.write(compData.path, comp);\n      await this.workspace.track({\n        rootDir: compData.path,\n        componentName: compData.targetName || compData.id.fullName,\n        mainFile: comp.state._consumer.mainFile,\n      });\n      const deps = await dependencyResolver.getDependencies(comp);\n\n      const currentPackages = Object.keys(oldAndNewPackageNames);\n      // only bring auto-resolved dependencies, others should be set in the workspace.jsonc template\n      const workspacePolicyEntries = deps\n        .filter((dep) => dep.source === 'auto')\n        .map((dep) => ({\n          dependencyId: dep.getPackageName?.() || dep.id,\n          lifecycleType: dep.lifecycle === 'dev' ? 'runtime' : dep.lifecycle,\n          value: {\n            version: dep.version,\n          },\n        }))\n        .filter((entry) => !currentPackages.includes(entry.dependencyId)); // remove components that are now imported\n      dependencyResolver.addToRootPolicy(workspacePolicyEntries, { updateExisting: true });\n    });\n    await this.workspace.bitMap.write();\n    await dependencyResolver.persistConfig(this.workspace.path);\n    this.workspace.clearCache();\n    await this.compileComponents();\n  }\n\n  private async compileComponents() {\n    const compiler = this.harmony.get<CompilerMain>(CompilerAspect.id);\n    await compiler.compileOnWorkspace();\n  }\n\n  private getNewPackageNames(\n    components: Component[],\n    compsData: CompToImportResolved[]\n  ): { [oldPackageName: string]: string } {\n    const pkg = this.harmony.get<PkgMain>(PkgAspect.id);\n    const packageToReplace = {};\n    const scopeToReplace = this.workspace.defaultScope.replace('.', '/');\n    components.forEach((comp) => {\n      const newId = this.resolveNewCompId(comp, compsData);\n      const currentPackageName = pkg.getPackageName(comp);\n      const newName = newId.fullName.replace(/\\//g, '.');\n      const newPackageName = `@${scopeToReplace}.${newName}`;\n      packageToReplace[currentPackageName] = newPackageName;\n    });\n    return packageToReplace;\n  }\n\n  private getNewComponentIds(\n    components: Component[],\n    compsData: CompToImportResolved[]\n  ): { [oldComponentId: string]: string } {\n    const componentToReplace = {};\n    components.forEach((comp) => {\n      const newId = this.resolveNewCompId(comp, compsData);\n      componentToReplace[comp.id.toStringWithoutVersion()] = newId.toStringWithoutVersion();\n    });\n    return componentToReplace;\n  }\n\n  private resolveNewCompId(comp: Component, compsData: CompToImportResolved[]): ComponentID {\n    const scopeToReplace = this.workspace.defaultScope;\n    const compData = compsData.find((c) => c.id._legacy.isEqualWithoutScopeAndVersion(comp.id._legacy));\n    if (!compData) {\n      throw new Error(`workspace-generator: unable to find data for \"${comp.id._legacy.toString()}\"`);\n    }\n    return compData.targetName\n      ? ComponentID.fromLegacy(BitId.parse(compData.targetName, false).changeScope(scopeToReplace))\n      : comp.id.changeScope(scopeToReplace);\n  }\n\n  private async replaceOriginalPackageNameWithNew(\n    comp: Component,\n    packageToReplace: Record<string, string>,\n    oldAndNewComponentIds: Record<string, string>\n  ) {\n    await Promise.all(\n      comp.filesystem.files.map(async (file) => {\n        const isBinary = await isBinaryFile(file.contents);\n        if (isBinary) return;\n        const strContent = file.contents.toString();\n        let newContent = strContent;\n        Object.keys(packageToReplace).forEach((currentPackage) => {\n          if (strContent.includes(currentPackage)) {\n            const currentPkgRegex = new RegExp(currentPackage, 'g');\n            newContent = newContent.replace(currentPkgRegex, packageToReplace[currentPackage]);\n          }\n        });\n        Object.keys(oldAndNewComponentIds).forEach((currentId) => {\n          if (strContent.includes(currentId)) {\n            const currentIdRegex = new RegExp(currentId, 'g');\n            newContent = newContent.replace(currentIdRegex, oldAndNewComponentIds[currentId]);\n          }\n        });\n        if (strContent !== newContent) {\n          file.contents = Buffer.from(newContent);\n        }\n      })\n    );\n  }\n}\n"]}