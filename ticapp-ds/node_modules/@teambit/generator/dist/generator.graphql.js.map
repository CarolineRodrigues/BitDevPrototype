{"version":3,"sources":["generator.graphql.ts"],"names":["generatorSchema","generator","typeDefs","resolvers","Mutation","createComponent","req","name","templateName","options","res","generateComponentTemplate","map","component","id","toString","dir","files","Generator","templates","listTemplates","Query"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,SAASA,eAAT,CAAyBC,SAAzB,EAA2D;AAChE,SAAO;AACLC,IAAAA,QAAQ,EAAE,0BAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA/BS;AAgCLC,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,eAAe,EAAE,OACfC,GADe,WAOZ;AAAA,cALH;AACEC,YAAAA,IADF;AAEEC,YAAAA;AAFF,WAKG;AAAA,cAFEC,OAEF;AACH,gBAAMC,GAAG,GAAG,MAAMT,SAAS,CAACU,yBAAV,CAAoC,CAACJ,IAAD,CAApC,EAA4CC,YAA5C,EAA0DC,OAA1D,CAAlB;AACA,iBAAOC,GAAG,CAACE,GAAJ,CAASC,SAAD,KAAgB;AAC7BC,YAAAA,EAAE,EAAED,SAAS,CAACC,EAAV,CAAaC,QAAb,EADyB;AAE7BC,YAAAA,GAAG,EAAEH,SAAS,CAACG,GAFc;AAG7BC,YAAAA,KAAK,EAAEJ,SAAS,CAACI;AAHY,WAAhB,CAAR,CAAP;AAKD;AAfO,OADD;AAkBTC,MAAAA,SAAS,EAAE;AACTC,QAAAA,SAAS,EAAE,YAAY;AACrB,iBAAOlB,SAAS,CAACmB,aAAV,EAAP;AACD;AAHQ,OAlBF;AAuBTC,MAAAA,KAAK,EAAE;AACLpB,QAAAA,SAAS,EAAE,MAAMA;AADZ;AAvBE;AAhCN,GAAP;AA4DD","sourcesContent":["import { Schema } from '@teambit/graphql';\nimport gql from 'graphql-tag';\nimport { GeneratorMain } from './generator.main.runtime';\n\nexport function generatorSchema(generator: GeneratorMain): Schema {\n  return {\n    typeDefs: gql`\n      type GenerateResult {\n        id: String\n        dir: String\n        files: [String]\n      }\n\n      type Mutation {\n        # create Component by template\n        createComponent(\n          name: String!\n          templateName: String!\n          scope: String\n          namespace: String\n          aspect: String\n        ): [GenerateResult]\n      }\n\n      type TemplateDescriptor {\n        aspectId: String!\n        name: String!\n      }\n\n      type Generator {\n        templates: [TemplateDescriptor]\n      }\n\n      type Query {\n        generator: Generator\n      }\n    `,\n    resolvers: {\n      Mutation: {\n        createComponent: async (\n          req: any,\n          {\n            name,\n            templateName,\n            ...options\n          }: { name: string; templateName: string; scope?: string; namespace?: string; aspect?: string }\n        ) => {\n          const res = await generator.generateComponentTemplate([name], templateName, options);\n          return res.map((component) => ({\n            id: component.id.toString(),\n            dir: component.dir,\n            files: component.files,\n          }));\n        },\n      },\n      Generator: {\n        templates: async () => {\n          return generator.listTemplates();\n        },\n      },\n      Query: {\n        generator: () => generator,\n      },\n    },\n  };\n}\n"]}