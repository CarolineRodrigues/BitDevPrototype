{"version":3,"sources":["sign.cmd.ts"],"names":["SignCmd","constructor","signMain","scope","logger","report","components","multiple","alwaysSucceed","push","componentIds","map","c","ComponentID","fromString","results","sign","chalk","bold","status","error","BuildStatus","Failed","Succeed","color","signed","length","id","toString","join","data","code"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKO,MAAMA,OAAN,CAAiC;AAYtCC,EAAAA,WAAW,CAASC,QAAT,EAAqCC,KAArC,EAA+DC,MAA/D,EAA+E;AAAA,SAAtEF,QAAsE,GAAtEA,QAAsE;AAAA,SAA1CC,KAA0C,GAA1CA,KAA0C;AAAA,SAAhBC,MAAgB,GAAhBA,MAAgB;AAAA,kDAXnF,qBAWmF;AAAA,qDAVhF,IAUgF;AAAA,yDAT5E,2CAS4E;AAAA,mDARlF,EAQkF;AAAA,mDAPlF,aAOkF;AAAA,qDANhF,CACR,CAAC,EAAD,EAAK,UAAL,EAAiB,sCAAjB,CADQ,EAER,CAAC,EAAD,EAAK,gBAAL,EAAuB,+CAAvB,CAFQ,EAGR,CAAC,EAAD,EAAK,MAAL,EAAa,6DAAb,CAHQ,CAMgF;AAAE;;AAEhF,QAANC,MAAM,CAAC,CAACC,UAAU,GAAG,EAAd,CAAD,EAAgC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,aAAZ;AAA2BC,IAAAA;AAA3B,GAAhC,EAAgF;AAC1F,UAAMC,YAAY,GAAGJ,UAAU,CAACK,GAAX,CAAgBC,CAAD,IAAOC,yBAAYC,UAAZ,CAAuBF,CAAvB,CAAtB,CAArB;AACA,UAAMG,OAAO,GAAG,MAAM,KAAKb,QAAL,CAAcc,IAAd,CAAmBN,YAAnB,EAAiCH,QAAjC,EAA2CE,IAA3C,CAAtB;;AACA,QAAI,CAACM,OAAL,EAAc;AACZ,aAAOE,iBAAMC,IAAN,CAAW,iCAAX,CAAP;AACD;;AACD,UAAMC,MAAM,GAAGJ,OAAO,CAACK,KAAR,GAAgBC,yBAAYC,MAA5B,GAAqCD,yBAAYE,OAAhE;AACA,UAAMH,KAAK,GAAGL,OAAO,CAACK,KAAR,GAAiB,GAAEL,OAAO,CAACK,KAAM,MAAjC,GAAyC,EAAvD;AACA,UAAMI,KAAK,GAAGJ,KAAK,GAAG,KAAH,GAAW,OAA9B;AACA,UAAMK,MAAM,GAAI,iBAAgBV,OAAO,CAACT,UAAR,CAAmBoB,MAAO,gDAA+CP,MAAO;AACpH,EAAEJ,OAAO,CAACT,UAAR,CAAmBK,GAAnB,CAAwBC,CAAD,IAAOA,CAAC,CAACe,EAAF,CAAKC,QAAL,EAA9B,EAA+CC,IAA/C,CAAoD,IAApD,CAA0D,EADxD;AAEA,WAAO;AACLC,MAAAA,IAAI,EAAEV,KAAK,GAAGH,iBAAMC,IAAN,CAAWM,KAAX,EAAkBC,MAAlB,CADT;AAELM,MAAAA,IAAI,EAAEX,KAAK,IAAI,CAACZ,aAAV,GAA0B,CAA1B,GAA8B;AAF/B,KAAP;AAID;;AA7BqC","sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ComponentID } from '@teambit/component';\nimport { ScopeMain } from '@teambit/scope';\nimport { BuildStatus } from '@teambit/legacy/dist/constants';\nimport { Logger } from '@teambit/logger';\nimport { SignMain } from './sign.main.runtime';\n\ntype SignOptions = { multiple: boolean; alwaysSucceed: boolean; push: boolean };\nexport class SignCmd implements Command {\n  name = 'sign [component...]';\n  private = true;\n  description = 'complete the build process for components';\n  alias = '';\n  group = 'development';\n  options = [\n    ['', 'multiple', 'sign components from multiple scopes'],\n    ['', 'always-succeed', 'exit with code 0 even though the build failed'],\n    ['', 'push', 'export the updated objects to the original scopes once done'],\n  ] as CommandOptions;\n\n  constructor(private signMain: SignMain, private scope: ScopeMain, private logger: Logger) {}\n\n  async report([components = []]: [string[]], { multiple, alwaysSucceed, push }: SignOptions) {\n    const componentIds = components.map((c) => ComponentID.fromString(c));\n    const results = await this.signMain.sign(componentIds, multiple, push);\n    if (!results) {\n      return chalk.bold('no more components left to sign');\n    }\n    const status = results.error ? BuildStatus.Failed : BuildStatus.Succeed;\n    const error = results.error ? `${results.error}\\n\\n` : '';\n    const color = error ? 'red' : 'green';\n    const signed = `the following ${results.components.length} component(s) were signed with build-status \"${status}\"\n${results.components.map((c) => c.id.toString()).join('\\n')}`;\n    return {\n      data: error + chalk.bold[color](signed),\n      code: error && !alwaysSucceed ? 1 : 0,\n    };\n  }\n}\n"]}