import { SlotRegistry } from '@teambit/harmony';
import { CLIMain } from '@teambit/cli';
import { LoggerMain, Logger } from '@teambit/logger';
import { ScopeMain } from '@teambit/scope';
import { BuilderMain } from '@teambit/builder';
import { Component, ComponentID } from '@teambit/component';
export declare type SignResult = {
    components: Component[];
    publishedPackages: string[];
    error: string | null;
};
declare type OnPostSign = (components: Component[]) => Promise<void>;
declare type OnPostSignSlot = SlotRegistry<OnPostSign>;
export declare class SignMain {
    private scope;
    private logger;
    private builder;
    private onPostSignSlot;
    constructor(scope: ScopeMain, logger: Logger, builder: BuilderMain, onPostSignSlot: OnPostSignSlot);
    sign(ids: ComponentID[], isMultiple?: boolean, push?: boolean): Promise<SignResult | null>;
    registerOnPostSign(fn: OnPostSign): void;
    triggerOnPostSign(components: Component[]): Promise<void>;
    private clearScopesCaches;
    private saveExtensionsDataIntoScope;
    private exportExtensionsDataIntoScopes;
    private getComponentIdsToSign;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static slots: ((registerFn: () => string) => SlotRegistry<OnPostSignSlot>)[];
    static provider([cli, scope, loggerMain, builder]: [CLIMain, ScopeMain, LoggerMain, BuilderMain], _: any, [onPostSignSlot]: [OnPostSignSlot]): Promise<SignMain>;
}
export {};
