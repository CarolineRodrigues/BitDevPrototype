{"version":3,"sources":["sign.main.runtime.ts"],"names":["SignMain","constructor","scope","logger","builder","onPostSignSlot","sign","ids","isMultiple","push","import","componentsToSkip","componentsToSign","getComponentIdsToSign","length","console","log","map","c","toString","join","components","getMany","builderDataMap","pipeResults","tagListener","throwOnError","seedersOnly","installOptions","copyPeerToRuntimeOnComponents","installPeersFromEnvs","legacyBuildResults","builderDataMapToLegacyOnTagResults","legacyComponents","state","_consumer","publishedPackages","pipeWithError","find","pipe","hasErrors","buildStatus","BuildStatus","Failed","Succeed","exportExtensionsDataIntoScopes","saveExtensionsDataIntoScope","clearScopesCaches","triggerOnPostSign","error","getErrorMessageFormatted","registerOnPostSign","fn","register","Promise","all","values","catch","err","bitIds","BitIds","fromArray","id","idsGroupedByScope","toGroupByScopeName","scopeRemotes","legacyScope","Object","keys","scopeName","remote","resolve","action","PostSign","name","component","sources","enrichSource","objects","persist","objectListPerScope","getObjectsToEnrichSource","objectList","ObjectList","fromBitObjects","mergeObjectList","setStatusLine","count","pushMany","listIds","loadMany","clearStatusLine","forEach","provider","cli","loggerMain","_","createLogger","SignAspect","signMain","SignCmd","MainRuntime","CLIAspect","ScopeAspect","LoggerAspect","BuilderAspect","Slot","withType","addRuntime"],"mappings":"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","sourcesContent":["import mapSeries from 'p-map-series';\nimport { SlotRegistry, Slot } from '@teambit/harmony';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { LoggerAspect, LoggerMain, Logger } from '@teambit/logger';\nimport { ScopeAspect, ScopeMain } from '@teambit/scope';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { Component, ComponentID } from '@teambit/component';\nimport {\n  getPublishedPackages,\n  updateComponentsByTagResult,\n} from '@teambit/legacy/dist/scope/component-ops/tag-model-component';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport { BuildStatus } from '@teambit/legacy/dist/constants';\nimport { getScopeRemotes } from '@teambit/legacy/dist/scope/scope-remotes';\nimport { PostSign } from '@teambit/legacy/dist/scope/actions';\nimport { ObjectList } from '@teambit/legacy/dist/scope/objects/object-list';\nimport { Remotes } from '@teambit/legacy/dist/remotes';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { SignCmd } from './sign.cmd';\nimport { SignAspect } from './sign.aspect';\n\nexport type SignResult = {\n  components: Component[];\n  publishedPackages: string[];\n  error: string | null;\n};\n\ntype OnPostSign = (components: Component[]) => Promise<void>;\ntype OnPostSignSlot = SlotRegistry<OnPostSign>;\n\nexport class SignMain {\n  constructor(\n    private scope: ScopeMain,\n    private logger: Logger,\n    private builder: BuilderMain,\n    private onPostSignSlot: OnPostSignSlot\n  ) {}\n\n  async sign(ids: ComponentID[], isMultiple?: boolean, push?: boolean): Promise<SignResult | null> {\n    if (isMultiple) await this.scope.import(ids);\n    const { componentsToSkip, componentsToSign } = await this.getComponentIdsToSign(ids);\n    if (ids.length && componentsToSkip.length) {\n      // eslint-disable-next-line no-console\n      console.log(`the following component(s) were already signed successfully:\n${componentsToSkip.map((c) => c.toString()).join('\\n')}\\n`);\n    }\n    if (!componentsToSign.length) {\n      return null;\n    }\n\n    const components = await this.scope.getMany(componentsToSign);\n    const { builderDataMap, pipeResults } = await this.builder.tagListener(\n      components,\n      { throwOnError: false },\n      { seedersOnly: true, installOptions: { copyPeerToRuntimeOnComponents: true, installPeersFromEnvs: true } }\n    );\n    const legacyBuildResults = this.scope.builderDataMapToLegacyOnTagResults(builderDataMap);\n    const legacyComponents = components.map((c) => c.state._consumer);\n    updateComponentsByTagResult(legacyComponents, legacyBuildResults);\n    const publishedPackages = getPublishedPackages(legacyComponents);\n    const pipeWithError = pipeResults.find((pipe) => pipe.hasErrors());\n    const buildStatus = pipeWithError ? BuildStatus.Failed : BuildStatus.Succeed;\n    if (push) {\n      if (isMultiple) {\n        await this.exportExtensionsDataIntoScopes(legacyComponents, buildStatus);\n      } else {\n        await this.saveExtensionsDataIntoScope(legacyComponents, buildStatus);\n      }\n      await this.clearScopesCaches(legacyComponents);\n    }\n    await this.triggerOnPostSign(components);\n\n    return {\n      components,\n      publishedPackages,\n      error: pipeWithError ? pipeWithError.getErrorMessageFormatted() : null,\n    };\n  }\n\n  public registerOnPostSign(fn: OnPostSign) {\n    this.onPostSignSlot.register(fn);\n  }\n\n  async triggerOnPostSign(components: Component[]) {\n    await Promise.all(this.onPostSignSlot.values().map((fn) => fn(components))).catch((err) => {\n      this.logger.error('failed running onPostSignSlot', err);\n    });\n  }\n\n  private async clearScopesCaches(components: ConsumerComponent[]) {\n    const bitIds = BitIds.fromArray(components.map((c) => c.id));\n    const idsGroupedByScope = bitIds.toGroupByScopeName(new BitIds());\n    const scopeRemotes: Remotes = await getScopeRemotes(this.scope.legacyScope);\n    await Promise.all(\n      Object.keys(idsGroupedByScope).map(async (scopeName) => {\n        const remote = await scopeRemotes.resolve(scopeName, this.scope.legacyScope);\n        return remote.action(PostSign.name, { ids: idsGroupedByScope[scopeName].map((id) => id.toString()) });\n      })\n    );\n  }\n\n  private async saveExtensionsDataIntoScope(components: ConsumerComponent[], buildStatus: BuildStatus) {\n    await mapSeries(components, async (component) => {\n      component.buildStatus = buildStatus;\n      await this.scope.legacyScope.sources.enrichSource(component);\n    });\n    await this.scope.legacyScope.objects.persist();\n  }\n\n  private async exportExtensionsDataIntoScopes(components: ConsumerComponent[], buildStatus: BuildStatus) {\n    const scopeRemotes: Remotes = await getScopeRemotes(this.scope.legacyScope);\n    const objectListPerScope: { [scopeName: string]: ObjectList } = {};\n    await mapSeries(components, async (component) => {\n      component.buildStatus = buildStatus;\n      const objects = await this.scope.legacyScope.sources.getObjectsToEnrichSource(component);\n      const scopeName = component.scope as string;\n      const objectList = await ObjectList.fromBitObjects(objects);\n      if (objectListPerScope[scopeName]) {\n        objectListPerScope[scopeName].mergeObjectList(objectList);\n      } else {\n        objectListPerScope[scopeName] = objectList;\n      }\n    });\n    await mapSeries(Object.keys(objectListPerScope), async (scopeName) => {\n      const remote = await scopeRemotes.resolve(scopeName, this.scope.legacyScope);\n      const objectList = objectListPerScope[scopeName];\n      this.logger.setStatusLine(`transferring ${objectList.count()} objects to the remote \"${remote.name}\"...`);\n      await remote.pushMany(objectList, { persist: true });\n    });\n  }\n\n  private async getComponentIdsToSign(ids: ComponentID[]): Promise<{\n    componentsToSkip: ComponentID[];\n    componentsToSign: ComponentID[];\n  }> {\n    if (!ids.length) {\n      ids = await this.scope.listIds();\n    }\n    // using `loadMany` instead of `getMany` to make sure component aspects are loaded.\n    this.logger.setStatusLine(`loading ${ids.length} components and their aspects...`);\n    const components = await this.scope.loadMany(ids);\n    this.logger.clearStatusLine();\n    const componentsToSign: ComponentID[] = [];\n    const componentsToSkip: ComponentID[] = [];\n    components.forEach((component) => {\n      if (component.state._consumer.buildStatus === BuildStatus.Succeed) {\n        componentsToSkip.push(component.id);\n      } else {\n        componentsToSign.push(component.id);\n      }\n    });\n    return { componentsToSkip, componentsToSign };\n  }\n\n  static runtime = MainRuntime;\n\n  static dependencies = [CLIAspect, ScopeAspect, LoggerAspect, BuilderAspect];\n\n  static slots = [Slot.withType<OnPostSignSlot>()];\n\n  static async provider(\n    [cli, scope, loggerMain, builder]: [CLIMain, ScopeMain, LoggerMain, BuilderMain],\n    _,\n    [onPostSignSlot]: [OnPostSignSlot]\n  ) {\n    const logger = loggerMain.createLogger(SignAspect.id);\n    const signMain = new SignMain(scope, logger, builder, onPostSignSlot);\n    cli.register(new SignCmd(signMain, scope, logger));\n    return signMain;\n  }\n}\n\nSignAspect.addRuntime(SignMain);\n"]}