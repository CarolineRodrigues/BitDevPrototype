{"version":3,"sources":["ui.ui.runtime.tsx"],"names":["UiUI","constructor","router","uiRootSlot","hudSlot","renderPluginsSlot","element","register","render","rootExtension","rootFactory","getRoot","Error","uiRoot","routes","renderRoutes","hudItems","values","lifecyclePlugins","getLifecyclePlugins","reactSsr","ReactSSR","renderBrowser","renderSsr","ssrContent","fullHtml","renderServer","registerContext","context","reactContext","registerRoot","registerRenderHooks","plugins","toArray","unshift","ReactRouterAspect","id","renderPlugin","get","provider","GraphqlUi","config","renderLifecycleSlot","uiUi","renderPlugins","Slot","withType","GraphqlAspect","UIRuntime","UIAspect","addRuntime"],"mappings":"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","sourcesContent":["import type { GraphqlUI } from '@teambit/graphql';\nimport { GraphqlAspect } from '@teambit/graphql';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport type { ReactRouterUI } from '@teambit/react-router';\nimport { ReactRouterAspect } from '@teambit/react-router';\n\nimport React, { ReactNode, ComponentType } from 'react';\n\nimport { UIRootFactory } from './ui-root.ui';\nimport { UIAspect, UIRuntime } from './ui.aspect';\nimport { ClientContext } from './ui/client-context';\nimport type { SsrContent } from './react-ssr/ssr-content';\nimport { ContextProps, RenderPlugins } from './react-ssr/render-lifecycle';\nimport { ReactSSR } from './react-ssr/react-ssr';\n\ntype HudSlot = SlotRegistry<ReactNode>;\ntype RenderPluginsSlot = SlotRegistry<RenderPlugins>;\ntype UIRootRegistry = SlotRegistry<UIRootFactory>;\n\n/**\n * extension\n */\nexport class UiUI {\n  constructor(\n    /**\n     * react-router extension.\n     */\n    private router: ReactRouterUI,\n    /**\n     * ui root registry.\n     */\n    private uiRootSlot: UIRootRegistry,\n    /** slot for overlay ui elements */\n    private hudSlot: HudSlot,\n    /** hooks into the ssr render process */\n    private renderPluginsSlot: RenderPluginsSlot\n  ) {}\n\n  /** render and rehydrate client-side */\n  async render(rootExtension: string): Promise<void> {\n    const rootFactory = this.getRoot(rootExtension);\n    if (!rootFactory) throw new Error(`root: ${rootExtension} was not found`);\n    const uiRoot = rootFactory();\n    const routes = this.router.renderRoutes(uiRoot.routes);\n    const hudItems = this.hudSlot.values();\n    const lifecyclePlugins = this.getLifecyclePlugins();\n\n    const reactSsr = new ReactSSR(lifecyclePlugins);\n    await reactSsr.renderBrowser(\n      <ClientContext>\n        {hudItems}\n        {routes}\n      </ClientContext>\n    );\n  }\n\n  /** render dehydrated server-side */\n  async renderSsr(rootExtension: string, ssrContent: SsrContent): Promise<string> {\n    const rootFactory = this.getRoot(rootExtension);\n    if (!rootFactory) throw new Error(`root: ${rootExtension} was not found`);\n\n    const uiRoot = rootFactory();\n    const routes = this.router.renderRoutes(uiRoot.routes);\n    const hudItems = this.hudSlot.values();\n    const lifecyclePlugins = this.getLifecyclePlugins();\n\n    const reactSsr = new ReactSSR(lifecyclePlugins);\n    const fullHtml = await reactSsr.renderServer(\n      <ClientContext>\n        {hudItems}\n        {routes}\n      </ClientContext>,\n      ssrContent\n    );\n\n    return fullHtml;\n  }\n\n  /** adds elements to the Heads Up Display */\n  registerHudItem = (element: ReactNode) => {\n    this.hudSlot.register(element);\n  };\n\n  /**\n   * adds global context at the ui root\n   * @deprecated replace with `.registerRenderHooks({ reactContext })`.\n   */\n  registerContext<T>(context: ComponentType<ContextProps<T>>) {\n    this.renderPluginsSlot.register({\n      reactContext: context,\n    });\n  }\n\n  registerRoot(uiRoot: UIRootFactory) {\n    return this.uiRootSlot.register(uiRoot);\n  }\n\n  registerRenderHooks<T, Y>(plugins: RenderPlugins<T, Y>) {\n    return this.renderPluginsSlot.register(plugins);\n  }\n\n  private getLifecyclePlugins() {\n    const lifecyclePlugins = this.renderPluginsSlot.toArray();\n    // react-router should register its plugin, when we can reverse it's dependency to depend on Ui\n    lifecyclePlugins.unshift([ReactRouterAspect.id, this.router.renderPlugin]);\n\n    return lifecyclePlugins;\n  }\n\n  private getRoot(rootExtension: string) {\n    return this.uiRootSlot.get(rootExtension);\n  }\n\n  static slots = [Slot.withType<UIRootFactory>(), Slot.withType<ReactNode>(), Slot.withType<RenderPlugins>()];\n\n  static dependencies = [GraphqlAspect, ReactRouterAspect];\n\n  static runtime = UIRuntime;\n\n  static async provider(\n    [GraphqlUi, router]: [GraphqlUI, ReactRouterUI],\n    config,\n    [uiRootSlot, hudSlot, renderLifecycleSlot]: [UIRootRegistry, HudSlot, RenderPluginsSlot]\n  ) {\n    const uiUi = new UiUI(router, uiRootSlot, hudSlot, renderLifecycleSlot);\n\n    uiUi.registerRenderHooks(GraphqlUi.renderPlugins);\n\n    return uiUi;\n  }\n}\n\nUIAspect.addRuntime(UiUI);\n"]}