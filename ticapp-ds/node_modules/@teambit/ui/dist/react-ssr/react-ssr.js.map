{"version":3,"sources":["react-ssr.tsx"],"names":["ReactSSR","constructor","lifecycleHooks","renderBrowser","children","deserializedState","deserialize","renderContexts","triggerBrowserInit","reactContexts","getReactContexts","app","triggerBeforeHydrateHook","mountPoint","document","getElementById","mountPointId","ReactDOM","render","triggerHydrateHook","renderServer","assets","browser","server","triggerServerInit","triggerBeforeRender","renderedApp","ReactDOMServer","renderToString","realtimeAssets","serialize","totalAssets","html","renderedHtml","renderToStaticMarkup","fullHtml","Html","fillContent","initPromises","map","hooks","idx","state","browserInit","Promise","all","promises","serverInit","ctx","nextCtx","onBeforeHydrate","renderCtx","onHydrate","onBeforeRender","props","reactContext","undefined","rawAssets","popAssets","deserialized","key","raw","get","e","console","error","json","result"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { merge } from 'webpack-merge';\nimport compact from 'lodash.compact';\nimport ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\n\nimport { Html, MountPoint, mountPointId, ssrCleanup, Assets } from '@teambit/ui-foundation.ui.rendering.html';\nimport { Composer, Wrapper } from '@teambit/base-ui.utils.composer';\n\nimport type { RenderPlugins } from './render-lifecycle';\nimport type { SsrContent } from './ssr-content';\nimport type { RequestServer } from './request-server';\nimport type { BrowserData } from './request-browser';\n\ntype RenderPluginsWithId = [key: string, hooks: RenderPlugins];\n\nexport class ReactSSR {\n  constructor(\n    // create array once to keep consistent indexes\n    private lifecycleHooks: RenderPluginsWithId[]\n  ) {}\n\n  /** render and rehydrate client-side */\n  async renderBrowser(children: ReactNode) {\n    // (*) load state from the dom\n    const deserializedState = await this.deserialize();\n\n    // (1) init setup client plugins\n    let renderContexts = await this.triggerBrowserInit(deserializedState);\n\n    // (2) make react dom\n    const reactContexts = this.getReactContexts(renderContexts);\n    const app = <Composer components={reactContexts}>{children}</Composer>;\n\n    renderContexts = await this.triggerBeforeHydrateHook(renderContexts, app);\n\n    // (3) render / rehydrate\n    const mountPoint = document.getElementById(mountPointId);\n    // .render() already runs `.hydrate()` behind the scenes.\n    // in the future, we may want to replace it with .hydrate()\n    ReactDOM.render(app, mountPoint);\n\n    await this.triggerHydrateHook(renderContexts, mountPoint);\n\n    // (3.1) remove ssr only styles\n    ssrCleanup();\n  }\n\n  /** render dehydrated server-side */\n  async renderServer(children: ReactNode, { assets, browser, server }: SsrContent = {}): Promise<string> {\n    // (1) init\n    let renderContexts = await this.triggerServerInit(browser, server);\n\n    // (2) make React dom\n    const reactContexts = this.getReactContexts(renderContexts);\n    const app = (\n      <MountPoint>\n        <Composer components={reactContexts}>{children}</Composer>\n      </MountPoint>\n    );\n\n    renderContexts = await this.triggerBeforeRender(renderContexts, app);\n\n    // (3) render (to string)\n    const renderedApp = ReactDOMServer.renderToString(app);\n\n    // (*) serialize state\n    const realtimeAssets = await this.serialize(renderContexts, app);\n    // @ts-ignore // TODO upgrade 'webpack-merge'\n    const totalAssets = merge(assets, realtimeAssets) as Assets;\n\n    // (4) render html-template (to string)\n    const html = <Html assets={totalAssets} withDevTools fullHeight ssr />;\n    const renderedHtml = `<!DOCTYPE html>${ReactDOMServer.renderToStaticMarkup(html)}`;\n    const fullHtml = Html.fillContent(renderedHtml, renderedApp);\n\n    // (5) serve\n    return fullHtml;\n  }\n\n  private triggerBrowserInit(deserializedState: any[]) {\n    const { lifecycleHooks } = this;\n\n    const initPromises = lifecycleHooks.map(([, hooks], idx) => {\n      const state = deserializedState[idx];\n      return hooks.browserInit?.(state);\n    });\n    return Promise.all(initPromises);\n  }\n\n  private triggerServerInit(browser?: BrowserData, server?: RequestServer) {\n    const { lifecycleHooks } = this;\n    const promises = lifecycleHooks.map(([, hooks]) => hooks.serverInit?.({ browser, server }));\n    return Promise.all(promises);\n  }\n\n  private triggerBeforeHydrateHook(renderContexts: any[], app: JSX.Element) {\n    const { lifecycleHooks } = this;\n\n    const promises = lifecycleHooks.map(async ([, hooks], idx) => {\n      const ctx = renderContexts[idx];\n      const nextCtx = await hooks.onBeforeHydrate?.(ctx, app);\n      return nextCtx || ctx;\n    });\n\n    return Promise.all(promises);\n  }\n\n  private async triggerHydrateHook(renderContexts: any[], mountPoint: HTMLElement | null) {\n    const { lifecycleHooks } = this;\n\n    const promises = lifecycleHooks.map(([, hooks], idx) => {\n      const renderCtx = renderContexts[idx];\n      return hooks.onHydrate?.(renderCtx, mountPoint);\n    });\n\n    await Promise.all(promises);\n  }\n\n  private async triggerBeforeRender(renderContexts: any[], app: JSX.Element) {\n    const { lifecycleHooks } = this;\n\n    const promises = lifecycleHooks.map(async ([, hooks], idx) => {\n      const ctx = renderContexts[idx];\n      const nextCtx = await hooks.onBeforeRender?.(ctx, app);\n      return nextCtx || ctx;\n    });\n\n    await Promise.all(promises);\n\n    return renderContexts;\n  }\n\n  private getReactContexts(renderContexts: any[]): Wrapper[] {\n    const { lifecycleHooks } = this;\n\n    return compact(\n      lifecycleHooks.map(([, hooks], idx) => {\n        const renderCtx = renderContexts[idx];\n        const props = { renderCtx };\n        return hooks.reactContext ? [hooks.reactContext, props] : undefined;\n      })\n    );\n  }\n\n  private async deserialize() {\n    const { lifecycleHooks } = this;\n    const rawAssets = Html.popAssets();\n\n    const deserialized = await Promise.all(\n      lifecycleHooks.map(async ([key, hooks]) => {\n        try {\n          const raw = rawAssets.get(key);\n          return hooks.deserialize?.(raw);\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.error(`failed deserializing server state for aspect ${key}`, e);\n          return undefined;\n        }\n      })\n    );\n\n    return deserialized;\n  }\n\n  private async serialize(renderContexts: any[], app: ReactNode): Promise<Assets> {\n    const { lifecycleHooks } = this;\n    const json = {};\n\n    const promises = lifecycleHooks.map(async ([key, hooks], idx) => {\n      const renderCtx = renderContexts[idx];\n      const result = await hooks.serialize?.(renderCtx, app);\n\n      if (!result) return;\n      if (result.json) json[key] = result.json;\n    });\n\n    await Promise.all(promises);\n\n    // more assets will be available in the future\n    return { json };\n  }\n}\n"]}