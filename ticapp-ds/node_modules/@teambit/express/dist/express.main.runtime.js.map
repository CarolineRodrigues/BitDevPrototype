{"version":3,"sources":["express.main.runtime.ts"],"names":["ExpressMain","constructor","config","moduleSlot","logger","middlewareSlot","listen","port","serverPort","app","createApp","register","routes","registerMiddleware","middlewares","createRootRoutes","namespace","ExpressAspect","id","method","path","req","res","send","expressApp","options","internalRoutes","createRoutes","allRoutes","use","next","loggerIgnorePath","includes","url","debug","headers","disableBodyParser","bodyParser","toArray","flatMap","middlewareManifest","middleware","forEach","routeInfo","catchErrorsMiddlewares","routesSlots","routeEntries","map","route","verbValidation","verb","Verb","READ","status","jsonp","message","error","json","limit","raw","type","provider","loggerFactory","routeSlot","createLogger","MainRuntime","Slot","withType","LoggerAspect","addRuntime"],"mappings":"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","sourcesContent":["import { MainRuntime } from '@teambit/cli';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport express, { Express } from 'express';\nimport { concat, flatten, lowerCase } from 'lodash';\nimport bodyParser from 'body-parser';\nimport { ExpressAspect } from './express.aspect';\nimport { catchErrors } from './middlewares';\nimport { Middleware, Request, Response, Route, Verb } from './types';\nimport { MiddlewareManifest } from './middleware-manifest';\n\nexport type ExpressConfig = {\n  port: number;\n  namespace: string;\n  loggerIgnorePath: string[];\n};\n\nexport type MiddlewareSlot = SlotRegistry<MiddlewareManifest[]>;\n\nexport type RouteSlot = SlotRegistry<Route[]>;\n\nexport class ExpressMain {\n  static runtime = MainRuntime;\n\n  constructor(\n    /**\n     * extension config\n     */\n    readonly config: ExpressConfig,\n\n    /**\n     * slot for registering graphql modules\n     */\n    private moduleSlot: RouteSlot,\n\n    /**\n     * logger extension.\n     */\n    readonly logger: Logger,\n\n    readonly middlewareSlot: MiddlewareSlot\n  ) {}\n\n  /**\n   * start a express server.\n   */\n  async listen(port?: number) {\n    const serverPort = port || this.config.port;\n    const app = this.createApp();\n    app.listen(serverPort);\n  }\n\n  /**\n   * register a new express routes.\n   * route will be added as `/api/${route}`\n   */\n  register(routes: Route[]) {\n    this.moduleSlot.register(routes);\n    return this;\n  }\n\n  /**\n   * register a new middleware into express.\n   */\n  registerMiddleware(middlewares: MiddlewareManifest[]) {\n    this.middlewareSlot.register(middlewares);\n    return this;\n  }\n\n  private createRootRoutes() {\n    // TODO: @guy refactor health to service aspect.\n    return [\n      {\n        namespace: ExpressAspect.id,\n        method: 'get',\n        path: '/_health',\n        middlewares: [async (req: Request, res: Response) => res.send('ok')],\n      },\n    ];\n  }\n\n  createApp(expressApp?: Express, options?: { disableBodyParser: true }): Express {\n    const internalRoutes = this.createRootRoutes();\n    const routes = this.createRoutes();\n    const allRoutes = concat(routes, internalRoutes);\n    const app = expressApp || express();\n    app.use((req, res, next) => {\n      if (this.config.loggerIgnorePath.includes(req.url)) return next();\n      this.logger.debug(`express got a request to a URL: ${req.url}', headers:`, req.headers);\n      return next();\n    });\n    if (!options?.disableBodyParser) this.bodyParser(app);\n\n    this.middlewareSlot\n      .toArray()\n      .flatMap(([, middlewares]) =>\n        middlewares.flatMap((middlewareManifest) => app.use(middlewareManifest.middleware))\n      );\n    allRoutes.forEach((routeInfo) => {\n      const { method, path, middlewares } = routeInfo;\n      // TODO: @guy make sure to support single middleware here.\n      app[method](`/${this.config.namespace}${path}`, this.catchErrorsMiddlewares(middlewares));\n    });\n\n    return app;\n  }\n\n  private createRoutes() {\n    const routesSlots = this.moduleSlot.toArray();\n    const routeEntries = routesSlots.map(([, routes]) => {\n      return routes.map((route) => {\n        const middlewares = flatten([this.verbValidation(route), route.middlewares]);\n        return {\n          method: lowerCase(route.method),\n          path: route.route,\n          middlewares,\n        };\n      });\n    });\n\n    return flatten(routeEntries);\n  }\n\n  private verbValidation(route: Route): Middleware {\n    return async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n      if (!route.verb) return next();\n      const verb = req.headers['x-verb'] || Verb.READ;\n      if (verb !== route.verb) {\n        res.status(403);\n        return res.jsonp({ message: 'You are not authorized', error: 'forbidden' });\n      }\n      return next();\n    };\n  }\n\n  private catchErrorsMiddlewares(middlewares: Middleware[]) {\n    return middlewares.map((middleware) => catchErrors(middleware));\n  }\n\n  private bodyParser(app: Express) {\n    app.use(bodyParser.json({ limit: '5000mb' }));\n    app.use(bodyParser.raw({ type: 'application/octet-stream', limit: '5000mb' }));\n  }\n\n  static slots = [Slot.withType<Route[]>(), Slot.withType<MiddlewareManifest[]>()];\n  static dependencies = [LoggerAspect];\n\n  static defaultConfig = {\n    port: 4001,\n    namespace: 'api',\n    loggerIgnorePath: ['/api/_health'],\n  };\n\n  static async provider(\n    [loggerFactory]: [LoggerMain],\n    config: ExpressConfig,\n    [routeSlot, middlewareSlot]: [RouteSlot, MiddlewareSlot]\n  ) {\n    const logger = loggerFactory.createLogger(ExpressAspect.id);\n    return new ExpressMain(config, routeSlot, logger, middlewareSlot);\n  }\n}\n\nExpressAspect.addRuntime(ExpressMain);\n"]}