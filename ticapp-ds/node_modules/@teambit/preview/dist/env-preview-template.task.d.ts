import { BuildContext, BuiltTaskResult, BuildTask, TaskLocation, ComponentResult } from '@teambit/builder';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { Capsule } from '@teambit/isolator';
import { BundlerContext, BundlerEntryMap, BundlerResult } from '@teambit/bundler';
import type { EnvDefinition, EnvsMain } from '@teambit/envs';
import type { PreviewMain } from './preview.main.runtime';
export declare type ModuleExpose = {
    name: string;
    path: string;
    include?: string[];
};
export declare const GENERATE_ENV_TEMPLATE_TASK_NAME = "GenerateEnvTemplate";
export declare const PREVIEW_ROOT_CHUNK_NAME = "previewRoot";
export declare const PEERS_CHUNK_NAME = "peers";
export declare class EnvPreviewTemplateTask implements BuildTask {
    private preview;
    private envs;
    private aspectLoader;
    aspectId: string;
    name: string;
    location: TaskLocation;
    constructor(preview: PreviewMain, envs: EnvsMain, aspectLoader: AspectLoaderMain);
    execute(context: BuildContext): Promise<BuiltTaskResult>;
    private runBundlerForGroups;
    private shouldUseDefaultBundler;
    private getEnvTargetFromComponent;
    private generateHtmlConfig;
    private generateHtmlConfigForPreviewDef;
    getEntries(previewModules: ModuleExpose[], capsule: Capsule, previewRoot: string, isSplitComponentBundle?: boolean, peers?: string[]): BundlerEntryMap;
    computeResults(context: BundlerContext, results: BundlerResult[]): Promise<{
        componentsResults: ComponentResult[];
        artifacts: {
            name: string;
            globPatterns: string[];
            rootDir: string;
        }[];
    }>;
    getPreviewModules(envDef: EnvDefinition): Promise<ModuleExpose[]>;
    private computeOutputPath;
}
export declare function getArtifactDirectory(): string;
export declare function getArtifactDef(): {
    name: string;
    globPatterns: string[];
    rootDir: string;
}[];
