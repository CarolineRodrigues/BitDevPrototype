{"version":3,"sources":["artifact-file-middleware.ts"],"names":["getArtifactFileMiddleware","logger","getCacheControlFunc","req","res","artifact","isLegacyPath","file","getEnvTemplateFile","params","previewName","filePath","getPreviewFile","status","send","contents","str","cwd","path","contentType","mime","getType","set","cacheControl","e","error","prevName","finalFilePath","matchedFile","getFileEndsWith","parts","filter","x","join"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAeO,SAASA,yBAAT,CAAmCC,MAAnC,EAAmDC,mBAAnD,EAA8F;AACnG,SAAO,OAAOC,GAAP,EAAuCC,GAAvC,KAAyD;AAC9D,QAAI;AACF;AACA,YAAMC,QAAyB,GAAGF,GAAG,CAACE,QAAtC,CAFE,CAGF;;AACA,YAAMC,YAAY,GAAGH,GAAG,CAACG,YAAzB;AACA,UAAIC,IAAJ;;AACA,UAAI,CAACD,YAAL,EAAmB;AACjBC,QAAAA,IAAI,GAAGC,kBAAkB,CAACH,QAAD,EAAWF,GAAG,CAACM,MAAJ,CAAWC,WAAtB,EAAmCP,GAAG,CAACM,MAAJ,CAAWE,QAA9C,CAAzB;AACD,OAFD,MAEO;AACLJ,QAAAA,IAAI,GAAGK,cAAc,CAACP,QAAD,EAAWF,GAAG,CAACM,MAAJ,CAAWC,WAAtB,EAAmCP,GAAG,CAACM,MAAJ,CAAWE,QAA9C,CAArB;AACD;;AACD,UAAI,CAACJ,IAAL,EAAW,OAAOH,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAAP;AAEX,YAAMC,QAAQ,GAAGR,IAAI,CAACQ,QAAtB;AACA,YAAMC,GAAG,GAAI,GAAET,IAAI,CAACU,GAAI,IAAGV,IAAI,CAACW,IAAK,EAArC;;AACA,YAAMC,WAAW,GAAGC,gBAAKC,OAAL,CAAaL,GAAb,CAApB;;AACA,UAAIG,WAAJ,EAAiBf,GAAG,CAACkB,GAAJ,CAAQ,cAAR,EAAwBH,WAAxB;;AACjB,UAAIjB,mBAAJ,EAAyB;AACvB,cAAMqB,YAAY,GAAGrB,mBAAmB,CAACc,GAAD,EAAMD,QAAN,EAAgBI,WAAhB,CAAxC;;AACA,YAAII,YAAJ,EAAkB;AAChBnB,UAAAA,GAAG,CAACkB,GAAJ,CAAQ,eAAR,EAAyBC,YAAzB;AACD;AACF;;AACD,aAAOnB,GAAG,CAACU,IAAJ,CAASC,QAAT,CAAP;AACD,KAxBD,CAwBE,OAAOS,CAAP,EAAe;AACfvB,MAAAA,MAAM,CAACwB,KAAP,CAAa,wBAAb,EAAuCD,CAAvC;AACA,aAAOpB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,yCAArB,CAAP;AACD;AACF,GA7BD;AA8BD;;AAED,SAASN,kBAAT,CAA4BH,QAA5B,EAAuDK,WAAvD,EAA6EC,QAA7E,EAAgG;AAC9F,QAAMe,QAAQ,GAAGhB,WAAW,IAAI,UAAhC;AACA,QAAMiB,aAAa,GAAGhB,QAAQ,IAAK,GAAEe,QAAS,OAA9C;AACA,QAAME,WAAW,GAAGvB,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEwB,eAAV,CAA0BF,aAA1B,CAApB;AACA,SAAOC,WAAP;AACD;;AAED,SAAShB,cAAT,CAAwBP,QAAxB,EAAmDK,WAAnD,EAAyEC,QAAzE,EAA4F;AAC1F,MAAIgB,aAAa,GAAG,YAApB;;AACA,MAAIjB,WAAW,IAAIC,QAAnB,EAA6B;AAC3B,UAAMmB,KAAK,GAAG,CAACpB,WAAD,EAAcC,QAAd,EAAwBoB,MAAxB,CAAgCC,CAAD,IAAOA,CAAtC,CAAd;AACAL,IAAAA,aAAa,GAAGG,KAAK,CAACG,IAAN,CAAW,GAAX,CAAhB;AACD;;AACD,QAAML,WAAW,GAAGvB,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEwB,eAAV,CAA0BF,aAA1B,CAApB;AACA,SAAOC,WAAP;AACD","sourcesContent":["import mime from 'mime';\nimport type { Request, Response } from '@teambit/express';\nimport { noPreview, serverError } from '@teambit/ui-foundation.ui.pages.static-error';\nimport type { Logger } from '@teambit/logger';\nimport type { PreviewArtifact } from './preview-artifact';\n\nexport type PreviewUrlParams = {\n  /**\n   * preview name like overview or composition\n   */\n  previewName?: string;\n  /** `/preview/:filePath(*)` */\n  filePath?: string;\n};\n\nexport type GetCacheControlFunc = (filePath: string, contents: string, mimeType?: string | null) => string | undefined;\n\nexport function getArtifactFileMiddleware(logger: Logger, getCacheControlFunc?: GetCacheControlFunc) {\n  return async (req: Request<PreviewUrlParams>, res: Response) => {\n    try {\n      // @ts-ignore\n      const artifact: PreviewArtifact = req.artifact;\n      // @ts-ignore\n      const isLegacyPath = req.isLegacyPath;\n      let file;\n      if (!isLegacyPath) {\n        file = getEnvTemplateFile(artifact, req.params.previewName, req.params.filePath);\n      } else {\n        file = getPreviewFile(artifact, req.params.previewName, req.params.filePath);\n      }\n      if (!file) return res.status(404).send(noPreview());\n\n      const contents = file.contents;\n      const str = `${file.cwd}/${file.path}`;\n      const contentType = mime.getType(str);\n      if (contentType) res.set('Content-Type', contentType);\n      if (getCacheControlFunc) {\n        const cacheControl = getCacheControlFunc(str, contents, contentType);\n        if (cacheControl) {\n          res.set('Cache-control', cacheControl);\n        }\n      }\n      return res.send(contents);\n    } catch (e: any) {\n      logger.error('failed getting preview', e);\n      return res.status(500).send(serverError());\n    }\n  };\n}\n\nfunction getEnvTemplateFile(artifact: PreviewArtifact, previewName?: string, filePath?: string) {\n  const prevName = previewName || 'overview';\n  const finalFilePath = filePath || `${prevName}.html`;\n  const matchedFile = artifact?.getFileEndsWith(finalFilePath);\n  return matchedFile;\n}\n\nfunction getPreviewFile(artifact: PreviewArtifact, previewName?: string, filePath?: string) {\n  let finalFilePath = 'index.html';\n  if (previewName || filePath) {\n    const parts = [previewName, filePath].filter((x) => x);\n    finalFilePath = parts.join('/');\n  }\n  const matchedFile = artifact?.getFileEndsWith(finalFilePath);\n  return matchedFile;\n}\n"]}