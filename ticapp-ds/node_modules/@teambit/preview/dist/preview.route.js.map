{"version":3,"sources":["preview.route.ts"],"names":["PreviewRoute","constructor","preview","logger","req","res","next","component","status","send","isLegacyPath","isBundledWithEnv","artifact","getEnvTemplateFromComponentEnv","getPreview","e","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,MAAMA,YAAN,CAAoC;AACzCC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,OAJC,EAKDC,MALC,EAMT;AAAA,SAFQD,OAER,GAFQA,OAER;AAAA,SADQC,MACR,GADQA,MACR;AAAA,mDAEO,qCAFP;AAAA,oDAGO,KAHP;AAAA,yDAKY,CACZ,OAAOC,GAAP,EAAuCC,GAAvC,EAAsDC,IAAtD,KAA6E;AAC3E,UAAI;AACF;AACA,cAAMC,SAAS,GAAGH,GAAG,CAACG,SAAtB;AACA,YAAI,CAACA,SAAL,EAAgB,OAAOF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAAP;AAChB,cAAMC,YAAY,GAAG,MAAM,KAAKR,OAAL,CAAaS,gBAAb,CAA8BJ,SAA9B,CAA3B;AAEA,YAAIK,QAAJ,CANE,CAOF;;AACA,YAAI;AACF;AACA;AACA,cAAI,CAACF,YAAL,EAAmB;AACjBE,YAAAA,QAAQ,GAAG,MAAM,KAAKV,OAAL,CAAaW,8BAAb,CAA4CN,SAA5C,CAAjB;AACD,WAFD,MAEO;AACL;AACAK,YAAAA,QAAQ,GAAG,MAAM,KAAKV,OAAL,CAAaY,UAAb,CAAwBP,SAAxB,CAAjB;AACD;AACF,SATD,CASE,OAAOQ,CAAP,EAAe;AACf,eAAKZ,MAAL,CAAYa,KAAZ,CAAmB,yDAAnB,EAA6ED,CAA7E;AACA,iBAAOV,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAAP;AACD,SApBC,CAqBF;;;AACAL,QAAAA,GAAG,CAACQ,QAAJ,GAAeA,QAAf,CAtBE,CAuBF;;AACAR,QAAAA,GAAG,CAACM,YAAJ,GAAmBA,YAAnB;AACA,eAAOJ,IAAI,EAAX;AACD,OA1BD,CA0BE,OAAOS,CAAP,EAAe;AACf,aAAKZ,MAAL,CAAYa,KAAZ,CAAkB,wBAAlB,EAA4CD,CAA5C;AACA,eAAOV,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,yCAArB,CAAP;AACD;AACF,KAhCW,EAiCZ,yDAA0B,KAAKN,MAA/B,CAjCY,CALZ;AAAE;;AAPqC","sourcesContent":["import type { NextFunction, Request, Response, Route } from '@teambit/express';\nimport type { Component } from '@teambit/component';\nimport { noPreview, serverError } from '@teambit/ui-foundation.ui.pages.static-error';\nimport type { Logger } from '@teambit/logger';\n\nimport { PreviewMain } from './preview.main.runtime';\nimport { PreviewArtifact } from './preview-artifact';\nimport { getArtifactFileMiddleware } from './artifact-file-middleware';\nimport type { PreviewUrlParams } from './artifact-file-middleware';\n\nexport class PreviewRoute implements Route {\n  constructor(\n    /**\n     * preview extension.\n     */\n    private preview: PreviewMain,\n    private logger: Logger\n  ) {}\n\n  route = `/preview/:previewName?/:filePath(*)`;\n  method = 'get';\n\n  middlewares = [\n    async (req: Request<PreviewUrlParams>, res: Response, next: NextFunction) => {\n      try {\n        // @ts-ignore TODO: @guy please fix.\n        const component = req.component as Component | undefined;\n        if (!component) return res.status(404).send(noPreview());\n        const isLegacyPath = await this.preview.isBundledWithEnv(component);\n\n        let artifact: PreviewArtifact | undefined;\n        // TODO - prevent error `getVinylsAndImportIfMissing is not a function` #4680\n        try {\n          // Taking the env template (in this case we will take the component only bundle throw component-preview route)\n          // We use this route for the env template for backward compatibility - new scopes which contain components tagged with old versions of bit\n          if (!isLegacyPath) {\n            artifact = await this.preview.getEnvTemplateFromComponentEnv(component);\n          } else {\n            // If it's legacy (bundled together with the env template) take the preview bundle from the component directly\n            artifact = await this.preview.getPreview(component);\n          }\n        } catch (e: any) {\n          this.logger.error(`getEnvTemplateFromComponentEnv or getPreview has failed`, e);\n          return res.status(404).send(noPreview());\n        }\n        // @ts-ignore\n        req.artifact = artifact;\n        // @ts-ignore\n        req.isLegacyPath = isLegacyPath;\n        return next();\n      } catch (e: any) {\n        this.logger.error('failed getting preview', e);\n        return res.status(500).send(serverError());\n      }\n    },\n    getArtifactFileMiddleware(this.logger),\n  ];\n}\n"]}