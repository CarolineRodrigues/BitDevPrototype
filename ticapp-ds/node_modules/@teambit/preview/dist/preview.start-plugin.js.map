{"version":3,"sources":["preview.start-plugin.tsx"],"names":["PreviewStartPlugin","constructor","workspace","bundler","ui","pubsub","logger","Promise","resolve","setReady","servers","initialState","setServers","updateServers","noneAreCompiling","Object","values","every","x","compiling","previewServers","initiate","options","listenToDevServers","components","byPattern","pattern","devServer","forEach","server","listen","watcher","watchAll","spawnTSServer","checkTypes","CheckTypes","None","preCompile","initiator","CompilationInitiator","Start","catch","err","msg","error","console","message","concat","getProxy","proxyConfigs","map","context","envRuntime","id","target","port","ws","onStart","state","onDone","results","whenReady","readyPromise"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Dispatch, SetStateAction } from 'react';\nimport { flatten } from 'lodash';\nimport { PreviewServerStatus } from '@teambit/preview.cli.preview-server-status';\nimport { BundlerMain, ComponentServer } from '@teambit/bundler';\nimport { PubsubMain } from '@teambit/pubsub';\nimport { ProxyEntry, StartPlugin, StartPluginOptions, UiMain } from '@teambit/ui';\nimport { Workspace, CheckTypes } from '@teambit/workspace';\nimport { SubscribeToWebpackEvents, CompilationResult } from '@teambit/preview.cli.webpack-events-listener';\nimport { CompilationInitiator } from '@teambit/compiler';\nimport { Logger } from '@teambit/logger';\n\ntype CompilationServers = Record<string, CompilationResult>;\ntype ServersSetter = Dispatch<SetStateAction<CompilationServers>>;\n\nexport class PreviewStartPlugin implements StartPlugin {\n  constructor(\n    private workspace: Workspace,\n    private bundler: BundlerMain,\n    private ui: UiMain,\n    private pubsub: PubsubMain,\n    private logger: Logger\n  ) {}\n\n  previewServers: ComponentServer[] = [];\n\n  async initiate(options: StartPluginOptions) {\n    this.listenToDevServers();\n\n    const components = await this.workspace.byPattern(options.pattern || '');\n    // TODO: logic for creating preview servers must be refactored to this aspect from the DevServer aspect.\n    const previewServers = await this.bundler.devServer(components);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    previewServers.forEach((server) => server.listen());\n    // DON'T add wait! this promise never resolve so it's stop all the start process!\n    this.workspace.watcher\n      .watchAll({\n        spawnTSServer: true,\n        checkTypes: CheckTypes.None,\n        preCompile: false,\n        initiator: CompilationInitiator.Start,\n      })\n      .catch((err) => {\n        const msg = `watcher found an error`;\n        this.logger.error(msg, err);\n        this.logger.console(`${msg}, ${err.message}`);\n      });\n    this.previewServers = this.previewServers.concat(previewServers);\n  }\n\n  getProxy(): ProxyEntry[] {\n    const proxyConfigs = this.previewServers.map<ProxyEntry[]>((server) => {\n      return [\n        {\n          context: [`/preview/${server.context.envRuntime.id}`],\n          target: `http://localhost:${server.port}`,\n        },\n        {\n          context: [`/_hmr/${server.context.envRuntime.id}`],\n          target: `http://localhost:${server.port}`,\n          ws: true,\n        },\n      ];\n    });\n\n    return flatten(proxyConfigs);\n  }\n\n  // TODO: this should be a part of the devServer\n  private listenToDevServers() {\n    // keep state changes immutable!\n    SubscribeToWebpackEvents(this.pubsub, {\n      onStart: (id) => {\n        this.updateServers((state) => ({\n          ...state,\n          [id]: { compiling: true },\n        }));\n      },\n      onDone: (id, results) => {\n        this.updateServers((state) => ({\n          ...state,\n          [id]: results,\n        }));\n      },\n    });\n  }\n\n  private setReady: () => void;\n  private readyPromise = new Promise<void>((resolve) => (this.setReady = resolve));\n  get whenReady(): Promise<void> {\n    return this.readyPromise;\n  }\n\n  private initialState: CompilationServers = {};\n  // implements react-like setter (value or updater)\n  private updateServers: ServersSetter = (servers) => {\n    this.initialState = typeof servers === 'function' ? servers(this.initialState) : servers;\n    return servers;\n  };\n\n  render = () => {\n    const [servers, setServers] = useState<CompilationServers>(this.initialState);\n    this.updateServers = setServers;\n    this.initialState = {};\n\n    useEffect(() => {\n      const noneAreCompiling = Object.values(servers).every((x) => !x.compiling);\n      if (noneAreCompiling) this.setReady();\n    }, [servers]);\n\n    return <PreviewServerStatus previewServers={this.previewServers} serverStats={servers} />;\n  };\n}\n"]}