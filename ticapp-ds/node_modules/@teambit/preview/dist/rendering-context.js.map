{"version":3,"sources":["rendering-context.ts"],"names":["RenderingContext","constructor","contexts","options","get","aspectId","contextFactory"],"mappings":";;;;;;;AAKO,MAAMA,gBAAN,CAAuB;AAC5BC,EAAAA,WAAW,CAASC,QAAT,EAAiDC,OAAgC,GAAG,EAApF,EAAwF;AAAA,SAA/ED,QAA+E,GAA/EA,QAA+E;AAAA,SAAvCC,OAAuC,GAAvCA,OAAuC;AAAE;AAErG;AACF;AACA;;;AACEC,EAAAA,GAAG,CAACC,QAAD,EAAmB;AACpB,UAAMC,cAAc,GAAG,KAAKJ,QAAL,CAAcE,GAAd,CAAkBC,QAAlB,CAAvB;AACA,WAAOC,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAG,KAAKH,OAAR,CAArB;AACD;;AAT2B","sourcesContent":["import { RenderingContextSlot } from './preview.preview.runtime';\n\nexport type RenderingContextOptions = { aspectsFilter?: string[] };\nexport type RenderingContextProvider = (options: RenderingContextOptions) => { [key: string]: any };\n\nexport class RenderingContext {\n  constructor(private contexts: RenderingContextSlot, private options: RenderingContextOptions = {}) {}\n\n  /**\n   * obtain rendering context of a specific aspect.\n   */\n  get(aspectId: string) {\n    const contextFactory = this.contexts.get(aspectId);\n    return contextFactory?.(this.options);\n  }\n}\n"]}