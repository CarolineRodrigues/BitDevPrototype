"use strict";

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateLink = generateLink;

function _toolboxPath() {
  const data = require("@teambit/toolbox.path.to-windows-compatible-path");

  _toolboxPath = function () {
    return data;
  };

  return data;
}

// :TODO refactor to building an AST and generate source code based on it.
function generateLink(prefix, componentMap, mainModule, isSplitComponentBundle = false) {
  return `
import { linkModules } from '${(0, _toolboxPath().toWindowsCompatiblePath)(require.resolve('./preview.preview.runtime'))}';
import harmony from '${(0, _toolboxPath().toWindowsCompatiblePath)(require.resolve('@teambit/harmony'))}';
${mainModule ? `import * as mainModule from '${(0, _toolboxPath().toWindowsCompatiblePath)(mainModule)}';` : 'const mainModule = {};'}

${// generate imports:
  componentMap.toArray().map(([, modulePath], compIdx) => modulePath.map((path, pathIdx) => `import * as ${moduleVarName(compIdx, pathIdx)} from '${(0, _toolboxPath().toWindowsCompatiblePath)(path)}'`).join('\n')).join('\n')}

linkModules('${prefix}', {
  mainModule,
  isSplitComponentBundle: ${isSplitComponentBundle},
  componentMap: {
${// use imports:
  componentMap.toArray().map(([component, modulePaths], compIdx) => {
    return `    '${component.id.fullName}': [${modulePaths.map((_, pathIdx) => moduleVarName(compIdx, pathIdx)).join(', ')}]`;
  }).join(',\n')}
  }
});
`;
}

function moduleVarName(componentIdx, fileIdx) {
  return `file_${componentIdx}_${fileIdx}`;
}

//# sourceMappingURL=generate-link.js.map