{"version":3,"sources":["generate-link.ts"],"names":["generateLink","prefix","componentMap","mainModule","isSplitComponentBundle","require","resolve","toArray","map","modulePath","compIdx","path","pathIdx","moduleVarName","join","component","modulePaths","id","fullName","_","componentIdx","fileIdx"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AACO,SAASA,YAAT,CACLC,MADK,EAELC,YAFK,EAGLC,UAHK,EAILC,sBAAsB,GAAG,KAJpB,EAKG;AACR,SAAQ;AACV,+BAA+B,4CAAwBC,OAAO,CAACC,OAAR,CAAgB,2BAAhB,CAAxB,CAAsE;AACrG,uBAAuB,4CAAwBD,OAAO,CAACC,OAAR,CAAgB,kBAAhB,CAAxB,CAA6D;AACpF,EAAEH,UAAU,GAAI,gCAA+B,4CAAwBA,UAAxB,CAAoC,IAAvE,GAA6E,wBAAyB;AAClH;AACA,EACE;AACAD,EAAAA,YAAY,CACTK,OADH,GAEGC,GAFH,CAEO,CAAC,GAAGC,UAAH,CAAD,EAAiBC,OAAjB,KACHD,UAAU,CACPD,GADH,CAEI,CAACG,IAAD,EAAOC,OAAP,KAAoB,eAAcC,aAAa,CAACH,OAAD,EAAUE,OAAV,CAAmB,UAAS,4CAAwBD,IAAxB,CAA8B,GAF7G,EAIGG,IAJH,CAIQ,IAJR,CAHJ,EASGA,IATH,CASQ,IATR,CAUD;AACD;AACA,eAAeb,MAAO;AACtB;AACA,4BAA4BG,sBAAuB;AACnD;AACA,EACE;AACAF,EAAAA,YAAY,CACTK,OADH,GAEGC,GAFH,CAEO,CAAC,CAACO,SAAD,EAAYC,WAAZ,CAAD,EAA2BN,OAA3B,KAAuC;AAC1C,WAAQ,QAAOK,SAAS,CAACE,EAAV,CAAaC,QAAS,OAAMF,WAAW,CACnDR,GADwC,CACpC,CAACW,CAAD,EAAIP,OAAJ,KAAgBC,aAAa,CAACH,OAAD,EAAUE,OAAV,CADO,EAExCE,IAFwC,CAEnC,IAFmC,CAE7B,GAFd;AAGD,GANH,EAOGA,IAPH,CAOQ,KAPR,CAQD;AACD;AACA;AACA,CApCE;AAqCD;;AAED,SAASD,aAAT,CAAuBO,YAAvB,EAA6CC,OAA7C,EAA8D;AAC5D,SAAQ,QAAOD,YAAa,IAAGC,OAAQ,EAAvC;AACD","sourcesContent":["import { toWindowsCompatiblePath } from '@teambit/toolbox.path.to-windows-compatible-path';\nimport type { ComponentMap } from '@teambit/component';\n\n// :TODO refactor to building an AST and generate source code based on it.\nexport function generateLink(\n  prefix: string,\n  componentMap: ComponentMap<string[]>,\n  mainModule?: string,\n  isSplitComponentBundle = false\n): string {\n  return `\nimport { linkModules } from '${toWindowsCompatiblePath(require.resolve('./preview.preview.runtime'))}';\nimport harmony from '${toWindowsCompatiblePath(require.resolve('@teambit/harmony'))}';\n${mainModule ? `import * as mainModule from '${toWindowsCompatiblePath(mainModule)}';` : 'const mainModule = {};'}\n\n${\n  // generate imports:\n  componentMap\n    .toArray()\n    .map(([, modulePath], compIdx) =>\n      modulePath\n        .map(\n          (path, pathIdx) => `import * as ${moduleVarName(compIdx, pathIdx)} from '${toWindowsCompatiblePath(path)}'`\n        )\n        .join('\\n')\n    )\n    .join('\\n')\n}\n\nlinkModules('${prefix}', {\n  mainModule,\n  isSplitComponentBundle: ${isSplitComponentBundle},\n  componentMap: {\n${\n  // use imports:\n  componentMap\n    .toArray()\n    .map(([component, modulePaths], compIdx) => {\n      return `    '${component.id.fullName}': [${modulePaths\n        .map((_, pathIdx) => moduleVarName(compIdx, pathIdx))\n        .join(', ')}]`;\n    })\n    .join(',\\n')\n}\n  }\n});\n`;\n}\n\nfunction moduleVarName(componentIdx: number, fileIdx: number) {\n  return `file_${componentIdx}_${fileIdx}`;\n}\n"]}