{"version":3,"sources":["preview.task.ts"],"names":["PREVIEW_TASK_NAME","PreviewTask","constructor","bundler","preview","execute","context","defs","getDefs","url","envRuntime","id","bundlingStrategy","getBundlingStrategy","env","envPreviewConfig","getEnvPreviewConfig","splitComponentBundle","computeTargetsContext","Object","assign","targets","computeTargets","bundlerContext","externalizePeer","name","compress","entry","publicPath","getPreviewDirectory","rootPath","development","dev","metaData","initiator","envId","getBundler","bundlerResults","run","results","computeResults","getLinkFileDirectory","CAPSULE_ARTIFACTS_DIR","outputPath","getPathsFromMap","capsule","moduleMap","compiler","getCompiler","map","files","file","path","getDistPathBySrcPath","relative"],"mappings":"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","sourcesContent":["import { resolve, join } from 'path';\nimport { ExecutionContext } from '@teambit/envs';\nimport { BuildContext, BuiltTaskResult, BuildTask, TaskLocation, CAPSULE_ARTIFACTS_DIR } from '@teambit/builder';\nimport { Bundler, BundlerContext, BundlerMain, Target } from '@teambit/bundler';\nimport { Compiler } from '@teambit/compiler';\nimport { ComponentMap } from '@teambit/component';\nimport { Capsule } from '@teambit/isolator';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { PreviewMain } from './preview.main.runtime';\n\nexport const PREVIEW_TASK_NAME = 'GeneratePreview';\nexport class PreviewTask implements BuildTask {\n  constructor(\n    /**\n     * bundler extension.\n     */\n    private bundler: BundlerMain,\n\n    /**\n     * preview extension.\n     */\n    private preview: PreviewMain\n  ) {}\n\n  aspectId = 'teambit.preview/preview';\n  name = PREVIEW_TASK_NAME;\n  location: TaskLocation = 'end';\n  // readonly dependencies = [CompilerAspect.id];\n\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    const defs = this.preview.getDefs();\n    const url = `/preview/${context.envRuntime.id}`;\n    const bundlingStrategy = this.preview.getBundlingStrategy(context.env);\n    const envPreviewConfig = this.preview.getEnvPreviewConfig(context.env);\n    const splitComponentBundle = envPreviewConfig.splitComponentBundle ?? false;\n    const computeTargetsContext = Object.assign(context, { splitComponentBundle });\n\n    const targets: Target[] = await bundlingStrategy.computeTargets(computeTargetsContext, defs, this);\n\n    const bundlerContext: BundlerContext = Object.assign(context, {\n      targets,\n      externalizePeer: bundlingStrategy.name !== 'env',\n      compress: bundlingStrategy.name !== 'env' && splitComponentBundle,\n      entry: [],\n      publicPath: this.getPreviewDirectory(context),\n      rootPath: url,\n      development: context.dev,\n      metaData: {\n        initiator: `${PREVIEW_TASK_NAME} task`,\n        envId: context.id,\n      },\n    });\n\n    const bundler: Bundler = await context.env.getBundler(bundlerContext, []);\n    const bundlerResults = await bundler.run();\n\n    const results = bundlingStrategy.computeResults(bundlerContext, bundlerResults, this);\n    return results;\n  }\n\n  getLinkFileDirectory() {\n    return join(CAPSULE_ARTIFACTS_DIR, 'preview-links');\n  }\n\n  getPreviewDirectory(context: ExecutionContext) {\n    const outputPath = resolve(`${context.id}/public`);\n    return outputPath;\n  }\n\n  getPathsFromMap(\n    capsule: Capsule,\n    moduleMap: ComponentMap<AbstractVinyl[]>,\n    context: BuildContext\n  ): ComponentMap<string[]> {\n    const compiler: Compiler = context.env.getCompiler(context);\n    return moduleMap.map((files) => {\n      return files.map((file) => join(capsule.path, compiler.getDistPathBySrcPath(file.relative)));\n    });\n  }\n}\n"]}