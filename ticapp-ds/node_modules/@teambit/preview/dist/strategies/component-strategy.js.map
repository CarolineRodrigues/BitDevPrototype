{"version":3,"sources":["component-strategy.ts"],"names":["PREVIEW_CHUNK_SUFFIX","COMPONENT_CHUNK_SUFFIX","PREVIEW_CHUNK_FILENAME_SUFFIX","COMPONENT_CHUNK_FILENAME_SUFFIX","COMPONENT_STRATEGY_SIZE_KEY_NAME","COMPONENT_STRATEGY_ARTIFACT_NAME","ComponentBundlingStrategy","constructor","preview","pkg","dependencyResolver","computeTargets","context","previewDefs","outputPath","getOutputPath","origComponents","capsuleNetwork","originalSeedersCapsules","map","capsule","component","entriesArr","Promise","all","computeComponentEntry","chunkSize","config","maxChunkSize","chunks","targets","currentChunk","entries","components","forEach","entry","Object","assign","push","path","computePaths","componentPath","getPaths","mainFile","componentPreviewChunkId","getComponentChunkId","id","filename","getComponentChunkFileName","toString","fsCompatible","ignoreVersion","import","library","name","type","splitComponentBundle","componentChunkId","toStringWithoutVersion","componentId","idstr","suffix","getAssetAbsolutePath","asset","copyAssetsToCapsules","result","graphCapsules","getCapsule","files","findAssetsForComponent","assets","entriesAssetsMap","artifactDirFullPath","getArtifactDirectory","filePath","PreviewOutputFileNotFound","destFilePath","fs","copyFileSync","undefined","componentEntryId","componentPreviewEntryId","componentFiles","componentAuxiliaryFiles","auxiliaryAssets","componentPreviewFiles","componentPreviewAuxiliaryFiles","concat","CAPSULE_ARTIFACTS_DIR","computeComponentMetadata","file","size","compressedSize","filesTotalSize","assetsSize","compressedTotalFiles","compressedAssetsSize","assetsTotalSize","auxiliaryAssetsSize","compressedTotalAssets","compressedAuxiliaryAssetsSize","totalSize","compressedTotal","metadata","totalFiles","totalAssets","total","computeResults","results","componentsResults","computeTargetResult","artifacts","getArtifactDef","errors","err","message","warning","warnings","startTime","endTime","globPatterns","rootDir","getDirName","envName","replace","capsulesRootDir","compiler","env","getCompiler","getDistPathBySrcPath","relative","getComponentOutputPath","defs","BitError","moduleMapsPromise","previewDef","moduleMap","getModuleMap","maybeFiles","get","compiledPaths","prefix","paths","moduleMaps","contents","writeLinkContents"],"mappings":"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","sourcesContent":["import { join, resolve, basename, dirname } from 'path';\nimport { existsSync, mkdirpSync } from 'fs-extra';\nimport { Component } from '@teambit/component';\nimport { ComponentID } from '@teambit/component-id';\nimport { flatten, isEmpty, chunk } from 'lodash';\nimport { Compiler } from '@teambit/compiler';\nimport type { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport type { Capsule } from '@teambit/isolator';\nimport { CAPSULE_ARTIFACTS_DIR, ComponentResult } from '@teambit/builder';\nimport type { PkgMain } from '@teambit/pkg';\nimport { BitError } from '@teambit/bit-error';\nimport type { DependencyResolverMain } from '@teambit/dependency-resolver';\nimport type { BundlerResult, BundlerContext, Asset, BundlerEntryMap, EntriesAssetsMap } from '@teambit/bundler';\nimport { BundlingStrategy, ComputeTargetsContext } from '../bundling-strategy';\nimport type { PreviewDefinition } from '../preview-definition';\nimport type { ComponentPreviewMetaData, PreviewMain } from '../preview.main.runtime';\nimport { generateComponentLink } from './generate-component-link';\nimport { PreviewOutputFileNotFound } from '../exceptions';\n\nexport const PREVIEW_CHUNK_SUFFIX = 'preview';\nexport const COMPONENT_CHUNK_SUFFIX = 'component';\nexport const PREVIEW_CHUNK_FILENAME_SUFFIX = `${PREVIEW_CHUNK_SUFFIX}.js`;\nexport const COMPONENT_CHUNK_FILENAME_SUFFIX = `${COMPONENT_CHUNK_SUFFIX}.js`;\n\nexport const COMPONENT_STRATEGY_SIZE_KEY_NAME = 'size';\nexport const COMPONENT_STRATEGY_ARTIFACT_NAME = 'preview-component';\n\ntype ComponentEntry = {\n  component: Component;\n  entries: Object;\n};\n/**\n * bundles all components in a given env into the same bundle.\n */\nexport class ComponentBundlingStrategy implements BundlingStrategy {\n  name = 'component';\n\n  constructor(private preview: PreviewMain, private pkg: PkgMain, private dependencyResolver: DependencyResolverMain) {}\n\n  async computeTargets(context: ComputeTargetsContext, previewDefs: PreviewDefinition[]) {\n    const outputPath = this.getOutputPath(context);\n    if (!existsSync(outputPath)) mkdirpSync(outputPath);\n\n    // const entriesArr = flatten(\n    //   await Promise.all(\n    //     context.capsuleNetwork.seedersCapsules.map((capsule) => {\n    //       return this.computeComponentEntry(previewDefs, capsule.component, context);\n    //     }, {})\n    //   )\n    // );\n\n    const origComponents = context.capsuleNetwork.originalSeedersCapsules.map((capsule) => capsule.component);\n\n    const entriesArr = await Promise.all(\n      origComponents.map((component) => {\n        return this.computeComponentEntry(previewDefs, component, context);\n      }, {})\n    );\n\n    const chunkSize = this.preview.config.maxChunkSize;\n\n    const chunks = chunkSize ? chunk(entriesArr, chunkSize) : [entriesArr];\n\n    const targets = chunks.map((currentChunk) => {\n      const entries: BundlerEntryMap = {};\n      const components: Component[] = [];\n      currentChunk.forEach((entry) => {\n        Object.assign(entries, entry.entries);\n        components.push(entry.component);\n      });\n\n      return {\n        entries,\n        components,\n        outputPath,\n      };\n    });\n\n    return targets;\n    // const entries = entriesArr.reduce((entriesMap, entry) => {\n    //   entriesMap[entry.library.name] = entry;\n    //   return entriesMap;\n    // }, {});\n\n    // const modules = await Promise.all(entriesArr.map(async (entry) => {\n    //   const dependencies = await this.dependencyResolver.getDependencies(entry.component);\n    //   const manifest = dependencies.toDependenciesManifest();\n    //   const peer = Object.entries(manifest.peerDependencies || {}).reduce((acc, [packageName, version]) => {\n    //     acc[packageName] = {\n    //       singleton: true,\n    //       requiredVersion: version\n    //     };\n\n    //     return acc;\n    //   }, {});\n    //   // console.log(entry);\n    //   return {\n    //     name: entry.library.name,\n    //     exposes: {\n    //       '.': entry.import || ''\n    //     },\n    //     shared: {\n    //       ...manifest.dependencies,\n    //       ...peer\n    //     },\n    //   };\n    // }));\n  }\n\n  async computeComponentEntry(\n    previewDefs: PreviewDefinition[],\n    component: Component,\n    context: ComputeTargetsContext\n  ): Promise<ComponentEntry> {\n    const path = await this.computePaths(previewDefs, context, component);\n    const [componentPath] = this.getPaths(context, component, [component.mainFile]);\n    const componentPreviewChunkId = this.getComponentChunkId(component.id, 'preview');\n\n    const entries = {\n      [componentPreviewChunkId]: {\n        filename: this.getComponentChunkFileName(\n          component.id.toString({\n            fsCompatible: true,\n            ignoreVersion: true,\n          }),\n          'preview'\n        ),\n        import: path,\n        // dependOn: component.id.toStringWithoutVersion(),\n        library: {\n          name: componentPreviewChunkId,\n          type: 'umd',\n        },\n      },\n    };\n    if (context.splitComponentBundle) {\n      const componentChunkId = component.id.toStringWithoutVersion();\n      entries[componentChunkId] = {\n        filename: this.getComponentChunkFileName(\n          component.id.toString({\n            fsCompatible: true,\n            ignoreVersion: true,\n          }),\n          'component'\n        ),\n        import: componentPath,\n        library: {\n          name: componentChunkId,\n          type: 'umd',\n        },\n      };\n    }\n    return { component, entries };\n  }\n\n  private getComponentChunkId(componentId: ComponentID, type: 'component' | 'preview') {\n    const id =\n      type === 'component'\n        ? componentId.toStringWithoutVersion()\n        : `${componentId.toStringWithoutVersion()}-${PREVIEW_CHUNK_SUFFIX}`;\n    return id;\n  }\n\n  private getComponentChunkFileName(idstr: string, type: 'component' | 'preview') {\n    const suffix = type === 'component' ? COMPONENT_CHUNK_FILENAME_SUFFIX : PREVIEW_CHUNK_FILENAME_SUFFIX;\n    return `${idstr}-${suffix}`;\n  }\n\n  private getAssetAbsolutePath(context: BundlerContext, asset: Asset): string {\n    const path = this.getOutputPath(context);\n    return join(path, 'public', asset.name);\n  }\n\n  copyAssetsToCapsules(context: BundlerContext, result: BundlerResult) {\n    context.components.forEach((component) => {\n      const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);\n      if (!capsule) return;\n      const files = this.findAssetsForComponent(component, result.assets, result.entriesAssetsMap || {});\n      if (!files) return;\n      const artifactDirFullPath = join(capsule.path, this.getArtifactDirectory());\n      // We don't use the mkdirSync as it uses the capsule fs which uses memfs, which doesn't know to handle nested none existing folders\n      mkdirpSync(artifactDirFullPath);\n\n      files.forEach((asset) => {\n        const filePath = this.getAssetAbsolutePath(context, asset);\n        if (!existsSync(filePath)) {\n          throw new PreviewOutputFileNotFound(component.id, filePath);\n        }\n        const destFilePath = join(artifactDirFullPath, asset.name);\n        mkdirpSync(dirname(destFilePath));\n        capsule.fs.copyFileSync(filePath, destFilePath);\n      });\n    });\n  }\n\n  // private getCssFileName(componentId: ComponentID): string {\n  //   return `${componentId.toString({ ignoreVersion: true, fsCompatible: true })}.css`;\n  // }\n\n  private findAssetsForComponent(\n    component: Component,\n    assets: Asset[],\n    entriesAssetsMap: EntriesAssetsMap\n  ): Asset[] | undefined {\n    if (!assets) return undefined;\n\n    const componentEntryId = component.id.toStringWithoutVersion();\n    const componentPreviewEntryId = this.getComponentChunkId(component.id, 'preview');\n    const componentFiles = entriesAssetsMap[componentEntryId]?.assets || [];\n    const componentAuxiliaryFiles = entriesAssetsMap[componentEntryId]?.auxiliaryAssets || [];\n    const componentPreviewFiles = entriesAssetsMap[componentPreviewEntryId]?.assets || [];\n    const componentPreviewAuxiliaryFiles = entriesAssetsMap[componentPreviewEntryId]?.auxiliaryAssets || [];\n\n    const files = componentFiles\n      .concat(componentAuxiliaryFiles)\n      .concat(componentPreviewFiles)\n      .concat(componentPreviewAuxiliaryFiles);\n    return files;\n  }\n\n  private getArtifactDirectory() {\n    return join(CAPSULE_ARTIFACTS_DIR, 'preview');\n  }\n\n  private computeComponentMetadata(\n    context: BundlerContext,\n    result: BundlerResult,\n    component: Component\n  ): ComponentPreviewMetaData {\n    const componentEntryId = component.id.toStringWithoutVersion();\n    if (!result?.entriesAssetsMap || !result?.entriesAssetsMap[componentEntryId]) {\n      return {};\n    }\n    const files = (result.entriesAssetsMap[componentEntryId]?.assets || []).map((file) => {\n      return {\n        name: basename(file.name),\n        size: file.size,\n        compressedSize: file.compressedSize,\n      };\n    });\n    const filesTotalSize = result.entriesAssetsMap[componentEntryId]?.assetsSize || 0;\n    const compressedTotalFiles = result.entriesAssetsMap[componentEntryId]?.compressedAssetsSize || 0;\n    const assets = (result.entriesAssetsMap[componentEntryId]?.auxiliaryAssets || []).map((file) => {\n      return {\n        name: basename(file.name),\n        size: file.size,\n        compressedSize: file.compressedSize,\n      };\n    });\n    const assetsTotalSize = result.entriesAssetsMap[componentEntryId]?.auxiliaryAssetsSize || 0;\n    const compressedTotalAssets = result.entriesAssetsMap[componentEntryId]?.compressedAuxiliaryAssetsSize || 0;\n    const totalSize = filesTotalSize + assetsTotalSize;\n    const compressedTotal = compressedTotalFiles + compressedTotalAssets;\n\n    const metadata = {\n      [COMPONENT_STRATEGY_SIZE_KEY_NAME]: {\n        files,\n        assets,\n        totalFiles: filesTotalSize,\n        totalAssets: assetsTotalSize,\n        total: totalSize,\n        compressedTotalFiles,\n        compressedTotalAssets,\n        compressedTotal,\n      },\n    };\n\n    return metadata;\n  }\n\n  async computeResults(context: BundlerContext, results: BundlerResult[]) {\n    const componentsResults = flatten(\n      await Promise.all(results.map((result) => this.computeTargetResult(context, result)))\n    );\n\n    const artifacts = this.getArtifactDef();\n\n    return {\n      componentsResults,\n      artifacts,\n    };\n  }\n\n  async computeTargetResult(context: BundlerContext, result: BundlerResult) {\n    if (isEmpty(result.errors)) {\n      // In case there are errors files will not be emitted so trying to copy them will fail anyway\n      this.copyAssetsToCapsules(context, result);\n    }\n\n    const componentsResults: ComponentResult[] = result.components.map((component) => {\n      const metadata = this.computeComponentMetadata(context, result, component);\n      return {\n        component,\n        metadata,\n        errors: result.errors.map((err) => (typeof err === 'string' ? err : err.message)),\n        warning: result.warnings,\n        startTime: result.startTime,\n        endTime: result.endTime,\n      };\n    });\n\n    return componentsResults;\n  }\n\n  private getArtifactDef() {\n    // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    // const env: 'env' = 'env';\n    // const rootDir = this.getDirName(context);\n\n    return [\n      {\n        name: COMPONENT_STRATEGY_ARTIFACT_NAME,\n        globPatterns: ['**'],\n        rootDir: this.getArtifactDirectory(),\n        // context: env,\n      },\n    ];\n  }\n\n  getDirName(context: ComputeTargetsContext) {\n    const envName = context.id.replace('/', '__');\n    return `${envName}-preview`;\n  }\n\n  private getOutputPath(context: ComputeTargetsContext) {\n    return resolve(`${context.capsuleNetwork.capsulesRootDir}/${this.getDirName(context)}`);\n  }\n\n  private getPaths(context: ComputeTargetsContext, component: Component, files: AbstractVinyl[]) {\n    const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);\n    if (!capsule) return [];\n    const compiler: Compiler = context.env.getCompiler();\n    return files.map((file) => join(capsule.path, compiler.getDistPathBySrcPath(file.relative)));\n  }\n\n  private getComponentOutputPath(capsule: Capsule) {\n    return resolve(`${capsule.path}`);\n  }\n\n  private async computePaths(\n    defs: PreviewDefinition[],\n    context: ComputeTargetsContext,\n    component: Component\n  ): Promise<string> {\n    // const previewMain = await this.preview.writePreviewRuntime(context);\n    const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);\n    // if (!capsule) return undefined;\n    if (!capsule)\n      throw new BitError(\n        `could not find capsule for component ${component.id.toString()} during compute paths to bundle`\n      );\n    const moduleMapsPromise = defs.map(async (previewDef) => {\n      const moduleMap = await previewDef.getModuleMap([component]);\n      const maybeFiles = moduleMap.get(component);\n      if (!maybeFiles || !capsule) return [];\n      const [, files] = maybeFiles;\n      const compiledPaths = this.getPaths(context, component, files);\n      // const files = flatten(paths.toArray().map(([, file]) => file));\n\n      return {\n        prefix: previewDef.prefix,\n        paths: compiledPaths,\n      };\n    });\n\n    const moduleMaps = flatten(await Promise.all(moduleMapsPromise));\n\n    const contents = generateComponentLink(moduleMaps);\n    return this.preview.writeLinkContents(contents, this.getComponentOutputPath(capsule), 'preview');\n    // return flatten(moduleMaps);\n  }\n}\n"]}