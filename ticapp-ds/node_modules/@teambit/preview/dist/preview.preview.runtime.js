"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/web.url.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewPreview = void 0;
exports.linkModules = linkModules;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _pubsub() {
  const data = _interopRequireDefault(require("@teambit/pubsub"));

  _pubsub = function () {
    return data;
  };

  return data;
}

function _harmony() {
  const data = require("@teambit/harmony");

  _harmony = function () {
    return data;
  };

  return data;
}

function _componentId() {
  const data = require("@teambit/component-id");

  _componentId = function () {
    return data;
  };

  return data;
}

function _crossFetch() {
  const data = _interopRequireDefault(require("cross-fetch"));

  _crossFetch = function () {
    return data;
  };

  return data;
}

function _memoizee() {
  const data = _interopRequireDefault(require("memoizee"));

  _memoizee = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("./exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _preview() {
  const data = require("./preview.aspect");

  _preview = function () {
    return data;
  };

  return data;
}

function _events() {
  const data = require("./events");

  _events = function () {
    return data;
  };

  return data;
}

function _renderingContext() {
  const data = require("./rendering-context");

  _renderingContext = function () {
    return data;
  };

  return data;
}

function _fetchComponentAspects() {
  const data = require("./gql/fetch-component-aspects");

  _fetchComponentAspects = function () {
    return data;
  };

  return data;
}

const PREVIEW_MODULES = {};

class PreviewPreview {
  constructor(
  /**
   * register to pubsub
   */
  pubsub,
  /**
   * preview slot.
   */
  previewSlot, renderingContextSlot) {
    this.pubsub = pubsub;
    this.previewSlot = previewSlot;
    this.renderingContextSlot = renderingContextSlot;
    (0, _defineProperty2().default)(this, "isDev", false);
    (0, _defineProperty2().default)(this, "render", async rootExt => {
      const {
        previewName,
        componentId
      } = this.getLocation();
      const name = previewName || this.getDefault();
      if (rootExt) this.isDev = rootExt === 'teambit.workspace/workspace';
      const preview = this.getPreview(name);

      if (!preview || !componentId) {
        throw new (_exceptions().PreviewNotFound)(previewName);
      }

      const includesAll = await Promise.all((preview.include || []).map(async prevName => {
        var _includedPreview$sele;

        const includedPreview = this.getPreview(prevName);
        if (!includedPreview) return undefined;
        return (_includedPreview$sele = includedPreview.selectPreviewModel) === null || _includedPreview$sele === void 0 ? void 0 : _includedPreview$sele.call(includedPreview, componentId.fullName, await this.getPreviewModule(prevName, componentId, name));
      }));
      const includes = includesAll.filter(module => !!module); // during build / tag, the component is isolated, so all aspects are relevant, and do not require filtering

      const componentAspects = this.isDev ? await this.getComponentAspects(componentId.toString()) : undefined;
      return preview.render(componentId, await this.getPreviewModule(name, componentId), includes, this.getRenderingContext(componentAspects));
    });
    (0, _defineProperty2().default)(this, "getComponentAspects", (0, _memoizee().default)(_fetchComponentAspects().fetchComponentAspects, {
      max: 100,
      maxAge: 12 * 60 * 60 * 1000
    }));
    this.registerClickPubSub();
  }

  registerClickPubSub() {
    window.addEventListener('click', e => {
      const timestamp = Date.now();
      const clickEvent = Object.assign({}, e);
      this.pubsub.pub(_preview().PreviewAspect.id, new (_events().ClickInsideAnIframeEvent)(timestamp, clickEvent));
    });
  }

  async getPreviewModule(name, id, parentPreviewName) {
    const relevantModel = PREVIEW_MODULES[name];
    if (relevantModel.componentMap[id.fullName]) return relevantModel;
    let component; // Handle case when there is overview but no composition on the workspace dev server

    if (!parentPreviewName || !PREVIEW_MODULES[parentPreviewName].componentMap[id.fullName]) {
      // if (!window[name]) throw new PreviewNotFound(name);
      // const isSplitComponentBundle = relevantModel.isSplitComponentBundle ?? false;
      // const component = window[id.toStringWithoutVersion()];
      component = await this.fetchComponentPreview(id, name);
    }

    return {
      mainModule: relevantModel.mainModule,
      componentMap: {
        [id.fullName]: component
      }
    };
  }

  async fetchComponentPreview(id, name) {
    let previewFile;
    const allFiles = await this.fetchComponentPreviewFiles(id, name); // It's a component bundled with the env

    if (allFiles === null) {
      return Promise.resolve(undefined);
    }

    allFiles.forEach(file => {
      // We want to run the preview file always last
      if (file.endsWith('-preview.js')) {
        previewFile = file;
      } else {
        this.addComponentFileElement(id, file);
      }
    });
    return new Promise((resolve, reject) => {
      const previewScriptElement = this.getPreviewScriptElement(id, name, previewFile, resolve, reject);
      document.head.appendChild(previewScriptElement);
    });
  }

  addComponentFileElement(id, previewBundleFileName) {
    if (previewBundleFileName.endsWith('.js')) {
      return this.addComponentFileScriptElement(id, previewBundleFileName);
    }

    return this.addComponentFileLinkElement(id, previewBundleFileName);
  }

  async fetchComponentPreviewFiles(id, previewName) {
    const previewAssetsRoute = `~aspect/preview-assets`;
    const stringId = id.toString();
    const url = `/api/${stringId}/${previewAssetsRoute}`;
    const res = await (0, _crossFetch().default)(url);

    if (res.status >= 400) {
      throw new (_exceptions().PreviewNotFound)(previewName);
    }

    const parsed = await res.json(); // This is component bundled with the env, no reason to bring the files, as they will be the files of the env

    if (parsed.isBundledWithEnv) {
      return null;
    }

    if (!parsed.files || !parsed.files.length) {
      throw new (_exceptions().PreviewNotFound)(previewName);
    }

    return parsed.files;
  }

  addComponentFileScriptElement(id, previewBundleFileName) {
    const script = document.createElement('script');
    script.setAttribute('defer', 'defer');
    const stringId = id.toString();
    const previewRoute = `~aspect/component-preview`;
    const src = `/api/${stringId}/${previewRoute}/${previewBundleFileName}`;
    script.src = src;
    document.head.appendChild(script);
    return script;
  }

  addComponentFileLinkElement(id, previewBundleFileName) {
    const link = document.createElement('link');
    const stringId = id.toString();
    const previewRoute = `~aspect/component-preview`;
    const href = `/api/${stringId}/${previewRoute}/${previewBundleFileName}`;
    link.setAttribute('href', href);

    if (previewBundleFileName.endsWith('.css')) {
      link.setAttribute('rel', 'stylesheet');
    }

    document.head.appendChild(link);
    return link;
  }

  getPreviewScriptElement(id, name, previewBundleFileName, resolve, reject) {
    const script = document.createElement('script');
    script.setAttribute('defer', 'defer');
    const stringId = id.toString(); // const previewRoute = `~aspect/preview`;

    const previewRoute = `~aspect/component-preview`;
    const src = `/api/${stringId}/${previewRoute}/${previewBundleFileName}`;
    script.src = src; // generate path to remote scope. [scope url]/

    script.onload = () => {
      const componentPreview = window[`${id.toStringWithoutVersion()}-preview`];
      if (!componentPreview) return reject(new (_exceptions().PreviewNotFound)(name));
      const targetPreview = componentPreview[name];
      if (!targetPreview) return resolve(undefined);
      return resolve(targetPreview);
    };

    return script;
  }

  /**
   * register a new preview.
   */
  registerPreview(preview) {
    this.previewSlot.register(preview);
    return this;
  }
  /**
   * get the preview rendering context.
   */


  getRenderingContext(aspectsFilter) {
    return new (_renderingContext().RenderingContext)(this.renderingContextSlot, {
      aspectsFilter
    });
  }
  /**
   * allows aspects to add rendering contexts.
   * render context is available through all preview definitions.
   */


  registerRenderContext(renderContext) {
    this.renderingContextSlot.register(renderContext);
    return this;
  }

  getDefault() {
    const previews = this.previewSlot.values();
    const defaultOne = previews.find(previewCandidate => previewCandidate.default);
    return (defaultOne === null || defaultOne === void 0 ? void 0 : defaultOne.name) || previews[0].name;
  }

  getPreview(previewName) {
    const previews = this.previewSlot.values();
    const preview = previews.find(previewCandidate => previewCandidate.name === previewName);
    return preview;
  }

  getParam(query, param) {
    const params = new URLSearchParams(query);
    return params.get(param);
  }

  getLocation() {
    const withoutHash = window.location.hash.substring(1);
    const [before, after] = withoutHash.split('?');
    return {
      previewName: this.getParam(after, 'preview'),
      componentId: _componentId().ComponentID.tryFromString(before)
    };
  }

  static async provider([pubsub], config, [previewSlot, renderingContextSlot]) {
    const preview = new PreviewPreview(pubsub, previewSlot, renderingContextSlot);
    window.addEventListener('hashchange', () => {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      preview.render();
    });
    return preview;
  }

}

exports.PreviewPreview = PreviewPreview;
(0, _defineProperty2().default)(PreviewPreview, "runtime", _preview().PreviewRuntime);
(0, _defineProperty2().default)(PreviewPreview, "dependencies", [_pubsub().default]);
(0, _defineProperty2().default)(PreviewPreview, "slots", [_harmony().Slot.withType(), _harmony().Slot.withType()]);

function linkModules(previewName, previewModule) {
  PREVIEW_MODULES[previewName] = previewModule;
}

_preview().PreviewAspect.addRuntime(PreviewPreview);

//# sourceMappingURL=preview.preview.runtime.js.map