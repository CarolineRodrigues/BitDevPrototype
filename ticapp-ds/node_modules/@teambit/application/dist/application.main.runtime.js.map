{"version":3,"sources":["application.main.runtime.ts"],"names":["ApplicationMain","constructor","appSlot","appTypeSlot","deploymentProviderSlot","envs","componentAspect","appService","aspectLoader","workspace","logger","registerApp","app","register","listApps","values","mapApps","toArray","listAppsById","id","undefined","get","toString","getApp","appName","apps","find","name","registerAppType","appType","plugin","AppTypePlugin","registerPlugins","getAppAspect","getAppOrThrow","AppNotFound","computeOptions","opts","defaultOpts","dev","defaultPortRange","runApp","options","context","createAppContext","port","run","skipWatch","watcher","watchAll","preCompile","catch","err","error","getAppIdOrThrow","maybeApp","ComponentID","fromString","host","getHost","components","list","component","c","isEqual","env","createEnvironment","res","results","data","Object","assign","appComponent","provider","cli","loggerAspect","builder","config","createLogger","ApplicationAspect","AppService","application","appCmd","AppCmd","commands","AppListCmd","AppPlugin","registerBuildTasks","AppsBuildTask","registerSnapTasks","DeployTask","registerTagTasks","registerGroup","RunCmd","AppListCmdDeprecated","MainRuntime","CLIAspect","LoggerAspect","BuilderAspect","EnvsAspect","ComponentAspect","AspectLoaderAspect","WorkspaceAspect","Slot","withType","addRuntime"],"mappings":"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","sourcesContent":["import { MainRuntime, CLIMain, CLIAspect } from '@teambit/cli';\nimport { flatten, cloneDeep } from 'lodash';\nimport { AspectLoaderMain, AspectLoaderAspect } from '@teambit/aspect-loader';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport ComponentAspect, { ComponentMain, ComponentID } from '@teambit/component';\nimport { ApplicationType } from './application-type';\nimport { Application } from './application';\nimport { DeploymentProvider } from './deployment-provider';\nimport { AppNotFound } from './exceptions';\nimport { ApplicationAspect } from './application.aspect';\nimport { AppListCmdDeprecated } from './app-list.cmd';\nimport { AppsBuildTask } from './build.task';\nimport { RunCmd } from './run.cmd';\nimport { AppService } from './application.service';\nimport { AppCmd, AppListCmd } from './app.cmd';\nimport { AppPlugin } from './app.plugin';\nimport { AppTypePlugin } from './app-type.plugin';\nimport { AppContext } from './app-context';\nimport { DeployTask } from './deploy.task';\n\nexport type ApplicationTypeSlot = SlotRegistry<ApplicationType<unknown>[]>;\nexport type ApplicationSlot = SlotRegistry<Application[]>;\nexport type DeploymentProviderSlot = SlotRegistry<DeploymentProvider[]>;\n\nexport type ApplicationAspectConfig = {};\n\nexport type ServeAppOptions = {\n  /**\n   * default port range used to serve applications.\n   */\n  defaultPortRange?: number[];\n\n  /**\n   * determine whether to start the application in dev mode.\n   */\n  dev: boolean;\n};\n\nexport class ApplicationMain {\n  constructor(\n    private appSlot: ApplicationSlot,\n    private appTypeSlot: ApplicationTypeSlot,\n    private deploymentProviderSlot: DeploymentProviderSlot,\n    private envs: EnvsMain,\n    private componentAspect: ComponentMain,\n    private appService: AppService,\n    private aspectLoader: AspectLoaderMain,\n    private workspace: Workspace,\n    private logger: Logger\n  ) {}\n\n  /**\n   * register a new app.\n   */\n  registerApp(app: Application) {\n    this.appSlot.register([app]);\n    return this;\n  }\n\n  /**\n   * list all registered apps.\n   */\n  listApps(): Application[] {\n    return flatten(this.appSlot.values());\n  }\n\n  /**\n   * map all apps by component ID.\n   */\n  mapApps() {\n    return this.appSlot.toArray();\n  }\n\n  /**\n   * list apps by a component id.\n   */\n  listAppsById(id?: ComponentID): Application[] | undefined {\n    if (!id) return undefined;\n    return this.appSlot.get(id.toString());\n  }\n\n  /**\n   * get an app.\n   */\n  getApp(appName: string, id?: ComponentID): Application | undefined {\n    const apps = this.listAppsById(id) || this.listApps();\n    return apps.find((app) => app.name === appName);\n  }\n\n  /**\n   * registers a new app and sets a plugin for it.\n   */\n  registerAppType<T>(appType: ApplicationType<T>) {\n    const plugin = new AppTypePlugin(`*.${appType.name}.*`, appType, this.appSlot);\n    this.aspectLoader.registerPlugins([plugin]);\n    this.appTypeSlot.register([appType]);\n    return this;\n  }\n\n  /**\n   * get an app AspectId.\n   */\n  getAppAspect(appName: string): string | undefined {\n    return this.appSlot.toArray().find(([, apps]) => apps.find((app) => app.name === appName))?.[0];\n  }\n\n  /**\n   * get app to throw.\n   */\n  getAppOrThrow(appName: string) {\n    const app = this.getApp(appName);\n    if (!app) throw new AppNotFound(appName);\n    return app;\n  }\n\n  private computeOptions(opts: Partial<ServeAppOptions>) {\n    const defaultOpts: ServeAppOptions = {\n      dev: false,\n      defaultPortRange: [3100, 3500],\n    };\n\n    return {\n      defaultOpts,\n      ...opts,\n    };\n  }\n\n  async runApp(appName: string, options: Partial<ServeAppOptions> & { skipWatch?: boolean } = {}) {\n    const app = this.getAppOrThrow(appName);\n    this.computeOptions(options);\n    const context = await this.createAppContext(appName);\n    if (!context) throw new AppNotFound(appName);\n    const port = await app.run(context);\n    if (!options.skipWatch) {\n      this.workspace.watcher\n        .watchAll({\n          preCompile: false,\n        })\n        .catch((err) => {\n          // don't throw an error, we don't want to break the \"run\" process\n          this.logger.error(`compilation failed`, err);\n        });\n    }\n    return { app, port };\n  }\n\n  /**\n   * get the component ID of a certain app.\n   */\n  getAppIdOrThrow(appName: string) {\n    const maybeApp = this.appSlot.toArray().find(([, apps]) => {\n      return apps.find((app) => app.name === appName);\n    });\n\n    if (!maybeApp) throw new AppNotFound(appName);\n    return ComponentID.fromString(maybeApp[0]);\n  }\n\n  private async createAppContext(appName: string): Promise<AppContext> {\n    const host = this.componentAspect.getHost();\n    const components = await host.list();\n    const id = this.getAppIdOrThrow(appName);\n    const component = components.find((c) => c.id.isEqual(id));\n    if (!component) throw new AppNotFound(appName);\n    // console.log(comp)\n\n    const env = await this.envs.createEnvironment([component]);\n    const res = await env.run(this.appService);\n    const context = res.results[0].data;\n    if (!context) throw new AppNotFound(appName);\n    return Object.assign(cloneDeep(context), {\n      appName,\n      appComponent: component,\n    });\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    CLIAspect,\n    LoggerAspect,\n    BuilderAspect,\n    EnvsAspect,\n    ComponentAspect,\n    AspectLoaderAspect,\n    WorkspaceAspect,\n  ];\n\n  static slots = [\n    Slot.withType<ApplicationType<unknown>[]>(),\n    Slot.withType<Application[]>(),\n    Slot.withType<DeploymentProvider[]>(),\n  ];\n\n  static async provider(\n    [cli, loggerAspect, builder, envs, component, aspectLoader, workspace]: [\n      CLIMain,\n      LoggerMain,\n      BuilderMain,\n      EnvsMain,\n      ComponentMain,\n      AspectLoaderMain,\n      Workspace\n    ],\n    config: ApplicationAspectConfig,\n    [appTypeSlot, appSlot, deploymentProviderSlot]: [ApplicationTypeSlot, ApplicationSlot, DeploymentProviderSlot]\n  ) {\n    const logger = loggerAspect.createLogger(ApplicationAspect.id);\n    const appService = new AppService();\n    const application = new ApplicationMain(\n      appSlot,\n      appTypeSlot,\n      deploymentProviderSlot,\n      envs,\n      component,\n      appService,\n      aspectLoader,\n      workspace,\n      logger\n    );\n    const appCmd = new AppCmd();\n    appCmd.commands = [new AppListCmd(application)];\n    aspectLoader.registerPlugins([new AppPlugin(appSlot)]);\n    builder.registerBuildTasks([new AppsBuildTask(application)]);\n    builder.registerSnapTasks([new DeployTask(application, builder)]);\n    builder.registerTagTasks([new DeployTask(application, builder)]);\n    cli.registerGroup('apps', 'Applications');\n    cli.register(new RunCmd(application, logger), new AppListCmdDeprecated(application), appCmd);\n\n    return application;\n  }\n}\n\nApplicationAspect.addRuntime(ApplicationMain);\n"]}