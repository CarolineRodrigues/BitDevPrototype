{"version":3,"sources":["build.task.ts"],"names":["BUILD_TASK","AppsBuildTask","constructor","application","opt","deploy","ApplicationAspect","id","execute","context","apps","listApps","capsuleNetwork","componentsResults","app","aspectId","getAppAspect","name","undefined","capsule","seedersCapsules","getCapsuleIgnoreVersion","ComponentID","fromString","build","component","appDeployContext","Object","assign","appComponent","deployContext","artifacts","componentResult","_metadata","flatMap","res","filter","a","_componentsResults","map"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIO,MAAMA,UAAU,GAAG,mBAAnB;;;AAUA,MAAMC,aAAN,CAAyC;AAI9CC,EAAAA,WAAW,CAASC,WAAT,EAA+CC,GAAY,GAAG;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAA9D,EAAgF;AAAA,SAAvEF,WAAuE,GAAvEA,WAAuE;AAAA,SAAjCC,GAAiC,GAAjCA,GAAiC;AAAA,kDAHpFJ,UAGoF;AAAA,sDAFhFM,iCAAkBC,EAE8D;AAAA,sDADvE,KACuE;AAAE;;AAEhF,QAAPC,OAAO,CAACC,OAAD,EAAkD;AAC7D,UAAMC,IAAI,GAAG,KAAKP,WAAL,CAAiBQ,QAAjB,EAAb;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAqBH,OAA3B;AACA,UAAMI,iBAAiB,GAAG,MAAM,2BAAUH,IAAV,EAAgB,MAAOI,GAAP,IAAiD;AAC/F,YAAMC,QAAQ,GAAG,KAAKZ,WAAL,CAAiBa,YAAjB,CAA8BF,GAAG,CAACG,IAAlC,CAAjB;AACA,UAAI,CAACF,QAAL,EAAe,OAAOG,SAAP;AACf,YAAMC,OAAO,GAAGP,cAAc,CAACQ,eAAf,CAA+BC,uBAA/B,CAAuDC,yBAAYC,UAAZ,CAAuBR,QAAvB,CAAvD,CAAhB;AACA,UAAI,CAACI,OAAD,IAAY,CAACL,GAAG,CAACU,KAArB,EAA4B,OAAON,SAAP;AAC5B,YAAM;AAAEO,QAAAA;AAAF,UAAgBN,OAAtB;AACA,YAAMO,gBAAiC,GAAGC,MAAM,CAACC,MAAP,CAAcnB,OAAd,EAAuB;AAC/DU,QAAAA,OAD+D;AAE/DU,QAAAA,YAAY,EAAEJ,SAFiD;AAG/DR,QAAAA,IAAI,EAAEH,GAAG,CAACG;AAHqD,OAAvB,CAA1C;AAKA,YAAMa,aAAa,GAAG,MAAMhB,GAAG,CAACU,KAAJ,CAAUE,gBAAV,CAA5B;AAEA,aAAO;AACLK,QAAAA,SAAS,EAAED,aAAa,CAACC,SADpB;;AAEL;AACR;AACA;AACA;AACA;AACA;AACQ;AACAC,QAAAA,eAAe,EAAE;AAAEP,UAAAA,SAAS,EAAEN,OAAO,CAACM,SAArB;AAAgCQ,UAAAA,SAAS,EAAE;AAAEH,YAAAA;AAAF;AAA3C;AATZ,OAAP;AAWD,KAxB+B,CAAhC;AA0BA,UAAMC,SAAS,GAAGlB,iBAAiB,CAChCqB,OADe,CACNC,GAAD,IAAS;AAChB,aAAOA,GAAP,aAAOA,GAAP,uBAAOA,GAAG,CAAEJ,SAAZ;AACD,KAHe,EAIfK,MAJe,CAIPC,CAAD,IAAO,CAAC,CAACA,CAJD,CAAlB;;AAKA,UAAMC,kBAAkB,GAAGzB,iBAAiB,CACzC0B,GADwB,CACnBJ,GAAD,IAAS;AACZ,aAAOA,GAAP,aAAOA,GAAP,uBAAOA,GAAG,CAAEH,eAAZ;AACD,KAHwB,EAIxBI,MAJwB,CAIhBC,CAAD,IAAO,CAAC,CAACA,CAJQ,CAA3B;;AAKA,WAAO;AACLN,MAAAA,SADK;AAELlB,MAAAA,iBAAiB,EAAEyB;AAFd,KAAP;AAID;;AAjD6C","sourcesContent":["import mapSeries from 'p-map-series';\nimport { BuildTask, BuiltTaskResult, BuildContext, ComponentResult, ArtifactDefinition } from '@teambit/builder';\nimport { ComponentID } from '@teambit/component';\nimport { ApplicationAspect } from './application.aspect';\nimport { ApplicationMain } from './application.main.runtime';\nimport { AppBuildContext } from './app-build-context';\n\nexport const BUILD_TASK = 'build_application';\n\nexport type AppsResults = {\n  componentResult: ComponentResult;\n  artifacts?: ArtifactDefinition[];\n};\n\nexport type Options = {\n  deploy: boolean;\n};\nexport class AppsBuildTask implements BuildTask {\n  name = BUILD_TASK;\n  aspectId = ApplicationAspect.id;\n  readonly location = 'end';\n  constructor(private application: ApplicationMain, private opt: Options = { deploy: true }) {}\n\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    const apps = this.application.listApps();\n    const { capsuleNetwork } = context;\n    const componentsResults = await mapSeries(apps, async (app): Promise<AppsResults | undefined> => {\n      const aspectId = this.application.getAppAspect(app.name);\n      if (!aspectId) return undefined;\n      const capsule = capsuleNetwork.seedersCapsules.getCapsuleIgnoreVersion(ComponentID.fromString(aspectId));\n      if (!capsule || !app.build) return undefined;\n      const { component } = capsule;\n      const appDeployContext: AppBuildContext = Object.assign(context, {\n        capsule,\n        appComponent: component,\n        name: app.name,\n      });\n      const deployContext = await app.build(appDeployContext);\n\n      return {\n        artifacts: deployContext.artifacts,\n        /**\n         * @guysaar223\n         * @ram8\n         * TODO: we need to think how to pass private metadata between build pipes, maybe create shared context\n         * or create new deploy context on builder\n         */\n        // @ts-ignore\n        componentResult: { component: capsule.component, _metadata: { deployContext } },\n      };\n    });\n\n    const artifacts = componentsResults\n      .flatMap((res) => {\n        return res?.artifacts;\n      })\n      .filter((a) => !!a) as ArtifactDefinition[];\n    const _componentsResults = componentsResults\n      .map((res) => {\n        return res?.componentResult;\n      })\n      .filter((a) => !!a) as ComponentResult[];\n    return {\n      artifacts,\n      componentsResults: _componentsResults,\n    };\n  }\n}\n"]}