{"version":3,"sources":["deploy.task.ts"],"names":["DEPLOY_TASK","DeployTask","constructor","application","builder","ApplicationAspect","id","execute","context","apps","listApps","componentsResults","app","aspectId","getAppAspect","name","undefined","capsule","capsuleNetwork","seedersCapsules","getCapsuleIgnoreVersion","ComponentID","fromString","component","buildTask","getBuildTask","previousTasksResults","envRuntime","componentResults","find","res","isEqual","ignoreVersion","_metadata","deployContext","appDeployContext","Object","assign","appComponent","deploy","componentResult","_componentsResults","map","filter","a","taskResults","runtime","task","env","BUILD_TASK"],"mappings":"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","sourcesContent":["import mapSeries from 'p-map-series';\nimport { BuilderMain, BuildTask, BuildContext, ComponentResult, TaskResults } from '@teambit/builder';\nimport { ComponentID } from '@teambit/component';\nimport { ApplicationAspect } from './application.aspect';\nimport { ApplicationMain } from './application.main.runtime';\nimport { BUILD_TASK } from './build.task';\nimport { AppDeployContext } from './app-deploy-context';\n\nexport const DEPLOY_TASK = 'deploy_application';\n\nexport class DeployTask implements BuildTask {\n  name = DEPLOY_TASK;\n  aspectId = ApplicationAspect.id;\n  readonly location = 'end';\n  constructor(private application: ApplicationMain, private builder: BuilderMain) {}\n\n  async execute(context: BuildContext): Promise<any> {\n    const apps = this.application.listApps();\n    const componentsResults = await mapSeries(apps, async (app): Promise<any> => {\n      const aspectId = this.application.getAppAspect(app.name);\n      if (!aspectId) return undefined;\n      const capsule = context.capsuleNetwork.seedersCapsules.getCapsuleIgnoreVersion(ComponentID.fromString(aspectId));\n      if (!capsule || !capsule?.component) return undefined;\n      const buildTask = this.getBuildTask(context.previousTasksResults, context.envRuntime.id);\n      if (!buildTask) return undefined;\n      const componentResults = buildTask.componentsResults.find((res) =>\n        res.component.id.isEqual(capsule.component.id, { ignoreVersion: true })\n      );\n      /**\n       * @guysaar223\n       * @ram8\n       * TODO: we need to think how to pass private metadata between build pipes, maybe create shared context\n       * or create new deploy context on builder\n       */\n      // @ts-ignore\n      const _metadata = componentResults?._metadata?.deployContext || {};\n      const appDeployContext: AppDeployContext = Object.assign(context, _metadata, {\n        capsule,\n        appComponent: capsule.component,\n      });\n      if (!app.deploy) return undefined;\n      await app.deploy(appDeployContext);\n\n      return {\n        componentResult: { component: capsule.component },\n      };\n    });\n\n    const _componentsResults = componentsResults\n      .map((res) => {\n        return res?.componentResult;\n      })\n      .filter((a) => !!a) as ComponentResult[];\n\n    return {\n      componentsResults: _componentsResults,\n    };\n  }\n\n  private getBuildTask(taskResults: TaskResults[], runtime: string) {\n    return taskResults.find(\n      ({ task, env }) => task.aspectId === ApplicationAspect.id && task.name === BUILD_TASK && env.id === runtime\n    );\n  }\n}\n"]}