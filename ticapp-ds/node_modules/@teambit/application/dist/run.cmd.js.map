{"version":3,"sources":["run.cmd.tsx"],"names":["RunCmd","constructor","application","logger","render","appName","dev","skipWatch","port","runApp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAUO,MAAMA,MAAN,CAAgC;AAWrCC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,WAJC,EAMDC,MANC,EAOT;AAAA,SAHQD,WAGR,GAHQA,WAGR;AAAA,SADQC,MACR,GADQA,MACR;AAAA,kDAjBK,WAiBL;AAAA,yDAhBY,oBAgBZ;AAAA,mDAfM,GAeN;AAAA,mDAdM,MAcN;AAAA,qDAbQ,CACR,CAAC,GAAD,EAAM,KAAN,EAAa,oCAAb,CADQ,EAER,CAAC,GAAD,EAAM,SAAN,EAAiB,8DAAjB,CAFQ,EAGR,CAAC,EAAD,EAAK,YAAL,EAAmB,4EAAnB,CAHQ,CAaR;AAAE;;AAEQ,QAANC,MAAM,CAAC,CAACC,OAAD,CAAD,EAAsB;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAtB,EAAmF;AAC7F;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAM,KAAKN,WAAL,CAAiBO,MAAjB,CAAwBJ,OAAxB,EAAiC;AACtDC,MAAAA,GADsD;AAEtDC,MAAAA;AAFsD,KAAjC,CAAvB;;AAKA,QAAIC,IAAJ,EAAU;AACR,0BACE,+BAAC,WAAD,QACGH,OADH,0CACgDG,IADhD,CADF;AAKD;;AACD,wBAAO,+BAAC,WAAD,QAAOH,OAAP,oBAAP,CAd6F,CAe7F;AACD;;AApCoC","sourcesContent":["import React from 'react';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { Text } from 'ink';\nimport { Logger } from '@teambit/logger';\nimport { ApplicationMain } from './application.main.runtime';\n\ntype RunOptions = {\n  dev: boolean;\n  verbose: boolean;\n  skipWatch: boolean;\n};\n\nexport class RunCmd implements Command {\n  name = 'run <app>';\n  description = 'run an application';\n  alias = 'c';\n  group = 'apps';\n  options = [\n    ['d', 'dev', 'start the application in dev mode.'],\n    ['v', 'verbose', 'showing verbose output for inspection and prints stack trace'],\n    ['', 'skip-watch', 'avoid running the watch process that compiles components in the background'],\n  ] as CommandOptions;\n\n  constructor(\n    /**\n     * access to the extension instance.\n     */\n    private application: ApplicationMain,\n\n    private logger: Logger\n  ) {}\n\n  async render([appName]: [string], { dev, skipWatch }: RunOptions): Promise<React.ReactElement> {\n    // remove wds logs until refactoring webpack to a worker through the Worker aspect.\n    const { port } = await this.application.runApp(appName, {\n      dev,\n      skipWatch,\n    });\n\n    if (port) {\n      return (\n        <Text>\n          {appName} app is running on http://localhost:{port}\n        </Text>\n      );\n    }\n    return <Text>{appName} app is running</Text>;\n    // return <UIServerConsole appName={appName} futureUiServer={uiServer} />;\n  }\n}\n"]}