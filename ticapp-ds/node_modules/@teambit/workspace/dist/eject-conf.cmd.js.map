{"version":3,"sources":["eject-conf.cmd.ts"],"names":["EjectConfCmd","constructor","workspace","report","args","options","ejectResult","json","paths","map","result","configPath","p","path","relative","join","chalk","green","bold","pattern","ejectOptions","propagate","override","componentIds","idsByPattern","results","ejectMultipleConfigs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAWe,MAAMA,YAAN,CAAsC;AAWnDC,EAAAA,WAAW,CAASC,SAAT,EAA+B;AAAA,SAAtBA,SAAsB,GAAtBA,SAAsB;AAAA,kDAVnC,sBAUmC;AAAA,yDAT5B,iEAS4B;AAAA,iEARnB,GAAE,+BAAa,YAAb,CAA2B,EAQV;AAAA,mDAPlC,EAOkC;AAAA,mDANlC,aAMkC;AAAA,qDALhC,CACR,CAAC,GAAD,EAAM,WAAN,EAAmB,wCAAnB,CADQ,EAER,CAAC,GAAD,EAAM,UAAN,EAAkB,wBAAlB,CAFQ,CAKgC;AAAE;;AAEhC,QAANC,MAAM,CAACC,IAAD,EAAsBC,OAAtB,EAAqE;AAC/E,UAAMC,WAAW,GAAG,MAAM,KAAKC,IAAL,CAAUH,IAAV,EAAgBC,OAAhB,CAA1B;AACA,UAAMG,KAAK,GAAGF,WAAW,CACtBG,GADW,CACNC,MAAD,IAAYA,MAAM,CAACC,UADZ,EAEXF,GAFW,CAENG,CAAD,IAAOC,gBAAKC,QAAL,CAAc,KAAKZ,SAAL,CAAeW,IAA7B,EAAmCD,CAAnC,CAFA,EAGXG,IAHW,CAGN,IAHM,CAAd;AAIA,WAAOC,iBAAMC,KAAN,CAAa;AACxB,EAAED,iBAAME,IAAN,CAAWV,KAAX,CAAkB,EADT,CAAP;AAED;;AAES,QAAJD,IAAI,CAAC,CAACY,OAAD,CAAD,EAA2Bd,OAA3B,EAAqF;AAC7F,UAAMe,YAAY,GAAGf,OAArB;;AACA,QAAIe,YAAY,CAACC,SAAb,KAA2B,MAA/B,EAAuC;AACrCD,MAAAA,YAAY,CAACC,SAAb,GAAyB,IAAzB;AACD;;AACD,QAAID,YAAY,CAACE,QAAb,KAA0B,MAA9B,EAAsC;AACpCF,MAAAA,YAAY,CAACE,QAAb,GAAwB,IAAxB;AACD;;AAED,UAAMC,YAAY,GAAG,MAAM,KAAKrB,SAAL,CAAesB,YAAf,CAA4BL,OAA5B,CAA3B;AACA,UAAMM,OAAO,GAAG,MAAM,KAAKvB,SAAL,CAAewB,oBAAf,CAAoCH,YAApC,EAAkDH,YAAlD,CAAtB;AACA,WAAOK,OAAP;AACD;;AAnCkD","sourcesContent":["import path from 'path';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { PATTERN_HELP } from '@teambit/legacy/dist/constants';\n\nimport { EjectConfOptions, EjectConfResult, Workspace } from './workspace';\n\ntype EjectConfArgs = [string];\n// From the cli we might get those as string in case we run it like --propagate true (return string) as opposed to only --propagate\ntype EjectConfOptionsCLI = {\n  propagate: string | boolean | undefined;\n  override: string | boolean | undefined;\n};\n\nexport default class EjectConfCmd implements Command {\n  name = 'eject-conf <pattern>';\n  description = 'eject components configuration (create a `component.json` file)';\n  extendedDescription = `${PATTERN_HELP('eject-conf')}`;\n  alias = '';\n  group = 'development';\n  options = [\n    ['p', 'propagate', 'mark propagate true in the config file'],\n    ['o', 'override', 'override file if exist'],\n  ] as CommandOptions;\n\n  constructor(private workspace: Workspace) {}\n\n  async report(args: EjectConfArgs, options: EjectConfOptionsCLI): Promise<string> {\n    const ejectResult = await this.json(args, options);\n    const paths = ejectResult\n      .map((result) => result.configPath)\n      .map((p) => path.relative(this.workspace.path, p))\n      .join('\\n');\n    return chalk.green(`successfully ejected config in the following path(s)\n${chalk.bold(paths)}`);\n  }\n\n  async json([pattern]: EjectConfArgs, options: EjectConfOptionsCLI): Promise<EjectConfResult[]> {\n    const ejectOptions = options;\n    if (ejectOptions.propagate === 'true') {\n      ejectOptions.propagate = true;\n    }\n    if (ejectOptions.override === 'true') {\n      ejectOptions.override = true;\n    }\n\n    const componentIds = await this.workspace.idsByPattern(pattern);\n    const results = await this.workspace.ejectMultipleConfigs(componentIds, ejectOptions as EjectConfOptions);\n    return results;\n  }\n}\n"]}