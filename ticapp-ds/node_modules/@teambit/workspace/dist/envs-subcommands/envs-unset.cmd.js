"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnvsUnsetCmd = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("@teambit/legacy/dist/constants");

  _constants = function () {
    return data;
  };

  return data;
}

class EnvsUnsetCmd {
  constructor(workspace) {
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'unset <component>');
    (0, _defineProperty2().default)(this, "description", 'unset an environment from component(s)');
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "extendedDescription", `${(0, _constants().PATTERN_HELP)('env unset')}`);
  }

  async report([pattern]) {
    const componentIds = await this.workspace.idsByPattern(pattern);
    const {
      changed
    } = await this.workspace.unsetEnvFromComponents(componentIds);
    return `successfully removed env from the following component(s):
${changed.map(id => id.toString()).join('\n')}`;
  }

}

exports.EnvsUnsetCmd = EnvsUnsetCmd;

//# sourceMappingURL=envs-unset.cmd.js.map