{"version":3,"sources":["workspace.ts"],"names":["AspectSpecificField","ComponentAdded","ComponentChanged","ComponentRemoved","DEFAULT_VENDOR_DIR","Workspace","constructor","pubsub","config","consumer","scope","componentAspect","isolator","dependencyResolver","variants","aspectLoader","logger","componentList","ComponentsList","harmony","onComponentLoadSlot","onComponentChangeSlot","envs","onComponentAddSlot","onComponentRemoveSlot","onPreWatchSlot","graphql","Watcher","componentLoadedSelfAsAspects","maxSize","owner","defaultOwner","componentLoader","WorkspaceComponentLoader","validateConfig","bitMap","BitMap","componentDefaultScopeFromComponentDirAndNameWithoutConfigFile","bind","primitive","promise","maxAge","isLegacy","BitError","defaultScope","InvalidScopeName","path","getPath","modulesPath","join","onComponentLoad","loadFn","register","registerOnComponentChange","onComponentChangeFunc","registerOnComponentAdd","onComponentAddFunc","registerOnComponentRemove","onComponentRemoveFunc","registerOnPreWatch","onPreWatchFunc","name","tokenizedPath","split","length","icon","hasModifiedDependencies","component","componentsList","listAutoTagPendingComponents","isAutoTag","find","consumerComponent","id","isEqualWithoutVersion","_legacy","getComponentIssues","state","_consumer","issues","getComponentStatus","status","getComponentStatusById","ComponentStatus","fromLegacy","isOutdated","list","filter","legacyIds","getAllIdsAvailableOnLane","ids","resolveMultipleComponentIds","getMany","limit","offset","listInvalid","getInvalid","listIds","bitmapIdsFromCurrentLane","hasId","componentId","found","isEqual","hasName","Boolean","fullName","hasIdNested","includeCache","modified","listModifiedComponents","componentIds","map","ComponentID","newComponents","listNewComponents","getAllComponentIds","bitIds","getAuthoredAndImportedBitIds","getNewAndModifiedIds","listTagPendingComponents","newAndModified","getLogs","shortHash","startsFrom","getLegacyGraph","legacyGraph","buildOneGraphForComponents","getDependentsIds","workspaceGraph","DependencyGraph","buildGraphFromWorkspace","workspaceDependencyGraph","workspaceDependents","getDependentsInfo","dependentsLegacyIds","flat","_","dependentsLegacyNoDup","BitIds","uniqFromArray","dependentsIds","loadCapsules","components","load","comp","capsule","network","isolateComponents","c","packageManagerConfigRootDir","resolvedComponents","graphCapsules","getCapsule","Error","toString","ResolvedComponent","createAspectList","extensionDataList","entiresP","entry","extensionDataEntryToAspectEntry","entries","Promise","all","createAspectListFromEntries","dataEntry","AspectEntry","resolveComponentId","get","forCapsule","legacyComponent","useCache","storeInCache","debug","tryLoadAsAspect","undefined","isUsingEnvEnv","isCoreAspect","toStringWithoutVersion","isAspectLoaded","set","loadAspects","e","delete","getEnvSystemDescriptor","env","calculateEnv","__getDescriptor","systemDescriptor","services","isEnvRegistered","getServices","getDescriptor","type","description","toObject","clearCache","clearComponentCache","clearOneComponentCache","triggerOnComponentChange","files","initiator","write","onChangeEntries","toArray","results","extension","onChangeFunc","onChangeResult","push","extensionId","publish","componentChanged","triggerOnComponentAdd","onAddEntries","filesystem","file","onAddFunc","onAddResult","componentAdded","triggerOnComponentRemove","onRemoveEntries","onRemoveFunc","onRemoveResult","componentRemoved","getState","hash","getSnap","getCurrentLaneId","getCurrentRemoteLaneId","currentLane","isDefault","trackData","legacyScope","lanes","getRemoteTrackedDataByLocalLane","scopeComponentImporter","ScopeComponentsImporter","getInstance","laneId","RemoteLaneId","from","remoteLane","remoteScope","importLanes","lane","err","ScopeNotFoundOrDenied","LaneNotFound","InvalidScopeNameFromRemote","loader","stop","warn","message","getDefaultExtensions","extensions","ExtensionDataList","fromConfigObject","ejectMultipleConfigs","options","ejectConfig","componentFromScope","componentExtensions","aspects","componentDir","ignoreVersion","componentConfigFile","ComponentConfigFile","propagate","override","removeEntireConfig","configPath","composePath","resolveScopeAspectListIds","aspectListFromScope","resolvedList","pmap","newId","newEntry","legacy","byPattern","pattern","finalPattern","targetIds","spec","match","idsByPattern","throwForNoMatch","includes","exists","patterns","p","trim","idsToCheck","idsFiltered","getComponentsByUserInput","includeDependents","newAndModifiedIds","dependentsIdsFiltered","dependents","getComponentsUsingEnv","throwIfNotFound","allComps","allEnvs","createEnvironment","foundEnv","runtimeEnvs","runtimeEnv","availableEnvs","getManyByLegacy","getIfExist","importAndGetMany","import","reFetchUnBuiltVersion","shouldReFetchUnBuiltVersion","add","componentPaths","main","addComponent","AddComponents","addResults","track","addOwnerToScopeName","rootDir","componentName","mainFile","result","addedComponent","addedComponents","f","relativePath","warnings","scopeName","isSelfHosted","isHostedByBit","wsDefaultScope","rootPath","pathToWrite","relative","fs","outputFile","contents","bitMapOptions","componentDirFromLegacyId","componentPackageDir","packageName","packageDir","toAbsolutePath","bitId","componentMap","getComponent","relativeComponentDir","getComponentDir","NoComponentDir","componentDirToAbsolute","componentDefaultScope","componentDefaultScopeFromComponentDirAndName","componentConfigFileFromComponentDirAndName","bitMapId","getExistingBitId","bitMapEntry","variantConfig","byRootDirAndName","isVendor","isVendorComponentByComponentDir","excludeOrigins","configFileExtensions","variantsExtensions","wsDefaultExtensions","mergeFromScope","getComponentIfExist","bitMapExtensions","scopeExtensions","specific","nonSpecific","scopeExtensionsNonSpecific","scopeExtensionsSpecific","toLegacy","extensionsToMerge","envWasFoundPreviously","loadedExtensionIds","removedExtensionIds","addAndLoadExtensions","origin","extraData","extData","isRemoved","stringId","extsWithoutRemoved","filterRemovedExtensions","extsWithoutLoaded","fromArray","ext","selfInMergedExtensions","findExtension","toStringWithoutScopeAndVersion","extsWithoutSelf","remove","loadExtensions","extensionDataListFiltered","envIsCurrentlySet","filterEnvsFromExtensionsIfNeeded","setDataListAsSpecific","forEach","continuePropagating","appliedRules","sortedMatches","specificity","isDefaultExtension","resolveExtensionListIds","afterMerge","mergeConfigs","withoutRemoved","beforeMerge","envAspect","EnvsAspect","envFromEnvsAspect","envsNotFromEnvsAspect","nonEnvs","shouldIgnoreCurrentEnv","triggerOnPreWatch","watchOpts","preWatchFunctions","values","func","addSpecificComponentConfig","aspectId","addAspect","addComponentConfig","removeSpecificComponentConfig","markWithMinusIfNotExist","removeAspect","removeComponentConfig","getSpecificComponentConfig","getBitmapEntry","extensionList","promises","vendorDir","vendor","directory","absComponentDir","defaultScopeFromVariantsOrWs","getAspectsGraphWithoutCore","isAspect","coreAspectsStringIds","getCoreAspectIds","coreAspectsComponentIds","BitId","parse","coreAspectsBitIds","changeScope","ignoredIds","concat","throwOnError","neededFor","info","notLoadedIds","idsWithoutCore","importAndGetAspects","data","getEnvData","isUsingAspectEnv","isValidAspect","IncorrectEnvAspect","DEFAULT_ENV","error","graph","idsStr","nodes","compIds","workspaceComps","scopeComps","groupComponentsByWorkspaceAndScope","scopeIds","aspect","workspaceAspects","requireComponents","workspaceManifests","getManifestsFromRequireableExtensions","potentialPluginsIndexes","manifest","index","workspaceManifestsIds","m","scopeIdsGrouped","groupAspectIdsByEnvOfTheList","scopeEnvsManifestsIds","scopeOtherManifests","other","getManifestsGraphRecursively","scopeOtherManifestsIds","loadExtensionsByManifests","pluginsWorkspaceComps","pluginsWorkspaceAspects","pluginsWorkspaceManifests","ignoreIds","shouldIgnoreFunc","graphFromFsBuilder","GraphFromFsBuilder","buildGraph","resolveAspects","runtimeName","missingPaths","stringIds","idsToResolve","extensionsIds","coreAspectsIds","userAspectsIds","componentIdsToResolve","workspaceIds","groupIdsByWorkspaceAndScope","wsComponents","aspectDefs","localPath","getComponentPackagePath","isExist","pathExists","aspectPath","runtimePath","getRuntimePath","scopeAspectDefs","coreAspectDefs","coreId","rawDef","loadDefinition","coreAspect","allDefs","uniqDefs","def","defs","existOnWorkspace","originatedFrom","extensionsIdsP","extensionEntry","loadedExtensions","extensionsToLoad","getTempDir","PREFIX","cacheDir","existsSync","mkdirSync","recursive","resolveP","requireFunc","plugins","getPlugins","has","MainRuntime","require","RequireableComponent","resolved","getComponentsDirectory","ComponentMap","as","install","packages","_addPackages","addMissingPeers","compDirMap","mergedRootPolicy","getWorkspacePolicy","depsFilterFn","generateFilterFnForDepsFromLocalRemote","pmInstallOptions","dedupe","copyPeerToRuntimeOnRoot","copyPeerToRuntimeOnComponents","dependencyFilterFn","overrides","packageImportMethod","missingPeers","getMissingPeerDependencies","missingPeerPackages","Object","peerName","range","console","setStatusLine","importObjects","consoleSuccess","_installModules","lifecycleType","DependencyTypeNotSupportedInPolicy","resolver","getVersionResolver","resolvedPackagesP","resolveRemoteVersion","resolvedPackages","newWorkspacePolicyEntries","resolvedPackage","version","versionWithPrefix","getVersionWithSavePrefix","savePrefix","dependencyId","value","addToRootPolicy","updateExisting","persistConfig","_getComponentsWithDependencyPolicies","allComponentIds","componentConfigFiles","componentPoliciesById","depResolverConfig","DependencyResolverAspect","policy","updateDependencies","variantPatterns","raw","variantPoliciesByPatterns","_variantPatternsToDepPolicesDict","outdatedPkgs","getOutdatedPkgsFromPolicies","outdatedPkgsToUpdate","off","on","updatedVariants","updatedComponents","applyUpdates","_updateVariantsPolicies","updatedComponentConfigFiles","_saveManyComponentConfigFiles","_reloadConsumer","variantPattern","updateVariantPolicies","setExtension","overrideExisting","Array","chalk","cyan","getPackageManagerName","installer","getInstaller","installTeambitBit","link","linkTeambitBit","legacyLink","linkCoreAspects","linkNestedDepsInNM","componentFsCache","deleteAllDependenciesDataCache","fetchObject","linker","getLinker","linkingOptions","res","remotes","_legacyRemotes","reg","getRegistries","packageScopes","keys","scopes","dependencyList","filtered","dep","ComponentDependency","isHub","some","startsWith","ComponentNotFound","configStr","JSON","stringify","workspaceConfig","importOptions","verbose","merge","objectsOnly","writeDists","writeConfig","installNpmPackages","importDependenciesDirectly","importDependents","importer","Importer","NothingToImport","ConsumerComponent","defaultDirectory","legacyDefaultDirectory","getDefaultScope","fromString","legacyId","getParsedIdIfExist","idWithVersion","idWithoutVersion","_bitMapId","_bitMapIdWithoutVersion","_bitMapIdWithVersion","changeVersion","endsWith","defaultScopeForBitmapId","getFromBitmapAddDefaultScope","_bitmapIdWithVersionForSource","fromScope","hasScope","resolveExtensionsList","resolveMergedExtensionsP","resolvedId","addDefaultScopeToExtensionsList","uninstallDependencies","removeFromRootPolicy","setEnvToComponents","envId","envIdStr","existsOnWorkspace","envIdStrNoVersion","unsetEnvFromComponents","changed","unchanged","envsAspect","currentEnv","REMOVE_EXTENSION_SPECIAL_SIGN","commandsToReFetch","process","argv"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAWA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAaA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AASA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AASA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA5GA;AAkHO,MAAMA,mBAAmB,GAAG,YAA5B;;AACA,MAAMC,cAAc,GAAG,gBAAvB;;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;;AA0CP,MAAMC,kBAAkB,GAAG,QAA3B;AAEA;AACA;AACA;;AACO,MAAMC,SAAN,CAA4C;AAMa;AAE9DC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,MAJC,EAMDC,MANC;AAOT;AACJ;AACA;AACWC,EAAAA,QAVE;AAYT;AACJ;AACA;AACaC,EAAAA,KAfA;AAiBT;AACJ;AACA;AACYC,EAAAA,eApBC,EAsBDC,QAtBC,EAwBDC,kBAxBC,EA0BDC,QA1BC,EA4BDC,YA5BC,EA8BDC,MA9BC,EAgCDC,aAA6B,GAAG,KAAIC,yBAAJ,EAAmBT,QAAnB,CAhC/B;AAkCT;AACJ;AACA;AACYU,EAAAA,OArCC;AAuCT;AACJ;AACA;AACWC,EAAAA,mBA1CE;AA4CT;AACJ;AACA;AACYC,EAAAA,qBA/CC,EAiDDC,IAjDC;AAmDT;AACJ;AACA;AACYC,EAAAA,kBAtDC,EAwDDC,qBAxDC,EA0DDC,cA1DC,EA4DDC,OA5DC,EA6DT;AAAA;;AAAA,SAzDQnB,MAyDR,GAzDQA,MAyDR;AAAA,SAvDQC,MAuDR,GAvDQA,MAuDR;AAAA,SAnDOC,QAmDP,GAnDOA,QAmDP;AAAA,SA9CSC,KA8CT,GA9CSA,KA8CT;AAAA,SAzCQC,eAyCR,GAzCQA,eAyCR;AAAA,SAvCQC,QAuCR,GAvCQA,QAuCR;AAAA,SArCQC,kBAqCR,GArCQA,kBAqCR;AAAA,SAnCQC,QAmCR,GAnCQA,QAmCR;AAAA,SAjCQC,YAiCR,GAjCQA,YAiCR;AAAA,SA/BQC,MA+BR,GA/BQA,MA+BR;AAAA,SA7BQC,aA6BR,GA7BQA,aA6BR;AAAA,SAxBQE,OAwBR,GAxBQA,OAwBR;AAAA,SAnBOC,mBAmBP,GAnBOA,mBAmBP;AAAA,SAdQC,qBAcR,GAdQA,qBAcR;AAAA,SAZQC,IAYR,GAZQA,IAYR;AAAA,SAPQC,kBAOR,GAPQA,kBAOR;AAAA,SALQC,qBAKR,GALQA,qBAKR;AAAA,SAHQC,cAGR,GAHQA,cAGR;AAAA,SADQC,OACR,GADQA,OACR;AAAA,sDApES,IAoET;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAiCiB,KAAIC,kBAAJ,EAAY,IAAZ,EAAkB,KAAKpB,MAAvB,CAjCjB;AACA,SAAKqB,4BAAL,GAAoC,yCAAoB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAApB,CAApC,CADA,CAGA;;AACA,SAAKC,KAAL,mBAAa,KAAKtB,MAAlB,iDAAa,aAAauB,YAA1B;AACA,SAAKC,eAAL,GAAuB,KAAIC,oDAAJ,EAA6B,IAA7B,EAAmCjB,MAAnC,EAA2CH,kBAA3C,EAA+DS,IAA/D,CAAvB;AACA,SAAKY,cAAL;AACA,SAAKC,MAAL,GAAc,KAAIC,gBAAJ,EAAW,KAAK3B,QAAL,CAAc0B,MAAzB,EAAiC,KAAK1B,QAAtC,CAAd,CAPA,CAQA;;AACA,SAAK4B,6DAAL,GAAqE,yBACnE,KAAKA,6DAAL,CAAmEC,IAAnE,CAAwE,IAAxE,CADmE,EAEnE;AACEC,MAAAA,SAAS,EAAE,IADb;AAEEC,MAAAA,OAAO,EAAE,IAFX;AAGEC,MAAAA,MAAM,EAAE,KAAK,IAHf,CAGqB;;AAHrB,KAFmE,CAArE;AAQD;;AAEOP,EAAAA,cAAc,GAAG;AACvB,QAAI,KAAKzB,QAAL,CAAciC,QAAlB,EAA4B;AAC5B,QAAI,uBAAQ,KAAKlC,MAAb,CAAJ,EACE,MAAM,KAAImC,oBAAJ,EACH,qGADG,CAAN;AAGF,UAAMC,YAAY,GAAG,KAAKpC,MAAL,CAAYoC,YAAjC;AACA,QAAI,CAACA,YAAL,EAAmB,MAAM,KAAID,oBAAJ,EAAa,yBAAb,CAAN;AACnB,QAAI,CAAC,qCAAiBC,YAAjB,CAAL,EAAqC,MAAM,KAAIC,+BAAJ,EAAqBD,YAArB,CAAN;AACtC;AAED;AACF;AACA;;;AAGE;AACF;AACA;AACU,MAAJE,IAAI,GAAG;AACT,WAAO,KAAKrC,QAAL,CAAcsC,OAAd,EAAP;AACD;AAED;;;AACuB,MAAXC,WAAW,GAAG;AACxB,WAAOF,gBAAKG,IAAL,CAAU,KAAKH,IAAf,EAAqB,cAArB,CAAP;AACD;;AAEW,MAARJ,QAAQ,GAAY;AACtB,WAAO,KAAKjC,QAAL,CAAciC,QAArB;AACD;;AAEDQ,EAAAA,eAAe,CAACC,MAAD,EAA0B;AACvC,SAAK/B,mBAAL,CAAyBgC,QAAzB,CAAkCD,MAAlC;AACA,WAAO,IAAP;AACD;;AAEDE,EAAAA,yBAAyB,CAACC,qBAAD,EAA2C;AAClE,SAAKjC,qBAAL,CAA2B+B,QAA3B,CAAoCE,qBAApC;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,sBAAsB,CAACC,kBAAD,EAAqC;AACzD,SAAKjC,kBAAL,CAAwB6B,QAAxB,CAAiCI,kBAAjC;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,yBAAyB,CAACC,qBAAD,EAA2C;AAClE,SAAKlC,qBAAL,CAA2B4B,QAA3B,CAAoCM,qBAApC;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,cAAD,EAA6B;AAC7C,SAAKnC,cAAL,CAAoB2B,QAApB,CAA6BQ,cAA7B;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;;;AACU,MAAJC,IAAI,GAAG;AACT,QAAI,KAAKrD,MAAL,CAAYqD,IAAhB,EAAsB,OAAO,KAAKrD,MAAL,CAAYqD,IAAnB;AACtB,UAAMC,aAAa,GAAG,KAAKhB,IAAL,CAAUiB,KAAV,CAAgB,GAAhB,CAAtB;AACA,WAAOD,aAAa,CAACA,aAAa,CAACE,MAAd,GAAuB,CAAxB,CAApB;AACD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAO,KAAKzD,MAAL,CAAYyD,IAAnB;AACD;;AAE4B,QAAvBC,uBAAuB,CAACC,SAAD,EAAuB;AAClD,UAAMC,cAAc,GAAG,KAAIlD,yBAAJ,EAAmB,KAAKT,QAAxB,CAAvB;AACA,UAAM4D,4BAA4B,GAAG,MAAMD,cAAc,CAACC,4BAAf,EAA3C;AACA,UAAMC,SAAS,GAAGD,4BAA4B,CAACE,IAA7B,CAAmCC,iBAAD,IAClDA,iBAAiB,CAACC,EAAlB,CAAqBC,qBAArB,CAA2CP,SAAS,CAACM,EAAV,CAAaE,OAAxD,CADgB,CAAlB;AAGA,QAAIL,SAAJ,EAAe,OAAO,IAAP;AACf,WAAO,KAAP;AACD;AAED;AACF;AACA;;;AACEM,EAAAA,kBAAkB,CAACT,SAAD,EAA0C;AAC1D,WAAOA,SAAS,CAACU,KAAV,CAAgBC,SAAhB,CAA0BC,MAA1B,IAAoC,IAA3C;AACD;AAED;AACF;AACA;;;AAC0B,QAAlBC,kBAAkB,CAACb,SAAD,EAAiD;AACvE,UAAMc,MAAM,GAAG,MAAM,KAAKxE,QAAL,CAAcyE,sBAAd,CAAqCf,SAAS,CAACM,EAAV,CAAaE,OAAlD,CAArB;AACA,UAAMT,uBAAuB,GAAG,MAAM,KAAKA,uBAAL,CAA6BC,SAA7B,CAAtC;AACA,WAAOgB,mCAAgBC,UAAhB,CAA2BH,MAA3B,EAAmCf,uBAAnC,EAA4DC,SAAS,CAACkB,UAAV,EAA5D,CAAP;AACD;AAED;AACF;AACA;;;AACY,QAAJC,IAAI,CAACC,MAAD,EAAmE;AAC3E,UAAMC,SAAS,GAAG,KAAK/E,QAAL,CAAc0B,MAAd,CAAqBsD,wBAArB,EAAlB;AACA,UAAMC,GAAG,GAAG,MAAM,KAAKC,2BAAL,CAAiCH,SAAjC,CAAlB;AACA,WAAO,KAAKI,OAAL,CAAaL,MAAM,IAAIA,MAAM,CAACM,KAAjB,GAAyB,qBAAMH,GAAN,EAAWH,MAAM,CAACO,MAAlB,EAA0BP,MAAM,CAACO,MAAP,GAAgBP,MAAM,CAACM,KAAjD,CAAzB,GAAmFH,GAAhG,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACmB,QAAXK,WAAW,GAAgC;AAC/C,UAAMP,SAAS,GAAG,KAAK/E,QAAL,CAAc0B,MAAd,CAAqBsD,wBAArB,EAAlB;AACA,UAAMC,GAAG,GAAG,MAAM,KAAKC,2BAAL,CAAiCH,SAAjC,CAAlB;AACA,WAAO,KAAKxD,eAAL,CAAqBgE,UAArB,CAAgCN,GAAhC,CAAP;AACD;AAED;AACF;AACA;;;AACe,QAAPO,OAAO,GAA2B;AACtC,WAAO,KAAKN,2BAAL,CAAiC,KAAKlF,QAAL,CAAcyF,wBAA/C,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACa,QAALC,KAAK,CAACC,WAAD,EAA6C;AACtD,UAAMV,GAAG,GAAG,MAAM,KAAKO,OAAL,EAAlB;AACA,UAAMI,KAAK,GAAGX,GAAG,CAACnB,IAAJ,CAAUE,EAAD,IAAQ;AAC7B,aAAOA,EAAE,CAAC6B,OAAH,CAAWF,WAAX,CAAP;AACD,KAFa,CAAd;AAGA,WAAO,CAAC,CAACC,KAAT;AACD;AAED;AACF;AACA;;;AACe,QAAPE,OAAO,CAAC1C,IAAD,EAAiC;AAC5C,UAAM6B,GAAG,GAAG,MAAM,KAAKO,OAAL,EAAlB;AACA,WAAOO,OAAO,CAACd,GAAG,CAACnB,IAAJ,CAAUE,EAAD,IAAQA,EAAE,CAACgC,QAAH,KAAgB5C,IAAjC,CAAD,CAAd;AACD;AAED;AACF;AACA;AACA;;;AACmB,QAAX6C,WAAW,CAACN,WAAD,EAA2BO,YAAY,GAAG,IAA1C,EAAkE;AACjF,UAAMN,KAAK,GAAG,MAAM,KAAKF,KAAL,CAAWC,WAAX,CAApB;AACA,QAAIC,KAAJ,EAAW,OAAOA,KAAP;AACX,WAAO,KAAK3F,KAAL,CAAWgG,WAAX,CAAuBN,WAAvB,EAAoCO,YAApC,CAAP;AACD;AAED;AACF;AACA;;;AACgB,QAARC,QAAQ,GAAyB;AACrC,UAAMlB,GAAQ,GAAG,MAAM,KAAKzE,aAAL,CAAmB4F,sBAAnB,CAA0C,KAA1C,CAAvB;AACA,UAAMC,YAAY,GAAGpB,GAAG,CAACqB,GAAJ,CAAQC,yBAAY5B,UAApB,CAArB;AACA,WAAO,KAAKQ,OAAL,CAAakB,YAAb,CAAP;AACD;AAED;AACF;AACA;;;AACqB,QAAbG,aAAa,GAAG;AACpB,UAAMvB,GAAQ,GAAG,MAAM,KAAKzE,aAAL,CAAmBiG,iBAAnB,CAAqC,KAArC,CAAvB;AACA,UAAMJ,YAAY,GAAGpB,GAAG,CAACqB,GAAJ,CAAQC,yBAAY5B,UAApB,CAArB;AACA,WAAO,KAAKQ,OAAL,CAAakB,YAAb,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEK,EAAAA,kBAAkB,GAA2B;AAC3C,UAAMC,MAAM,GAAG,KAAK3G,QAAL,CAAc0B,MAAd,CAAqBkF,4BAArB,EAAf;AACA,WAAO,KAAK1B,2BAAL,CAAiCyB,MAAjC,CAAP;AACD;;AAEyB,QAApBE,oBAAoB,GAA2B;AACnD,UAAM5B,GAAG,GAAG,MAAM,KAAKzE,aAAL,CAAmBsG,wBAAnB,EAAlB;AACA,WAAO,KAAK5B,2BAAL,CAAiCD,GAAjC,CAAP;AACD;;AAEmB,QAAd8B,cAAc,GAAyB;AAC3C,UAAM9B,GAAG,GAAG,MAAM,KAAK4B,oBAAL,EAAlB;AACA,WAAO,KAAK1B,OAAL,CAAaF,GAAb,CAAP;AACD;;AAEY,QAAP+B,OAAO,CAAChD,EAAD,EAAkBiD,SAAS,GAAG,KAA9B,EAAqCC,UAArC,EAAmF;AAC9F,WAAO,KAAKjH,KAAL,CAAW+G,OAAX,CAAmBhD,EAAnB,EAAuBiD,SAAvB,EAAkCC,UAAlC,CAAP;AACD;;AAEmB,QAAdC,cAAc,CAAClC,GAAD,EAA4C;AAC9D,QAAI,CAACA,GAAD,IAAQA,GAAG,CAAC1B,MAAJ,GAAa,CAAzB,EAA4B0B,GAAG,GAAG,MAAM,KAAKO,OAAL,EAAZ;AAE5B,UAAMT,SAAS,GAAGE,GAAG,CAACqB,GAAJ,CAAStC,EAAD,IAAQA,EAAE,CAACE,OAAnB,CAAlB;AAEA,UAAMkD,WAAW,GAAG,MAAM,KAAKC,0BAAL,CAAgCtC,SAAhC,CAA1B;AACA,WAAOqC,WAAP;AACD;AAED;AACF;AACA;;;AACwB,QAAhBE,gBAAgB,CAACrC,GAAD,EAA6C;AACjE,UAAMsC,cAAc,GAAG,MAAMC,sBAAgBC,uBAAhB,CAAwC,KAAKzH,QAA7C,EAAuD,IAAvD,CAA7B;AACA,UAAM0H,wBAAwB,GAAG,KAAIF,qBAAJ,EAAoBD,cAApB,CAAjC;AACA,UAAMI,mBAAmB,GAAG1C,GAAG,CAACqB,GAAJ,CAAStC,EAAD,IAAQ0D,wBAAwB,CAACE,iBAAzB,CAA2C5D,EAAE,CAACE,OAA9C,CAAhB,CAA5B;AACA,UAAM2D,mBAAmB,GAAGF,mBAAmB,CAACG,IAApB,GAA2BxB,GAA3B,CAAgCyB,CAAD,IAAOA,CAAC,CAAC/D,EAAxC,CAA5B;;AACA,UAAMgE,qBAAqB,GAAGC,gBAAOC,aAAP,CAAqBL,mBAArB,CAA9B;;AACA,UAAMM,aAAa,GAAG,MAAM,KAAKjD,2BAAL,CAAiC8C,qBAAjC,CAA5B;AACA,WAAOG,aAAP;AACD;;AAEiB,QAAZC,YAAY,CAACzB,MAAD,EAAmB;AACnC;AACA,UAAM0B,UAAU,GAAG,MAAM,KAAKC,IAAL,CAAU3B,MAAV,CAAzB;AACA,WAAO0B,UAAU,CAAC/B,GAAX,CAAgBiC,IAAD,IAAUA,IAAI,CAACC,OAA9B,CAAP;AACD;AACD;AACF;AACA;AACA;;;AACY,QAAJF,IAAI,CAACrD,GAAD,EAA2D;AACnE,UAAMoB,YAAY,GAAG,MAAM,KAAKnB,2BAAL,CAAiCD,GAAjC,CAA3B;AACA,UAAMoD,UAAU,GAAG,MAAM,KAAKlD,OAAL,CAAakB,YAAb,CAAzB;AACA,UAAMoC,OAAO,GAAG,MAAM,KAAKtI,QAAL,CAAcuI,iBAAd,CACpBL,UAAU,CAAC/B,GAAX,CAAgBqC,CAAD,IAAOA,CAAC,CAAC3E,EAAxB,CADoB,EAEpB;AACE4E,MAAAA,2BAA2B,EAAE,KAAKvG;AADpC,KAFoB,CAAtB;AAMA,UAAMwG,kBAAkB,GAAGR,UAAU,CAAC/B,GAAX,CAAgB5C,SAAD,IAAe;AACvD,YAAM8E,OAAO,GAAGC,OAAO,CAACK,aAAR,CAAsBC,UAAtB,CAAiCrF,SAAS,CAACM,EAA3C,CAAhB;AACA,UAAI,CAACwE,OAAL,EAAc,MAAM,IAAIQ,KAAJ,CAAW,8BAA6BtF,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAwB,EAAhE,CAAN;AACd,aAAO,KAAIC,oCAAJ,EAAsBxF,SAAtB,EAAiC8E,OAAjC,CAAP;AACD,KAJ0B,CAA3B;AAKA,WAAOK,kBAAP;AACD;;AAE4B,QAAhBM,gBAAgB,CAACC,iBAAD,EAAuC;AAClE,UAAMC,QAAQ,GAAGD,iBAAiB,CAAC9C,GAAlB,CAAuBgD,KAAD,IAAW,KAAKC,+BAAL,CAAqCD,KAArC,CAAjC,CAAjB;AACA,UAAME,OAAsB,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAArC;AACA,WAAO,KAAKnJ,eAAL,CAAqByJ,2BAArB,CAAiDH,OAAjD,CAAP;AACD;;AAE4C,QAA/BD,+BAA+B,CAACK,SAAD,EAAsD;AACjG,WAAO,KAAIC,wBAAJ,EAAgB,MAAM,KAAKC,kBAAL,CAAwBF,SAAS,CAAC5F,EAAlC,CAAtB,EAA6D4F,SAA7D,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACW,QAAHG,GAAG,CACPpE,WADO,EAEPqE,UAAU,GAAG,KAFN,EAGPC,eAHO,EAIPC,QAAQ,GAAG,IAJJ,EAKPC,YAAY,GAAG,IALR,EAMa;AACpB,SAAK5J,MAAL,CAAY6J,KAAZ,CAAmB,OAAMzE,WAAW,CAACsD,QAAZ,EAAuB,EAAhD;AACA,UAAMvF,SAAS,GAAG,MAAM,KAAKnC,eAAL,CAAqBwI,GAArB,CAAyBpE,WAAzB,EAAsCqE,UAAtC,EAAkDC,eAAlD,EAAmEC,QAAnE,EAA6EC,YAA7E,CAAxB,CAFoB,CAGpB;AACA;;AACA,UAAME,eAAe,GAAG,KAAKlJ,4BAAL,CAAkC4I,GAAlC,CAAsCrG,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAtC,MAAmEqB,SAA3F,CALoB,CAMpB;AAEA;AACA;AACA;;AACA,QACED,eAAe,IACf,KAAKxJ,IAAL,CAAU0J,aAAV,CAAwB7G,SAAxB,CADA,IAEA,CAAC,KAAKpD,YAAL,CAAkBkK,YAAlB,CAA+B9G,SAAS,CAACM,EAAV,CAAayG,sBAAb,EAA/B,CAFD,IAGA,CAAC,KAAKnK,YAAL,CAAkBoK,cAAlB,CAAiChH,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAjC,CAHD,KAIC,MAAM,KAAKvD,KAAL,CAAWhC,SAAS,CAACM,EAArB,CAJP,CADF,CAME;AANF,MAOE;AACA,UAAI;AACF,aAAK7C,4BAAL,CAAkCwJ,GAAlC,CAAsCjH,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAtC,EAA+D,IAA/D;AACA,aAAK1I,MAAL,CAAY6J,KAAZ,CAAmB,yCAAwC1G,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAwB,EAAnF;AACA,cAAM,KAAK2B,WAAL,CAAiB,CAAClH,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAD,CAAjB,EAA4CqB,SAA5C,EAAuD5G,SAAS,CAACM,EAAjE,CAAN,CAHE,CAIF;AACA;AACA;AACA;AACA;AACD,OATD,CASE,OAAO6G,CAAP,EAAU;AACV,aAAKtK,MAAL,CAAY6J,KAAZ,CAAmB,uCAAsC1G,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAwB,EAAjF;AACA,aAAK9H,4BAAL,CAAkC2J,MAAlC,CAAyCpH,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAzC;AACA,eAAOvF,SAAP;AACD;AACF;;AACD,SAAKvC,4BAAL,CAAkCwJ,GAAlC,CAAsCjH,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAtC,EAA+D,KAA/D;AAEA,WAAOvF,SAAP;AACD,GAnYgD,CAqYjD;;;AAC4B,QAAtBqH,sBAAsB,CAACrH,SAAD,EAA4C;AACtE,UAAMsH,GAAG,GAAG,KAAKnK,IAAL,CAAUoK,YAAV,CAAuBvH,SAAvB,CAAZ;;AACA,QAAIsH,GAAG,CAACA,GAAJ,CAAQE,eAAR,IAA2B,OAAOF,GAAG,CAACA,GAAJ,CAAQE,eAAf,KAAmC,UAAlE,EAA8E;AAAA;;AAC5E,YAAMC,gBAAgB,GAAG,MAAMH,GAAG,CAACA,GAAJ,CAAQE,eAAR,EAA/B,CAD4E,CAE5E;;AACA,UAAIE,QAAJ;AACA,UAAI,KAAKvK,IAAL,CAAUwK,eAAV,CAA0B3H,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAA1B,CAAJ,EAAwDmC,QAAQ,GAAG,KAAKvK,IAAL,CAAUyK,WAAV,CAAsBN,GAAtB,CAAX;AACxD,YAAMxH,IAAI,GAAG,KAAKlD,YAAL,CAAkBiL,aAAlB,CAAgCP,GAAG,CAAChH,EAApC,EAAwCR,IAAxC,IAAgDwH,GAAG,CAACA,GAAJ,CAAQxH,IAArE;AAEA,aAAO;AACLgI,QAAAA,IAAI,EAAEL,gBAAgB,CAACK,IADlB;AAELxH,QAAAA,EAAE,EAAEgH,GAAG,CAAChH,EAFH;AAGLZ,QAAAA,IAAI,EAAE4H,GAAG,CAAC5H,IAHL;AAILI,QAAAA,IAJK;AAKLiI,QAAAA,WAAW,EAAET,GAAG,CAACS,WALZ;AAMLL,QAAAA,QAAQ,eAAEA,QAAF,8CAAE,UAAUM,QAAV;AANL,OAAP;AAQD;;AAED,WAAO,EAAP;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,SAAKpL,MAAL,CAAY6J,KAAZ,CAAkB,yCAAlB;AACA,SAAK7I,eAAL,CAAqBoK,UAArB;AACA,SAAK1L,KAAL,CAAW0L,UAAX;AACA,SAAKnL,aAAL,GAAqB,KAAIC,yBAAJ,EAAmB,KAAKT,QAAxB,CAArB;AACD;;AAED4L,EAAAA,mBAAmB,CAAC5H,EAAD,EAAkB;AACnC,SAAKzC,eAAL,CAAqBqK,mBAArB,CAAyC5H,EAAzC;AACA,SAAKhE,QAAL,CAAcuB,eAAd,CAA8BsK,sBAA9B,CAAqD7H,EAAE,CAACE,OAAxD;AACA,SAAK1D,aAAL,GAAqB,KAAIC,yBAAJ,EAAmB,KAAKT,QAAxB,CAArB;AACD;;AAE6B,QAAxB8L,wBAAwB,CAC5B9H,EAD4B,EAE5B+H,KAF4B,EAG5BC,SAH4B,EAIO;AACnC,UAAMtI,SAAS,GAAG,MAAM,KAAKqG,GAAL,CAAS/F,EAAT,CAAxB,CADmC,CAEnC;AACA;AACA;;AACA,UAAM,KAAKtC,MAAL,CAAYuK,KAAZ,EAAN;AACA,UAAMC,eAAe,GAAG,KAAKtL,qBAAL,CAA2BuL,OAA3B,EAAxB,CANmC,CAM2B;;AAC9D,UAAMC,OAAqE,GAAG,EAA9E;AACA,UAAM,2BAAUF,eAAV,EAA2B,OAAO,CAACG,SAAD,EAAYC,YAAZ,CAAP,KAAqC;AACpE,YAAMC,cAAc,GAAG,MAAMD,YAAY,CAAC5I,SAAD,EAAYqI,KAAZ,EAAmBC,SAAnB,CAAzC;AACAI,MAAAA,OAAO,CAACI,IAAR,CAAa;AAAEC,QAAAA,WAAW,EAAEJ,SAAf;AAA0BD,QAAAA,OAAO,EAAEG;AAAnC,OAAb;AACD,KAHK,CAAN,CARmC,CAanC;;AACA,UAAM,KAAKtL,OAAL,CAAanB,MAAb,CAAoB4M,OAApB,CAA4BjN,gBAA5B,EAA8C;AAAEkN,MAAAA,gBAAgB,EAAE;AAAEjJ,QAAAA;AAAF;AAApB,KAA9C,CAAN;AACA,WAAO0I,OAAP;AACD;;AAE0B,QAArBQ,qBAAqB,CAAC5I,EAAD,EAAqD;AAC9E,UAAMN,SAAS,GAAG,MAAM,KAAKqG,GAAL,CAAS/F,EAAT,CAAxB;AACA,UAAM6I,YAAY,GAAG,KAAK/L,kBAAL,CAAwBqL,OAAxB,EAArB,CAF8E,CAEtB;;AACxD,UAAMC,OAAqE,GAAG,EAA9E;AACA,UAAML,KAAK,GAAGrI,SAAS,CAACU,KAAV,CAAgB0I,UAAhB,CAA2Bf,KAA3B,CAAiCzF,GAAjC,CAAsCyG,IAAD,IAAUA,IAAI,CAAC1K,IAApD,CAAd;AACA,UAAM,2BAAUwK,YAAV,EAAwB,OAAO,CAACR,SAAD,EAAYW,SAAZ,CAAP,KAAkC;AAC9D,YAAMC,WAAW,GAAG,MAAMD,SAAS,CAACtJ,SAAD,EAAYqI,KAAZ,CAAnC;AACAK,MAAAA,OAAO,CAACI,IAAR,CAAa;AAAEC,QAAAA,WAAW,EAAEJ,SAAf;AAA0BD,QAAAA,OAAO,EAAEa;AAAnC,OAAb;AACD,KAHK,CAAN;AAKA,UAAM,KAAKhM,OAAL,CAAanB,MAAb,CAAoB4M,OAApB,CAA4BlN,cAA5B,EAA4C;AAAE0N,MAAAA,cAAc,EAAE;AAAExJ,QAAAA;AAAF;AAAlB,KAA5C,CAAN;AACA,WAAO0I,OAAP;AACD;;AAE6B,QAAxBe,wBAAwB,CAACnJ,EAAD,EAAqD;AACjF,UAAMoJ,eAAe,GAAG,KAAKrM,qBAAL,CAA2BoL,OAA3B,EAAxB,CADiF,CACnB;;AAC9D,UAAMC,OAAqE,GAAG,EAA9E;AACA,UAAM,2BAAUgB,eAAV,EAA2B,OAAO,CAACf,SAAD,EAAYgB,YAAZ,CAAP,KAAqC;AACpE,YAAMC,cAAc,GAAG,MAAMD,YAAY,CAACrJ,EAAD,CAAzC;AACAoI,MAAAA,OAAO,CAACI,IAAR,CAAa;AAAEC,QAAAA,WAAW,EAAEJ,SAAf;AAA0BD,QAAAA,OAAO,EAAEkB;AAAnC,OAAb;AACD,KAHK,CAAN;AAKA,UAAM,KAAKrM,OAAL,CAAanB,MAAb,CAAoB4M,OAApB,CAA4BhN,gBAA5B,EAA8C;AAAE6N,MAAAA,gBAAgB,EAAE;AAAElH,QAAAA,YAAY,EAAE,CAACrC,EAAE,CAAC0H,QAAH,EAAD;AAAhB;AAApB,KAA9C,CAAN;AACA,WAAOU,OAAP;AACD;;AAEDoB,EAAAA,QAAQ,CAACxJ,EAAD,EAAkByJ,IAAlB,EAAgC;AACtC,WAAO,KAAKxN,KAAL,CAAWuN,QAAX,CAAoBxJ,EAApB,EAAwByJ,IAAxB,CAAP;AACD;;AAEDC,EAAAA,OAAO,CAAC1J,EAAD,EAAkByJ,IAAlB,EAAgC;AACrC,WAAO,KAAKxN,KAAL,CAAWyN,OAAX,CAAmB1J,EAAnB,EAAuByJ,IAAvB,CAAP;AACD;;AAEDE,EAAAA,gBAAgB,GAAgB;AAC9B,WAAO,KAAK3N,QAAL,CAAc2N,gBAAd,EAAP;AACD;AAED;AACF;AACA;AACA;;;AAC8B,QAAtBC,sBAAsB,GAAyD;AACnF,UAAMC,WAAW,GAAG,KAAKF,gBAAL,EAApB;;AACA,QAAIE,WAAW,CAACC,SAAZ,EAAJ,EAA6B;AAC3B,aAAO,IAAP;AACD;;AACD,UAAMC,SAAS,GAAG,KAAK9N,KAAL,CAAW+N,WAAX,CAAuBC,KAAvB,CAA6BC,+BAA7B,CAA6DL,WAAW,CAACzK,IAAzE,CAAlB;;AACA,QAAI,CAAC2K,SAAL,EAAgB;AACd,aAAO,IAAP;AACD;;AACD,UAAMI,sBAAsB,GAAGC,mCAAwBC,WAAxB,CAAoC,KAAKrO,QAAL,CAAcC,KAAlD,CAA/B;;AACA,UAAMqO,MAAM,GAAGC,uBAAaC,IAAb,CAAkBT,SAAS,CAACU,UAA5B,EAAwCV,SAAS,CAACW,WAAlD,CAAf;;AACA,QAAI;AACF,YAAMT,KAAK,GAAG,MAAME,sBAAsB,CAACQ,WAAvB,CAAmC,CAACL,MAAD,CAAnC,CAApB;AAEA,UAAI,CAACL,KAAD,IAAUA,KAAK,CAAC1K,MAAN,KAAiB,CAA/B,EAAkC,OAAO,IAAP;AAElC,aAAO;AACL+K,QAAAA,MADK;AAELM,QAAAA,IAAI,EAAEX,KAAK,CAAC,CAAD;AAFN,OAAP;AAID,KATD,CASE,OAAOY,GAAP,EAAY;AACZ,UACEA,GAAG,YAAYzM,+BAAf,IACAyM,GAAG,YAAYC,8CADf,IAEAD,GAAG,YAAYE,4BAFf,IAGAF,GAAG,YAAYG,yCAJjB,EAKE;AACA;AACAC,0BAAOC,IAAP;;AACA,aAAK3O,MAAL,CAAY4O,IAAZ,CAAkB,6DAA4DN,GAAG,CAACO,OAAQ,EAA1F;AACA,eAAO,IAAP;AACD;;AACD,YAAMP,GAAN;AACD;AACF;;AAEDQ,EAAAA,oBAAoB,GAAsB;AACxC,QAAI,CAAC,KAAKtP,MAAL,CAAYuP,UAAjB,EAA6B;AAC3B,aAAO,KAAIC,kCAAJ,GAAP;AACD;;AACD,WAAOA,mCAAkBC,gBAAlB,CAAmC,KAAKzP,MAAL,CAAYuP,UAA/C,CAAP;AACD;;AAEyB,QAApBG,oBAAoB,CAACxK,GAAD,EAAqByK,OAArB,EAA4E;AACpG,WAAOjG,OAAO,CAACC,GAAR,CAAYzE,GAAG,CAACqB,GAAJ,CAAStC,EAAD,IAAQ,KAAK2L,WAAL,CAAiB3L,EAAjB,EAAqB0L,OAArB,CAAhB,CAAZ,CAAP;AACD;;AAEgB,QAAXC,WAAW,CAAC3L,EAAD,EAAkB0L,OAAlB,EAAuE;AACtF,UAAM/J,WAAW,GAAG,MAAM,KAAKmE,kBAAL,CAAwB9F,EAAxB,CAA1B;AACA,UAAMN,SAAS,GAAG,MAAM,KAAKqG,GAAL,CAASpE,WAAT,CAAxB;AACA,UAAMiK,kBAAkB,GAAG,MAAM,KAAK3P,KAAL,CAAW8J,GAAX,CAAe/F,EAAf,CAAjC;AACA,UAAM;AAAEsL,MAAAA;AAAF,QAAiB,MAAM,KAAKO,mBAAL,CAAyBnM,SAAS,CAACM,EAAnC,EAAuC4L,kBAAvC,EAA2D,CACtF,kBADsF,EAEtF,mBAFsF,CAA3D,CAA7B;AAIA,UAAME,OAAO,GAAG,MAAM,KAAK3G,gBAAL,CAAsBmG,UAAtB,CAAtB;AACA,UAAMS,YAAY,GAAG,KAAKA,YAAL,CAAkB/L,EAAlB,EAAsB;AAAEgM,MAAAA,aAAa,EAAE;AAAjB,KAAtB,CAArB;AACA,UAAMC,mBAAmB,GAAG,KAAIC,0CAAJ,EAAwBvK,WAAxB,EAAqCmK,OAArC,EAA8CC,YAA9C,EAA4DL,OAAO,CAACS,SAApE,CAA5B;AACA,UAAMF,mBAAmB,CAAChE,KAApB,CAA0B;AAAEmE,MAAAA,QAAQ,EAAEV,OAAO,CAACU;AAApB,KAA1B,CAAN,CAXsF,CAYtF;;AACA,SAAK1O,MAAL,CAAY2O,kBAAZ,CAA+BrM,EAA/B;AACA,UAAM,KAAKtC,MAAL,CAAYuK,KAAZ,EAAN;AACA,WAAO;AACLqE,MAAAA,UAAU,EAAEJ,2CAAoBK,WAApB,CAAgCR,YAAhC;AADP,KAAP;AAGD;AAED;AACF;AACA;;;AACyC,QAAzBS,yBAAyB,CAACC,mBAAD,EAAuD;AAC5F,UAAMC,YAAY,GAAG,MAAMD,mBAAmB,CAACE,IAApB,CAAyB,MAAOrH,KAAP,IAAiB;AACnE,UAAIA,KAAK,CAACtF,EAAN,CAAS/D,KAAT,KAAmB,KAAKA,KAAL,CAAWmD,IAAlC,EAAwC;AACtC,eAAOkG,KAAP;AACD;;AACD,YAAMsH,KAAK,GAAG,MAAM,KAAK9G,kBAAL,CAAwBR,KAAK,CAACtF,EAAN,CAASgC,QAAjC,CAApB;AACA,YAAM6K,QAAQ,GAAG,KAAIhH,wBAAJ,EAAgB+G,KAAhB,EAAuBtH,KAAK,CAACwH,MAA7B,CAAjB;AACA,aAAOD,QAAP;AACD,KAP0B,CAA3B;AAQA,WAAOH,YAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACiB,QAATK,SAAS,CAACC,OAAD,EAAkB/Q,KAAK,GAAG,IAA1B,EAAsD;AACnE,UAAMgF,GAAG,GAAG,MAAM,KAAKO,OAAL,EAAlB;AACA,UAAMyL,YAAY,GAAI,GAAEhR,KAAM,IAAG+Q,OAAO,IAAI,IAAK,EAAjD;AACA,UAAME,SAAS,GAAGjM,GAAG,CAACH,MAAJ,CAAYd,EAAD,IAAQ;AACnC,YAAMmN,IAAI,GAAG,qDAA4BnN,EAAE,CAACyG,sBAAH,EAA5B,EAAyDwG,YAAzD,CAAb;AACA,aAAOE,IAAI,CAACC,KAAZ;AACD,KAHiB,CAAlB;AAKA,UAAM/I,UAAU,GAAG,MAAM,KAAKlD,OAAL,CAAa+L,SAAb,CAAzB;AACA,WAAO7I,UAAP;AACD;AAED;AACF;AACA;AACA;;;AACoB,QAAZgJ,YAAY,CAACL,OAAD,EAAkBM,eAAe,GAAG,IAApC,EAAkE;AAClF,QAAI,CAACN,OAAO,CAACO,QAAR,CAAiB,GAAjB,CAAD,IAA0B,CAACP,OAAO,CAACO,QAAR,CAAiB,GAAjB,CAA/B,EAAsD;AACpD;AACA,YAAMvN,EAAE,GAAG,MAAM,KAAK8F,kBAAL,CAAwBkH,OAAxB,CAAjB;AACA,UAAI,KAAKQ,MAAL,CAAYxN,EAAZ,CAAJ,EAAqB,OAAO,CAACA,EAAD,CAAP;AACrB,UAAIsN,eAAJ,EAAqB,MAAM,KAAIpP,oBAAJ,EAAc,mBAAkB8O,OAAQ,oBAAxC,CAAN;AACrB,aAAO,EAAP;AACD;;AACD,UAAM/L,GAAG,GAAG,MAAM,KAAKO,OAAL,EAAlB;AACA,UAAMiM,QAAQ,GAAGT,OAAO,CAAC1N,KAAR,CAAc,GAAd,EAAmBgD,GAAnB,CAAwBoL,CAAD,IAAOA,CAAC,CAACC,IAAF,EAA9B,CAAjB,CATkF,CAUlF;;AACA,UAAMC,UAAU,GAAI5N,EAAD,IAAqB,CAACA,EAAE,CAACyG,sBAAH,EAAD,EAA8BzG,EAAE,CAACE,OAAH,CAAWuG,sBAAX,EAA9B,CAAxC;;AACA,UAAMoH,WAAW,GAAG5M,GAAG,CAACH,MAAJ,CAAYd,EAAD,IAAQ,2BAAW4N,UAAU,CAAC5N,EAAD,CAArB,EAA2ByN,QAA3B,EAAqClO,MAAxD,CAApB;;AACA,QAAI+N,eAAe,IAAI,CAACO,WAAW,CAACtO,MAApC,EAA4C;AAC1C,YAAM,KAAIrB,oBAAJ,EAAc,oCAAmC8O,OAAQ,WAAzD,CAAN;AACD;;AACD,WAAOa,WAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACgC,QAAxBC,wBAAwB,CAACpI,GAAD,EAAgBsH,OAAhB,EAAkCe,iBAAiB,GAAG,KAAtD,EAAmF;AAC/G,QAAIrI,GAAJ,EAAS;AACP,aAAO,KAAK7E,IAAL,EAAP;AACD;;AACD,QAAImM,OAAJ,EAAa;AACX,aAAO,KAAKD,SAAL,CAAeC,OAAf,CAAP;AACD;;AACD,UAAMjK,cAAc,GAAG,MAAM,KAAKA,cAAL,EAA7B;;AACA,QAAIgL,iBAAJ,EAAuB;AACrB,YAAMC,iBAAiB,GAAGjL,cAAc,CAACT,GAAf,CAAoBiC,IAAD,IAAUA,IAAI,CAACvE,EAAlC,CAA1B;AACA,YAAMmE,aAAa,GAAG,MAAM,KAAKb,gBAAL,CAAsB0K,iBAAtB,CAA5B;AACA,YAAMC,qBAAqB,GAAG9J,aAAa,CAACrD,MAAd,CAAsBd,EAAD,IAAQ,CAAC+C,cAAc,CAACjD,IAAf,CAAqBiE,CAAD,IAAOA,CAAC,CAAC/D,EAAF,CAAK6B,OAAL,CAAa7B,EAAb,CAA3B,CAA9B,CAA9B;AACA,YAAMkO,UAAU,GAAG,MAAM,KAAK/M,OAAL,CAAa8M,qBAAb,CAAzB;AACAlL,MAAAA,cAAc,CAACyF,IAAf,CAAoB,GAAG0F,UAAvB;AACD;;AACD,WAAOnL,cAAP;AACD;;AAE0B,QAArBoL,qBAAqB,CAACnH,GAAD,EAAcoH,eAAe,GAAG,KAAhC,EAA6D;AACtF,UAAMC,QAAQ,GAAG,MAAM,KAAKxN,IAAL,EAAvB;AACA,UAAMyN,OAAO,GAAG,MAAM,KAAKzR,IAAL,CAAU0R,iBAAV,CAA4BF,QAA5B,CAAtB;AACA,UAAMG,QAAQ,GAAGF,OAAO,CAACG,WAAR,CAAoB3O,IAApB,CAA0B4O,UAAD,IAAgBA,UAAU,CAAC1O,EAAX,KAAkBgH,GAA3D,CAAjB;;AACA,QAAI,CAACwH,QAAD,IAAaJ,eAAjB,EAAkC;AAChC,YAAMO,aAAa,GAAGL,OAAO,CAACG,WAAR,CAAoBnM,GAApB,CAAyBoM,UAAD,IAAgBA,UAAU,CAAC1O,EAAnD,CAAtB;AACA,YAAM,KAAI9B,oBAAJ,EAAc,yCAAwC8I,GAAI;AACtE,iDAAiD2H,aAAa,CAACnQ,IAAd,CAAmB,IAAnB,CAAyB,EAD9D,CAAN;AAED;;AACD,WAAO,CAAAgQ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEnK,UAAV,KAAwB,EAA/B;AACD;;AAEY,QAAPlD,OAAO,CAACF,GAAD,EAA0B+E,UAAU,GAAG,KAAvC,EAAoE;AAC/E,WAAO,KAAKzI,eAAL,CAAqB4D,OAArB,CAA6BF,GAA7B,EAAkC+E,UAAlC,CAAP;AACD;;AAED4I,EAAAA,eAAe,CAACvK,UAAD,EAAwD;AACrE,WAAO,2BAAUA,UAAV,EAAsB,MAAO3E,SAAP,IAAqB;AAChD,YAAMM,EAAE,GAAG,MAAM,KAAK8F,kBAAL,CAAwBpG,SAAS,CAACM,EAAlC,CAAjB;AACA,aAAO,KAAK+F,GAAL,CAAS/F,EAAT,EAAasG,SAAb,EAAwB5G,SAAxB,CAAP;AACD,KAHM,CAAP;AAID;AAED;AACF;AACA;;;AACkB,QAAVmP,UAAU,CAAClN,WAAD,EAA2D;AACzE,WAAO,KAAKpE,eAAL,CAAqBsR,UAArB,CAAgClN,WAAhC,CAAP;AACD;AAED;AACF;AACA;;;AACE6L,EAAAA,MAAM,CAAC7L,WAAD,EAAoC;AACxC,WAAOI,OAAO,CAAC,KAAK/F,QAAL,CAAcyF,wBAAd,CAAuC3B,IAAvC,CAA6CiE,CAAD,IAAOA,CAAC,CAAC9D,qBAAF,CAAwB0B,WAAW,CAACzB,OAApC,CAAnD,CAAD,CAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACwB,QAAhB4O,gBAAgB,CAAC7N,GAAD,EAA0B+E,UAAU,GAAG,KAAvC,EAAoE;AACxF,UAAM,KAAK/J,KAAL,CAAW8S,MAAX,CAAkB9N,GAAlB,EAAuB;AAAE+N,MAAAA,qBAAqB,EAAEC,2BAA2B;AAApD,KAAvB,CAAN;AACA,WAAO,KAAK1R,eAAL,CAAqB4D,OAArB,CAA6BF,GAA7B,EAAkC+E,UAAlC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACW,QAAHkJ,GAAG,CACPC,cADO,EAEPnP,EAFO,EAGPoP,IAHO,EAIPhD,QAAQ,GAAG,KAJJ,EAKoB;AAC3B,UAAMiD,YAAY,GAAG,KAAIC,wBAAJ,EAAkB;AAAEtT,MAAAA,QAAQ,EAAE,KAAKA;AAAjB,KAAlB,EAA+C;AAAEmT,MAAAA,cAAF;AAAkBnP,MAAAA,EAAlB;AAAsBoP,MAAAA,IAAtB;AAA4BhD,MAAAA;AAA5B,KAA/C,CAArB;AACA,UAAMmD,UAAU,GAAG,MAAMF,YAAY,CAACH,GAAb,EAAzB,CAF2B,CAG3B;AACA;;AACA,UAAM,KAAKxR,MAAL,CAAYuK,KAAZ,EAAN;AACA,WAAOsH,UAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACa,QAALC,KAAK,CAACzF,SAAD,EAA6C;AACtD,UAAM5L,YAAY,GAAG4L,SAAS,CAAC5L,YAAV,GAAyB,MAAM,KAAKsR,mBAAL,CAAyB1F,SAAS,CAAC5L,YAAnC,CAA/B,GAAkFmI,SAAvG;AACA,UAAM+I,YAAY,GAAG,KAAIC,wBAAJ,EACnB;AAAEtT,MAAAA,QAAQ,EAAE,KAAKA;AAAjB,KADmB,EAEnB;AACEmT,MAAAA,cAAc,EAAE,CAACpF,SAAS,CAAC2F,OAAX,CADlB;AAEE1P,MAAAA,EAAE,EAAE+J,SAAS,CAAC4F,aAFhB;AAGEP,MAAAA,IAAI,EAAErF,SAAS,CAAC6F,QAHlB;AAIExD,MAAAA,QAAQ,EAAE,KAJZ;AAKEjO,MAAAA,YALF;AAMEpC,MAAAA,MAAM,EAAEgO,SAAS,CAAChO;AANpB,KAFmB,CAArB;AAWA,UAAM8T,MAAM,GAAG,MAAMR,YAAY,CAACH,GAAb,EAArB;AACA,UAAMY,cAAc,GAAGD,MAAM,CAACE,eAAP,CAAuB,CAAvB,CAAvB;AACA,UAAMJ,aAAa,GAAG,CAAAG,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAE9P,EAAhB,CAAmBZ,IAAnB,KAA4B2K,SAAS,CAAC4F,aAA5D;AACA,UAAM5H,KAAK,GAAG,CAAA+H,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAE/H,KAAhB,CAAsBzF,GAAtB,CAA2B0N,CAAD,IAAOA,CAAC,CAACC,YAAnC,MAAoD,EAAlE;AACA,WAAO;AAAEN,MAAAA,aAAF;AAAiB5H,MAAAA,KAAjB;AAAwBmI,MAAAA,QAAQ,EAAEL,MAAM,CAACK;AAAzC,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACmC,QAAnBT,mBAAmB,CAACU,SAAD,EAAqC;AACpE,QAAIA,SAAS,CAAC5C,QAAV,CAAmB,GAAnB,CAAJ,EAA6B,OAAO4C,SAAP,CADuC,CACrB;;AAC/C,UAAMC,YAAY,GAAG,EAAE,MAAM,KAAKC,aAAL,CAAmBF,SAAnB,CAAR,CAArB;AACA,QAAIC,YAAJ,EAAkB,OAAOD,SAAP;AAClB,UAAMG,cAAc,GAAG,KAAKnS,YAA5B;;AACA,QAAI,CAACmS,cAAc,CAAC/C,QAAf,CAAwB,GAAxB,CAAL,EAAmC;AACjC,YAAM,IAAIvI,KAAJ,CAAW,wEAAX,CAAN;AACD;;AACD,UAAM,CAAC3H,KAAD,IAAUiT,cAAc,CAAChR,KAAf,CAAqB,GAArB,CAAhB;AACA,WAAQ,GAAEjC,KAAM,IAAG8S,SAAU,EAA7B;AACD;;AAEU,QAALlI,KAAK,CAACsI,QAAD,EAAmB7Q,SAAnB,EAAyC;AAClD,UAAM+F,OAAO,CAACC,GAAR,CACJhG,SAAS,CAACoJ,UAAV,CAAqBf,KAArB,CAA2BzF,GAA3B,CAA+B,MAAOyG,IAAP,IAAgB;AAC7C,YAAMyH,WAAW,GAAGnS,gBAAKG,IAAL,CAAU,KAAKH,IAAf,EAAqBkS,QAArB,EAA+BxH,IAAI,CAAC0H,QAApC,CAApB;;AACA,YAAMC,mBAAGC,UAAH,CAAcH,WAAd,EAA2BzH,IAAI,CAAC6H,QAAhC,CAAN;AACD,KAHD,CADI,CAAN;AAMD;AAED;AACF;AACA;AACA;AACA;;;AACE7E,EAAAA,YAAY,CACVpK,WADU,EAEVkP,aAFU,EAGVnF,OAAO,GAAG;AAAE+E,IAAAA,QAAQ,EAAE;AAAZ,GAHA,EAIG;AACb,WAAO,KAAKK,wBAAL,CAA8BnP,WAAW,CAACzB,OAA1C,EAAmD2Q,aAAnD,EAAkEnF,OAAlE,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEqF,EAAAA,mBAAmB,CAACrR,SAAD,EAAuBgM,OAAO,GAAG;AAAE+E,IAAAA,QAAQ,EAAE;AAAZ,GAAjC,EAA8D;AAC/E,UAAMO,WAAW,GAAG,yCAAyBtR,SAAS,CAACU,KAAV,CAAgBC,SAAzC,CAApB;;AACA,UAAM4Q,UAAU,GAAG5S,gBAAKG,IAAL,CAAU,cAAV,EAA0BwS,WAA1B,CAAnB;;AACA,WAAOtF,OAAO,CAAC+E,QAAR,GAAmBQ,UAAnB,GAAgC,KAAKjV,QAAL,CAAckV,cAAd,CAA6BD,UAA7B,CAAvC;AACD;;AAEOH,EAAAA,wBAAwB,CAC9BK,KAD8B,EAE9BN,aAF8B,EAG9BnF,OAAO,GAAG;AAAE+E,IAAAA,QAAQ,EAAE;AAAZ,GAHoB,EAIjB;AACb,UAAMW,YAAY,GAAG,KAAKpV,QAAL,CAAc0B,MAAd,CAAqB2T,YAArB,CAAkCF,KAAlC,EAAyCN,aAAzC,CAArB;AACA,UAAMS,oBAAoB,GAAGF,YAAY,CAACG,eAAb,EAA7B;;AACA,QAAI,CAACD,oBAAL,EAA2B;AACzB,YAAM,KAAIE,gCAAJ,EAAmBL,KAAK,CAAClM,QAAN,EAAnB,CAAN;AACD;;AACD,QAAIyG,OAAO,CAAC+E,QAAZ,EAAsB;AACpB,aAAOa,oBAAP;AACD;;AAED,WAAOjT,gBAAKG,IAAL,CAAU,KAAKH,IAAf,EAAqBiT,oBAArB,CAAP;AACD;;AAEDG,EAAAA,sBAAsB,CAACH,oBAAD,EAAiE;AACrF,WAAOjT,gBAAKG,IAAL,CAAU,KAAKH,IAAf,EAAqBiT,oBAArB,CAAP;AACD;;AAE0B,QAArBI,qBAAqB,CAAC/P,WAAD,EAAwD;AACjF,UAAM2P,oBAAoB,GAAG,KAAKvF,YAAL,CAAkBpK,WAAlB,EAA+B;AAAEqK,MAAAA,aAAa,EAAE;AAAjB,KAA/B,EAAwD;AAAEyE,MAAAA,QAAQ,EAAE;AAAZ,KAAxD,CAA7B;AACA,WAAO,KAAKkB,4CAAL,CAAkDL,oBAAlD,EAAwE3P,WAAW,CAACK,QAApF,CAAP;AACD;;AAEiD,QAA5C2P,4CAA4C,CAChDL,oBADgD,EAEhDlS,IAFgD,EAGnB;AAC7B,UAAM6M,mBAAmB,GAAG,MAAM,KAAK2F,0CAAL,CAAgDN,oBAAhD,EAAsElS,IAAtE,CAAlC;;AACA,QAAI6M,mBAAmB,IAAIA,mBAAmB,CAAC9N,YAA/C,EAA6D;AAC3D,aAAO8N,mBAAmB,CAAC9N,YAA3B;AACD;;AACD,UAAM0T,QAAQ,GAAG,KAAK7V,QAAL,CAAc0B,MAAd,CAAqBoU,gBAArB,CAAsC1S,IAAtC,CAAjB;AACA,UAAM2S,WAAW,GAAGF,QAAQ,GAAG,KAAK7V,QAAL,CAAc0B,MAAd,CAAqB2T,YAArB,CAAkCQ,QAAlC,CAAH,GAAiDvL,SAA7E;;AACA,QAAIyL,WAAW,IAAIA,WAAW,CAAC5T,YAA/B,EAA6C;AAC3C,aAAO4T,WAAW,CAAC5T,YAAnB;AACD;;AACD,WAAO,KAAKP,6DAAL,CAAmE0T,oBAAnE,EAAyFlS,IAAzF,CAAP;AACD;;AAEe,MAAZjB,YAAY,GAAG;AACjB,WAAO,KAAKpC,MAAL,CAAYoC,YAAnB;AACD;;AAE0E,QAA7DP,6DAA6D,CACzE0T,oBADyE,EAEzElS,IAFyE,EAG5C;AAC7B,UAAM4S,aAAa,GAAG,KAAK3V,QAAL,CAAc4V,gBAAd,CAA+BX,oBAA/B,EAAqDlS,IAArD,CAAtB;;AACA,QAAI4S,aAAa,IAAIA,aAAa,CAAC7T,YAAnC,EAAiD;AAC/C,aAAO6T,aAAa,CAAC7T,YAArB;AACD;;AACD,UAAM+T,QAAQ,GAAG,KAAKC,+BAAL,CAAqCb,oBAArC,CAAjB;;AACA,QAAI,CAACY,QAAL,EAAe;AACb,aAAO,KAAKnW,MAAL,CAAYoC,YAAnB;AACD;;AACD,WAAOmI,SAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC2B,QAAnBuF,mBAAmB,CACvBlK,WADuB,EAEvBiK,kBAFuB,EAGvBwG,cAAkC,GAAG,EAHd,EAOtB;AAAA;;AACD;AACA,QAAIC,oBAAJ;AACA,QAAIC,kBAAJ;AACA,QAAIC,mBAAJ;AACA,UAAMC,cAAc,GAAG,IAAvB;AAEA,UAAMT,WAAW,GAAG,KAAK/V,QAAL,CAAc0B,MAAd,CAAqB+U,mBAArB,CAAyC9Q,WAAW,CAACzB,OAArD,CAApB;AACA,UAAMwS,gBAAgB,GAAGX,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEhW,MAAtC;AAEA,UAAM4W,eAAe,GAAG,CAAA/G,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,qCAAAA,kBAAkB,CAAE7P,MAApB,gFAA4BuP,UAA5B,KAA0C,KAAIC,kCAAJ,GAAlE;AACA,UAAM,CAACqH,QAAD,EAAWC,WAAX,IAA0B,yBAAUF,eAAV,EAA4BrN,KAAD,IAAWA,KAAK,CAACvJ,MAAN,CAAaR,mBAAb,MAAsC,IAA5E,CAAhC;AACA,UAAMuX,0BAA0B,GAAG,KAAIvH,kCAAJ,EAAsB,GAAGsH,WAAzB,CAAnC;AACA,UAAME,uBAAuB,GAAG,KAAIxH,kCAAJ,EAAsB,GAAGqH,QAAzB,CAAhC;AAEA,UAAM3G,mBAAmB,GAAG,MAAM,KAAKA,mBAAL,CAAyBtK,WAAzB,CAAlC;;AACA,QAAIsK,mBAAJ,EAAyB;AACvBoG,MAAAA,oBAAoB,GAAGpG,mBAAmB,CAACH,OAApB,CAA4BkH,QAA5B,EAAvB;AACD;;AACD,UAAM1B,oBAAoB,GAAG,KAAKvF,YAAL,CAAkBpK,WAAlB,EAA+B;AAAEqK,MAAAA,aAAa,EAAE;AAAjB,KAA/B,EAAwD;AAAEyE,MAAAA,QAAQ,EAAE;AAAZ,KAAxD,CAA7B;AACA,UAAMuB,aAAa,GAAG,KAAK3V,QAAL,CAAc4V,gBAAd,CAA+BX,oBAA/B,EAAqD3P,WAAW,CAACK,QAAjE,CAAtB;;AACA,QAAIgQ,aAAJ,EAAmB;AACjBM,MAAAA,kBAAkB,GAAGN,aAAa,CAAC1G,UAAnC,CADiB,CAEjB;AACA;AACA;AACA;AACD;;AACD,UAAM4G,QAAQ,GAAG,KAAKC,+BAAL,CAAqCb,oBAArC,CAAjB;;AACA,QAAI,CAACY,QAAL,EAAe;AACbK,MAAAA,mBAAmB,GAAG,KAAKlH,oBAAL,EAAtB;AACD,KA/BA,CAgCD;AACA;;;AACA,UAAM4H,iBAAqG,GAAG,EAA9G;AACA,QAAIC,qBAAqB,GAAG,KAA5B;AACA,UAAMC,kBAA4B,GAAG,EAArC;AACA,UAAMC,mBAA6B,GAAG,EAAtC;;AAEA,UAAMC,oBAAoB,GAAG,OAAO/H,UAAP,EAAsCgI,MAAtC,EAAgEC,SAAhE,KAAoF;AAC/G,UAAI,CAACjI,UAAU,CAAC/L,MAAhB,EAAwB;AACtB;AACD;;AACD6T,MAAAA,mBAAmB,CAAC5K,IAApB,CAAyB,GAAG8C,UAAU,CAACxK,MAAX,CAAmB0S,OAAD,IAAaA,OAAO,CAACC,SAAvC,EAAkDnR,GAAlD,CAAuDkR,OAAD,IAAaA,OAAO,CAACE,QAA3E,CAA5B;AACA,YAAMC,kBAAkB,GAAGrI,UAAU,CAACsI,uBAAX,EAA3B;;AACA,YAAMC,iBAAiB,GAAGtI,mCAAkBuI,SAAlB,CACxBH,kBAAkB,CAAC7S,MAAnB,CACGiT,GAAD;AAAA;;AAAA,eAAS,CAACZ,kBAAkB,CAAC5F,QAAnB,CAA4B,qBAAAwG,GAAG,CAACtL,WAAJ,sEAAiBhC,sBAAjB,OAA6C,EAAzE,CAAV;AAAA,OADF,CADwB,CAA1B;;AAKA,YAAMuN,sBAAsB,GAAGH,iBAAiB,CAACI,aAAlB,CAC7BtS,WAAW,CAACzB,OAAZ,CAAoBgU,8BAApB,EAD6B,EAE7B,IAF6B,EAG7B,IAH6B,CAA/B;AAKA,YAAMC,eAAe,GAAGH,sBAAsB,SAAtB,IAAAA,sBAAsB,WAAtB,IAAAA,sBAAsB,CAAEvL,WAAxB,GACpBoL,iBAAiB,CAACO,MAAlB,CAAyBJ,sBAAsB,CAACvL,WAAhD,CADoB,GAEpBoL,iBAFJ;AAGA,YAAM,KAAKQ,cAAL,CAAoBF,eAApB,EAAqCxS,WAArC,CAAN;AACA,YAAM;AAAE2S,QAAAA,yBAAF;AAA6BC,QAAAA;AAA7B,UAAmD,KAAKC,gCAAL,CACvDL,eADuD,EAEvDjB,qBAFuD,CAAzD;AAIA,UAAIqB,iBAAJ,EAAuBrB,qBAAqB,GAAG,IAAxB;AAEvBD,MAAAA,iBAAiB,CAACzK,IAAlB,CAAuB;AAAE8K,QAAAA,MAAF;AAAUhI,QAAAA,UAAU,EAAEgJ,yBAAtB;AAAiDf,QAAAA;AAAjD,OAAvB;AAEAJ,MAAAA,kBAAkB,CAAC3K,IAAnB,CACE,GAAG,uBAAQ8L,yBAAyB,CAAChS,GAA1B,CAA+BuE,CAAD;AAAA;;AAAA,iCAAOA,CAAC,CAAC4B,WAAT,mDAAO,eAAehC,sBAAf,EAAP;AAAA,OAA9B,CAAR,CADL;AAGD,KA/BD;;AAgCA,UAAMgO,qBAAqB,GAAInJ,UAAD,IAAmC;AAC/DA,MAAAA,UAAU,CAACoJ,OAAX,CAAoB9O,SAAD,IAAgBA,SAAS,CAAC7J,MAAV,CAAiBR,mBAAjB,IAAwC,IAA3E;AACD,KAFD;;AAGA,QAAImX,gBAAgB,IAAI,CAACN,cAAc,CAAC7E,QAAf,CAAwB,YAAxB,CAAzB,EAAgE;AAC9D,YAAMnI,iBAAiB,GAAGmG,mCAAkBC,gBAAlB,CAAmCkH,gBAAnC,CAA1B;;AACA+B,MAAAA,qBAAqB,CAACrP,iBAAD,CAArB;AACA,YAAMiO,oBAAoB,CAACjO,iBAAD,EAAoB,YAApB,CAA1B;AACD;;AACD,QAAIiN,oBAAoB,IAAI,CAACD,cAAc,CAAC7E,QAAf,CAAwB,mBAAxB,CAA7B,EAA2E;AACzEkH,MAAAA,qBAAqB,CAACpC,oBAAD,CAArB;AACA,YAAMgB,oBAAoB,CAAChB,oBAAD,EAAuB,mBAAvB,CAA1B;AACD;;AACD,QAAI,CAACD,cAAc,CAAC7E,QAAf,CAAwB,eAAxB,CAAL,EAA+C;AAC7C,YAAM8F,oBAAoB,CAAC9H,mCAAkBuI,SAAlB,CAA4Bf,uBAA5B,CAAD,EAAuD,eAAvD,CAA1B;AACD;;AACD,QAAI4B,mBAAmB,4BAAG1I,mBAAH,aAAGA,mBAAH,uBAAGA,mBAAmB,CAAEE,SAAxB,yEAAqC,IAA5D;;AACA,QAAImG,kBAAkB,IAAIqC,mBAAtB,IAA6C,CAACvC,cAAc,CAAC7E,QAAf,CAAwB,mBAAxB,CAAlD,EAAgG;AAC9F,YAAMqH,YAAY,GAAG5C,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAE6C,aAAf,CAA6BvS,GAA7B,CAAiC,CAAC;AAAE0K,QAAAA,OAAF;AAAW8H,QAAAA;AAAX,OAAD,MAA+B;AAAE9H,QAAAA,OAAF;AAAW8H,QAAAA;AAAX,OAA/B,CAAjC,CAArB;AACA,YAAMzB,oBAAoB,CAACf,kBAAD,EAAqB,mBAArB,EAA0C;AAAEsC,QAAAA;AAAF,OAA1C,CAA1B;AACD;;AACDD,IAAAA,mBAAmB,GAAGA,mBAAmB,8BAAK3C,aAAL,aAAKA,aAAL,uBAAKA,aAAa,CAAE7F,SAApB,yEAAiC,IAAjC,CAAzC,CA3FC,CA4FD;;AACA,UAAM4I,kBAAkB,2BAAGxC,mBAAH,yDAAG,qBAAqB0B,aAArB,CAAmCtS,WAAW,CAACsD,QAAZ,EAAnC,EAA2D,IAA3D,EAAiE,IAAjE,CAA3B;;AACA,QACEsN,mBAAmB,IACnBoC,mBADA,IAEA,CAACI,kBAFD,IAGA,CAAC3C,cAAc,CAAC7E,QAAf,CAAwB,kBAAxB,CAJH,EAKE;AACA,YAAM8F,oBAAoB,CAACd,mBAAD,EAAsB,kBAAtB,CAA1B;AACD;;AACD,QAAIC,cAAc,IAAImC,mBAAlB,IAAyC,CAACvC,cAAc,CAAC7E,QAAf,CAAwB,kBAAxB,CAA9C,EAA2F;AACzF,YAAM8F,oBAAoB,CAACP,0BAAD,EAA6B,kBAA7B,CAA1B;AACD,KAxGA,CA0GD;AACA;;;AACA,UAAMrN,OAAO,CAACC,GAAR,CAAYuN,iBAAiB,CAAC3Q,GAAlB,CAAuBzB,IAAD,IAAU,KAAKmU,uBAAL,CAA6BnU,IAAI,CAACyK,UAAlC,CAAhC,CAAZ,CAAN;;AACA,UAAM2J,UAAU,GAAG1J,mCAAkB2J,YAAlB,CAA+BjC,iBAAiB,CAAC3Q,GAAlB,CAAuByR,GAAD,IAASA,GAAG,CAACzI,UAAnC,CAA/B,CAAnB;;AACA,UAAM6J,cAAc,GAAGF,UAAU,CAACnU,MAAX,CAAmB0S,OAAD,IAAa,CAACJ,mBAAmB,CAAC7F,QAApB,CAA6BiG,OAAO,CAACE,QAArC,CAAhC,CAAvB;;AACA,UAAMpI,UAAU,GAAGC,mCAAkBuI,SAAlB,CAA4BqB,cAA5B,CAAnB;;AACA,WAAO;AACL7J,MAAAA,UADK;AAEL8J,MAAAA,WAAW,EAAEnC;AAFR,KAAP;AAID;;AAEOuB,EAAAA,gCAAgC,CAACpP,iBAAD,EAAuC8N,qBAAvC,EAAuE;AAC7G,UAAMmC,SAAS,GAAGjQ,iBAAiB,CAAC6O,aAAlB,CAAgCqB,mBAAWtV,EAA3C,CAAlB;AACA,UAAMuV,iBAAiB,GAAGF,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEtZ,MAAX,CAAkBiL,GAA5C;AACA,UAAM,CAACwO,qBAAD,EAAwBC,OAAxB,IAAmC,yBAAUrQ,iBAAV,EAA8B2O,GAAD,IACpE,KAAKlX,IAAL,CAAUwK,eAAV,CAA0B0M,GAAG,CAACL,QAA9B,CADuC,CAAzC;AAGA,UAAMY,yBAAyB,GAAG,KAAI/I,kCAAJ,EAAsB,GAAGkK,OAAzB,CAAlC;AACA,UAAMlB,iBAAiB,GAAGgB,iBAAiB,IAAIC,qBAAqB,CAACjW,MAArE;AACA,UAAMmW,sBAAsB,GAAGnB,iBAAiB,IAAIrB,qBAApD;;AACA,QAAIwC,sBAAJ,EAA4B;AAC1B;AACA,UAAIL,SAAJ,EAAe;AACb,eAAOA,SAAS,CAACtZ,MAAV,CAAiBiL,GAAxB;AACAsN,QAAAA,yBAAyB,CAAC9L,IAA1B,CAA+B6M,SAA/B;AACD;AACF,KAND,MAMO;AACL;AACA,UAAIA,SAAJ,EAAef,yBAAyB,CAAC9L,IAA1B,CAA+B6M,SAA/B;AACff,MAAAA,yBAAyB,CAAC9L,IAA1B,CAA+B,GAAGgN,qBAAlC;AACD;;AACD,WAAO;AAAElB,MAAAA,yBAAF;AAA6BC,MAAAA;AAA7B,KAAP;AACD;;AAEsB,QAAjBoB,iBAAiB,CAACtT,YAAD,EAA8BuT,SAA9B,EAAuD;AAC5E,UAAMvR,UAAU,GAAG,MAAM,KAAKlD,OAAL,CAAakB,YAAb,CAAzB;AACA,UAAMwT,iBAAiB,GAAG,KAAK7Y,cAAL,CAAoB8Y,MAApB,EAA1B;AACA,UAAM,2BAAUD,iBAAV,EAA6B,MAAOE,IAAP,IAAgB;AACjD,YAAMA,IAAI,CAAC1R,UAAD,EAAauR,SAAb,CAAV;AACD,KAFK,CAAN;AAGD;;AAE+B,QAA1BI,0BAA0B,CAAChW,EAAD,EAAkBiW,QAAlB,EAAoCla,MAA2B,GAAG,EAAlE,EAAsE;AACpG,UAAMkQ,mBAAmB,GAAG,MAAM,KAAKA,mBAAL,CAAyBjM,EAAzB,CAAlC;;AACA,QAAIiM,mBAAJ,EAAyB;AACvB,YAAMA,mBAAmB,CAACiK,SAApB,CAA8BD,QAA9B,EAAwCla,MAAxC,EAAgD,KAAK+J,kBAAL,CAAwBjI,IAAxB,CAA6B,IAA7B,CAAhD,CAAN;AACA,YAAMoO,mBAAmB,CAAChE,KAApB,CAA0B;AAAEmE,QAAAA,QAAQ,EAAE;AAAZ,OAA1B,CAAN;AACD,KAHD,MAGO;AACL,WAAK1O,MAAL,CAAYyY,kBAAZ,CAA+BnW,EAA/B,EAAmCiW,QAAnC,EAA6Cla,MAA7C;AACD;AACF;;AAEkC,QAA7Bqa,6BAA6B,CAACpW,EAAD,EAAkBiW,QAAlB,EAAoCI,uBAApC,EAAsE;AACvG,UAAMpK,mBAAmB,GAAG,MAAM,KAAKA,mBAAL,CAAyBjM,EAAzB,CAAlC;;AACA,QAAIiM,mBAAJ,EAAyB;AACvB,YAAMA,mBAAmB,CAACqK,YAApB,CAAiCL,QAAjC,EAA2CI,uBAA3C,EAAoE,KAAKvQ,kBAAL,CAAwBjI,IAAxB,CAA6B,IAA7B,CAApE,CAAN;AACA,YAAMoO,mBAAmB,CAAChE,KAApB,CAA0B;AAAEmE,QAAAA,QAAQ,EAAE;AAAZ,OAA1B,CAAN;AACD,KAHD,MAGO;AACL,WAAK1O,MAAL,CAAY6Y,qBAAZ,CAAkCvW,EAAlC,EAAsCiW,QAAtC,EAAgDI,uBAAhD;AACD;AACF;;AAE+B,QAA1BG,0BAA0B,CAACxW,EAAD,EAAkBiW,QAAlB,EAAkD;AAAA;;AAChF,UAAMhK,mBAAmB,GAAG,MAAM,KAAKA,mBAAL,CAAyBjM,EAAzB,CAAlC;;AACA,QAAIiM,mBAAJ,EAAyB;AAAA;;AACvB,uCAAOA,mBAAmB,CAACH,OAApB,CAA4B/F,GAA5B,CAAgCkQ,QAAhC,CAAP,2DAAO,uBAA2Cla,MAAlD;AACD;;AACD,oCAAO,KAAK2B,MAAL,CAAY+Y,cAAZ,CAA2BzW,EAA3B,EAA+BjE,MAAtC,0DAAO,sBAAwCka,QAAxC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACuC,QAAvBjB,uBAAuB,CAAC0B,aAAD,EAA+D;AAClG,UAAMC,QAAQ,GAAGD,aAAa,CAACpU,GAAd,CAAkB,MAAOgD,KAAP,IAAiB;AAClD,UAAIA,KAAK,CAACmD,WAAV,EAAuB;AACrB,cAAMzI,EAAE,GAAG,MAAM,KAAK8F,kBAAL,CAAwBR,KAAK,CAACmD,WAA9B,CAAjB;AACAnD,QAAAA,KAAK,CAACmD,WAAN,GAAoBzI,EAAE,CAACE,OAAvB;AACD;;AAED,aAAOoF,KAAP;AACD,KAPgB,CAAjB;AAQA,UAAMG,OAAO,CAACC,GAAR,CAAYiR,QAAZ,CAAN;AACA,WAAOD,aAAP;AACD;;AAEOvE,EAAAA,+BAA+B,CAACb,oBAAD,EAAqD;AAAA;;AAC1F,UAAMsF,SAAS,GAAG,6BAAK7a,MAAL,CAAY8a,MAAZ,4EAAoBC,SAApB,KAAiCnb,kBAAnD;;AACA,QAAI,2BAAa2V,oBAAb,EAAmCsF,SAAnC,CAAJ,EAAmD;AACjD,aAAO,IAAP;AACD,KAJyF,CAK1F;;;AACA,WAAO,KAAP;AACD;AAED;AACF;AACA;AACA;;;AACmC,QAAnB3K,mBAAmB,CAACjM,EAAD,EAA4D;AAC3F,UAAMsR,oBAAoB,GAAG,KAAKvF,YAAL,CAAkB/L,EAAlB,EAAsB;AAAEgM,MAAAA,aAAa,EAAE;AAAjB,KAAtB,EAA+C;AAAEyE,MAAAA,QAAQ,EAAE;AAAZ,KAA/C,CAA7B;AACA,WAAO,KAAKmB,0CAAL,CAAgDN,oBAAhD,EAAsEtR,EAAE,CAACgC,QAAzE,CAAP;AACD;;AAEuD,QAA1C4P,0CAA0C,CACtDN,oBADsD,EAEtDlS,IAFsD,EAGZ;AAC1C,QAAI6M,mBAAJ;;AACA,QAAIqF,oBAAJ,EAA0B;AACxB,YAAMyF,eAAe,GAAG,KAAKtF,sBAAL,CAA4BH,oBAA5B,CAAxB;AACA,YAAM0F,4BAA4B,GAAG,MAAM,KAAKpZ,6DAAL,CACzC0T,oBADyC,EAEzClS,IAFyC,CAA3C;AAIA6M,MAAAA,mBAAmB,GAAG,MAAMC,2CAAoB5H,IAApB,CAC1ByS,eAD0B,EAE1B,KAAK5R,gBAAL,CAAsBtH,IAAtB,CAA2B,IAA3B,CAF0B,EAG1BmZ,4BAH0B,CAA5B;AAKD;;AAED,WAAO/K,mBAAP;AACD;;AAE+B,QAA1BgL,0BAA0B,CAAC5S,UAAD,EAA0B6S,QAA1B,EAAuD;AACrF,UAAMjW,GAAG,GAAGoD,UAAU,CAAC/B,GAAX,CAAgB5C,SAAD,IAAeA,SAAS,CAACM,EAAV,CAAaE,OAA3C,CAAZ;AACA,UAAMiX,oBAAoB,GAAG,KAAK7a,YAAL,CAAkB8a,gBAAlB,EAA7B;AACA,UAAMC,uBAAuB,GAAGF,oBAAoB,CAAC7U,GAArB,CAA0BtC,EAAD,IAAQsX,qBAAMC,KAAN,CAAYvX,EAAZ,EAAgB,IAAhB,CAAjC,CAAhC;;AACA,UAAMwX,iBAAiB,GAAGvT,gBAAO6P,SAAP,CAAiBuD,uBAAuB,CAAC/U,GAAxB,CAA6BtC,EAAD,IAAQA,EAAE,CAACyX,WAAH,CAAe,IAAf,CAApC,CAAjB,CAA1B,CAJqF,CAKrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA,UAAMC,UAAU,GAAGF,iBAAiB,CAACG,MAAlB,CAAyB,EAAzB,CAAnB;AACA,WAAO,KAAKtU,0BAAL,CAAgCpC,GAAhC,EAAqCgD,gBAAO6P,SAAP,CAAiB4D,UAAjB,CAArC,EAAmER,QAAnE,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACmB,QAAXtQ,WAAW,CAAC3F,GAAa,GAAG,EAAjB,EAAqB2W,YAAY,GAAG,KAApC,EAA2CC,SAA3C,EAAuF;AACtG,SAAKtb,MAAL,CAAYub,IAAZ,CAAkB,wBAAuB7W,GAAG,CAAC1B,MAAO;AACxD,OAAO0B,GAAG,CAACzC,IAAJ,CAAS,IAAT,CAAe;AACtB,cAAc,CAAAqZ,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAE5S,QAAX,OAAyB,WAAY,EAF/C;AAGA,UAAM8S,YAAY,GAAG9W,GAAG,CAACH,MAAJ,CAAYd,EAAD,IAAQ,CAAC,KAAK1D,YAAL,CAAkBoK,cAAlB,CAAiC1G,EAAjC,CAApB,CAArB;AACA,QAAI,CAAC+X,YAAY,CAACxY,MAAlB,EAA0B,OAAO,EAAP;AAC1B,UAAM4X,oBAAoB,GAAG,KAAK7a,YAAL,CAAkB8a,gBAAlB,EAA7B;AACA,UAAMY,cAAwB,GAAG,0BAAWD,YAAX,EAAyBZ,oBAAzB,CAAjC;AACA,UAAM9U,YAAY,GAAG,MAAM,KAAKnB,2BAAL,CAAiC8W,cAAjC,CAA3B;AACA,UAAM3T,UAAU,GAAG,MAAM,KAAK4T,mBAAL,CAAyB5V,YAAzB,CAAzB;;AAEA,UAAM6U,QAAQ,GAAG,MAAO/F,KAAP,IAAwB;AACvC,YAAMnR,EAAE,GAAG,MAAM,KAAK8F,kBAAL,CAAwBqL,KAAxB,CAAjB;AACA,YAAMzR,SAAS,GAAG,MAAM,KAAKqG,GAAL,CAAS/F,EAAT,CAAxB;AACA,YAAMkY,IAAI,GAAG,KAAKrb,IAAL,CAAUsb,UAAV,CAAqBzY,SAArB,CAAb;AACA,YAAM0Y,gBAAgB,GAAG,KAAKvb,IAAL,CAAUub,gBAAV,CAA2B1Y,SAA3B,CAAzB;AACA,YAAM6G,aAAa,GAAG,KAAK1J,IAAL,CAAU0J,aAAV,CAAwB7G,SAAxB,CAAtB;AACA,YAAM2Y,aAAa,GAAGD,gBAAgB,IAAI7R,aAA1C;;AACA,UAAI,CAAC8R,aAAD,IAAkBL,cAAc,CAACzK,QAAf,CAAwB7N,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAxB,CAAtB,EAAwE;AACtE,cAAM4F,GAAG,GAAG,KAAIyN,wCAAJ,EAAuB5Y,SAAS,CAACM,EAAV,CAAaiF,QAAb,EAAvB,EAAgDiT,IAAI,CAAC1Q,IAArD,EAA2D0Q,IAAI,CAAClY,EAAhE,CAAZ;;AACA,YAAIkY,IAAI,CAAClY,EAAL,KAAYuY,mBAAhB,EAA6B;AAC3B;AACA;AACA;AACA,eAAKhc,MAAL,CAAYic,KAAZ,CAAkB3N,GAAG,CAACO,OAAtB;AACD,SALD,MAKO;AACL,gBAAMP,GAAN;AACD;AACF;;AACD,aAAOwN,aAAP;AACD,KAnBD;;AAqBA,UAAMI,KAAK,GAAG,MAAM,KAAKxB,0BAAL,CAAgC5S,UAAhC,EAA4C6S,QAA5C,CAApB;AACA,UAAMwB,MAAM,GAAGD,KAAK,CAACE,KAAN,EAAf;AACA,UAAMC,OAAO,GAAG,MAAM,KAAK1X,2BAAL,CAAiCwX,MAAjC,CAAtB;AACA,UAAM5M,OAAO,GAAG,MAAM,KAAK3K,OAAL,CAAayX,OAAb,CAAtB;AACA,UAAM;AAAEC,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,QAAiC,MAAM,KAAKC,kCAAL,CAAwCjN,OAAxC,CAA7C;AACA,UAAMkN,QAAQ,GAAGF,UAAU,CAACxW,GAAX,CAAgB2W,MAAD,IAAYA,MAAM,CAACjZ,EAAP,CAAUiF,QAAV,EAA3B,CAAjB;AACA,UAAMiU,gBAAgB,GAAG,MAAM,KAAKC,iBAAL,CAAuBN,cAAvB,CAA/B;AACA,UAAMO,kBAAkB,GAAG,MAAM,KAAK9c,YAAL,CAAkB+c,qCAAlB,CAC/BH,gBAD+B,EAE/BtB,YAF+B,CAAjC;AAIA,UAAM0B,uBAAuB,GAAG,uBAC9BF,kBAAkB,CAAC9W,GAAnB,CAAuB,CAACiX,QAAD,EAAWC,KAAX,KAAqB;AAC1C,UAAI,KAAKld,YAAL,CAAkB+b,aAAlB,CAAgCkB,QAAhC,CAAJ,EAA+C,OAAOjT,SAAP;AAC/C,aAAOkT,KAAP;AACD,KAHD,CAD8B,CAAhC;AAMA,UAAMC,qBAAqB,GAAG,uBAAQL,kBAAkB,CAAC9W,GAAnB,CAAwBoX,CAAD,IAAOA,CAAC,CAAC1Z,EAAhC,CAAR,CAA9B,CAjDsG,CAkDtG;AACA;AACA;;AACA,UAAM2Z,eAAe,GAAG,MAAM,KAAK1d,KAAL,CAAW2d,4BAAX,CAAwCZ,QAAxC,CAA9B;AACA,UAAMa,qBAAqB,GACzBF,eAAe,CAAC9c,IAAhB,IAAwB8c,eAAe,CAAC9c,IAAhB,CAAqB0C,MAA7C,GACI,MAAM,KAAKtD,KAAL,CAAW2K,WAAX,CAAuB+S,eAAe,CAAC9c,IAAvC,EAA6C+a,YAA7C,CADV,GAEI,EAHN;AAIA,UAAMkC,mBAAmB,GACvBH,eAAe,CAACI,KAAhB,IAAyBJ,eAAe,CAACI,KAAhB,CAAsBxa,MAA/C,GACI,MAAM,KAAKtD,KAAL,CAAW+d,4BAAX,CACJL,eAAe,CAACI,KADZ,EAEJ,uBAAQN,qBAAR,CAFI,EAGJ7B,YAHI,EAIJ;AACEhT,MAAAA,2BAA2B,EAAE,KAAKvG;AADpC,KAJI,CADV,GASI,EAVN;AAWA,UAAM4b,sBAAsB,GAAG,uBAAQH,mBAAmB,CAACxX,GAApB,CAAyBoX,CAAD,IAAOA,CAAC,CAAC1Z,EAAjC,CAAR,CAA/B;AAEA,UAAM,KAAK1D,YAAL,CAAkB4d,yBAAlB,CAA4C,CAAC,GAAGJ,mBAAJ,EAAyB,GAAGV,kBAA5B,CAA5C,EAA6FxB,YAA7F,CAAN,CAvEsG,CAwEtG;;AACA,UAAMuC,qBAAqB,GAAGb,uBAAuB,CAAChX,GAAxB,CAA6BkX,KAAD,IAAW;AACnE,aAAOX,cAAc,CAACW,KAAD,CAArB;AACD,KAF6B,CAA9B,CAzEsG,CA4EtG;;AACA,UAAMY,uBAAuB,GAAG,MAAM,KAAKjB,iBAAL,CAAuBgB,qBAAvB,CAAtC;AACA,UAAME,yBAAyB,GAAG,MAAM,KAAK/d,YAAL,CAAkB+c,qCAAlB,CACtCe,uBADsC,EAEtCxC,YAFsC,CAAxC;AAIA,UAAM,KAAKtb,YAAL,CAAkB4d,yBAAlB,CAA4CG,yBAA5C,EAAuEzC,YAAvE,CAAN;AAEA,WAAO,uBAAQiC,qBAAqB,CAAClC,MAAtB,CAA6BsC,sBAA7B,EAAqDtC,MAArD,CAA4D8B,qBAA5D,CAAR,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACkC,QAA1BpW,0BAA0B,CAC9BpC,GAD8B,EAE9BqZ,SAF8B,EAG9BC,gBAH8B,EAIR;AACtB,UAAMC,kBAAkB,GAAG,KAAIC,sCAAJ,EAAuB,IAAvB,EAA6B,KAAKle,MAAlC,EAA0C+d,SAA1C,EAAqDC,gBAArD,CAA3B;AACA,WAAOC,kBAAkB,CAACE,UAAnB,CAA8BzZ,GAA9B,CAAP;AACD;;AAEmB,QAAd0Z,cAAc,CAACC,WAAD,EAAuBvY,YAAvB,EAAkF;AACpG,QAAIwY,YAAY,GAAG,KAAnB;AACA,UAAMC,SAAmB,GAAG,EAA5B;AACA,UAAMC,YAAY,GAAG1Y,YAAY,GAAGA,YAAY,CAACC,GAAb,CAAkBtC,EAAD,IAAQA,EAAE,CAACiF,QAAH,EAAzB,CAAH,GAA6C,KAAKvI,OAAL,CAAase,aAA3F;AACA,UAAMC,cAAc,GAAG,KAAK3e,YAAL,CAAkB8a,gBAAlB,EAAvB;AACA,UAAM8D,cAAwB,GAAG,0BAAWH,YAAX,EAAyBE,cAAzB,CAAjC;AACA,UAAME,qBAAqB,GAAG,MAAM,KAAKja,2BAAL,CAAiCga,cAAjC,CAApC;AACA,UAAM;AAAEE,MAAAA,YAAF;AAAgBpC,MAAAA;AAAhB,QAA6B,MAAM,KAAKqC,2BAAL,CAAiCF,qBAAjC,CAAzC;AACA,UAAMG,YAAY,GAAG,MAAM,KAAKna,OAAL,CAAaia,YAAb,CAA3B;AACA,UAAMG,UAAU,GAAG,MAAM,KAAKjf,YAAL,CAAkBqe,cAAlB,CAAiCW,YAAjC,EAA+C,MAAO5b,SAAP,IAAqB;AAC3Fob,MAAAA,SAAS,CAACtS,IAAV,CAAe9I,SAAS,CAACM,EAAV,CAAaE,OAAb,CAAqB+E,QAArB,EAAf;AACA,YAAMuW,SAAS,GAAG,KAAKC,uBAAL,CAA6B/b,SAAS,CAACU,KAAV,CAAgBC,SAA7C,CAAlB;AACA,YAAMqb,OAAO,GAAG,MAAMhL,mBAAGiL,UAAH,CAAcH,SAAd,CAAtB;;AACA,UAAI,CAACE,OAAL,EAAc;AACZb,QAAAA,YAAY,GAAG,IAAf;AACD;;AAED,aAAO;AACLe,QAAAA,UAAU,EAAEJ,SADP;AAELK,QAAAA,WAAW,EAAEjB,WAAW,GAAG,MAAM,KAAKte,YAAL,CAAkBwf,cAAlB,CAAiCpc,SAAjC,EAA4C8b,SAA5C,EAAuDZ,WAAvD,CAAT,GAA+E;AAFlG,OAAP;AAID,KAZwB,CAAzB;AAcA,QAAImB,eAAmC,GAAG,EAA1C;;AACA,QAAI/C,QAAQ,CAACzZ,MAAb,EAAqB;AACnBwc,MAAAA,eAAe,GAAG,MAAM,KAAK9f,KAAL,CAAW0e,cAAX,CAA0BC,WAA1B,EAAuC5B,QAAvC,CAAxB;AACD;;AAED,QAAIgD,cAAc,GAAG,MAAMvW,OAAO,CAACC,GAAR,CACzBuV,cAAc,CAAC3Y,GAAf,CAAmB,MAAO2Z,MAAP,IAAkB;AACnC,YAAMC,MAAM,GAAG,MAAM,kCAAaD,MAAb,EAAqBrB,WAArB,CAArB;AACA,aAAO,KAAKte,YAAL,CAAkB6f,cAAlB,CAAiCD,MAAjC,CAAP;AACD,KAHD,CADyB,CAA3B,CA5BoG,CAmCpG;;AACA,QAAItB,WAAJ,EAAiB;AACfoB,MAAAA,cAAc,GAAGA,cAAc,CAAClb,MAAf,CAAuBsb,UAAD,IAAgB;AACrD,eAAOA,UAAU,CAACP,WAAlB;AACD,OAFgB,CAAjB;AAGD;;AAED,QAAIhB,YAAJ,EAAkB;AAChB,YAAM,sBAAKC,SAAL,EAAgB,KAAhB,CAAN;AACD;;AAED,UAAMuB,OAAO,GAAGd,UAAU,CAAC5D,MAAX,CAAkBqE,cAAlB,EAAkCrE,MAAlC,CAAyCoE,eAAzC,CAAhB;AACA,UAAMO,QAAQ,GAAG,sBAAOD,OAAP,EAAiBE,GAAD,IAAU,GAAEA,GAAG,CAACX,UAAW,IAAGW,GAAG,CAACV,WAAY,EAA9D,CAAjB;AACA,QAAIW,IAAI,GAAGF,QAAX;;AACA,QAAI1B,WAAJ,EAAiB;AACf4B,MAAAA,IAAI,GAAGA,IAAI,CAAC1b,MAAL,CAAayb,GAAD,IAASA,GAAG,CAACV,WAAzB,CAAP;AACD;;AAED,WAAOW,IAAP;AACD;;AAEwC,QAA3BnB,2BAA2B,CACvCpa,GADuC,EAE4B;AACnE,UAAMma,YAA2B,GAAG,EAApC;AACA,UAAMpC,QAAuB,GAAG,EAAhC;AACA,UAAMvT,OAAO,CAACC,GAAR,CACJzE,GAAG,CAACqB,GAAJ,CAAQ,MAAOtC,EAAP,IAAc;AACpB,YAAMyc,gBAAgB,GAAG,MAAM,KAAK/a,KAAL,CAAW1B,EAAX,CAA/B;AACAyc,MAAAA,gBAAgB,GAAGrB,YAAY,CAAC5S,IAAb,CAAkBxI,EAAlB,CAAH,GAA2BgZ,QAAQ,CAACxQ,IAAT,CAAcxI,EAAd,CAA3C;AACD,KAHD,CADI,CAAN;AAMA,WAAO;AAAEob,MAAAA,YAAF;AAAgBpC,MAAAA;AAAhB,KAAP;AACD;;AAE+C,QAAlCD,kCAAkC,CAC9C1U,UAD8C,EAEqB;AACnE,UAAMwU,cAA2B,GAAG,EAApC;AACA,UAAMC,UAAuB,GAAG,EAAhC;AACA,UAAMrT,OAAO,CAACC,GAAR,CACJrB,UAAU,CAAC/B,GAAX,CAAe,MAAO5C,SAAP,IAAqB;AAClC,YAAM+c,gBAAgB,GAAG,MAAM,KAAK/a,KAAL,CAAWhC,SAAS,CAACM,EAArB,CAA/B;AACAyc,MAAAA,gBAAgB,GAAG5D,cAAc,CAACrQ,IAAf,CAAoB9I,SAApB,CAAH,GAAoCoZ,UAAU,CAACtQ,IAAX,CAAgB9I,SAAhB,CAApD;AACD,KAHD,CADI,CAAN;AAMA,WAAO;AAAEmZ,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,KAAP;AACD;AAED;AACF;AACA;AACA;;;AACsB,QAAdzE,cAAc,CAClB/I,UADkB,EAElBoR,cAFkB,EAGlB9E,YAAY,GAAG,KAHG,EAIH;AACf,UAAM+E,cAAc,GAAGrR,UAAU,CAAChJ,GAAX,CAAe,MAAOsa,cAAP,IAA0B;AAC9D;AACA,UAAI,CAACA,cAAc,CAACnU,WAApB,EAAiC;AAC/B,eAAOmU,cAAc,CAAClJ,QAAtB;AACD;;AAED,YAAM1T,EAAE,GAAG,MAAM,KAAK8F,kBAAL,CAAwB8W,cAAc,CAACnU,WAAvC,CAAjB,CAN8D,CAO9D;;AACA,aAAOzI,EAAE,CAACiF,QAAH,EAAP;AACD,KATsB,CAAvB;AAUA,UAAM+V,aAAuB,GAAG,MAAMvV,OAAO,CAACC,GAAR,CAAYiX,cAAZ,CAAtC;AACA,UAAME,gBAAgB,GAAG,KAAKngB,OAAL,CAAase,aAAtC;AACA,UAAM8B,gBAAgB,GAAG,0BAAW9B,aAAX,EAA0B6B,gBAA1B,CAAzB;AACA,QAAI,CAACC,gBAAgB,CAACvd,MAAtB,EAA8B;AAC9B,UAAM,KAAKqH,WAAL,CAAiBkW,gBAAjB,EAAmClF,YAAnC,EAAiD8E,cAAjD,CAAN;AACD;AAED;AACF;AACA;AACA;;;AACEK,EAAAA,UAAU;AACR;AACJ;AACA;AACI/c,EAAAA,EAJQ,EAKR;AACA,UAAMgd,MAAM,GAAG,KAAf;;AACA,UAAMC,QAAQ,GAAG5e,gBAAKG,IAAL,CAAU,KAAKD,WAAf,EAA4B,QAA5B,EAAsCye,MAAtC,EAA8Chd,EAA9C,CAAjB,CAFA,CAIA;;;AACA,QAAI,CAAC0Q,mBAAGwM,UAAH,CAAcD,QAAd,CAAL,EAA8B;AAC5BvM,yBAAGyM,SAAH,CAAaF,QAAb,EAAuB;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAAvB;AACD;;AAED,WAAOH,QAAP;AACD;;AAEsB,QAAjB9D,iBAAiB,CAAC9U,UAAD,EAA2D;AAChF,QAAIwW,YAAY,GAAG,KAAnB;AACA,UAAMC,SAAmB,GAAG,EAA5B;AACA,UAAMuC,QAAQ,GAAGhZ,UAAU,CAAC/B,GAAX,CAAe,MAAO5C,SAAP,IAAqB;AACnDob,MAAAA,SAAS,CAACtS,IAAV,CAAe9I,SAAS,CAACM,EAAV,CAAaE,OAAb,CAAqB+E,QAArB,EAAf;AACA,YAAMuW,SAAS,GAAG,KAAKC,uBAAL,CAA6B/b,SAA7B,CAAlB;AACA,YAAMgc,OAAO,GAAG,MAAMhL,mBAAGiL,UAAH,CAAcH,SAAd,CAAtB;;AACA,UAAI,CAACE,OAAL,EAAc;AACZb,QAAAA,YAAY,GAAG,IAAf;AACD;;AAED,YAAMyC,WAAW,GAAG,YAAY;AAC9B,cAAMC,OAAO,GAAG,KAAKjhB,YAAL,CAAkBkhB,UAAlB,CAA6B9d,SAA7B,EAAwC8b,SAAxC,CAAhB;;AACA,YAAI+B,OAAO,CAACE,GAAR,EAAJ,EAAmB;AACjB,iBAAOF,OAAO,CAACjZ,IAAR,CAAaoZ,mBAAYte,IAAzB,CAAP;AACD,SAJ6B,CAM9B;;;AACA,cAAM6Z,MAAM,GAAG0E,OAAO,CAACnC,SAAD,CAAtB,CAP8B,CAQ9B;;;AACA,cAAMK,WAAW,GAAG,MAAM,KAAKvf,YAAL,CAAkBwf,cAAlB,CAAiCpc,SAAjC,EAA4C8b,SAA5C,EAAuDkC,mBAAYte,IAAnE,CAA1B,CAT8B,CAU9B;;AACA,YAAIyc,WAAJ,EAAiB8B,OAAO,CAAC9B,WAAD,CAAP;AACjB,eAAO5C,MAAP;AACD,OAbD;;AAcA,aAAO,KAAI2E,sCAAJ,EAAyBle,SAAzB,EAAoC4d,WAApC,CAAP;AACD,KAvBgB,CAAjB;AAwBA,UAAMO,QAAQ,GAAG,MAAMpY,OAAO,CAACC,GAAR,CAAY2X,QAAZ,CAAvB,CA3BgF,CA4BhF;;AACA,QAAIxC,YAAJ,EAAkB;AAChB,YAAM,sBAAKC,SAAL,EAAgB,KAAhB,CAAN;AACD;;AACD,WAAO+C,QAAP;AACD;;AAEmC,QAAtBC,sBAAsB,CAAC7c,GAAD,EAAoD;AACtF,UAAMoD,UAAU,GAAGpD,GAAG,CAAC1B,MAAJ,GAAa,MAAM,KAAK4B,OAAL,CAAaF,GAAb,CAAnB,GAAuC,MAAM,KAAKJ,IAAL,EAAhE;AACA,WAAOkd,0BAAaC,EAAb,CAAwB3Z,UAAxB,EAAqC3E,SAAD,IAAe,KAAKqM,YAAL,CAAkBrM,SAAS,CAACM,EAA5B,CAAnD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACe,QAAPie,OAAO,CAACC,QAAD,EAAsBxS,OAAtB,EAAwF;AACnG,QAAIwS,QAAQ,IAAIA,QAAQ,CAAC3e,MAAzB,EAAiC;AAC/B,YAAM,KAAK4e,YAAL,CAAkBD,QAAlB,EAA4BxS,OAA5B,CAAN;AACD;;AACD,QAAIA,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAE0S,eAAb,EAA8B;AAAA;;AAC5B,YAAMC,UAAU,GAAG,MAAM,KAAKP,sBAAL,CAA4B,EAA5B,CAAzB;AACA,YAAMQ,gBAAgB,GAAG,KAAKliB,kBAAL,CAAwBmiB,kBAAxB,EAAzB;AACA,YAAMC,YAAY,GAAG,MAAM,KAAKC,sCAAL,EAA3B;AACA,YAAMC,gBAA8C,GAAG;AACrDC,QAAAA,MAAM,EAAEjT,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEiT,MADoC;AAErDC,QAAAA,uBAAuB,2BAAElT,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEkT,uBAAX,yEAAsC,IAFR;AAGrDC,QAAAA,6BAA6B,4BAAEnT,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEmT,6BAAX,2EAA4C,KAHpB;AAIrDC,QAAAA,kBAAkB,EAAEN,YAJiC;AAKrDO,QAAAA,SAAS,EAAE,KAAK3iB,kBAAL,CAAwBL,MAAxB,CAA+BgjB,SALW;AAMrDC,QAAAA,mBAAmB,EAAE,KAAK5iB,kBAAL,CAAwBL,MAAxB,CAA+BijB;AANC,OAAvD;AAQA,YAAMC,YAAY,GAAG,MAAM,KAAK7iB,kBAAL,CAAwB8iB,0BAAxB,CACzB,KAAK7gB,IADoB,EAEzBigB,gBAFyB,EAGzBD,UAHyB,EAIzBK,gBAJyB,CAA3B;;AAMA,UAAIO,YAAJ,EAAkB;AAChB,cAAME,mBAAmB,GAAGC,MAAM,CAAC5Z,OAAP,CAAeyZ,YAAf,EAA6B3c,GAA7B,CAAiC,CAAC,CAAC+c,QAAD,EAAWC,KAAX,CAAD,KAAwB,GAAED,QAAS,IAAGC,KAAM,EAA7E,CAA5B;AACA,cAAM,KAAKnB,YAAL,CAAkBgB,mBAAlB,EAAuCzT,OAAvC,CAAN;AACD,OAHD,MAGO;AACL,aAAKnP,MAAL,CAAYgjB,OAAZ,CAAoB,qCAApB;AACD;AACF;;AACD,QAAI7T,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEqD,MAAb,EAAqB;AACnB,WAAKxS,MAAL,CAAYijB,aAAZ,CAA0B,2BAA1B;AACA,YAAM,KAAKC,aAAL,EAAN;AACA,WAAKljB,MAAL,CAAYmjB,cAAZ;AACD;;AACD,WAAO,KAAKC,eAAL,CAAqBjU,OAArB,CAAP;AACD;;AAEyB,QAAZyS,YAAY,CAACD,QAAD,EAAqBxS,OAArB,EAAwD;AAChF,QAAI,EAACA,OAAD,aAACA,OAAD,eAACA,OAAO,CAAErP,QAAV,KAAsB,CAACqP,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEkU,aAAV,MAAuC,KAAjE,EAAwE;AACtE,YAAM,KAAIC,iDAAJ,EAAuCnU,OAAvC,aAAuCA,OAAvC,uBAAuCA,OAAO,CAAEkU,aAAhD,CAAN;AACD;;AACD,SAAKrjB,MAAL,CAAY6J,KAAZ,CAAmB,sCAAqC8X,QAAQ,CAAC1f,IAAT,EAAgB,EAAxE;AACA,UAAMshB,QAAQ,GAAG,MAAM,KAAK1jB,kBAAL,CAAwB2jB,kBAAxB,EAAvB;AACA,UAAMC,iBAAiB,GAAG9B,QAAQ,CAAC5b,GAAT,CAAc0O,WAAD,IACrC8O,QAAQ,CAACG,oBAAT,CAA8BjP,WAA9B,EAA2C;AACzCtB,MAAAA,OAAO,EAAE,KAAKrR;AAD2B,KAA3C,CADwB,CAA1B;AAKA,UAAM6hB,gBAAgB,GAAG,MAAMza,OAAO,CAACC,GAAR,CAAYsa,iBAAZ,CAA/B;AACA,UAAMG,yBAAiD,GAAG,EAA1D;AACAD,IAAAA,gBAAgB,CAACxL,OAAjB,CAA0B0L,eAAD,IAAqB;AAC5C,UAAIA,eAAe,CAACC,OAApB,EAA6B;AAC3B,cAAMC,iBAAiB,GAAG,KAAKlkB,kBAAL,CAAwBmkB,wBAAxB,CACxBH,eAAe,CAACC,OADQ,EAExB3U,OAFwB,aAExBA,OAFwB,uBAExBA,OAAO,CAAE8U,UAFe,CAA1B;AAIAL,QAAAA,yBAAyB,CAAC3X,IAA1B,CAA+B;AAC7BiY,UAAAA,YAAY,EAAEL,eAAe,CAACpP,WADD;AAE7B0P,UAAAA,KAAK,EAAE;AACLL,YAAAA,OAAO,EAAEC;AADJ,WAFsB;AAK7BV,UAAAA,aAAa,EAAE,CAAAlU,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEkU,aAAT,KAA0B;AALZ,SAA/B;AAOD;AACF,KAdD;;AAeA,QAAI,EAAClU,OAAD,aAACA,OAAD,eAACA,OAAO,CAAErP,QAAV,CAAJ,EAAwB;AAAA;;AACtB,WAAKD,kBAAL,CAAwBukB,eAAxB,CAAwCR,yBAAxC,EAAmE;AACjES,QAAAA,cAAc,2BAAElV,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEkV,cAAX,yEAA6B;AADsB,OAAnE;AAGD,KAJD,MAIO,CACL;AACD;;AACD,UAAM,KAAKxkB,kBAAL,CAAwBykB,aAAxB,CAAsC,KAAKxiB,IAA3C,CAAN;AACD;;AAEiD,QAApCyiB,oCAAoC,GAAG;AACnD,UAAMC,eAAe,GAAG,MAAM,KAAKvf,OAAL,EAA9B;AACA,UAAMwf,oBAAyD,GAAG,EAAlE;AACA,UAAMC,qBAA0C,GAAG,EAAnD;AACA,KACE,MAAMxb,OAAO,CAACC,GAAR,CACJqb,eAAe,CAACze,GAAhB,CAAqBX,WAAD,IAAiB,KAAKsK,mBAAL,CAAyBtK,WAAzB,CAArC,CADI,CADR,EAIE+S,OAJF,CAIU,CAACzI,mBAAD,EAAsBuN,KAAtB,KAAgC;AACxC,UAAI,CAACvN,mBAAL,EAA0B;AAC1B,YAAMiV,iBAAiB,GAAGjV,mBAAmB,CAACH,OAApB,CAA4B/F,GAA5B,CAAgCob,+CAAyBnhB,EAAzD,CAA1B;AACA,UAAI,CAACkhB,iBAAL,EAAwB;AACxB,YAAMvf,WAAW,GAAGof,eAAe,CAACvH,KAAD,CAAf,CAAuBvU,QAAvB,EAApB;AACA+b,MAAAA,oBAAoB,CAACrf,WAAD,CAApB,GAAoCsK,mBAApC;AACAgV,MAAAA,qBAAqB,CAACtf,WAAD,CAArB,GAAqCuf,iBAAiB,CAACnlB,MAAlB,CAAyBqlB,MAA9D;AACD,KAXD;AAYA,WAAO;AACLJ,MAAAA,oBADK;AAELC,MAAAA;AAFK,KAAP;AAID;AAED;AACF;AACA;AACA;AACA;;;AAC0B,QAAlBI,kBAAkB,CAAC3V,OAAD,EAA4B;AAClD,UAAM;AAAEsV,MAAAA,oBAAF;AAAwBC,MAAAA;AAAxB,QAAkD,MAAM,KAAKH,oCAAL,EAA9D;AACA,UAAMQ,eAAe,GAAG,KAAKjlB,QAAL,CAAcklB,GAAd,EAAxB;;AACA,UAAMC,yBAAyB,GAAG,KAAKC,gCAAL,CAAsCH,eAAtC,CAAlC;;AACA,UAAMI,YAAY,GAAG,MAAM,KAAKtlB,kBAAL,CAAwBulB,2BAAxB,CAAoD;AAC7EjS,MAAAA,OAAO,EAAE,KAAKrR,IAD+D;AAE7EmjB,MAAAA,yBAF6E;AAG7EP,MAAAA;AAH6E,KAApD,CAA3B;AAKA,QAAIW,oBAAJ;;AACA,QAAIlW,OAAO,CAAChG,GAAZ,EAAiB;AACfkc,MAAAA,oBAAoB,GAAGF,YAAvB;AACD,KAFD,MAEO;AACL,WAAKnlB,MAAL,CAAYslB,GAAZ;AACAD,MAAAA,oBAAoB,GAAG,MAAM,0CAAiBF,YAAjB,CAA7B;AACA,WAAKnlB,MAAL,CAAYulB,EAAZ;AACD;;AACD,UAAM;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAyC,KAAK5lB,kBAAL,CAAwB6lB,YAAxB,CAAqCL,oBAArC,EAA2D;AACxGJ,MAAAA,yBADwG;AAExGP,MAAAA;AAFwG,KAA3D,CAA/C;AAIA,UAAM,KAAKiB,uBAAL,CAA6BZ,eAA7B,EAA8CS,eAA9C,CAAN;AACA,UAAMI,2BAA2B,GAAG/C,MAAM,CAACtJ,MAAP,CAAc,oBAAKkL,oBAAL,EAA2BgB,iBAA3B,CAAd,CAApC;AACA,UAAM,KAAKI,6BAAL,CAAmCD,2BAAnC,CAAN;AACA,UAAM,KAAKE,eAAL,EAAN;AACA,WAAO,KAAK1C,eAAL,CAAqB;AAAEhB,MAAAA,MAAM,EAAE;AAAV,KAArB,CAAP;AACD;;AAEO8C,EAAAA,gCAAgC,CAACH,eAAD,EAAuE;AAC7G,UAAME,yBAAoE,GAAG,EAA7E;;AACA,SAAK,MAAM,CAACc,cAAD,EAAiBhX,UAAjB,CAAX,IAA2C8T,MAAM,CAAC5Z,OAAP,CAAe8b,eAAf,CAA3C,EAA4E;AAAA;;AAC1E,mCAAIhW,UAAU,CAAC6V,+CAAyBnhB,EAA1B,CAAd,kDAAI,sBAAyCohB,MAA7C,EAAqD;AAAA;;AACnDI,QAAAA,yBAAyB,CAACc,cAAD,CAAzB,6BAA4ChX,UAAU,CAAC6V,+CAAyBnhB,EAA1B,CAAtD,2DAA4C,uBAAyCohB,MAArF;AACD;AACF;;AACD,WAAOI,yBAAP;AACD;;AAEOU,EAAAA,uBAAuB,CAACZ,eAAD,EAAuCiB,qBAAvC,EAAwE;AACrG,SAAK,MAAMD,cAAX,IAA6BC,qBAA7B,EAAoD;AAClD,WAAKlmB,QAAL,CAAcmmB,YAAd,CACEF,cADF,EAEEnB,+CAAyBnhB,EAF3B,EAGEshB,eAAe,CAACgB,cAAD,CAAf,CAAgCnB,+CAAyBnhB,EAAzD,CAHF,EAIE;AAAEyiB,QAAAA,gBAAgB,EAAE;AAApB,OAJF;AAMD;;AACD,WAAO,KAAKrmB,kBAAL,CAAwBykB,aAAxB,CAAsC,KAAKxiB,IAA3C,CAAP;AACD;;AAE0C,QAA7B+jB,6BAA6B,CAACpB,oBAAD,EAA8C;AACvF,UAAMvb,OAAO,CAACC,GAAR,CACJgd,KAAK,CAAClY,IAAN,CAAWwW,oBAAX,EAAiC1e,GAAjC,CAAqC,MAAO2J,mBAAP,IAA+B;AAClE,YAAMA,mBAAmB,CAAChE,KAApB,CAA0B;AAAEmE,QAAAA,QAAQ,EAAE;AAAZ,OAA1B,CAAN;AACD,KAFD,CADI,CAAN;AAKD;;AAE4B,QAAfuT,eAAe,CAACjU,OAAD,EAAiE;AAAA;;AAC5F,SAAKnP,MAAL,CAAYgjB,OAAZ,CACG,8CAA6CoD,iBAAMC,IAAN,CAAW,KAAKxmB,kBAAL,CAAwBymB,qBAAxB,EAAX,CAA4D,EAD5G;AAGA,SAAKtmB,MAAL,CAAY6J,KAAZ,CAAmB,mDAAnB,EAAuEsF,OAAvE;AACA,SAAK/D,UAAL,GAL4F,CAM5F;;AACA,UAAMmb,SAAS,GAAG,KAAK1mB,kBAAL,CAAwB2mB,YAAxB,CAAqC,EAArC,CAAlB;AACA,UAAM1E,UAAU,GAAG,MAAM,KAAKP,sBAAL,CAA4B,EAA5B,CAAzB;AACA,UAAMQ,gBAAgB,GAAG,KAAKliB,kBAAL,CAAwBmiB,kBAAxB,EAAzB;AAEA,UAAMC,YAAY,GAAG,MAAM,KAAKC,sCAAL,EAA3B;AAEA,UAAMC,gBAA8C,GAAG;AACrDC,MAAAA,MAAM,EAAEjT,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEiT,MADoC;AAErDC,MAAAA,uBAAuB,4BAAElT,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEkT,uBAAX,2EAAsC,IAFR;AAGrDC,MAAAA,6BAA6B,4BAAEnT,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEmT,6BAAX,2EAA4C,KAHpB;AAIrDC,MAAAA,kBAAkB,EAAEN,YAJiC;AAKrDO,MAAAA,SAAS,EAAE,KAAK3iB,kBAAL,CAAwBL,MAAxB,CAA+BgjB,SALW;AAMrDC,MAAAA,mBAAmB,EAAE,KAAK5iB,kBAAL,CAAwBL,MAAxB,CAA+BijB;AANC,KAAvD;AAQA,UAAM8D,SAAS,CAAC7E,OAAV,CAAkB,KAAK5f,IAAvB,EAA6BigB,gBAA7B,EAA+CD,UAA/C,EAA2D;AAAE2E,MAAAA,iBAAiB,EAAE;AAArB,KAA3D,EAAyFtE,gBAAzF,CAAN,CArB4F,CAsB5F;AACA;AACA;;AACA,UAAM,KAAKuE,IAAL,CAAU;AACdC,MAAAA,cAAc,EAAE,IADF;AAEdC,MAAAA,UAAU,EAAE,IAFE;AAGdC,MAAAA,eAAe,EAAE,IAHH;AAIdC,MAAAA,kBAAkB,EAAE,CAAC,KAAKplB;AAJZ,KAAV,CAAN;AAMA,UAAM,KAAKjC,QAAL,CAAcsnB,gBAAd,CAA+BC,8BAA/B,EAAN;AACA,WAAOlF,UAAP;AACD;;AAES,QAAJ4E,IAAI,CAACvX,OAA6B,GAAG,EAAjC,EAA2D;AACnE,QAAIA,OAAO,CAAC8X,WAAZ,EAAyB;AACvB,YAAM,KAAK/D,aAAL,EAAN;AACD;;AACD/T,IAAAA,OAAO,CAAC1P,QAAR,GAAmB,KAAKA,QAAxB;AACA,UAAMqiB,UAAU,GAAG,MAAM,KAAKP,sBAAL,CAA4B,EAA5B,CAAzB;AACA,UAAMQ,gBAAgB,GAAG,KAAKliB,kBAAL,CAAwBmiB,kBAAxB,EAAzB;AACA,UAAMkF,MAAM,GAAG,KAAKrnB,kBAAL,CAAwBsnB,SAAxB,CAAkC;AAC/ChU,MAAAA,OAAO,EAAE,KAAKrR,IADiC;AAE/CslB,MAAAA,cAAc,EAAEjY;AAF+B,KAAlC,CAAf;AAIA,UAAMkY,GAAG,GAAG,MAAMH,MAAM,CAACR,IAAP,CAAY,KAAK5kB,IAAjB,EAAuBigB,gBAAvB,EAAyCD,UAAzC,EAAqD3S,OAArD,CAAlB;AACA,WAAOkY,GAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACsD,QAAtCnF,sCAAsC,GAAG;AACrD;AACA,UAAMoF,OAAO,GAAG,MAAM,KAAK5nB,KAAL,CAAW6nB,cAAX,EAAtB;AACA,UAAMC,GAAG,GAAG,MAAM,KAAK3nB,kBAAL,CAAwB4nB,aAAxB,EAAlB;AACA,UAAMC,aAAa,GAAG7E,MAAM,CAAC8E,IAAP,CAAYH,GAAG,CAACI,MAAhB,CAAtB;AACA,WAAQC,cAAD,IAAoD;AACzD,YAAMC,QAAQ,GAAGD,cAAc,CAACtjB,MAAf,CAAuBwjB,GAAD,IAAS;AAC9C,YAAI,EAAEA,GAAG,YAAYC,yCAAjB,CAAJ,EAA2C;AACzC,iBAAO,IAAP;AACD;;AACD,YAAIV,OAAO,CAACW,KAAR,CAAcF,GAAG,CAAC3iB,WAAJ,CAAgB1F,KAA9B,CAAJ,EAA0C;AACxC,iBAAO,IAAP;AACD;;AACD,YAAIgoB,aAAa,CAACQ,IAAd,CAAoBxoB,KAAD,IAAWqoB,GAAG,CAACtT,WAAJ,CAAgB0T,UAAhB,CAA4B,IAAGzoB,KAAM,GAArC,CAA9B,CAAJ,EAA6E;AAC3E,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OAXgB,CAAjB;AAYA,aAAOooB,QAAP;AACD,KAdD;AAeD;AAED;AACF;AACA;AACA;;;AAC6B,QAAbhU,aAAa,CAACF,SAAD,EAAsC;AAC/D;AACA,UAAM0T,OAAO,GAAG,MAAM,KAAK5nB,KAAL,CAAW6nB,cAAX,EAAtB;AACA,WAAOD,OAAO,CAACW,KAAR,CAAcrU,SAAd,CAAP;AACD;AAED;AACF;AACA;;;AACmC,QAAnB8H,mBAAmB,CAAC5V,YAAD,EAAoD;AACnF,QAAI;AACF,aAAO,MAAM,KAAKyM,gBAAL,CAAsBzM,YAAtB,CAAb;AACD,KAFD,CAEE,OAAOwI,GAAP,EAAiB;AACjB,UAAIA,GAAG,YAAY8Z,gCAAnB,EAAsC;AAAA;;AACpC,cAAM5oB,MAAM,GAAG,KAAKW,OAAL,CAAaqJ,GAAb,CAA6B,wBAA7B,CAAf;AACA,cAAM6e,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAe,0BAAA/oB,MAAM,CAACgpB,eAAP,gFAAwBxD,GAAxB,KAA+B,EAA9C,CAAlB;;AACA,YAAIqD,SAAS,CAACrX,QAAV,CAAmB1C,GAAG,CAAC7K,EAAvB,CAAJ,EAAgC;AAC9B,gBAAM,KAAI9B,oBAAJ,EAAc,uBAAsB2M,GAAG,CAAC7K,EAAG;AAC3D,oFADgB,CAAN;AAED;AACF;;AAED,YAAM6K,GAAN;AACD;AACF,GAvoDgD,CAyoDjD;;;AAC2B,QAAb4U,aAAa,GAAG;AAC5B,UAAMuF,aAA4B,GAAG;AACnC/jB,MAAAA,GAAG,EAAE,EAD8B;AAEnCgkB,MAAAA,OAAO,EAAE,KAF0B;AAGnCC,MAAAA,KAAK,EAAE,KAH4B;AAInCC,MAAAA,WAAW,EAAE,IAJsB;AAKnC/Y,MAAAA,QAAQ,EAAE,KALyB;AAMnCgZ,MAAAA,UAAU,EAAE,KANuB;AAOnCC,MAAAA,WAAW,EAAE,KAPsB;AAQnCC,MAAAA,kBAAkB,EAAE,KARe;AASnCC,MAAAA,0BAA0B,EAAE,KATO;AAUnCC,MAAAA,gBAAgB,EAAE;AAViB,KAArC;AAYA,UAAMC,QAAQ,GAAG,KAAIC,oBAAJ,EAAa,IAAb,EAAmB,KAAKtpB,kBAAxB,CAAjB;;AACA,QAAI;AACF,YAAMwnB,GAAG,GAAG,MAAM6B,QAAQ,CAAC1W,MAAT,CAAgBiW,aAAhB,EAA+B,EAA/B,CAAlB;AACA,aAAOpB,GAAP;AACD,KAHD,CAGE,OAAO/Y,GAAP,EAAiB;AACjB;AACA,UAAIA,GAAG,YAAY8a,6BAAnB,EAAoC;AAClC;AACA,eAAOrf,SAAP;AACD;;AACD,YAAMuE,GAAN;AACD;AACF;AAED;AACF;AACA;AACA;;;AACuB,QAAfwX,eAAe,GAAG;AACtB,SAAKrmB,QAAL,GAAgB,MAAM,+BAAa,KAAKqC,IAAlB,EAAwB,IAAxB,CAAtB;AACA,SAAKsJ,UAAL;AACD;;AAED8T,EAAAA,uBAAuB,CAAC/b,SAAD,EAA2C;AAChE,UAAMsR,WAAW,GAAG,yCAClBtR,SAAS,YAAYkmB,qBAArB,GAAyClmB,SAAzC,GAAqDA,SAAS,CAACU,KAAV,CAAgBC,SADnD,CAApB;AAGA,WAAOhC,gBAAKG,IAAL,CAAU,KAAKD,WAAf,EAA4ByS,WAA5B,CAAP;AACD,GAnrDgD,CAqrDjD;;;AACoB,MAAhB6U,gBAAgB,GAAW;AAC7B,WAAO,KAAK9pB,MAAL,CAAY8pB,gBAAnB;AACD;;AAEyB,MAAtBC,sBAAsB,GAAW;AACnC,QAAI,KAAKD,gBAAL,IAAyB,CAAC,KAAKA,gBAAL,CAAsBtY,QAAtB,CAA+B,QAA/B,CAA9B,EAAwE;AACtE,aAAQ,GAAE,KAAKsY,gBAAiB,SAAhC;AACD;;AACD,WAAO,KAAKA,gBAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AAC0B,QAAlB/f,kBAAkB,CAAC9F,EAAD,EAAyD;AAC/E,UAAM+lB,eAAe,GAAG,OAAO5U,KAAP,EAAqBN,aAArB,KAAmE;AACzF,UAAIM,KAAK,CAAClV,KAAV,EAAiB;AACf,eAAOkV,KAAK,CAAClV,KAAb;AACD;;AACD,YAAMqV,oBAAoB,GAAG,KAAKR,wBAAL,CAA8BK,KAA9B,EAAqCN,aAArC,EAAoD;AAAEJ,QAAAA,QAAQ,EAAE;AAAZ,OAApD,CAA7B;AACA,YAAMtS,YAAY,GAAG,MAAM,KAAKwT,4CAAL,CACzBL,oBADyB,EAEzBH,KAAK,CAAC+C,8BAAN,EAFyB,CAA3B;AAIA,aAAO/V,YAAP;AACD,KAVD,CAD+E,CAa/E;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAI,KAAK7B,YAAL,CAAkBkK,YAAlB,CAA+BxG,EAAE,CAACiF,QAAH,EAA/B,CAAJ,EAAmD;AACjD,aAAO1C,yBAAYyjB,UAAZ,CAAuBhmB,EAAE,CAACiF,QAAH,EAAvB,CAAP;AACD;;AACD,QAAIghB,QAAQ,GAAG,KAAKjqB,QAAL,CAAckqB,kBAAd,CAAiClmB,EAAE,CAACiF,QAAH,EAAjC,EAAgD,IAAhD,EAAsD,IAAtD,CAAf;;AACA,QAAI,CAACghB,QAAL,EAAe;AACb,UAAI;AACF,cAAME,aAAa,GAAGnmB,EAAE,CAACiF,QAAH,EAAtB;AACA,cAAM,CAACmhB,gBAAD,EAAmB/F,OAAnB,IAA8BrgB,EAAE,CAACiF,QAAH,GAAc3F,KAAd,CAAoB,GAApB,CAApC;;AACA,cAAM+mB,SAAS,GAAG,KAAKrqB,QAAL,CAAckqB,kBAAd,CAAiCE,gBAAjC,EAAmD,KAAnD,EAA0D,IAA1D,CAAlB,CAHE,CAIF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,YAAI,CAACC,SAAL,EAAgB;AACd,iBAAO,MAAM,KAAKpqB,KAAL,CAAW6J,kBAAX,CAA8B9F,EAAE,CAACiF,QAAH,EAA9B,CAAb;AACD;;AACD,cAAMqhB,uBAAuB,GAAGD,SAAS,CAAC5f,sBAAV,EAAhC;;AACA,cAAM8f,oBAAoB,GAAGF,SAAS,CAACG,aAAV,CAAwBnG,OAAxB,EAAiCpb,QAAjC,EAA7B,CApCE,CAqCF;AACA;;;AACA,YAAIqhB,uBAAuB,CAACG,QAAxB,CAAiCL,gBAAjC,KAAsDE,uBAAuB,KAAKF,gBAAtF,EAAwG;AACtG,iBAAO,MAAM,KAAKnqB,KAAL,CAAW6J,kBAAX,CAA8BygB,oBAA9B,CAAb;AACD,SAzCC,CA0CF;AACA;AACA;AACA;;;AACA,YAAI,CAACF,SAAS,CAACpqB,KAAf,EAAsB;AACpB,gBAAMyqB,uBAAuB,GAAG,MAAMX,eAAe,CAACM,SAAD,EAAY;AAAEra,YAAAA,aAAa,EAAE;AAAjB,WAAZ,CAArD;;AACA,gBAAM2a,4BAA4B,GAAG,MAAM;AACzC,gBAAIC,6BAA6B,GAAGP,SAApC;;AACA,gBAAIhG,OAAJ,EAAa;AACXuG,cAAAA,6BAA6B,GAAGP,SAAS,CAACG,aAAV,CAAwBnG,OAAxB,CAAhC;AACD;;AACD,mBAAO9d,yBAAY5B,UAAZ,CAAuBimB,6BAAvB,EAAsDF,uBAAtD,CAAP;AACD,WAND,CAFoB,CASpB;;;AACA,cAAIP,aAAa,CAACzB,UAAd,CAA0B,GAAEgC,uBAAwB,IAAGJ,uBAAwB,EAA/E,CAAJ,EAAuF;AACrF,mBAAOK,4BAA4B,EAAnC;AACD,WAZmB,CAapB;;;AACA,gBAAME,SAAS,GAAG,MAAM,KAAK5qB,KAAL,CAAW6J,kBAAX,CAA8BqgB,aAA9B,CAAxB;;AACA,cAAI,CAACU,SAAS,CAAC3mB,OAAV,CAAkB4mB,QAAlB,EAAL,EAAmC;AACjC,mBAAOH,4BAA4B,EAAnC;AACD;AACF;;AAED,YAAIP,gBAAgB,CAACK,QAAjB,CAA0BH,uBAA1B,KAAsDA,uBAAuB,KAAKF,gBAAtF,EAAwG;AACtG;AACA;AACA,cAAIpmB,EAAE,CAACiF,QAAH,GAAcyf,UAAd,CAAyB,KAAKzoB,KAAL,CAAWmD,IAApC,CAAJ,EAA+C;AAC7C;AACA;AACA,mBAAO,MAAM,KAAKnD,KAAL,CAAW6J,kBAAX,CAA8BygB,oBAA9B,CAAb;AACD,WAPqG,CAQtG;AACA;;;AACA,iBAAO,MAAM,KAAKtqB,KAAL,CAAW6J,kBAAX,CAA8BqgB,aAA9B,CAAb;AACD,SA7EC,CA8EF;;;AACA,eAAO,MAAM,KAAKlqB,KAAL,CAAW6J,kBAAX,CAA8BqgB,aAA9B,CAAb;AACD,OAhFD,CAgFE,OAAO3N,KAAP,EAAmB;AACnByN,QAAAA,QAAQ,GAAG3O,qBAAMC,KAAN,CAAYvX,EAAE,CAACiF,QAAH,EAAZ,EAA2B,IAA3B,CAAX;AACA,eAAO1C,yBAAY5B,UAAZ,CAAuBslB,QAAvB,CAAP;AACD;AACF;;AAED,UAAM9nB,YAAY,GAAG,MAAM4nB,eAAe,CAACE,QAAD,CAA1C;AACA,WAAO1jB,yBAAY5B,UAAZ,CAAuBslB,QAAvB,EAAiC9nB,YAAjC,CAAP;AACD;;AAEgC,QAA3B+C,2BAA2B,CAACD,GAAD,EAAmE;AAClG,WAAOwE,OAAO,CAACC,GAAR,CAAYzE,GAAG,CAACqB,GAAJ,CAAQ,MAAOtC,EAAP,IAAc,KAAK8F,kBAAL,CAAwB9F,EAAxB,CAAtB,CAAZ,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE+mB,EAAAA,qBAAqB,CAACzb,UAAD,EAAiD;AACpE,UAAM0b,wBAAwB,GAAG1b,UAAU,CAAChJ,GAAX,CAAe,MAAOsa,cAAP,IAA0B;AACxE,UAAIA,cAAc,CAACnU,WAAnB,EAAgC;AAC9B;AACA;AACA;AAEA;AACA,cAAMwe,UAAU,GAAG,MAAM,KAAKnhB,kBAAL,CAAwB8W,cAAc,CAACnU,WAAvC,CAAzB;AACAmU,QAAAA,cAAc,CAACnU,WAAf,GAA6Bwe,UAAU,CAAC/mB,OAAxC;AACD;AACF,KAVgC,CAAjC;AAWA,WAAOuF,OAAO,CAACC,GAAR,CAAYshB,wBAAZ,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,+BAA+B,CAAC5b,UAAD,EAAiD;AAC9E,UAAM0b,wBAAwB,GAAG1b,UAAU,CAAChJ,GAAX,CAAe,MAAOsa,cAAP,IAA0B;AACxE,UAAIA,cAAc,CAACnU,WAAf,IAA8B,CAACmU,cAAc,CAACnU,WAAf,CAA2Bqe,QAA3B,EAAnC,EAA0E;AACxE,cAAMnlB,WAAW,GAAGY,yBAAY5B,UAAZ,CAAuBic,cAAc,CAACnU,WAAtC,CAApB;;AACA,cAAMtK,YAAY,GAAG,MAAM,KAAKuT,qBAAL,CAA2B/P,WAA3B,CAA3B;AACAib,QAAAA,cAAc,CAACnU,WAAf,GAA6BmU,cAAc,CAACnU,WAAf,CAA2BgP,WAA3B,CAAuCtZ,YAAvC,CAA7B;AACD;AACF,KANgC,CAAjC;AAOA,WAAOsH,OAAO,CAACC,GAAR,CAAYshB,wBAAZ,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AAC6B,QAArBG,qBAAqB,CAACjJ,QAAD,EAAqB;AAC9C,SAAK9hB,kBAAL,CAAwBgrB,oBAAxB,CAA6ClJ,QAA7C;AACA,UAAM,KAAK9hB,kBAAL,CAAwBykB,aAAxB,CAAsC,KAAKxiB,IAA3C,CAAN;AACA,WAAO,KAAKshB,eAAL,CAAqB;AAAEhB,MAAAA,MAAM,EAAE;AAAV,KAArB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAC0B,QAAlB0I,kBAAkB,CAACC,KAAD,EAAqBjlB,YAArB,EAAkD;AACxE,UAAMklB,QAAQ,GAAGD,KAAK,CAACriB,QAAN,EAAjB;AACA,UAAMuiB,iBAAiB,GAAG,MAAM,KAAK9lB,KAAL,CAAW4lB,KAAX,CAAhC;AACA,UAAMG,iBAAiB,GAAGH,KAAK,CAAC7gB,sBAAN,EAA1B;AACA,UAAM,KAAKihB,sBAAL,CAA4BrlB,YAA5B,CAAN;AACA,UAAMoD,OAAO,CAACC,GAAR,CACJrD,YAAY,CAACC,GAAb,CAAiB,MAAOX,WAAP,IAAuB;AACtC,YAAM,KAAKqU,0BAAL,CAAgCrU,WAAhC,EAA6C6lB,iBAAiB,GAAGC,iBAAH,GAAuBF,QAArF,CAAN;AACA,YAAM,KAAKvR,0BAAL,CAAgCrU,WAAhC,EAA6C2T,mBAAWtV,EAAxD,EAA4D;AAAEgH,QAAAA,GAAG,EAAEygB;AAAP,OAA5D,CAAN;AACD,KAHD,CADI,CAAN;AAMA,UAAM,KAAK/pB,MAAL,CAAYuK,KAAZ,EAAN;AACD;AAED;AACF;AACA;;;AAC8B,QAAtByf,sBAAsB,CAACzmB,GAAD,EAAoF;AAC9G,UAAM0mB,OAAsB,GAAG,EAA/B;AACA,UAAMC,SAAwB,GAAG,EAAjC;AACA,UAAMniB,OAAO,CAACC,GAAR,CACJzE,GAAG,CAACqB,GAAJ,CAAQ,MAAOtC,EAAP,IAAc;AACpB,YAAM6nB,UAAU,GAAG,MAAM,KAAKrR,0BAAL,CAAgCxW,EAAhC,EAAoCsV,mBAAWtV,EAA/C,CAAzB;AACA,YAAM8nB,UAAU,GAAGD,UAAU,IAAIA,UAAU,KAAKE,uCAA7B,GAA6DF,UAAU,CAAC7gB,GAAxE,GAA8E,IAAjG;;AACA,UAAI,CAAC8gB,UAAL,EAAiB;AACfF,QAAAA,SAAS,CAACpf,IAAV,CAAexI,EAAf;AACA;AACD;;AACD,YAAM,KAAKoW,6BAAL,CAAmCpW,EAAnC,EAAuC8nB,UAAvC,EAAmD,KAAnD,CAAN;AACA,YAAM,KAAK1R,6BAAL,CAAmCpW,EAAnC,EAAuCsV,mBAAWtV,EAAlD,EAAsD,KAAtD,CAAN;AACA2nB,MAAAA,OAAO,CAACnf,IAAR,CAAaxI,EAAb;AACD,KAVD,CADI,CAAN;AAaA,UAAM,KAAKtC,MAAL,CAAYuK,KAAZ,EAAN;AACA,WAAO;AAAE0f,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAP;AACD;;AAx5DgD;AA25DnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,SAAS3Y,2BAAT,GAAuC;AACrC,QAAM+Y,iBAAiB,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,KAA3B,EAAkC,SAAlC,EAA6C,MAA7C,EAAqD,QAArD,CAA1B;AACA,SAAOA,iBAAiB,CAACza,QAAlB,CAA2B0a,OAAO,CAACC,IAAR,CAAa,CAAb,CAA3B,CAAP;AACD;;eAEctsB,S","sourcesContent":["/* eslint-disable max-lines */\nimport chalk from 'chalk';\nimport memoize from 'memoizee';\nimport mapSeries from 'p-map-series';\nimport multimatch from 'multimatch';\nimport type { PubsubMain } from '@teambit/pubsub';\nimport { IssuesList } from '@teambit/component-issues';\nimport type { AspectLoaderMain, AspectDefinition } from '@teambit/aspect-loader';\nimport { getAspectDef } from '@teambit/aspect-loader';\nimport { MainRuntime } from '@teambit/cli';\nimport DependencyGraph from '@teambit/legacy/dist/scope/graph/scope-graph';\nimport {\n  AspectEntry,\n  ComponentMain,\n  Component,\n  ComponentFactory,\n  ComponentID,\n  ComponentMap,\n  AspectList,\n  AspectData,\n  InvalidComponent,\n} from '@teambit/component';\nimport { Importer } from '@teambit/importer';\nimport { BitError } from '@teambit/bit-error';\nimport { REMOVE_EXTENSION_SPECIAL_SIGN } from '@teambit/legacy/dist/consumer/config';\nimport { ComponentScopeDirMap, ConfigMain } from '@teambit/config';\nimport {\n  WorkspaceDependencyLifecycleType,\n  DependencyResolverMain,\n  DependencyResolverAspect,\n  PackageManagerInstallOptions,\n  ComponentDependency,\n  VariantPolicyConfigObject,\n  WorkspacePolicyEntry,\n  LinkingOptions,\n  LinkResults,\n  DependencyList,\n  OutdatedPkg,\n} from '@teambit/dependency-resolver';\nimport { EnvsMain, EnvsAspect, EnvServiceList, DEFAULT_ENV } from '@teambit/envs';\nimport { GraphqlMain } from '@teambit/graphql';\nimport { Harmony } from '@teambit/harmony';\nimport { IsolatorMain } from '@teambit/isolator';\nimport { Logger } from '@teambit/logger';\nimport type { ScopeMain } from '@teambit/scope';\nimport { isMatchNamespacePatternItem } from '@teambit/workspace.modules.match-pattern';\nimport { RequireableComponent } from '@teambit/harmony.modules.requireable-component';\nimport { ResolvedComponent } from '@teambit/harmony.modules.resolved-component';\nimport type { VariantsMain, Patterns } from '@teambit/variants';\nimport { link } from '@teambit/legacy/dist/api/consumer';\nimport LegacyGraph from '@teambit/legacy/dist/scope/graph/graph';\nimport { ImportOptions } from '@teambit/legacy/dist/consumer/component-ops/import-components';\nimport { NothingToImport } from '@teambit/legacy/dist/consumer/exceptions';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { BitId, InvalidScopeName, InvalidScopeNameFromRemote, isValidScopeName } from '@teambit/legacy-bit-id';\nimport { LocalLaneId, RemoteLaneId } from '@teambit/legacy/dist/lane-id/lane-id';\nimport { Consumer, loadConsumer } from '@teambit/legacy/dist/consumer';\nimport { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';\nimport AddComponents from '@teambit/legacy/dist/consumer/component-ops/add-components';\nimport type {\n  AddActionResults,\n  Warnings,\n} from '@teambit/legacy/dist/consumer/component-ops/add-components/add-components';\nimport { getMaxSizeForComponents, InMemoryCache } from '@teambit/legacy/dist/cache/in-memory-cache';\nimport { createInMemoryCache } from '@teambit/legacy/dist/cache/cache-factory';\nimport { ComponentNotFound } from '@teambit/legacy/dist/scope/exceptions';\nimport ComponentsList from '@teambit/legacy/dist/consumer/component/components-list';\nimport { NoComponentDir } from '@teambit/legacy/dist/consumer/component/exceptions/no-component-dir';\nimport { ExtensionDataList, ExtensionDataEntry } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { pathIsInside } from '@teambit/legacy/dist/utils';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport { PathOsBased, PathOsBasedRelative, PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';\nimport fs from 'fs-extra';\nimport { slice, uniqBy, difference, compact, pick, partition, isEmpty } from 'lodash';\nimport path from 'path';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport type { ComponentLog } from '@teambit/legacy/dist/scope/models/model-component';\nimport { CompilationInitiator } from '@teambit/compiler';\nimport ScopeComponentsImporter from '@teambit/legacy/dist/scope/component-ops/scope-components-importer';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport { Lane } from '@teambit/legacy/dist/scope/models';\nimport { LaneNotFound } from '@teambit/legacy/dist/api/scope/lib/exceptions/lane-not-found';\nimport { ScopeNotFoundOrDenied } from '@teambit/legacy/dist/remotes/exceptions/scope-not-found-or-denied';\nimport { ComponentConfigFile } from './component-config-file';\nimport { DependencyTypeNotSupportedInPolicy } from './exceptions';\nimport {\n  OnComponentAdd,\n  OnComponentChange,\n  OnComponentEventResult,\n  OnComponentLoad,\n  OnComponentRemove,\n  SerializableResults,\n} from './on-component-events';\nimport { pickOutdatedPkgs } from './pick-outdated-pkgs';\nimport { WorkspaceExtConfig } from './types';\nimport { Watcher, WatchOptions } from './watch/watcher';\nimport { ComponentStatus } from './workspace-component/component-status';\nimport {\n  OnComponentAddSlot,\n  OnComponentChangeSlot,\n  OnComponentLoadSlot,\n  OnComponentRemoveSlot,\n  OnPreWatch,\n  OnPreWatchSlot,\n} from './workspace.provider';\nimport { WorkspaceComponentLoader } from './workspace-component/workspace-component-loader';\nimport { IncorrectEnvAspect } from './exceptions/incorrect-env-aspect';\nimport { GraphFromFsBuilder, ShouldIgnoreFunc } from './build-graph-from-fs';\nimport { BitMap } from './bit-map';\n\nexport type EjectConfResult = {\n  configPath: string;\n};\n\nexport const AspectSpecificField = '__specific';\nexport const ComponentAdded = 'componentAdded';\nexport const ComponentChanged = 'componentChanged';\nexport const ComponentRemoved = 'componentRemoved';\n\nexport interface EjectConfOptions {\n  propagate?: boolean;\n  override?: boolean;\n}\n\nexport type WorkspaceInstallOptions = {\n  addMissingPeers?: boolean;\n  variants?: string;\n  lifecycleType?: WorkspaceDependencyLifecycleType;\n  dedupe: boolean;\n  import: boolean;\n  copyPeerToRuntimeOnRoot?: boolean;\n  copyPeerToRuntimeOnComponents?: boolean;\n  updateExisting: boolean;\n  savePrefix?: string;\n};\n\nexport type ModulesInstallOptions = Omit<WorkspaceInstallOptions, 'updateExisting' | 'lifecycleType' | 'import'>;\n\nexport type WorkspaceLinkOptions = LinkingOptions;\n\nexport type TrackData = {\n  rootDir: PathOsBasedRelative; // path relative to the workspace\n  componentName?: string; // if empty, it'll be generated from the path\n  mainFile?: string; // if empty, attempts will be made to guess the best candidate\n  defaultScope?: string; // can be entered as part of \"bit create\" command, helpful for out-of-sync logic\n  config?: { [aspectName: string]: any }; // config specific to this component, which overrides variants of workspace.jsonc\n};\n\nexport type ExtensionsOrigin =\n  | 'BitmapFile'\n  | 'ModelSpecific'\n  | 'ModelNonSpecific'\n  | 'WorkspaceVariants'\n  | 'ComponentJsonFile'\n  | 'WorkspaceDefault'\n  | 'FinalAfterMerge';\n\nexport type TrackResult = { componentName: string; files: string[]; warnings: Warnings };\n\nconst DEFAULT_VENDOR_DIR = 'vendor';\n\n/**\n * API of the Bit Workspace\n */\nexport class Workspace implements ComponentFactory {\n  priority = true;\n  owner?: string;\n  componentsScopeDirsMap: ComponentScopeDirMap;\n  componentLoader: WorkspaceComponentLoader;\n  bitMap: BitMap;\n  private componentLoadedSelfAsAspects: InMemoryCache<boolean>; // cache loaded components\n\n  constructor(\n    /**\n     * private pubsub.\n     */\n    private pubsub: PubsubMain,\n\n    private config: WorkspaceExtConfig,\n    /**\n     * private access to the legacy consumer instance.\n     */\n    public consumer: Consumer,\n\n    /**\n     * access to the workspace `Scope` instance\n     */\n    readonly scope: ScopeMain,\n\n    /**\n     * access to the `ComponentProvider` instance\n     */\n    private componentAspect: ComponentMain,\n\n    private isolator: IsolatorMain,\n\n    private dependencyResolver: DependencyResolverMain,\n\n    private variants: VariantsMain,\n\n    private aspectLoader: AspectLoaderMain,\n\n    private logger: Logger,\n\n    private componentList: ComponentsList = new ComponentsList(consumer),\n\n    /**\n     * private reference to the instance of Harmony.\n     */\n    private harmony: Harmony,\n\n    /**\n     * on component load slot.\n     */\n    public onComponentLoadSlot: OnComponentLoadSlot,\n\n    /**\n     * on component change slot.\n     */\n    private onComponentChangeSlot: OnComponentChangeSlot,\n\n    private envs: EnvsMain,\n\n    /**\n     * on component add slot.\n     */\n    private onComponentAddSlot: OnComponentAddSlot,\n\n    private onComponentRemoveSlot: OnComponentRemoveSlot,\n\n    private onPreWatchSlot: OnPreWatchSlot,\n\n    private graphql: GraphqlMain\n  ) {\n    this.componentLoadedSelfAsAspects = createInMemoryCache({ maxSize: getMaxSizeForComponents() });\n\n    // TODO: refactor - prefer to avoid code inside the constructor.\n    this.owner = this.config?.defaultOwner;\n    this.componentLoader = new WorkspaceComponentLoader(this, logger, dependencyResolver, envs);\n    this.validateConfig();\n    this.bitMap = new BitMap(this.consumer.bitMap, this.consumer);\n    // memoize this method to improve performance.\n    this.componentDefaultScopeFromComponentDirAndNameWithoutConfigFile = memoize(\n      this.componentDefaultScopeFromComponentDirAndNameWithoutConfigFile.bind(this),\n      {\n        primitive: true,\n        promise: true,\n        maxAge: 60 * 1000, // 1 min\n      }\n    );\n  }\n\n  private validateConfig() {\n    if (this.consumer.isLegacy) return;\n    if (isEmpty(this.config))\n      throw new BitError(\n        `fatal: workspace config is empty. probably one of bit files is missing. consider running \"bit init\"`\n      );\n    const defaultScope = this.config.defaultScope;\n    if (!defaultScope) throw new BitError('defaultScope is missing');\n    if (!isValidScopeName(defaultScope)) throw new InvalidScopeName(defaultScope);\n  }\n\n  /**\n   * watcher api.\n   */\n  readonly watcher = new Watcher(this, this.pubsub);\n\n  /**\n   * root path of the Workspace.\n   */\n  get path() {\n    return this.consumer.getPath();\n  }\n\n  /** get the `node_modules` folder of this workspace */\n  private get modulesPath() {\n    return path.join(this.path, 'node_modules');\n  }\n\n  get isLegacy(): boolean {\n    return this.consumer.isLegacy;\n  }\n\n  onComponentLoad(loadFn: OnComponentLoad) {\n    this.onComponentLoadSlot.register(loadFn);\n    return this;\n  }\n\n  registerOnComponentChange(onComponentChangeFunc: OnComponentChange) {\n    this.onComponentChangeSlot.register(onComponentChangeFunc);\n    return this;\n  }\n\n  registerOnComponentAdd(onComponentAddFunc: OnComponentAdd) {\n    this.onComponentAddSlot.register(onComponentAddFunc);\n    return this;\n  }\n\n  registerOnComponentRemove(onComponentRemoveFunc: OnComponentRemove) {\n    this.onComponentRemoveSlot.register(onComponentRemoveFunc);\n    return this;\n  }\n\n  registerOnPreWatch(onPreWatchFunc: OnPreWatch) {\n    this.onPreWatchSlot.register(onPreWatchFunc);\n    return this;\n  }\n\n  /**\n   * name of the workspace as configured in either `workspace.json`.\n   * defaults to workspace root directory name.\n   */\n  get name() {\n    if (this.config.name) return this.config.name;\n    const tokenizedPath = this.path.split('/');\n    return tokenizedPath[tokenizedPath.length - 1];\n  }\n\n  get icon() {\n    return this.config.icon;\n  }\n\n  async hasModifiedDependencies(component: Component) {\n    const componentsList = new ComponentsList(this.consumer);\n    const listAutoTagPendingComponents = await componentsList.listAutoTagPendingComponents();\n    const isAutoTag = listAutoTagPendingComponents.find((consumerComponent) =>\n      consumerComponent.id.isEqualWithoutVersion(component.id._legacy)\n    );\n    if (isAutoTag) return true;\n    return false;\n  }\n\n  /**\n   * get Component issues\n   */\n  getComponentIssues(component: Component): IssuesList | null {\n    return component.state._consumer.issues || null;\n  }\n\n  /**\n   * provides status of all components in the workspace.\n   */\n  async getComponentStatus(component: Component): Promise<ComponentStatus> {\n    const status = await this.consumer.getComponentStatusById(component.id._legacy);\n    const hasModifiedDependencies = await this.hasModifiedDependencies(component);\n    return ComponentStatus.fromLegacy(status, hasModifiedDependencies, component.isOutdated());\n  }\n\n  /**\n   * list all workspace components.\n   */\n  async list(filter?: { offset: number; limit: number }): Promise<Component[]> {\n    const legacyIds = this.consumer.bitMap.getAllIdsAvailableOnLane();\n    const ids = await this.resolveMultipleComponentIds(legacyIds);\n    return this.getMany(filter && filter.limit ? slice(ids, filter.offset, filter.offset + filter.limit) : ids);\n  }\n\n  /**\n   * list all invalid components.\n   * (see the invalid criteria in ConsumerComponent.isComponentInvalidByErrorType())\n   */\n  async listInvalid(): Promise<InvalidComponent[]> {\n    const legacyIds = this.consumer.bitMap.getAllIdsAvailableOnLane();\n    const ids = await this.resolveMultipleComponentIds(legacyIds);\n    return this.componentLoader.getInvalid(ids);\n  }\n\n  /**\n   * get ids of all workspace components.\n   */\n  async listIds(): Promise<ComponentID[]> {\n    return this.resolveMultipleComponentIds(this.consumer.bitmapIdsFromCurrentLane);\n  }\n\n  /**\n   * Check if a specific id exist in the workspace\n   * @param componentId\n   */\n  async hasId(componentId: ComponentID): Promise<boolean> {\n    const ids = await this.listIds();\n    const found = ids.find((id) => {\n      return id.isEqual(componentId);\n    });\n    return !!found;\n  }\n\n  /**\n   * whether or not a workspace has a component with the given name\n   */\n  async hasName(name: string): Promise<boolean> {\n    const ids = await this.listIds();\n    return Boolean(ids.find((id) => id.fullName === name));\n  }\n\n  /**\n   * Check if a specific id exist in the workspace or in the scope\n   * @param componentId\n   */\n  async hasIdNested(componentId: ComponentID, includeCache = true): Promise<boolean> {\n    const found = await this.hasId(componentId);\n    if (found) return found;\n    return this.scope.hasIdNested(componentId, includeCache);\n  }\n\n  /**\n   * list all modified components in the workspace.\n   */\n  async modified(): Promise<Component[]> {\n    const ids: any = await this.componentList.listModifiedComponents(false);\n    const componentIds = ids.map(ComponentID.fromLegacy);\n    return this.getMany(componentIds);\n  }\n\n  /**\n   * list all new components in the workspace.\n   */\n  async newComponents() {\n    const ids: any = await this.componentList.listNewComponents(false);\n    const componentIds = ids.map(ComponentID.fromLegacy);\n    return this.getMany(componentIds);\n  }\n\n  /**\n   * get all workspace component-ids, include vendor components.\n   * (exclude nested dependencies in case dependencies are saved as components and not packages)\n   */\n  getAllComponentIds(): Promise<ComponentID[]> {\n    const bitIds = this.consumer.bitMap.getAuthoredAndImportedBitIds();\n    return this.resolveMultipleComponentIds(bitIds);\n  }\n\n  async getNewAndModifiedIds(): Promise<ComponentID[]> {\n    const ids = await this.componentList.listTagPendingComponents();\n    return this.resolveMultipleComponentIds(ids);\n  }\n\n  async newAndModified(): Promise<Component[]> {\n    const ids = await this.getNewAndModifiedIds();\n    return this.getMany(ids);\n  }\n\n  async getLogs(id: ComponentID, shortHash = false, startsFrom?: string): Promise<ComponentLog[]> {\n    return this.scope.getLogs(id, shortHash, startsFrom);\n  }\n\n  async getLegacyGraph(ids?: ComponentID[]): Promise<LegacyGraph> {\n    if (!ids || ids.length < 1) ids = await this.listIds();\n\n    const legacyIds = ids.map((id) => id._legacy);\n\n    const legacyGraph = await this.buildOneGraphForComponents(legacyIds);\n    return legacyGraph;\n  }\n\n  /**\n   * given component ids, find their dependents in the workspace\n   */\n  async getDependentsIds(ids: ComponentID[]): Promise<ComponentID[]> {\n    const workspaceGraph = await DependencyGraph.buildGraphFromWorkspace(this.consumer, true);\n    const workspaceDependencyGraph = new DependencyGraph(workspaceGraph);\n    const workspaceDependents = ids.map((id) => workspaceDependencyGraph.getDependentsInfo(id._legacy));\n    const dependentsLegacyIds = workspaceDependents.flat().map((_) => _.id);\n    const dependentsLegacyNoDup = BitIds.uniqFromArray(dependentsLegacyIds);\n    const dependentsIds = await this.resolveMultipleComponentIds(dependentsLegacyNoDup);\n    return dependentsIds;\n  }\n\n  async loadCapsules(bitIds: string[]) {\n    // throw new Error(\"Method not implemented.\");\n    const components = await this.load(bitIds);\n    return components.map((comp) => comp.capsule);\n  }\n  /**\n   * fully load components, including dependency resolution and prepare them for runtime.\n   * @todo: remove the string option, use only BitId\n   */\n  async load(ids: Array<BitId | string>): Promise<ResolvedComponent[]> {\n    const componentIds = await this.resolveMultipleComponentIds(ids);\n    const components = await this.getMany(componentIds);\n    const network = await this.isolator.isolateComponents(\n      components.map((c) => c.id),\n      {\n        packageManagerConfigRootDir: this.path,\n      }\n    );\n    const resolvedComponents = components.map((component) => {\n      const capsule = network.graphCapsules.getCapsule(component.id);\n      if (!capsule) throw new Error(`unable to find capsule for ${component.id.toString()}`);\n      return new ResolvedComponent(component, capsule);\n    });\n    return resolvedComponents;\n  }\n\n  public async createAspectList(extensionDataList: ExtensionDataList) {\n    const entiresP = extensionDataList.map((entry) => this.extensionDataEntryToAspectEntry(entry));\n    const entries: AspectEntry[] = await Promise.all(entiresP);\n    return this.componentAspect.createAspectListFromEntries(entries);\n  }\n\n  private async extensionDataEntryToAspectEntry(dataEntry: ExtensionDataEntry): Promise<AspectEntry> {\n    return new AspectEntry(await this.resolveComponentId(dataEntry.id), dataEntry);\n  }\n\n  /**\n   * get a component from workspace\n   * @param id component ID\n   */\n  async get(\n    componentId: ComponentID,\n    forCapsule = false,\n    legacyComponent?: ConsumerComponent,\n    useCache = true,\n    storeInCache = true\n  ): Promise<Component> {\n    this.logger.debug(`get ${componentId.toString()}`);\n    const component = await this.componentLoader.get(componentId, forCapsule, legacyComponent, useCache, storeInCache);\n    // When loading a component if it's an env make sure to load it as aspect as well\n    // We only want to try load it as aspect if it's the first time we load the component\n    const tryLoadAsAspect = this.componentLoadedSelfAsAspects.get(component.id.toString()) === undefined;\n    // const config = this.harmony.get<ConfigMain>('teambit.harmony/config');\n\n    // We are loading the component as aspect if it's an env, in order to be able to run the env-preview-template task which run only on envs.\n    // Without this loading we will have a problem in case the env is the only component in the workspace. in that case we will load it as component\n    // then we don't run it's provider so it doesn't register to the env slot, so we don't know it's an env.\n    if (\n      tryLoadAsAspect &&\n      this.envs.isUsingEnvEnv(component) &&\n      !this.aspectLoader.isCoreAspect(component.id.toStringWithoutVersion()) &&\n      !this.aspectLoader.isAspectLoaded(component.id.toString()) &&\n      (await this.hasId(component.id))\n      // !config.extension(component.id.toStringWithoutVersion(), true)\n    ) {\n      try {\n        this.componentLoadedSelfAsAspects.set(component.id.toString(), true);\n        this.logger.debug(`trying to load self as aspect with id ${component.id.toString()}`);\n        await this.loadAspects([component.id.toString()], undefined, component.id);\n        // In most cases if the load self as aspect failed we don't care about it.\n        // we only need it in specific cases to work, but this workspace.get runs on different\n        // cases where it might fail (like when importing aspect, after the import objects\n        // when we write the package.json we run the applyTransformers which get to pkg which call\n        // host.get, but the component not written yet to the fs, so it fails.)\n      } catch (e) {\n        this.logger.debug(`fail to load self as aspect with id ${component.id.toString()}`);\n        this.componentLoadedSelfAsAspects.delete(component.id.toString());\n        return component;\n      }\n    }\n    this.componentLoadedSelfAsAspects.set(component.id.toString(), false);\n\n    return component;\n  }\n\n  // TODO: @gilad we should refactor this asap into to the envs aspect.\n  async getEnvSystemDescriptor(component: Component): Promise<AspectData> {\n    const env = this.envs.calculateEnv(component);\n    if (env.env.__getDescriptor && typeof env.env.__getDescriptor === 'function') {\n      const systemDescriptor = await env.env.__getDescriptor();\n      // !important persist services only on the env itself.\n      let services: undefined | EnvServiceList;\n      if (this.envs.isEnvRegistered(component.id.toString())) services = this.envs.getServices(env);\n      const icon = this.aspectLoader.getDescriptor(env.id).icon || env.env.icon;\n\n      return {\n        type: systemDescriptor.type,\n        id: env.id,\n        name: env.name,\n        icon,\n        description: env.description,\n        services: services?.toObject(),\n      };\n    }\n\n    return {};\n  }\n\n  clearCache() {\n    this.logger.debug('clearing the workspace and scope caches');\n    this.componentLoader.clearCache();\n    this.scope.clearCache();\n    this.componentList = new ComponentsList(this.consumer);\n  }\n\n  clearComponentCache(id: ComponentID) {\n    this.componentLoader.clearComponentCache(id);\n    this.consumer.componentLoader.clearOneComponentCache(id._legacy);\n    this.componentList = new ComponentsList(this.consumer);\n  }\n\n  async triggerOnComponentChange(\n    id: ComponentID,\n    files: string[],\n    initiator?: CompilationInitiator\n  ): Promise<OnComponentEventResult[]> {\n    const component = await this.get(id);\n    // if a new file was added, upon component-load, its .bitmap entry is updated to include the\n    // new file. write these changes to the .bitmap file so then other processes have access to\n    // this new file. If the .bitmap wasn't change, it won't do anything.\n    await this.bitMap.write();\n    const onChangeEntries = this.onComponentChangeSlot.toArray(); // e.g. [ [ 'teambit.bit/compiler', [Function: bound onComponentChange] ] ]\n    const results: Array<{ extensionId: string; results: SerializableResults }> = [];\n    await mapSeries(onChangeEntries, async ([extension, onChangeFunc]) => {\n      const onChangeResult = await onChangeFunc(component, files, initiator);\n      results.push({ extensionId: extension, results: onChangeResult });\n    });\n\n    // TODO: find way to standardize event names.\n    await this.graphql.pubsub.publish(ComponentChanged, { componentChanged: { component } });\n    return results;\n  }\n\n  async triggerOnComponentAdd(id: ComponentID): Promise<OnComponentEventResult[]> {\n    const component = await this.get(id);\n    const onAddEntries = this.onComponentAddSlot.toArray(); // e.g. [ [ 'teambit.bit/compiler', [Function: bound onComponentChange] ] ]\n    const results: Array<{ extensionId: string; results: SerializableResults }> = [];\n    const files = component.state.filesystem.files.map((file) => file.path);\n    await mapSeries(onAddEntries, async ([extension, onAddFunc]) => {\n      const onAddResult = await onAddFunc(component, files);\n      results.push({ extensionId: extension, results: onAddResult });\n    });\n\n    await this.graphql.pubsub.publish(ComponentAdded, { componentAdded: { component } });\n    return results;\n  }\n\n  async triggerOnComponentRemove(id: ComponentID): Promise<OnComponentEventResult[]> {\n    const onRemoveEntries = this.onComponentRemoveSlot.toArray(); // e.g. [ [ 'teambit.bit/compiler', [Function: bound onComponentChange] ] ]\n    const results: Array<{ extensionId: string; results: SerializableResults }> = [];\n    await mapSeries(onRemoveEntries, async ([extension, onRemoveFunc]) => {\n      const onRemoveResult = await onRemoveFunc(id);\n      results.push({ extensionId: extension, results: onRemoveResult });\n    });\n\n    await this.graphql.pubsub.publish(ComponentRemoved, { componentRemoved: { componentIds: [id.toObject()] } });\n    return results;\n  }\n\n  getState(id: ComponentID, hash: string) {\n    return this.scope.getState(id, hash);\n  }\n\n  getSnap(id: ComponentID, hash: string) {\n    return this.scope.getSnap(id, hash);\n  }\n\n  getCurrentLaneId(): LocalLaneId {\n    return this.consumer.getCurrentLaneId();\n  }\n\n  /**\n   * if checked out to a lane and the lane exists in the remote,\n   * return the remote lane id (name+scope). otherwise, return null.\n   */\n  async getCurrentRemoteLaneId(): Promise<{ laneId: RemoteLaneId; lane: Lane } | null> {\n    const currentLane = this.getCurrentLaneId();\n    if (currentLane.isDefault()) {\n      return null;\n    }\n    const trackData = this.scope.legacyScope.lanes.getRemoteTrackedDataByLocalLane(currentLane.name);\n    if (!trackData) {\n      return null;\n    }\n    const scopeComponentImporter = ScopeComponentsImporter.getInstance(this.consumer.scope);\n    const laneId = RemoteLaneId.from(trackData.remoteLane, trackData.remoteScope);\n    try {\n      const lanes = await scopeComponentImporter.importLanes([laneId]);\n\n      if (!lanes || lanes.length === 0) return null;\n\n      return {\n        laneId,\n        lane: lanes[0],\n      };\n    } catch (err) {\n      if (\n        err instanceof InvalidScopeName ||\n        err instanceof ScopeNotFoundOrDenied ||\n        err instanceof LaneNotFound ||\n        err instanceof InvalidScopeNameFromRemote\n      ) {\n        // the lane could be a local lane so no need to throw an error in such case\n        loader.stop();\n        this.logger.warn(`unable to get lane's data from a remote due to an error:\\n${err.message}`);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  getDefaultExtensions(): ExtensionDataList {\n    if (!this.config.extensions) {\n      return new ExtensionDataList();\n    }\n    return ExtensionDataList.fromConfigObject(this.config.extensions);\n  }\n\n  async ejectMultipleConfigs(ids: ComponentID[], options: EjectConfOptions): Promise<EjectConfResult[]> {\n    return Promise.all(ids.map((id) => this.ejectConfig(id, options)));\n  }\n\n  async ejectConfig(id: ComponentID, options: EjectConfOptions): Promise<EjectConfResult> {\n    const componentId = await this.resolveComponentId(id);\n    const component = await this.get(componentId);\n    const componentFromScope = await this.scope.get(id);\n    const { extensions } = await this.componentExtensions(component.id, componentFromScope, [\n      'WorkspaceDefault',\n      'WorkspaceVariants',\n    ]);\n    const aspects = await this.createAspectList(extensions);\n    const componentDir = this.componentDir(id, { ignoreVersion: true });\n    const componentConfigFile = new ComponentConfigFile(componentId, aspects, componentDir, options.propagate);\n    await componentConfigFile.write({ override: options.override });\n    // remove config from the .bitmap as it's not needed anymore. it is replaced by the component.json\n    this.bitMap.removeEntireConfig(id);\n    await this.bitMap.write();\n    return {\n      configPath: ComponentConfigFile.composePath(componentDir),\n    };\n  }\n\n  /**\n   * see component-aspect, createAspectListFromLegacy() method for a context why this is needed.\n   */\n  private async resolveScopeAspectListIds(aspectListFromScope: AspectList): Promise<AspectList> {\n    const resolvedList = await aspectListFromScope.pmap(async (entry) => {\n      if (entry.id.scope !== this.scope.name) {\n        return entry;\n      }\n      const newId = await this.resolveComponentId(entry.id.fullName);\n      const newEntry = new AspectEntry(newId, entry.legacy);\n      return newEntry;\n    });\n    return resolvedList;\n  }\n\n  /**\n   * load components into the workspace through a variants pattern.\n   * @param pattern variants.\n   * @param scope scope name.\n   */\n  async byPattern(pattern: string, scope = '**'): Promise<Component[]> {\n    const ids = await this.listIds();\n    const finalPattern = `${scope}/${pattern || '**'}`;\n    const targetIds = ids.filter((id) => {\n      const spec = isMatchNamespacePatternItem(id.toStringWithoutVersion(), finalPattern);\n      return spec.match;\n    });\n\n    const components = await this.getMany(targetIds);\n    return components;\n  }\n\n  /**\n   * get component-ids matching the given pattern. a pattern can have multiple patterns separated by a comma.\n   * it supports negate (!) character to exclude ids.\n   */\n  async idsByPattern(pattern: string, throwForNoMatch = true): Promise<ComponentID[]> {\n    if (!pattern.includes('*') && !pattern.includes(',')) {\n      // if it's not a pattern but just id, resolve it without multimatch to support specifying id without scope-name\n      const id = await this.resolveComponentId(pattern);\n      if (this.exists(id)) return [id];\n      if (throwForNoMatch) throw new BitError(`unable to find \"${pattern}\" in the workspace`);\n      return [];\n    }\n    const ids = await this.listIds();\n    const patterns = pattern.split(',').map((p) => p.trim());\n    // check also as legacyId.toString, as it doesn't have the defaultScope\n    const idsToCheck = (id: ComponentID) => [id.toStringWithoutVersion(), id._legacy.toStringWithoutVersion()];\n    const idsFiltered = ids.filter((id) => multimatch(idsToCheck(id), patterns).length);\n    if (throwForNoMatch && !idsFiltered.length) {\n      throw new BitError(`unable to find any matching for \"${pattern}\" pattern`);\n    }\n    return idsFiltered;\n  }\n\n  /**\n   * useful for workspace commands, such as `bit build`, `bit compile`.\n   * by default, it should be running on new and modified components.\n   * a user can specify `--all` to run on all components or specify a pattern to limit to specific components.\n   * some commands such as build/test needs to run also on the dependents.\n   */\n  async getComponentsByUserInput(all?: boolean, pattern?: string, includeDependents = false): Promise<Component[]> {\n    if (all) {\n      return this.list();\n    }\n    if (pattern) {\n      return this.byPattern(pattern);\n    }\n    const newAndModified = await this.newAndModified();\n    if (includeDependents) {\n      const newAndModifiedIds = newAndModified.map((comp) => comp.id);\n      const dependentsIds = await this.getDependentsIds(newAndModifiedIds);\n      const dependentsIdsFiltered = dependentsIds.filter((id) => !newAndModified.find((_) => _.id.isEqual(id)));\n      const dependents = await this.getMany(dependentsIdsFiltered);\n      newAndModified.push(...dependents);\n    }\n    return newAndModified;\n  }\n\n  async getComponentsUsingEnv(env: string, throwIfNotFound = false): Promise<Component[]> {\n    const allComps = await this.list();\n    const allEnvs = await this.envs.createEnvironment(allComps);\n    const foundEnv = allEnvs.runtimeEnvs.find((runtimeEnv) => runtimeEnv.id === env);\n    if (!foundEnv && throwIfNotFound) {\n      const availableEnvs = allEnvs.runtimeEnvs.map((runtimeEnv) => runtimeEnv.id);\n      throw new BitError(`unable to find components that using \"${env}\" env.\nthe following envs are used in this workspace: ${availableEnvs.join(', ')}`);\n    }\n    return foundEnv?.components || [];\n  }\n\n  async getMany(ids: Array<ComponentID>, forCapsule = false): Promise<Component[]> {\n    return this.componentLoader.getMany(ids, forCapsule);\n  }\n\n  getManyByLegacy(components: ConsumerComponent[]): Promise<Component[]> {\n    return mapSeries(components, async (component) => {\n      const id = await this.resolveComponentId(component.id);\n      return this.get(id, undefined, component);\n    });\n  }\n\n  /**\n   * don't throw an error if the component was not found, simply return undefined.\n   */\n  async getIfExist(componentId: ComponentID): Promise<Component | undefined> {\n    return this.componentLoader.getIfExist(componentId);\n  }\n\n  /**\n   * whether a component exists in the workspace\n   */\n  exists(componentId: ComponentID): boolean {\n    return Boolean(this.consumer.bitmapIdsFromCurrentLane.find((_) => _.isEqualWithoutVersion(componentId._legacy)));\n  }\n\n  /**\n   * This will make sure to fetch the objects prior to load them\n   * do not use it if you are not sure you need it.\n   * It will influence the performance\n   * currently it used only for get many of aspects\n   * @param ids\n   * @param forCapsule\n   */\n  async importAndGetMany(ids: Array<ComponentID>, forCapsule = false): Promise<Component[]> {\n    await this.scope.import(ids, { reFetchUnBuiltVersion: shouldReFetchUnBuiltVersion() });\n    return this.componentLoader.getMany(ids, forCapsule);\n  }\n\n  /**\n   * @deprecated use this.track() instead\n   * track a new component. (practically, add it to .bitmap).\n   *\n   * @param componentPaths component paths relative to the workspace dir\n   * @param id if not set, will be concluded from the filenames\n   * @param main if not set, will try to guess according to some strategies and throws if failed\n   * @param override whether add details to an existing component or re-define it\n   */\n  async add(\n    componentPaths: PathOsBasedRelative[],\n    id?: string,\n    main?: string,\n    override = false\n  ): Promise<AddActionResults> {\n    const addComponent = new AddComponents({ consumer: this.consumer }, { componentPaths, id, main, override });\n    const addResults = await addComponent.add();\n    // @todo: the legacy commands have `consumer.onDestroy()` on command completion, it writes the\n    //  .bitmap file. workspace needs a similar mechanism. once done, remove the next line.\n    await this.bitMap.write();\n    return addResults;\n  }\n\n  /**\n   * add a new component to the .bitmap file.\n   * this method only adds the records in memory but doesn't persist to the filesystem.\n   * to write the .bitmap file once completed, run \"await this.bitMap.write();\"\n   */\n  async track(trackData: TrackData): Promise<TrackResult> {\n    const defaultScope = trackData.defaultScope ? await this.addOwnerToScopeName(trackData.defaultScope) : undefined;\n    const addComponent = new AddComponents(\n      { consumer: this.consumer },\n      {\n        componentPaths: [trackData.rootDir],\n        id: trackData.componentName,\n        main: trackData.mainFile,\n        override: false,\n        defaultScope,\n        config: trackData.config,\n      }\n    );\n    const result = await addComponent.add();\n    const addedComponent = result.addedComponents[0];\n    const componentName = addedComponent?.id.name || (trackData.componentName as string);\n    const files = addedComponent?.files.map((f) => f.relativePath) || [];\n    return { componentName, files, warnings: result.warnings };\n  }\n\n  /**\n   * scopes in bit.dev are \"owner.collection\".\n   * we might have the scope-name only without the owner and we need to retrieve it from the defaultScope in the\n   * workspace.jsonc file.\n   *\n   * @param scopeName scopeName that might not have the owner part.\n   * @returns full scope name\n   */\n  private async addOwnerToScopeName(scopeName: string): Promise<string> {\n    if (scopeName.includes('.')) return scopeName; // it has owner.\n    const isSelfHosted = !(await this.isHostedByBit(scopeName));\n    if (isSelfHosted) return scopeName;\n    const wsDefaultScope = this.defaultScope;\n    if (!wsDefaultScope.includes('.')) {\n      throw new Error(`the entered scope has no owner nor the defaultScope in workspace.jsonc`);\n    }\n    const [owner] = wsDefaultScope.split('.');\n    return `${owner}.${scopeName}`;\n  }\n\n  async write(rootPath: string, component: Component) {\n    await Promise.all(\n      component.filesystem.files.map(async (file) => {\n        const pathToWrite = path.join(this.path, rootPath, file.relative);\n        await fs.outputFile(pathToWrite, file.contents);\n      })\n    );\n  }\n\n  /**\n   * Get the component root dir in the file system (relative to workspace or full)\n   * @param componentId\n   * @param relative return the path relative to the workspace or full path\n   */\n  componentDir(\n    componentId: ComponentID,\n    bitMapOptions?: GetBitMapComponentOptions,\n    options = { relative: false }\n  ): PathOsBased {\n    return this.componentDirFromLegacyId(componentId._legacy, bitMapOptions, options);\n  }\n\n  /**\n   * component's files in the workspace are symlinked to the node_modules, and a package.json file is generated on that\n   * package directory to simulate a valid node package.\n   * @returns the package directory inside the node_module.\n   * by default the absolute path, unless `options.relative` was set\n   */\n  componentPackageDir(component: Component, options = { relative: false }): string {\n    const packageName = componentIdToPackageName(component.state._consumer);\n    const packageDir = path.join('node_modules', packageName);\n    return options.relative ? packageDir : this.consumer.toAbsolutePath(packageDir);\n  }\n\n  private componentDirFromLegacyId(\n    bitId: BitId,\n    bitMapOptions?: GetBitMapComponentOptions,\n    options = { relative: false }\n  ): PathOsBased {\n    const componentMap = this.consumer.bitMap.getComponent(bitId, bitMapOptions);\n    const relativeComponentDir = componentMap.getComponentDir();\n    if (!relativeComponentDir) {\n      throw new NoComponentDir(bitId.toString());\n    }\n    if (options.relative) {\n      return relativeComponentDir;\n    }\n\n    return path.join(this.path, relativeComponentDir);\n  }\n\n  componentDirToAbsolute(relativeComponentDir: PathOsBasedRelative): PathOsBasedAbsolute {\n    return path.join(this.path, relativeComponentDir);\n  }\n\n  async componentDefaultScope(componentId: ComponentID): Promise<string | undefined> {\n    const relativeComponentDir = this.componentDir(componentId, { ignoreVersion: true }, { relative: true });\n    return this.componentDefaultScopeFromComponentDirAndName(relativeComponentDir, componentId.fullName);\n  }\n\n  async componentDefaultScopeFromComponentDirAndName(\n    relativeComponentDir: PathOsBasedRelative,\n    name: string\n  ): Promise<string | undefined> {\n    const componentConfigFile = await this.componentConfigFileFromComponentDirAndName(relativeComponentDir, name);\n    if (componentConfigFile && componentConfigFile.defaultScope) {\n      return componentConfigFile.defaultScope;\n    }\n    const bitMapId = this.consumer.bitMap.getExistingBitId(name);\n    const bitMapEntry = bitMapId ? this.consumer.bitMap.getComponent(bitMapId) : undefined;\n    if (bitMapEntry && bitMapEntry.defaultScope) {\n      return bitMapEntry.defaultScope;\n    }\n    return this.componentDefaultScopeFromComponentDirAndNameWithoutConfigFile(relativeComponentDir, name);\n  }\n\n  get defaultScope() {\n    return this.config.defaultScope;\n  }\n\n  private async componentDefaultScopeFromComponentDirAndNameWithoutConfigFile(\n    relativeComponentDir: PathOsBasedRelative,\n    name: string\n  ): Promise<string | undefined> {\n    const variantConfig = this.variants.byRootDirAndName(relativeComponentDir, name);\n    if (variantConfig && variantConfig.defaultScope) {\n      return variantConfig.defaultScope;\n    }\n    const isVendor = this.isVendorComponentByComponentDir(relativeComponentDir);\n    if (!isVendor) {\n      return this.config.defaultScope;\n    }\n    return undefined;\n  }\n\n  /**\n   * Calculate the component config based on:\n   * the config property in the .bitmap file\n   * the component.json file in the component folder\n   * matching pattern in the variants config\n   * defaults extensions from workspace config\n   * extensions from the model.\n   */\n  async componentExtensions(\n    componentId: ComponentID,\n    componentFromScope?: Component,\n    excludeOrigins: ExtensionsOrigin[] = []\n  ): Promise<{\n    extensions: ExtensionDataList;\n    beforeMerge: Array<{ extensions: ExtensionDataList; origin: ExtensionsOrigin; extraData: any }>; // useful for debugging\n  }> {\n    // TODO: consider caching this result\n    let configFileExtensions: ExtensionDataList | undefined;\n    let variantsExtensions: ExtensionDataList | undefined;\n    let wsDefaultExtensions: ExtensionDataList | undefined;\n    const mergeFromScope = true;\n\n    const bitMapEntry = this.consumer.bitMap.getComponentIfExist(componentId._legacy);\n    const bitMapExtensions = bitMapEntry?.config;\n\n    const scopeExtensions = componentFromScope?.config?.extensions || new ExtensionDataList();\n    const [specific, nonSpecific] = partition(scopeExtensions, (entry) => entry.config[AspectSpecificField] === true);\n    const scopeExtensionsNonSpecific = new ExtensionDataList(...nonSpecific);\n    const scopeExtensionsSpecific = new ExtensionDataList(...specific);\n\n    const componentConfigFile = await this.componentConfigFile(componentId);\n    if (componentConfigFile) {\n      configFileExtensions = componentConfigFile.aspects.toLegacy();\n    }\n    const relativeComponentDir = this.componentDir(componentId, { ignoreVersion: true }, { relative: true });\n    const variantConfig = this.variants.byRootDirAndName(relativeComponentDir, componentId.fullName);\n    if (variantConfig) {\n      variantsExtensions = variantConfig.extensions;\n      // Do not merge from scope when there is specific variant (which is not *) that match the component\n      // if (variantConfig.maxSpecificity > 0) {\n      //   mergeFromScope = false;\n      // }\n    }\n    const isVendor = this.isVendorComponentByComponentDir(relativeComponentDir);\n    if (!isVendor) {\n      wsDefaultExtensions = this.getDefaultExtensions();\n    }\n    // We don't stop on each step because we want to merge the default scope even if propagate=false but the default scope is not defined\n    // in the case the same extension pushed twice, the former takes precedence (opposite of Object.assign)\n    const extensionsToMerge: Array<{ origin: ExtensionsOrigin; extensions: ExtensionDataList; extraData: any }> = [];\n    let envWasFoundPreviously = false;\n    const loadedExtensionIds: string[] = [];\n    const removedExtensionIds: string[] = [];\n\n    const addAndLoadExtensions = async (extensions: ExtensionDataList, origin: ExtensionsOrigin, extraData?: any) => {\n      if (!extensions.length) {\n        return;\n      }\n      removedExtensionIds.push(...extensions.filter((extData) => extData.isRemoved).map((extData) => extData.stringId));\n      const extsWithoutRemoved = extensions.filterRemovedExtensions();\n      const extsWithoutLoaded = ExtensionDataList.fromArray(\n        extsWithoutRemoved.filter(\n          (ext) => !loadedExtensionIds.includes(ext.extensionId?.toStringWithoutVersion() || '')\n        )\n      );\n      const selfInMergedExtensions = extsWithoutLoaded.findExtension(\n        componentId._legacy.toStringWithoutScopeAndVersion(),\n        true,\n        true\n      );\n      const extsWithoutSelf = selfInMergedExtensions?.extensionId\n        ? extsWithoutLoaded.remove(selfInMergedExtensions.extensionId)\n        : extsWithoutLoaded;\n      await this.loadExtensions(extsWithoutSelf, componentId);\n      const { extensionDataListFiltered, envIsCurrentlySet } = this.filterEnvsFromExtensionsIfNeeded(\n        extsWithoutSelf,\n        envWasFoundPreviously\n      );\n      if (envIsCurrentlySet) envWasFoundPreviously = true;\n\n      extensionsToMerge.push({ origin, extensions: extensionDataListFiltered, extraData });\n\n      loadedExtensionIds.push(\n        ...compact(extensionDataListFiltered.map((e) => e.extensionId?.toStringWithoutVersion()))\n      );\n    };\n    const setDataListAsSpecific = (extensions: ExtensionDataList) => {\n      extensions.forEach((dataEntry) => (dataEntry.config[AspectSpecificField] = true));\n    };\n    if (bitMapExtensions && !excludeOrigins.includes('BitmapFile')) {\n      const extensionDataList = ExtensionDataList.fromConfigObject(bitMapExtensions);\n      setDataListAsSpecific(extensionDataList);\n      await addAndLoadExtensions(extensionDataList, 'BitmapFile');\n    }\n    if (configFileExtensions && !excludeOrigins.includes('ComponentJsonFile')) {\n      setDataListAsSpecific(configFileExtensions);\n      await addAndLoadExtensions(configFileExtensions, 'ComponentJsonFile');\n    }\n    if (!excludeOrigins.includes('ModelSpecific')) {\n      await addAndLoadExtensions(ExtensionDataList.fromArray(scopeExtensionsSpecific), 'ModelSpecific');\n    }\n    let continuePropagating = componentConfigFile?.propagate ?? true;\n    if (variantsExtensions && continuePropagating && !excludeOrigins.includes('WorkspaceVariants')) {\n      const appliedRules = variantConfig?.sortedMatches.map(({ pattern, specificity }) => ({ pattern, specificity }));\n      await addAndLoadExtensions(variantsExtensions, 'WorkspaceVariants', { appliedRules });\n    }\n    continuePropagating = continuePropagating && (variantConfig?.propagate ?? true);\n    // Do not apply default extensions on the default extensions (it will create infinite loop when loading them)\n    const isDefaultExtension = wsDefaultExtensions?.findExtension(componentId.toString(), true, true);\n    if (\n      wsDefaultExtensions &&\n      continuePropagating &&\n      !isDefaultExtension &&\n      !excludeOrigins.includes('WorkspaceDefault')\n    ) {\n      await addAndLoadExtensions(wsDefaultExtensions, 'WorkspaceDefault');\n    }\n    if (mergeFromScope && continuePropagating && !excludeOrigins.includes('ModelNonSpecific')) {\n      await addAndLoadExtensions(scopeExtensionsNonSpecific, 'ModelNonSpecific');\n    }\n\n    // It's important to do this resolution before the merge, otherwise we have issues with extensions\n    // coming from scope with local scope name, as opposed to the same extension comes from the workspace with default scope name\n    await Promise.all(extensionsToMerge.map((list) => this.resolveExtensionListIds(list.extensions)));\n    const afterMerge = ExtensionDataList.mergeConfigs(extensionsToMerge.map((ext) => ext.extensions));\n    const withoutRemoved = afterMerge.filter((extData) => !removedExtensionIds.includes(extData.stringId));\n    const extensions = ExtensionDataList.fromArray(withoutRemoved);\n    return {\n      extensions,\n      beforeMerge: extensionsToMerge,\n    };\n  }\n\n  private filterEnvsFromExtensionsIfNeeded(extensionDataList: ExtensionDataList, envWasFoundPreviously: boolean) {\n    const envAspect = extensionDataList.findExtension(EnvsAspect.id);\n    const envFromEnvsAspect = envAspect?.config.env;\n    const [envsNotFromEnvsAspect, nonEnvs] = partition(extensionDataList, (ext) =>\n      this.envs.isEnvRegistered(ext.stringId)\n    );\n    const extensionDataListFiltered = new ExtensionDataList(...nonEnvs);\n    const envIsCurrentlySet = envFromEnvsAspect || envsNotFromEnvsAspect.length;\n    const shouldIgnoreCurrentEnv = envIsCurrentlySet && envWasFoundPreviously;\n    if (shouldIgnoreCurrentEnv) {\n      // still, aspect env may have other data other then config.env.\n      if (envAspect) {\n        delete envAspect.config.env;\n        extensionDataListFiltered.push(envAspect);\n      }\n    } else {\n      // add the envs\n      if (envAspect) extensionDataListFiltered.push(envAspect);\n      extensionDataListFiltered.push(...envsNotFromEnvsAspect);\n    }\n    return { extensionDataListFiltered, envIsCurrentlySet };\n  }\n\n  async triggerOnPreWatch(componentIds: ComponentID[], watchOpts: WatchOptions) {\n    const components = await this.getMany(componentIds);\n    const preWatchFunctions = this.onPreWatchSlot.values();\n    await mapSeries(preWatchFunctions, async (func) => {\n      await func(components, watchOpts);\n    });\n  }\n\n  async addSpecificComponentConfig(id: ComponentID, aspectId: string, config: Record<string, any> = {}) {\n    const componentConfigFile = await this.componentConfigFile(id);\n    if (componentConfigFile) {\n      await componentConfigFile.addAspect(aspectId, config, this.resolveComponentId.bind(this));\n      await componentConfigFile.write({ override: true });\n    } else {\n      this.bitMap.addComponentConfig(id, aspectId, config);\n    }\n  }\n\n  async removeSpecificComponentConfig(id: ComponentID, aspectId: string, markWithMinusIfNotExist: boolean) {\n    const componentConfigFile = await this.componentConfigFile(id);\n    if (componentConfigFile) {\n      await componentConfigFile.removeAspect(aspectId, markWithMinusIfNotExist, this.resolveComponentId.bind(this));\n      await componentConfigFile.write({ override: true });\n    } else {\n      this.bitMap.removeComponentConfig(id, aspectId, markWithMinusIfNotExist);\n    }\n  }\n\n  async getSpecificComponentConfig(id: ComponentID, aspectId: string): Promise<any> {\n    const componentConfigFile = await this.componentConfigFile(id);\n    if (componentConfigFile) {\n      return componentConfigFile.aspects.get(aspectId)?.config;\n    }\n    return this.bitMap.getBitmapEntry(id).config?.[aspectId];\n  }\n\n  /**\n   * This will mutate the entries with extensionId prop to have resolved legacy id\n   * This should be worked on the extension data list not the new aspect list\n   * @param extensionList\n   */\n  private async resolveExtensionListIds(extensionList: ExtensionDataList): Promise<ExtensionDataList> {\n    const promises = extensionList.map(async (entry) => {\n      if (entry.extensionId) {\n        const id = await this.resolveComponentId(entry.extensionId);\n        entry.extensionId = id._legacy;\n      }\n\n      return entry;\n    });\n    await Promise.all(promises);\n    return extensionList;\n  }\n\n  private isVendorComponentByComponentDir(relativeComponentDir: PathOsBasedRelative): boolean {\n    const vendorDir = this.config.vendor?.directory || DEFAULT_VENDOR_DIR;\n    if (pathIsInside(relativeComponentDir, vendorDir)) {\n      return true;\n    }\n    // TODO: implement\n    return false;\n  }\n\n  /**\n   * return the component config from its folder (component.json)\n   * @param componentId\n   */\n  private async componentConfigFile(id: ComponentID): Promise<ComponentConfigFile | undefined> {\n    const relativeComponentDir = this.componentDir(id, { ignoreVersion: true }, { relative: true });\n    return this.componentConfigFileFromComponentDirAndName(relativeComponentDir, id.fullName);\n  }\n\n  private async componentConfigFileFromComponentDirAndName(\n    relativeComponentDir: PathOsBasedRelative,\n    name: string\n  ): Promise<ComponentConfigFile | undefined> {\n    let componentConfigFile;\n    if (relativeComponentDir) {\n      const absComponentDir = this.componentDirToAbsolute(relativeComponentDir);\n      const defaultScopeFromVariantsOrWs = await this.componentDefaultScopeFromComponentDirAndNameWithoutConfigFile(\n        relativeComponentDir,\n        name\n      );\n      componentConfigFile = await ComponentConfigFile.load(\n        absComponentDir,\n        this.createAspectList.bind(this),\n        defaultScopeFromVariantsOrWs\n      );\n    }\n\n    return componentConfigFile;\n  }\n\n  async getAspectsGraphWithoutCore(components: Component[], isAspect?: ShouldIgnoreFunc) {\n    const ids = components.map((component) => component.id._legacy);\n    const coreAspectsStringIds = this.aspectLoader.getCoreAspectIds();\n    const coreAspectsComponentIds = coreAspectsStringIds.map((id) => BitId.parse(id, true));\n    const coreAspectsBitIds = BitIds.fromArray(coreAspectsComponentIds.map((id) => id.changeScope(null)));\n    // const aspectsIds = components.reduce((acc, curr) => {\n    //   const currIds = curr.state.aspects.ids;\n    //   acc = acc.concat(currIds);\n    //   return acc;\n    // }, [] as any);\n    // const otherDependenciesMap = components.reduce((acc, curr) => {\n    //   // const currIds = curr.state.dependencies.dependencies.map(dep => dep.id.toString());\n    //   const currMap = curr.state.dependencies.getIdsMap();\n    //   Object.assign(acc, currMap);\n    //   return acc;\n    // }, {});\n\n    // const depsWhichAreNotAspects = difference(Object.keys(otherDependenciesMap), aspectsIds);\n    // const depsWhichAreNotAspectsBitIds = depsWhichAreNotAspects.map((strId) => otherDependenciesMap[strId]);\n    // We only want to load into the graph components which are aspects and not regular dependencies\n    // This come to solve a circular loop when an env aspect use an aspect (as regular dep) and the aspect use the env aspect as its env\n    // TODO: @gilad it causes many issues we need to find a better solution. removed for now.\n    const ignoredIds = coreAspectsBitIds.concat([]);\n    return this.buildOneGraphForComponents(ids, BitIds.fromArray(ignoredIds), isAspect);\n  }\n\n  /**\n   * load aspects from the workspace and if not exists in the workspace, load from the scope.\n   * keep in mind that the graph may have circles.\n   */\n  async loadAspects(ids: string[] = [], throwOnError = false, neededFor?: ComponentID): Promise<string[]> {\n    this.logger.info(`loadAspects, loading ${ids.length} aspects.\nids: ${ids.join(', ')}\nneeded-for: ${neededFor?.toString() || '<unknown>'}`);\n    const notLoadedIds = ids.filter((id) => !this.aspectLoader.isAspectLoaded(id));\n    if (!notLoadedIds.length) return [];\n    const coreAspectsStringIds = this.aspectLoader.getCoreAspectIds();\n    const idsWithoutCore: string[] = difference(notLoadedIds, coreAspectsStringIds);\n    const componentIds = await this.resolveMultipleComponentIds(idsWithoutCore);\n    const components = await this.importAndGetAspects(componentIds);\n\n    const isAspect = async (bitId: BitId) => {\n      const id = await this.resolveComponentId(bitId);\n      const component = await this.get(id);\n      const data = this.envs.getEnvData(component);\n      const isUsingAspectEnv = this.envs.isUsingAspectEnv(component);\n      const isUsingEnvEnv = this.envs.isUsingEnvEnv(component);\n      const isValidAspect = isUsingAspectEnv || isUsingEnvEnv;\n      if (!isValidAspect && idsWithoutCore.includes(component.id.toString())) {\n        const err = new IncorrectEnvAspect(component.id.toString(), data.type, data.id);\n        if (data.id === DEFAULT_ENV) {\n          // when cloning a project, or when the node-modules dir is deleted, nothing works and all\n          // components are default to the DEFAULT_ENV, which is node-env. we must allow \"bit\n          // install\" to prepare the workspace and let the proper the envs to be loaded\n          this.logger.error(err.message);\n        } else {\n          throw err;\n        }\n      }\n      return isValidAspect;\n    };\n\n    const graph = await this.getAspectsGraphWithoutCore(components, isAspect);\n    const idsStr = graph.nodes();\n    const compIds = await this.resolveMultipleComponentIds(idsStr);\n    const aspects = await this.getMany(compIds);\n    const { workspaceComps, scopeComps } = await this.groupComponentsByWorkspaceAndScope(aspects);\n    const scopeIds = scopeComps.map((aspect) => aspect.id.toString());\n    const workspaceAspects = await this.requireComponents(workspaceComps);\n    const workspaceManifests = await this.aspectLoader.getManifestsFromRequireableExtensions(\n      workspaceAspects,\n      throwOnError\n    );\n    const potentialPluginsIndexes = compact(\n      workspaceManifests.map((manifest, index) => {\n        if (this.aspectLoader.isValidAspect(manifest)) return undefined;\n        return index;\n      })\n    );\n    const workspaceManifestsIds = compact(workspaceManifests.map((m) => m.id));\n    // We are grouping the scope aspects by whether they are envs of something of the list or not\n    // if yes, we want to load them first\n    // the rest we will load together with the workspace aspects\n    const scopeIdsGrouped = await this.scope.groupAspectIdsByEnvOfTheList(scopeIds);\n    const scopeEnvsManifestsIds =\n      scopeIdsGrouped.envs && scopeIdsGrouped.envs.length\n        ? await this.scope.loadAspects(scopeIdsGrouped.envs, throwOnError)\n        : [];\n    const scopeOtherManifests =\n      scopeIdsGrouped.other && scopeIdsGrouped.other.length\n        ? await this.scope.getManifestsGraphRecursively(\n            scopeIdsGrouped.other,\n            compact(workspaceManifestsIds),\n            throwOnError,\n            {\n              packageManagerConfigRootDir: this.path,\n            }\n          )\n        : [];\n    const scopeOtherManifestsIds = compact(scopeOtherManifests.map((m) => m.id));\n\n    await this.aspectLoader.loadExtensionsByManifests([...scopeOtherManifests, ...workspaceManifests], throwOnError);\n    // Try require components for potential plugins\n    const pluginsWorkspaceComps = potentialPluginsIndexes.map((index) => {\n      return workspaceComps[index];\n    });\n    // Do the require again now that the plugins defs already registered\n    const pluginsWorkspaceAspects = await this.requireComponents(pluginsWorkspaceComps);\n    const pluginsWorkspaceManifests = await this.aspectLoader.getManifestsFromRequireableExtensions(\n      pluginsWorkspaceAspects,\n      throwOnError\n    );\n    await this.aspectLoader.loadExtensionsByManifests(pluginsWorkspaceManifests, throwOnError);\n\n    return compact(scopeEnvsManifestsIds.concat(scopeOtherManifestsIds).concat(workspaceManifestsIds));\n  }\n\n  /**\n   * Note - this gets called from Harmony only.\n   * returns one graph that includes all dependencies types. each edge has a label of the dependency\n   * type. the nodes content is the Component object.\n   */\n  async buildOneGraphForComponents(\n    ids: BitId[],\n    ignoreIds?: BitIds,\n    shouldIgnoreFunc?: ShouldIgnoreFunc\n  ): Promise<LegacyGraph> {\n    const graphFromFsBuilder = new GraphFromFsBuilder(this, this.logger, ignoreIds, shouldIgnoreFunc);\n    return graphFromFsBuilder.buildGraph(ids);\n  }\n\n  async resolveAspects(runtimeName?: string, componentIds?: ComponentID[]): Promise<AspectDefinition[]> {\n    let missingPaths = false;\n    const stringIds: string[] = [];\n    const idsToResolve = componentIds ? componentIds.map((id) => id.toString()) : this.harmony.extensionsIds;\n    const coreAspectsIds = this.aspectLoader.getCoreAspectIds();\n    const userAspectsIds: string[] = difference(idsToResolve, coreAspectsIds);\n    const componentIdsToResolve = await this.resolveMultipleComponentIds(userAspectsIds);\n    const { workspaceIds, scopeIds } = await this.groupIdsByWorkspaceAndScope(componentIdsToResolve);\n    const wsComponents = await this.getMany(workspaceIds);\n    const aspectDefs = await this.aspectLoader.resolveAspects(wsComponents, async (component) => {\n      stringIds.push(component.id._legacy.toString());\n      const localPath = this.getComponentPackagePath(component.state._consumer);\n      const isExist = await fs.pathExists(localPath);\n      if (!isExist) {\n        missingPaths = true;\n      }\n\n      return {\n        aspectPath: localPath,\n        runtimePath: runtimeName ? await this.aspectLoader.getRuntimePath(component, localPath, runtimeName) : null,\n      };\n    });\n\n    let scopeAspectDefs: AspectDefinition[] = [];\n    if (scopeIds.length) {\n      scopeAspectDefs = await this.scope.resolveAspects(runtimeName, scopeIds);\n    }\n\n    let coreAspectDefs = await Promise.all(\n      coreAspectsIds.map(async (coreId) => {\n        const rawDef = await getAspectDef(coreId, runtimeName);\n        return this.aspectLoader.loadDefinition(rawDef);\n      })\n    );\n\n    // due to lack of workspace and scope runtimes. TODO: fix after adding them.\n    if (runtimeName) {\n      coreAspectDefs = coreAspectDefs.filter((coreAspect) => {\n        return coreAspect.runtimePath;\n      });\n    }\n\n    if (missingPaths) {\n      await link(stringIds, false);\n    }\n\n    const allDefs = aspectDefs.concat(coreAspectDefs).concat(scopeAspectDefs);\n    const uniqDefs = uniqBy(allDefs, (def) => `${def.aspectPath}-${def.runtimePath}`);\n    let defs = uniqDefs;\n    if (runtimeName) {\n      defs = defs.filter((def) => def.runtimePath);\n    }\n\n    return defs;\n  }\n\n  private async groupIdsByWorkspaceAndScope(\n    ids: ComponentID[]\n  ): Promise<{ workspaceIds: ComponentID[]; scopeIds: ComponentID[] }> {\n    const workspaceIds: ComponentID[] = [];\n    const scopeIds: ComponentID[] = [];\n    await Promise.all(\n      ids.map(async (id) => {\n        const existOnWorkspace = await this.hasId(id);\n        existOnWorkspace ? workspaceIds.push(id) : scopeIds.push(id);\n      })\n    );\n    return { workspaceIds, scopeIds };\n  }\n\n  private async groupComponentsByWorkspaceAndScope(\n    components: Component[]\n  ): Promise<{ workspaceComps: Component[]; scopeComps: Component[] }> {\n    const workspaceComps: Component[] = [];\n    const scopeComps: Component[] = [];\n    await Promise.all(\n      components.map(async (component) => {\n        const existOnWorkspace = await this.hasId(component.id);\n        existOnWorkspace ? workspaceComps.push(component) : scopeComps.push(component);\n      })\n    );\n    return { workspaceComps, scopeComps };\n  }\n\n  /**\n   * Load all unloaded extensions from a list\n   * @param extensions list of extensions with config to load\n   */\n  async loadExtensions(\n    extensions: ExtensionDataList,\n    originatedFrom?: ComponentID,\n    throwOnError = false\n  ): Promise<void> {\n    const extensionsIdsP = extensions.map(async (extensionEntry) => {\n      // Core extension\n      if (!extensionEntry.extensionId) {\n        return extensionEntry.stringId as string;\n      }\n\n      const id = await this.resolveComponentId(extensionEntry.extensionId);\n      // return this.resolveComponentId(extensionEntry.extensionId);\n      return id.toString();\n    });\n    const extensionsIds: string[] = await Promise.all(extensionsIdsP);\n    const loadedExtensions = this.harmony.extensionsIds;\n    const extensionsToLoad = difference(extensionsIds, loadedExtensions);\n    if (!extensionsToLoad.length) return;\n    await this.loadAspects(extensionsToLoad, throwOnError, originatedFrom);\n  }\n\n  /**\n   * Provides a cache folder, unique per key.\n   * Return value may be undefined, if workspace folder is unconventional (bare-scope, no node_modules, etc)\n   */\n  getTempDir(\n    /*\n     * unique key, i.e. aspect or component id\n     */\n    id: string\n  ) {\n    const PREFIX = 'bit';\n    const cacheDir = path.join(this.modulesPath, '.cache', PREFIX, id);\n\n    // maybe should also check it's a folder and has write permissions\n    if (!fs.existsSync(cacheDir)) {\n      fs.mkdirSync(cacheDir, { recursive: true });\n    }\n\n    return cacheDir;\n  }\n\n  async requireComponents(components: Component[]): Promise<RequireableComponent[]> {\n    let missingPaths = false;\n    const stringIds: string[] = [];\n    const resolveP = components.map(async (component) => {\n      stringIds.push(component.id._legacy.toString());\n      const localPath = this.getComponentPackagePath(component);\n      const isExist = await fs.pathExists(localPath);\n      if (!isExist) {\n        missingPaths = true;\n      }\n\n      const requireFunc = async () => {\n        const plugins = this.aspectLoader.getPlugins(component, localPath);\n        if (plugins.has()) {\n          return plugins.load(MainRuntime.name);\n        }\n\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        const aspect = require(localPath);\n        // require aspect runtimes\n        const runtimePath = await this.aspectLoader.getRuntimePath(component, localPath, MainRuntime.name);\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        if (runtimePath) require(runtimePath);\n        return aspect;\n      };\n      return new RequireableComponent(component, requireFunc);\n    });\n    const resolved = await Promise.all(resolveP);\n    // Make sure to link missing components\n    if (missingPaths) {\n      await link(stringIds, false);\n    }\n    return resolved;\n  }\n\n  private async getComponentsDirectory(ids: ComponentID[]): Promise<ComponentMap<string>> {\n    const components = ids.length ? await this.getMany(ids) : await this.list();\n    return ComponentMap.as<string>(components, (component) => this.componentDir(component.id));\n  }\n\n  /**\n   * Install dependencies for all components in the workspace\n   *\n   * @returns\n   * @memberof Workspace\n   */\n  async install(packages?: string[], options?: WorkspaceInstallOptions): Promise<ComponentMap<string>> {\n    if (packages && packages.length) {\n      await this._addPackages(packages, options);\n    }\n    if (options?.addMissingPeers) {\n      const compDirMap = await this.getComponentsDirectory([]);\n      const mergedRootPolicy = this.dependencyResolver.getWorkspacePolicy();\n      const depsFilterFn = await this.generateFilterFnForDepsFromLocalRemote();\n      const pmInstallOptions: PackageManagerInstallOptions = {\n        dedupe: options?.dedupe,\n        copyPeerToRuntimeOnRoot: options?.copyPeerToRuntimeOnRoot ?? true,\n        copyPeerToRuntimeOnComponents: options?.copyPeerToRuntimeOnComponents ?? false,\n        dependencyFilterFn: depsFilterFn,\n        overrides: this.dependencyResolver.config.overrides,\n        packageImportMethod: this.dependencyResolver.config.packageImportMethod,\n      };\n      const missingPeers = await this.dependencyResolver.getMissingPeerDependencies(\n        this.path,\n        mergedRootPolicy,\n        compDirMap,\n        pmInstallOptions\n      );\n      if (missingPeers) {\n        const missingPeerPackages = Object.entries(missingPeers).map(([peerName, range]) => `${peerName}@${range}`);\n        await this._addPackages(missingPeerPackages, options);\n      } else {\n        this.logger.console('No missing peer dependencies found.');\n      }\n    }\n    if (options?.import) {\n      this.logger.setStatusLine('importing missing objects');\n      await this.importObjects();\n      this.logger.consoleSuccess();\n    }\n    return this._installModules(options);\n  }\n\n  private async _addPackages(packages: string[], options?: WorkspaceInstallOptions) {\n    if (!options?.variants && (options?.lifecycleType as string) === 'dev') {\n      throw new DependencyTypeNotSupportedInPolicy(options?.lifecycleType as string);\n    }\n    this.logger.debug(`installing the following packages: ${packages.join()}`);\n    const resolver = await this.dependencyResolver.getVersionResolver();\n    const resolvedPackagesP = packages.map((packageName) =>\n      resolver.resolveRemoteVersion(packageName, {\n        rootDir: this.path,\n      })\n    );\n    const resolvedPackages = await Promise.all(resolvedPackagesP);\n    const newWorkspacePolicyEntries: WorkspacePolicyEntry[] = [];\n    resolvedPackages.forEach((resolvedPackage) => {\n      if (resolvedPackage.version) {\n        const versionWithPrefix = this.dependencyResolver.getVersionWithSavePrefix(\n          resolvedPackage.version,\n          options?.savePrefix\n        );\n        newWorkspacePolicyEntries.push({\n          dependencyId: resolvedPackage.packageName,\n          value: {\n            version: versionWithPrefix,\n          },\n          lifecycleType: options?.lifecycleType || 'runtime',\n        });\n      }\n    });\n    if (!options?.variants) {\n      this.dependencyResolver.addToRootPolicy(newWorkspacePolicyEntries, {\n        updateExisting: options?.updateExisting ?? false,\n      });\n    } else {\n      // TODO: implement\n    }\n    await this.dependencyResolver.persistConfig(this.path);\n  }\n\n  private async _getComponentsWithDependencyPolicies() {\n    const allComponentIds = await this.listIds();\n    const componentConfigFiles: Record<string, ComponentConfigFile> = {};\n    const componentPoliciesById: Record<string, any> = {};\n    (\n      await Promise.all<ComponentConfigFile | undefined>(\n        allComponentIds.map((componentId) => this.componentConfigFile(componentId))\n      )\n    ).forEach((componentConfigFile, index) => {\n      if (!componentConfigFile) return;\n      const depResolverConfig = componentConfigFile.aspects.get(DependencyResolverAspect.id);\n      if (!depResolverConfig) return;\n      const componentId = allComponentIds[index].toString();\n      componentConfigFiles[componentId] = componentConfigFile;\n      componentPoliciesById[componentId] = depResolverConfig.config.policy;\n    });\n    return {\n      componentConfigFiles,\n      componentPoliciesById,\n    };\n  }\n\n  /**\n   * Updates out-of-date dependencies in the workspace.\n   *\n   * @param options.all {Boolean} updates all outdated dependencies without showing a prompt.\n   */\n  async updateDependencies(options: { all: boolean }) {\n    const { componentConfigFiles, componentPoliciesById } = await this._getComponentsWithDependencyPolicies();\n    const variantPatterns = this.variants.raw();\n    const variantPoliciesByPatterns = this._variantPatternsToDepPolicesDict(variantPatterns);\n    const outdatedPkgs = await this.dependencyResolver.getOutdatedPkgsFromPolicies({\n      rootDir: this.path,\n      variantPoliciesByPatterns,\n      componentPoliciesById,\n    });\n    let outdatedPkgsToUpdate!: OutdatedPkg[];\n    if (options.all) {\n      outdatedPkgsToUpdate = outdatedPkgs;\n    } else {\n      this.logger.off();\n      outdatedPkgsToUpdate = await pickOutdatedPkgs(outdatedPkgs);\n      this.logger.on();\n    }\n    const { updatedVariants, updatedComponents } = this.dependencyResolver.applyUpdates(outdatedPkgsToUpdate, {\n      variantPoliciesByPatterns,\n      componentPoliciesById,\n    });\n    await this._updateVariantsPolicies(variantPatterns, updatedVariants);\n    const updatedComponentConfigFiles = Object.values(pick(componentConfigFiles, updatedComponents));\n    await this._saveManyComponentConfigFiles(updatedComponentConfigFiles);\n    await this._reloadConsumer();\n    return this._installModules({ dedupe: true });\n  }\n\n  private _variantPatternsToDepPolicesDict(variantPatterns: Patterns): Record<string, VariantPolicyConfigObject> {\n    const variantPoliciesByPatterns: Record<string, VariantPolicyConfigObject> = {};\n    for (const [variantPattern, extensions] of Object.entries(variantPatterns)) {\n      if (extensions[DependencyResolverAspect.id]?.policy) {\n        variantPoliciesByPatterns[variantPattern] = extensions[DependencyResolverAspect.id]?.policy;\n      }\n    }\n    return variantPoliciesByPatterns;\n  }\n\n  private _updateVariantsPolicies(variantPatterns: Record<string, any>, updateVariantPolicies: string[]) {\n    for (const variantPattern of updateVariantPolicies) {\n      this.variants.setExtension(\n        variantPattern,\n        DependencyResolverAspect.id,\n        variantPatterns[variantPattern][DependencyResolverAspect.id],\n        { overrideExisting: true }\n      );\n    }\n    return this.dependencyResolver.persistConfig(this.path);\n  }\n\n  private async _saveManyComponentConfigFiles(componentConfigFiles: ComponentConfigFile[]) {\n    await Promise.all(\n      Array.from(componentConfigFiles).map(async (componentConfigFile) => {\n        await componentConfigFile.write({ override: true });\n      })\n    );\n  }\n\n  private async _installModules(options?: ModulesInstallOptions): Promise<ComponentMap<string>> {\n    this.logger.console(\n      `installing dependencies in workspace using ${chalk.cyan(this.dependencyResolver.getPackageManagerName())}`\n    );\n    this.logger.debug(`installing dependencies in workspace with options`, options);\n    this.clearCache();\n    // TODO: pass get install options\n    const installer = this.dependencyResolver.getInstaller({});\n    const compDirMap = await this.getComponentsDirectory([]);\n    const mergedRootPolicy = this.dependencyResolver.getWorkspacePolicy();\n\n    const depsFilterFn = await this.generateFilterFnForDepsFromLocalRemote();\n\n    const pmInstallOptions: PackageManagerInstallOptions = {\n      dedupe: options?.dedupe,\n      copyPeerToRuntimeOnRoot: options?.copyPeerToRuntimeOnRoot ?? true,\n      copyPeerToRuntimeOnComponents: options?.copyPeerToRuntimeOnComponents ?? false,\n      dependencyFilterFn: depsFilterFn,\n      overrides: this.dependencyResolver.config.overrides,\n      packageImportMethod: this.dependencyResolver.config.packageImportMethod,\n    };\n    await installer.install(this.path, mergedRootPolicy, compDirMap, { installTeambitBit: false }, pmInstallOptions);\n    // TODO: this make duplicate\n    // this.logger.consoleSuccess();\n    // TODO: add the links results to the output\n    await this.link({\n      linkTeambitBit: true,\n      legacyLink: true,\n      linkCoreAspects: true,\n      linkNestedDepsInNM: !this.isLegacy,\n    });\n    await this.consumer.componentFsCache.deleteAllDependenciesDataCache();\n    return compDirMap;\n  }\n\n  async link(options: WorkspaceLinkOptions = {}): Promise<LinkResults> {\n    if (options.fetchObject) {\n      await this.importObjects();\n    }\n    options.consumer = this.consumer;\n    const compDirMap = await this.getComponentsDirectory([]);\n    const mergedRootPolicy = this.dependencyResolver.getWorkspacePolicy();\n    const linker = this.dependencyResolver.getLinker({\n      rootDir: this.path,\n      linkingOptions: options,\n    });\n    const res = await linker.link(this.path, mergedRootPolicy, compDirMap, options);\n    return res;\n  }\n\n  /**\n   * Generate a filter to pass to the installer\n   * This will filter deps which are come from remotes which defined in scope.json\n   * those components comes from local remotes, usually doesn't have a package in a registry\n   * so no reason to try to install them (it will fail)\n   */\n  private async generateFilterFnForDepsFromLocalRemote() {\n    // TODO: once scope create a new API for this, replace it with the new one\n    const remotes = await this.scope._legacyRemotes();\n    const reg = await this.dependencyResolver.getRegistries();\n    const packageScopes = Object.keys(reg.scopes);\n    return (dependencyList: DependencyList): DependencyList => {\n      const filtered = dependencyList.filter((dep) => {\n        if (!(dep instanceof ComponentDependency)) {\n          return true;\n        }\n        if (remotes.isHub(dep.componentId.scope)) {\n          return true;\n        }\n        if (packageScopes.some((scope) => dep.packageName.startsWith(`@${scope}/`))) {\n          return true;\n        }\n        return false;\n      });\n      return filtered;\n    };\n  }\n\n  /**\n   * whether a scope is hosted by Bit cloud.\n   * otherwise, it is self-hosted\n   */\n  private async isHostedByBit(scopeName: string): Promise<boolean> {\n    // TODO: once scope create a new API for this, replace it with the new one\n    const remotes = await this.scope._legacyRemotes();\n    return remotes.isHub(scopeName);\n  }\n\n  /**\n   * same as `this.importAndGetMany()` with a specific error handling of ComponentNotFound\n   */\n  private async importAndGetAspects(componentIds: ComponentID[]): Promise<Component[]> {\n    try {\n      return await this.importAndGetMany(componentIds);\n    } catch (err: any) {\n      if (err instanceof ComponentNotFound) {\n        const config = this.harmony.get<ConfigMain>('teambit.harmony/config');\n        const configStr = JSON.stringify(config.workspaceConfig?.raw || {});\n        if (configStr.includes(err.id)) {\n          throw new BitError(`error: a component \"${err.id}\" was not found\nyour workspace.jsonc has this component-id set. you might want to remove/change it.`);\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  // TODO: replace with a proper import API on the workspace\n  private async importObjects() {\n    const importOptions: ImportOptions = {\n      ids: [],\n      verbose: false,\n      merge: false,\n      objectsOnly: true,\n      override: false,\n      writeDists: false,\n      writeConfig: false,\n      installNpmPackages: false,\n      importDependenciesDirectly: false,\n      importDependents: false,\n    };\n    const importer = new Importer(this, this.dependencyResolver);\n    try {\n      const res = await importer.import(importOptions, []);\n      return res;\n    } catch (err: any) {\n      // TODO: this is a hack since the legacy throw an error, we should provide a way to not throw this error from the legacy\n      if (err instanceof NothingToImport) {\n        // Do not write nothing to import warning\n        return undefined;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * this should be rarely in-use.\n   * it's currently used by watch extension as a quick workaround to load .bitmap and the components\n   */\n  async _reloadConsumer() {\n    this.consumer = await loadConsumer(this.path, true);\n    this.clearCache();\n  }\n\n  getComponentPackagePath(component: ConsumerComponent | Component) {\n    const packageName = componentIdToPackageName(\n      component instanceof ConsumerComponent ? component : component.state._consumer\n    );\n    return path.join(this.modulesPath, packageName);\n  }\n\n  // TODO: should we return here the dir as it defined (aka components) or with /{name} prefix (as it used in legacy)\n  get defaultDirectory(): string {\n    return this.config.defaultDirectory;\n  }\n\n  get legacyDefaultDirectory(): string {\n    if (this.defaultDirectory && !this.defaultDirectory.includes('{name}')) {\n      return `${this.defaultDirectory}/{name}`;\n    }\n    return this.defaultDirectory;\n  }\n\n  /**\n   * Transform the id to ComponentId and get the exact id as appear in bitmap\n   *\n   * @param {(string | ComponentID | BitId)} id\n   * @returns {Promise<ComponentID>}\n   * @memberof Workspace\n   */\n  async resolveComponentId(id: string | ComponentID | BitId): Promise<ComponentID> {\n    const getDefaultScope = async (bitId: BitId, bitMapOptions?: GetBitMapComponentOptions) => {\n      if (bitId.scope) {\n        return bitId.scope;\n      }\n      const relativeComponentDir = this.componentDirFromLegacyId(bitId, bitMapOptions, { relative: true });\n      const defaultScope = await this.componentDefaultScopeFromComponentDirAndName(\n        relativeComponentDir,\n        bitId.toStringWithoutScopeAndVersion()\n      );\n      return defaultScope;\n    };\n\n    // This is required in case where you have in your workspace a component with the same name as a core aspect\n    // let's say you have component called react-native (which is eventually my-org.my-scope/react-native)\n    // and you set teambit.react/react-native as your env\n    // bit will get here with the string teambit.react/react-native and will try to resolve it from the workspace\n    // during this it will find the my-org.my-scope/react-native which is incorrect as the core one doesn't exist in the\n    // workspace\n    if (this.aspectLoader.isCoreAspect(id.toString())) {\n      return ComponentID.fromString(id.toString());\n    }\n    let legacyId = this.consumer.getParsedIdIfExist(id.toString(), true, true);\n    if (!legacyId) {\n      try {\n        const idWithVersion = id.toString();\n        const [idWithoutVersion, version] = id.toString().split('@');\n        const _bitMapId = this.consumer.getParsedIdIfExist(idWithoutVersion, false, true);\n        // This logic is very specific, and very sensitive for changes please do not touch this without consulting with @ran or @gilad\n        // example (partial list) cases which should be handled are:\n        // use case 1 - ws component provided with the local scope name:\n        // source id        : my-scope1/my-name1\n        // bitmap res (_id) : my-name1 (comp is tagged but not exported)\n        // local scope name : my-scope1\n        // scope content    : my-name1\n        // expected result  : my-name1\n        // use case 2 - component with same name exist in ws and scope (but with different scope name)\n        // source id        : my-scope2/my-name1\n        // bitmap res (_id) : my-name1 (comp exist in ws but it's actually different component)\n        // local scope name : my-scope1\n        // scope content    : my-scope2/my-name1\n        // expected result  : my-scope2/my-name1\n        // use case 3 - component with same name exist in ws and scope (but with different scope name) - source provided without scope name\n        // source id        : my-name1\n        // bitmap res (_id) : my-name1 (comp exist in ws but it's actually different component)\n        // local scope name : my-scope1\n        // scope content    : my-scope1/my-name1 and my-scope2/my-name1\n        // expected result  : my-name1 (get the name from the bitmap)\n        // use case 4 - component with the same name and different scope are imported into the ws\n        // source id        : my-name1\n        // bitmap res (_id) : my-scope2/my-name1 (comp exist in ws from different scope (imported))\n        // local scope name : my-scope1\n        // scope content    : my-scope2/my-name1\n        // expected result  : my-scope2/my-name1 (get the name from the bitmap)\n\n        // No entry in bitmap at all, search for the original input id\n        if (!_bitMapId) {\n          return await this.scope.resolveComponentId(id.toString());\n        }\n        const _bitMapIdWithoutVersion = _bitMapId.toStringWithoutVersion();\n        const _bitMapIdWithVersion = _bitMapId.changeVersion(version).toString();\n        // The id in the bitmap has prefix which is not in the source id - the bitmap entry has scope name\n        // Handle use case 4\n        if (_bitMapIdWithoutVersion.endsWith(idWithoutVersion) && _bitMapIdWithoutVersion !== idWithoutVersion) {\n          return await this.scope.resolveComponentId(_bitMapIdWithVersion);\n        }\n        // Handle case when I tagged the component locally with a default scope which is not the local scope\n        // but not exported it yet\n        // now i'm trying to load it with source id contain the default scope prefix\n        // we want to get it from the local first before assuming it's something coming from outside\n        if (!_bitMapId.scope) {\n          const defaultScopeForBitmapId = await getDefaultScope(_bitMapId, { ignoreVersion: true });\n          const getFromBitmapAddDefaultScope = () => {\n            let _bitmapIdWithVersionForSource = _bitMapId;\n            if (version) {\n              _bitmapIdWithVersionForSource = _bitMapId.changeVersion(version);\n            }\n            return ComponentID.fromLegacy(_bitmapIdWithVersionForSource, defaultScopeForBitmapId);\n          };\n          // a case when the given id contains the default scope\n          if (idWithVersion.startsWith(`${defaultScopeForBitmapId}/${_bitMapIdWithoutVersion}`)) {\n            return getFromBitmapAddDefaultScope();\n          }\n          // a case when the given id does not contain the default scope\n          const fromScope = await this.scope.resolveComponentId(idWithVersion);\n          if (!fromScope._legacy.hasScope()) {\n            return getFromBitmapAddDefaultScope();\n          }\n        }\n\n        if (idWithoutVersion.endsWith(_bitMapIdWithoutVersion) && _bitMapIdWithoutVersion !== idWithoutVersion) {\n          // The id in the bitmap doesn't have scope, the source id has scope\n          // Handle use case 2 and use case 1\n          if (id.toString().startsWith(this.scope.name)) {\n            // Handle use case 1 - the provided id has scope name same as the local scope name\n            // we want to send it as it appear in the bitmap\n            return await this.scope.resolveComponentId(_bitMapIdWithVersion);\n          }\n          // Handle use case 2 - the provided id has scope which is not the local scope\n          // we want to search by the source id\n          return await this.scope.resolveComponentId(idWithVersion);\n        }\n        // Handle use case 3\n        return await this.scope.resolveComponentId(idWithVersion);\n      } catch (error: any) {\n        legacyId = BitId.parse(id.toString(), true);\n        return ComponentID.fromLegacy(legacyId);\n      }\n    }\n\n    const defaultScope = await getDefaultScope(legacyId);\n    return ComponentID.fromLegacy(legacyId, defaultScope);\n  }\n\n  async resolveMultipleComponentIds(ids: Array<string | ComponentID | BitId>): Promise<ComponentID[]> {\n    return Promise.all(ids.map(async (id) => this.resolveComponentId(id)));\n  }\n\n  /**\n   * This will mutate the original extensions list and resolve it's ids\n   *\n   * @param {ExtensionDataList} extensions\n   * @returns {Promise<void[]>}\n   * @memberof Workspace\n   */\n  resolveExtensionsList(extensions: ExtensionDataList): Promise<void[]> {\n    const resolveMergedExtensionsP = extensions.map(async (extensionEntry) => {\n      if (extensionEntry.extensionId) {\n        // const hasVersion = extensionEntry.extensionId.hasVersion();\n        // const useBitmapVersion = !hasVersion;\n        // const resolvedId = await this.resolveComponentId(extensionEntry.extensionId, true, useBitmapVersion);\n\n        // Assuming extensionId always has scope - do not allow extension id without scope\n        const resolvedId = await this.resolveComponentId(extensionEntry.extensionId);\n        extensionEntry.extensionId = resolvedId._legacy;\n      }\n    });\n    return Promise.all(resolveMergedExtensionsP);\n  }\n\n  /**\n   * This will mutate the original extensions list and make sure all extensions has the ids with the scope / default scope\n   *\n   * @param {ExtensionDataList} extensions\n   * @returns {Promise<void[]>}\n   * @memberof Workspace\n   */\n  addDefaultScopeToExtensionsList(extensions: ExtensionDataList): Promise<void[]> {\n    const resolveMergedExtensionsP = extensions.map(async (extensionEntry) => {\n      if (extensionEntry.extensionId && !extensionEntry.extensionId.hasScope()) {\n        const componentId = ComponentID.fromLegacy(extensionEntry.extensionId);\n        const defaultScope = await this.componentDefaultScope(componentId);\n        extensionEntry.extensionId = extensionEntry.extensionId.changeScope(defaultScope);\n      }\n    });\n    return Promise.all(resolveMergedExtensionsP);\n  }\n\n  /**\n   * Uninstall the specified packages from dependencies.\n   *\n   * @param {string[]} the list of packages that should be removed from dependencies.\n   */\n  async uninstallDependencies(packages: string[]) {\n    this.dependencyResolver.removeFromRootPolicy(packages);\n    await this.dependencyResolver.persistConfig(this.path);\n    return this._installModules({ dedupe: true });\n  }\n\n  /**\n   * configure an environment to the given components in the .bitmap file, this configuration overrides other, such as\n   * overrides in workspace.jsonc.\n   */\n  async setEnvToComponents(envId: ComponentID, componentIds: ComponentID[]) {\n    const envIdStr = envId.toString();\n    const existsOnWorkspace = await this.hasId(envId);\n    const envIdStrNoVersion = envId.toStringWithoutVersion();\n    await this.unsetEnvFromComponents(componentIds);\n    await Promise.all(\n      componentIds.map(async (componentId) => {\n        await this.addSpecificComponentConfig(componentId, existsOnWorkspace ? envIdStrNoVersion : envIdStr);\n        await this.addSpecificComponentConfig(componentId, EnvsAspect.id, { env: envIdStrNoVersion });\n      })\n    );\n    await this.bitMap.write();\n  }\n\n  /**\n   * remove env configuration from the .bitmap file, so then other configuration, such as \"variants\" will take place\n   */\n  async unsetEnvFromComponents(ids: ComponentID[]): Promise<{ changed: ComponentID[]; unchanged: ComponentID[] }> {\n    const changed: ComponentID[] = [];\n    const unchanged: ComponentID[] = [];\n    await Promise.all(\n      ids.map(async (id) => {\n        const envsAspect = await this.getSpecificComponentConfig(id, EnvsAspect.id);\n        const currentEnv = envsAspect && envsAspect !== REMOVE_EXTENSION_SPECIAL_SIGN ? envsAspect.env : null;\n        if (!currentEnv) {\n          unchanged.push(id);\n          return;\n        }\n        await this.removeSpecificComponentConfig(id, currentEnv, false);\n        await this.removeSpecificComponentConfig(id, EnvsAspect.id, false);\n        changed.push(id);\n      })\n    );\n    await this.bitMap.write();\n    return { changed, unchanged };\n  }\n}\n\n/**\n * this is a super hacky way to do it. problem is that loadAspect is running as onStart hook, where we don't\n * have the CLI fully loaded yet, so we can't get the command from the CLI aspect, we have to retrieve it from\n * process.argv.\n * in general, we don't want every command to try again and again fetching un-built versions. otherwise, every time\n * Bit loads (even bit --help), it'll fetch them and slow down everything.\n * instead, long-running commands and those that need the artifacts from the Version objects, should try to re-fetch.\n */\nfunction shouldReFetchUnBuiltVersion() {\n  const commandsToReFetch = ['build', 'show', 'start', 'tag', 'install', 'link', 'import'];\n  return commandsToReFetch.includes(process.argv[2]);\n}\n\nexport default Workspace;\n"]}