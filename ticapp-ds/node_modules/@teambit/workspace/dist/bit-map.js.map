{"version":3,"sources":["bit-map.ts"],"names":["BitMap","constructor","legacyBitMap","consumer","addComponentConfig","id","aspectId","config","Error","bitMapEntry","getBitmapEntry","ignoreScopeAndVersion","currentConfig","markAsChanged","removeComponentConfig","markWithMinusIfNotExist","REMOVE_EXTENSION_SPECIAL_SIGN","removeEntireConfig","setEntireConfig","write","writeBitMap","ignoreVersion","getComponent","_legacy","renameNewComponent","sourceId","targetId","hasVersion","toString","removeComponent","setComponent"],"mappings":"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","sourcesContent":["import { isEqual } from 'lodash';\nimport { ComponentID } from '@teambit/component-id';\nimport LegacyBitMap from '@teambit/legacy/dist/consumer/bit-map';\nimport { Consumer } from '@teambit/legacy/dist/consumer';\nimport { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';\nimport ComponentMap from '@teambit/legacy/dist/consumer/bit-map/component-map';\nimport { REMOVE_EXTENSION_SPECIAL_SIGN } from '@teambit/legacy/dist/consumer/config';\n/**\n * consider extracting to a new component.\n * (pro: making Workspace aspect smaller. con: it's an implementation details of the workspace)\n */\nexport class BitMap {\n  constructor(private legacyBitMap: LegacyBitMap, private consumer: Consumer) {}\n\n  /**\n   * adds component config to the .bitmap file.\n   * later, upon `bit tag`, the data is saved in the scope.\n   * returns a boolean indicating whether a change has been made.\n   */\n  addComponentConfig(id: ComponentID, aspectId: string, config: Record<string, any> = {}): boolean {\n    if (!aspectId || typeof aspectId !== 'string') throw new Error(`expect aspectId to be string, got ${aspectId}`);\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    const currentConfig = (bitMapEntry.config ||= {})[aspectId];\n    if (isEqual(currentConfig, config)) {\n      return false; // no changes\n    }\n    if (!config) {\n      delete bitMapEntry.config[aspectId];\n    } else {\n      bitMapEntry.config[aspectId] = config;\n    }\n    this.legacyBitMap.markAsChanged();\n\n    return true; // changes have been made\n  }\n\n  removeComponentConfig(id: ComponentID, aspectId: string, markWithMinusIfNotExist: boolean): boolean {\n    if (!aspectId || typeof aspectId !== 'string') throw new Error(`expect aspectId to be string, got ${aspectId}`);\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    const currentConfig = (bitMapEntry.config ||= {})[aspectId];\n    if (currentConfig) {\n      delete bitMapEntry.config[aspectId];\n    } else {\n      if (!markWithMinusIfNotExist) {\n        return false; // no changes\n      }\n      bitMapEntry.config[aspectId] = REMOVE_EXTENSION_SPECIAL_SIGN;\n    }\n\n    this.legacyBitMap.markAsChanged();\n\n    return true; // changes have been made\n  }\n\n  removeEntireConfig(id: ComponentID): boolean {\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    if (!bitMapEntry.config) return false;\n    delete bitMapEntry.config;\n    this.legacyBitMap.markAsChanged();\n    return true;\n  }\n\n  setEntireConfig(id: ComponentID, config: Record<string, any>) {\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    bitMapEntry.config = config;\n    this.legacyBitMap.markAsChanged();\n  }\n\n  /**\n   * write .bitmap object to the filesystem\n   */\n  async write() {\n    await this.consumer.writeBitMap();\n  }\n\n  /**\n   * get the data saved in the .bitmap file for this component-id.\n   */\n  getBitmapEntry(\n    id: ComponentID,\n    { ignoreVersion, ignoreScopeAndVersion }: GetBitMapComponentOptions = {}\n  ): ComponentMap {\n    return this.legacyBitMap.getComponent(id._legacy, { ignoreVersion, ignoreScopeAndVersion });\n  }\n\n  /**\n   * components that were not tagged yet are safe to rename them from the .bitmap file.\n   */\n  renameNewComponent(sourceId: ComponentID, targetId: ComponentID) {\n    const bitMapEntry = this.getBitmapEntry(sourceId);\n    if (bitMapEntry.id.hasVersion()) {\n      throw new Error(`unable to rename tagged or exported component: ${bitMapEntry.id.toString()}`);\n    }\n    this.legacyBitMap.removeComponent(bitMapEntry.id);\n    bitMapEntry.id = targetId._legacy;\n    this.legacyBitMap.setComponent(bitMapEntry.id, bitMapEntry);\n  }\n}\n"]}