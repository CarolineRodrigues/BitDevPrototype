{"version":3,"sources":["component-list-links.ts"],"names":["ComponentListLinks","componentListLinks","verbose","length","chalk","cyan","title","bold","links","map","componentLinks","ComponentLinks","join","bound","VerboseComponentLinks","RegularComponentLinks","id","toString","packagePath","to","target","padding","link","from"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOO,SAASA,kBAAT,CAA4B;AAAEC,EAAAA,kBAAF;AAAsBC,EAAAA,OAAO,GAAG;AAAhC,CAA5B,EAA8F;AACnG,MAAI,CAACD,kBAAD,IAAuB,CAACA,kBAAkB,CAACE,MAA/C,EAAuD;AACrD,WAAOC,iBAAMC,IAAN,CAAW,mCAAX,CAAP;AACD;;AACD,QAAMC,KAAK,GAAGF,iBAAMG,IAAN,CAAWF,IAAX,CAAgB,kBAAhB,CAAd;;AACA,QAAMG,KAAK,GAAGP,kBAAkB,CAACQ,GAAnB,CAAwBC,cAAD,IAAoBC,cAAc,CAAC;AAAED,IAAAA,cAAF;AAAkBR,IAAAA;AAAlB,GAAD,CAAzD,EAAwFU,IAAxF,CAA6F,IAA7F,CAAd;AAEA,SAAQ,GAAEN,KAAM,KAAIE,KAAM,EAA1B;AACD;;AAMD,SAASG,cAAT,CAAwB;AAAED,EAAAA,cAAF;AAAkBR,EAAAA,OAAO,GAAG;AAA5B,CAAxB,EAAkF;AAChF,MAAI,CAACQ,cAAc,CAACG,KAAhB,IAAyBH,cAAc,CAACG,KAAf,CAAqBV,MAArB,GAA8B,CAA3D,EAA8D,OAAO,EAAP;AAC9D,MAAID,OAAJ,EAAa,OAAOY,qBAAqB,CAAC;AAAEJ,IAAAA;AAAF,GAAD,CAA5B;AACb,SAAOK,qBAAqB,CAAC;AAAEL,IAAAA;AAAF,GAAD,CAA5B;AACD;;AAKD,SAASK,qBAAT,CAA+B;AAAEL,EAAAA;AAAF,CAA/B,EAA+E;AAC7E,QAAMM,EAAE,GAAGN,cAAc,CAACM,EAAf,CAAkBC,QAAlB,EAAX;AACA,MAAI,CAACP,cAAc,CAACG,KAAhB,IAAyBH,cAAc,CAACG,KAAf,CAAqBV,MAArB,GAA8B,CAA3D,EAA8D,OAAO,EAAP;AAC9D,QAAMe,WAAW,GAAG,0DAAyBR,cAAc,CAACG,KAAf,CAAqB,CAArB,EAAwBM,EAAjD,CAApB;AACA,SAAO,wBAAQ;AAAEb,IAAAA,KAAK,EAAEU,EAAT;AAAaI,IAAAA,MAAM,EAAEF,WAArB;AAAkCG,IAAAA,OAAO,EAAE;AAA3C,GAAR,CAAP;AACD;;AAKD,SAASP,qBAAT,CAA+B;AAAEJ,EAAAA;AAAF,CAA/B,EAA+E;AAC7E,QAAMM,EAAE,GAAGN,cAAc,CAACM,EAAf,CAAkBC,QAAlB,EAAX;AACA,MAAI,CAACP,cAAc,CAACG,KAAhB,IAAyBH,cAAc,CAACG,KAAf,CAAqBV,MAArB,GAA8B,CAA3D,EAA8D,OAAO,EAAP;;AAC9D,QAAMG,KAAK,GAAGF,iBAAMG,IAAN,CAAWF,IAAX,CAAgBW,EAAhB,CAAd;;AACA,QAAMR,KAAK,GAAGE,cAAc,CAACG,KAAf,CAAqBJ,GAArB,CAA0Ba,IAAD,IAAU,+BAAe;AAAEC,IAAAA,IAAI,EAAED,IAAI,CAACC,IAAb;AAAmBJ,IAAAA,EAAE,EAAEG,IAAI,CAACH;AAA5B,GAAf,CAAnC,EAAqFP,IAArF,CAA0F,IAA1F,CAAd;AACA,SAAQ,GAAEN,KAAM,KAAIE,KAAM,IAA1B;AACD","sourcesContent":["import chalk from 'chalk';\nimport { LinksResult as LegacyLinksResult } from '@teambit/legacy/dist/links/node-modules-linker';\nimport { getPackageNameFromTarget } from './get-package-name-from-target';\nimport { LinkRow, VerboseLinkRow } from './link-row';\n\ntype ComponentListLinksProps = {\n  componentListLinks?: LegacyLinksResult[];\n  verbose: boolean;\n};\n\nexport function ComponentListLinks({ componentListLinks, verbose = false }: ComponentListLinksProps) {\n  if (!componentListLinks || !componentListLinks.length) {\n    return chalk.cyan('No components link were generated');\n  }\n  const title = chalk.bold.cyan('Components links');\n  const links = componentListLinks.map((componentLinks) => ComponentLinks({ componentLinks, verbose })).join('\\n');\n\n  return `${title}\\n${links}`;\n}\n\ntype ComponentLinksProps = {\n  componentLinks: LegacyLinksResult;\n  verbose: boolean;\n};\nfunction ComponentLinks({ componentLinks, verbose = false }: ComponentLinksProps) {\n  if (!componentLinks.bound || componentLinks.bound.length < 1) return '';\n  if (verbose) return VerboseComponentLinks({ componentLinks });\n  return RegularComponentLinks({ componentLinks });\n}\n\ntype RegularComponentLinksProps = {\n  componentLinks: LegacyLinksResult;\n};\nfunction RegularComponentLinks({ componentLinks }: RegularComponentLinksProps) {\n  const id = componentLinks.id.toString();\n  if (!componentLinks.bound || componentLinks.bound.length < 1) return '';\n  const packagePath = getPackageNameFromTarget(componentLinks.bound[0].to);\n  return LinkRow({ title: id, target: packagePath, padding: 50 });\n}\n\ntype VerboseComponentLinksProps = {\n  componentLinks: LegacyLinksResult;\n};\nfunction VerboseComponentLinks({ componentLinks }: VerboseComponentLinksProps) {\n  const id = componentLinks.id.toString();\n  if (!componentLinks.bound || componentLinks.bound.length < 1) return '';\n  const title = chalk.bold.cyan(id);\n  const links = componentLinks.bound.map((link) => VerboseLinkRow({ from: link.from, to: link.to })).join('\\n');\n  return `${title}\\n${links}\\n`;\n}\n"]}