{"version":3,"sources":["workspace.ui-root.ts"],"names":["WorkspaceUIRoot","constructor","workspace","bundler","ssr","launchBrowserOnStart","name","path","configFile","resolveAspects","runtimeName","resolvePattern","pattern","byPattern","getConfig","componentDir","componentId","bitMapOptions","options","relative"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAQO,MAAMA,eAAN,CAAwC;AAC7CC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,SAJC;AAMT;AACJ;AACA;AACYC,EAAAA,OATC,EAUT;AAAA,SANQD,SAMR,GANQA,SAMR;AAAA,SADQC,OACR,GADQA,OACR;AAAA,sDAES,IAFT;AAAA,0DAgBa;AACbC,MAAAA,GAAG,EAAE,KADQ;AAEbC,MAAAA,oBAAoB,EAAE;AAFT,KAhBb;AAAE;;AAII,MAAJC,IAAI,GAAG;AACT,WAAO,KAAKJ,SAAL,CAAeI,IAAtB;AACD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAO,KAAKL,SAAL,CAAeK,IAAtB;AACD;;AAEa,MAAVC,UAAU,GAAG;AACf,WAAO,gBAAP;AACD;;AAOmB,QAAdC,cAAc,CAACC,WAAD,EAAsB;AACxC,WAAO,KAAKR,SAAL,CAAeO,cAAf,CAA8BC,WAA9B,CAAP;AACD,GAlC4C,CAoC7C;;;AACAC,EAAAA,cAAc,CAACC,OAAD,EAAwC;AACpD,WAAO,KAAKV,SAAL,CAAeW,SAAf,CAAyBD,OAAzB,CAAP;AACD;;AAEDE,EAAAA,SAAS,GAAG;AACV,WAAO,EAAP;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,YAAY,CACVC,WADU,EAEVC,aAFU,EAGVC,OAAO,GAAG;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAHA,EAIG;AACb,WAAO,KAAKjB,SAAL,CAAea,YAAf,CAA4BC,WAA5B,EAAyCC,aAAzC,EAAwDC,OAAxD,CAAP;AACD;;AAtD4C","sourcesContent":["import { BundlerMain } from '@teambit/bundler';\nimport { Component, ComponentID } from '@teambit/component';\nimport { UIRoot } from '@teambit/ui';\nimport { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';\nimport { PathOsBased } from '@teambit/legacy/dist/utils/path';\n\nimport { Workspace } from './workspace';\n\nexport class WorkspaceUIRoot implements UIRoot {\n  constructor(\n    /**\n     * workspace extension.\n     */\n    private workspace: Workspace,\n\n    /**\n     * bundler extension\n     */\n    private bundler: BundlerMain\n  ) {}\n\n  priority = true;\n\n  get name() {\n    return this.workspace.name;\n  }\n\n  get path() {\n    return this.workspace.path;\n  }\n\n  get configFile() {\n    return 'workspace.json';\n  }\n\n  buildOptions = {\n    ssr: false,\n    launchBrowserOnStart: true,\n  };\n\n  async resolveAspects(runtimeName: string) {\n    return this.workspace.resolveAspects(runtimeName);\n  }\n\n  // TODO: @gilad please implement with variants.\n  resolvePattern(pattern: string): Promise<Component[]> {\n    return this.workspace.byPattern(pattern);\n  }\n\n  getConfig() {\n    return {};\n  }\n\n  /**\n   * proxy to `workspace.componentDir()`\n   */\n  componentDir(\n    componentId: ComponentID,\n    bitMapOptions?: GetBitMapComponentOptions,\n    options = { relative: false }\n  ): PathOsBased {\n    return this.workspace.componentDir(componentId, bitMapOptions, options);\n  }\n}\n"]}