{"version":3,"sources":["watch.cmd.tsx"],"names":["WatchCommand","constructor","pubsub","logger","watcher","onAll","event","path","console","onStart","onReady","workspace","watchPathsSortByComponent","verbose","clearOutdatedData","chalk","yellow","config","name","format","onChange","filePath","buildResults","duration","length","onAdd","onUnlink","p","onError","err","type","CompilerErrorEvent","TYPE","data","error","registerToEvents","sub","CompilerAspect","id","eventsListener","report","cliArgs","watchCmdOpts","checkTypes","getCheckTypesEnum","undefined","CheckTypes","None","EntireProject","ChangedFile","Error","watchOpts","msgs","preCompile","skipPreCompilation","spawnTSServer","Boolean","watchAll","process","stdout","write"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport moment from 'moment';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport type { Logger } from '@teambit/logger';\nimport type { BitBaseEvent, PubsubMain } from '@teambit/pubsub';\n\n// import IDs and events\nimport { CompilerAspect, CompilerErrorEvent } from '@teambit/compiler';\n\nimport { Watcher, WatchOptions } from './watcher';\nimport { formatCompileResults, formatWatchPathsSortByComponent } from './output-formatter';\nimport { OnComponentEventResult } from '../on-component-events';\nimport { CheckTypes } from './check-types';\n\nexport type WatchCmdOpts = {\n  verbose?: boolean;\n  skipPreCompilation?: boolean;\n  checkTypes?: string | boolean;\n};\n\nexport class WatchCommand implements Command {\n  msgs = {\n    onAll: (event: string, path: string) => this.logger.console(`Event: \"${event}\". Path: ${path}`),\n    onStart: () => {},\n    onReady: (workspace, watchPathsSortByComponent, verbose) => {\n      clearOutdatedData();\n      if (verbose) {\n        this.logger.console(formatWatchPathsSortByComponent(watchPathsSortByComponent));\n      }\n      this.logger.console(\n        chalk.yellow(\n          `Watching for component changes in workspace ${workspace.config.name} (${moment().format('HH:mm:ss')})...\\n`\n        )\n      );\n    },\n    onChange: (filePath: string, buildResults: OnComponentEventResult[], verbose: boolean, duration) => {\n      clearOutdatedData();\n      if (!buildResults.length) {\n        this.logger.console(`The file ${filePath} has been changed, but nothing to compile.\\n\\n`);\n        return;\n      }\n      this.logger.console(`The file ${filePath} has been changed.\\n\\n`);\n      this.logger.console(formatCompileResults(buildResults, verbose));\n      this.logger.console(`Finished. (${duration}ms)`);\n      this.logger.console(chalk.yellow(`Watching for component changes (${moment().format('HH:mm:ss')})...`));\n    },\n    onAdd: (filePath: string, buildResults: OnComponentEventResult[], verbose: boolean, duration) => {\n      clearOutdatedData();\n      this.logger.console(`The file ${filePath} has been added.\\n\\n`);\n      this.logger.console(formatCompileResults(buildResults, verbose));\n      this.logger.console(`Finished. (${duration}ms)`);\n      this.logger.console(chalk.yellow(`Watching for component changes (${moment().format('HH:mm:ss')})...`));\n    },\n    onUnlink: (p) => {\n      this.logger.console(`file ${p} has been removed`);\n    },\n    onError: (err) => {\n      this.logger.console(`Watcher error ${err}`);\n    },\n  };\n\n  name = 'watch';\n  description = 'watch a set of components';\n  alias = '';\n  group = 'development';\n  shortDescription = '';\n  options = [\n    ['v', 'verbose', 'showing npm verbose output for inspection and prints stack trace'],\n    ['', 'skip-pre-compilation', 'skip the compilation step before starting to watch'],\n    [\n      't',\n      'check-types [string]',\n      'EXPERIMENTAL. show errors/warnings for types. options are [file, project] to investigate only changed file or entire project. defaults to project',\n    ],\n  ] as CommandOptions;\n\n  constructor(\n    /**\n     * logger extension.\n     */\n    private pubsub: PubsubMain,\n\n    /**\n     * logger extension.\n     */\n    private logger: Logger,\n\n    /**\n     * watcher extension.\n     */\n    private watcher: Watcher\n  ) {\n    this.registerToEvents();\n  }\n\n  private registerToEvents() {\n    this.pubsub.sub(CompilerAspect.id, this.eventsListener);\n  }\n\n  private eventsListener = (event: BitBaseEvent<any>) => {\n    switch (event.type) {\n      case CompilerErrorEvent.TYPE:\n        this.logger.console(`Watcher error ${event.data.error}, 'error'`);\n        break;\n      default:\n    }\n  };\n\n  async report(cliArgs: [], watchCmdOpts: WatchCmdOpts) {\n    const { verbose, checkTypes } = watchCmdOpts;\n    const getCheckTypesEnum = () => {\n      switch (checkTypes) {\n        case undefined:\n        case false:\n          return CheckTypes.None;\n        case 'project':\n        case true: // project is the default\n          return CheckTypes.EntireProject;\n        case 'file':\n          return CheckTypes.ChangedFile;\n        default:\n          throw new Error(`check-types can be either \"file\" or \"project\". got \"${checkTypes}\"`);\n      }\n    };\n    const watchOpts: WatchOptions = {\n      msgs: this.msgs,\n      verbose,\n      preCompile: !watchCmdOpts.skipPreCompilation,\n      spawnTSServer: Boolean(checkTypes), // if check-types is enabled, it must spawn the tsserver.\n      checkTypes: getCheckTypesEnum(),\n    };\n    await this.watcher.watchAll(watchOpts);\n    return 'watcher terminated';\n  }\n}\n\n/**\n * with console.clear() all history is deleted from the console. this function preserver the history.\n */\nfunction clearOutdatedData() {\n  process.stdout.write('\\x1Bc');\n}\n"]}