/// <reference types="node" />
import { PubsubMain } from '@teambit/pubsub';
import { ComponentID } from '@teambit/component';
import { BitId } from '@teambit/legacy-bit-id';
import { Consumer } from '@teambit/legacy/dist/consumer';
import { ChildProcess } from 'child_process';
import { PathLinux } from '@teambit/legacy/dist/utils/path';
import { CompilationInitiator } from '@teambit/compiler';
import { Workspace } from '../workspace';
import { CheckTypes } from './check-types';
export declare type WatcherProcessData = {
    watchProcess: ChildProcess;
    compilerId: BitId;
    componentIds: BitId[];
};
export declare type EventMessages = {
    onAll: Function;
    onStart: Function;
    onReady: Function;
    onChange: Function;
    onAdd: Function;
    onUnlink: Function;
    onError: Function;
};
export declare type WatchOptions = {
    msgs?: EventMessages;
    initiator?: CompilationInitiator;
    verbose?: boolean;
    spawnTSServer?: boolean;
    checkTypes?: CheckTypes;
    preCompile?: boolean;
};
export declare class Watcher {
    private workspace;
    private pubsub;
    private trackDirs;
    private verbose;
    private multipleWatchers;
    private fsWatcher;
    constructor(workspace: Workspace, pubsub: PubsubMain, trackDirs?: {
        [dir: PathLinux]: ComponentID;
    }, verbose?: boolean, multipleWatchers?: WatcherProcessData[]);
    get consumer(): Consumer;
    watchAll(opts: WatchOptions): Promise<unknown>;
    private handleChange;
    /**
     * if .bitmap changed, it's possible that a new component has been added. trigger onComponentAdd.
     */
    private handleBitmapChanges;
    private executeWatchOperationsOnRemove;
    private executeWatchOperationsOnComponent;
    private creatOnComponentRemovedEvent;
    private creatOnComponentChangeEvent;
    private creatOnComponentAddEvent;
    private completeWatch;
    private isComponentWatchedExternally;
    /**
     * if a file was added/remove, once the component is loaded, it changes .bitmap, and then the
     * entire cache is invalidated and the consumer is reloaded.
     * when a file just changed, no need to reload the consumer, it is enough to just delete the
     * component from the cache (both, workspace and consumer)
     */
    private getComponentIdAndClearItsCache;
    private findTrackDirByFilePathRecursively;
    private createWatcher;
    setTrackDirs(): Promise<void>;
    private getPathsToWatch;
}
