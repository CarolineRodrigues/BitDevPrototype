import { Command, CommandOptions } from '@teambit/cli';
import type { Logger } from '@teambit/logger';
import type { PubsubMain } from '@teambit/pubsub';
import { Watcher } from './watcher';
import { OnComponentEventResult } from '../on-component-events';
export declare type WatchCmdOpts = {
    verbose?: boolean;
    skipPreCompilation?: boolean;
    checkTypes?: string | boolean;
};
export declare class WatchCommand implements Command {
    /**
     * logger extension.
     */
    private pubsub;
    /**
     * logger extension.
     */
    private logger;
    /**
     * watcher extension.
     */
    private watcher;
    msgs: {
        onAll: (event: string, path: string) => void;
        onStart: () => void;
        onReady: (workspace: any, watchPathsSortByComponent: any, verbose: any) => void;
        onChange: (filePath: string, buildResults: OnComponentEventResult[], verbose: boolean, duration: any) => void;
        onAdd: (filePath: string, buildResults: OnComponentEventResult[], verbose: boolean, duration: any) => void;
        onUnlink: (p: any) => void;
        onError: (err: any) => void;
    };
    name: string;
    description: string;
    alias: string;
    group: string;
    shortDescription: string;
    options: CommandOptions;
    constructor(
    /**
     * logger extension.
     */
    pubsub: PubsubMain, 
    /**
     * logger extension.
     */
    logger: Logger, 
    /**
     * watcher extension.
     */
    watcher: Watcher);
    private registerToEvents;
    private eventsListener;
    report(cliArgs: [], watchCmdOpts: WatchCmdOpts): Promise<string>;
}
