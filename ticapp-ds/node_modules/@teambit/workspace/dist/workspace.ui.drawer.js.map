{"version":3,"sources":["workspace.ui.drawer.tsx"],"names":["workspaceDrawer","treeWidgets","filtersSlot","drawerWidgetSlot","ComponentsDrawer","order","id","name","plugins","tree","widgets","customRenderer","treeNodeSlot","TreeNode","props","children","node","payload","ScopePayload","filters","drawerWidgets","emptyMessage","useComponents","workspace","WorkspaceContext","loading","components"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAQA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AASO,MAAMA,eAAe,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,WAAf;AAA4BC,EAAAA;AAA5B,CAAD,KAC7B,KAAIC,+BAAJ,EAAqB;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,EAAE,EAAE,6BAFe;AAGnBC,EAAAA,IAAI,EAAE,YAHa;AAInBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AACJC,MAAAA,OAAO,EAAET,WADL;AAEJU,MAAAA,cAAc,EAAGC,YAAD,IACd,SAASC,QAAT,CAAkBC,KAAlB,EAAqD;AACnD,cAAMC,QAAQ,GAAGD,KAAK,CAACE,IAAN,CAAWD,QAA5B;AAEA,YAAI,CAACA,QAAL,EAAe,oBAAO,+BAAC,+BAAD,+BAAmBD,KAAnB;AAA0B,UAAA,YAAY,EAAEF;AAAxC,WAAP,CAHoC,CAG6B;;AAEhF,YAAIE,KAAK,CAACE,IAAN,CAAWC,OAAX,YAA8BC,8BAAlC,EAAgD,oBAAO,+BAAC,+BAAD,EAAmBJ,KAAnB,CAAP;AAEhD,4BAAO,+BAAC,mCAAD,EAAuBA,KAAvB,CAAP;AACD;AAXC,KADC;AAcPK,IAAAA,OAAO,EAAEjB,WAdF;AAePkB,IAAAA,aAAa,EAAEjB;AAfR,GAJU;AAqBnBkB,EAAAA,YAAY,EAAE,oBArBK;AAsBnBC,EAAAA,aAAa,EAAE,MAAM;AACnB,UAAMC,SAAS,GAAG,yBAAWC,oCAAX,CAAlB;AACA,WAAO;AACLC,MAAAA,OAAO,EAAE,CAACF,SADL;AAELG,MAAAA,UAAU,EAAEH,SAAS,CAACG,UAAV,IAAwB;AAF/B,KAAP;AAID;AA5BkB,CAArB,CADK","sourcesContent":["import React, { useContext } from 'react';\nimport { ComponentsDrawer, ComponentFiltersSlot, DrawerWidgetSlot } from '@teambit/component.ui.component-drawer';\nimport {\n  ComponentView,\n  NamespaceTreeNode,\n  PayloadType,\n  ScopePayload,\n  ScopeTreeNode,\n} from '@teambit/ui-foundation.ui.side-bar';\nimport { TreeNodeProps } from '@teambit/design.ui.tree';\nimport { WorkspaceContext } from './ui/workspace/workspace-context';\nimport { SidebarWidgetSlot } from './workspace.ui.runtime';\n\nexport type WorkspaceDrawerProps = {\n  treeWidgets: SidebarWidgetSlot;\n  filtersSlot: ComponentFiltersSlot;\n  drawerWidgetSlot: DrawerWidgetSlot;\n};\n\nexport const workspaceDrawer = ({ treeWidgets, filtersSlot, drawerWidgetSlot }: WorkspaceDrawerProps) =>\n  new ComponentsDrawer({\n    order: 0,\n    id: 'workspace-components-drawer',\n    name: 'COMPONENTS',\n    plugins: {\n      tree: {\n        widgets: treeWidgets,\n        customRenderer: (treeNodeSlot) =>\n          function TreeNode(props: TreeNodeProps<PayloadType>) {\n            const children = props.node.children;\n\n            if (!children) return <ComponentView {...props} treeNodeSlot={treeNodeSlot} />; // non collapse\n\n            if (props.node.payload instanceof ScopePayload) return <ScopeTreeNode {...props} />;\n\n            return <NamespaceTreeNode {...props} />;\n          },\n      },\n      filters: filtersSlot,\n      drawerWidgets: drawerWidgetSlot,\n    },\n    emptyMessage: 'Workspace is empty',\n    useComponents: () => {\n      const workspace = useContext(WorkspaceContext);\n      return {\n        loading: !workspace,\n        components: workspace.components || [],\n      };\n    },\n  });\n"]}