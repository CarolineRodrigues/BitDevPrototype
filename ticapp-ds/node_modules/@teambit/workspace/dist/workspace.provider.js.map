{"version":3,"sources":["workspace.provider.ts"],"names":["provideWorkspace","pubsub","cli","scope","component","isolator","dependencyResolver","variants","loggerExt","graphql","ui","bundler","aspectLoader","envs","community","config","onComponentLoadSlot","onComponentChangeSlot","onComponentAddSlot","onComponentRemoveSlot","onPreWatchSlot","harmony","bitConfig","get","consumer","getConsumer","cwd","undefined","logger","createLogger","EXT_NAME","workspace","Workspace","getWorkspacePolicyFromPackageJson","packageJson","packageJsonObject","policyFromPackageJson","registerRootPolicy","ManyComponentsWriter","registerExternalInstaller","install","installOpts","dedupe","updateExisting","import","onCacheClear","push","clearCache","isLegacy","LegacyComponentLoader","registerOnComponentLoadSubscriber","legacyComponent","id","resolveComponentId","newComponent","state","_consumer","ConsumerComponent","registerOnComponentConfigLoading","componentId","componentFromScope","extensions","componentExtensions","defaultScope","componentDefaultScope","extensionsWithLegacyIdsP","map","extension","legacyEntry","clone","extensionId","compId","_legacy","newExtensionId","extensionsWithLegacyIds","Promise","all","ExtensionDataList","fromArray","workspaceSchema","registerUiRoot","WorkspaceUIRoot","register","capsuleCmd","CapsuleCmd","commands","CapsuleListCmd","CapsuleCreateCmd","CapsuleDeleteCmd","InstallCmd","UpdateCmd","UninstallCmd","EjectConfCmd","watcher","Watcher","unregister","WatchCommand","LinkCommand","getDocsDomain","PatternCommand","registerHost","registerOnStart","loadAspects","getNotLoadedConfiguredExtensions","envsCommand","getCommand","EnvsSetCmd","EnvsUnsetCmd","EnvsReplaceCmd","path"],"mappings":";;;;;;;;;;;;;AAcA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA8Be,eAAeA,gBAAf,CACb,CACEC,MADF,EAEEC,GAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,QALF,EAMEC,kBANF,EAOEC,QAPF,EAQEC,SARF,EASEC,OATF,EAUEC,EAVF,EAWEC,OAXF,EAYEC,YAZF,EAaEC,IAbF,EAcEC,SAdF,CADa,EAiBbC,MAjBa,EAkBb,CAACC,mBAAD,EAAsBC,qBAAtB,EAA6CC,kBAA7C,EAAiEC,qBAAjE,EAAwFC,cAAxF,CAlBa,EAyBbC,OAzBa,EA0Bb;AAAA;;AACA,QAAMC,SAAc,GAAGD,OAAO,CAACN,MAAR,CAAeQ,GAAf,CAAmB,qBAAnB,CAAvB;AACA,QAAMC,QAAQ,GAAG,MAAMC,WAAW,CAACH,SAAS,CAACI,GAAX,CAAlC;AACA,MAAI,CAACF,QAAL,EAAe,OAAOG,SAAP,CAHf,CAIA;;AACA,QAAMC,MAAM,GAAGpB,SAAS,CAACqB,YAAV,CAAuBC,qBAAvB,CAAf;AACA,QAAMC,SAAS,GAAG,KAAIC,sBAAJ,EAChB/B,MADgB,EAEhBc,MAFgB,EAGhBS,QAHgB,EAIhBrB,KAJgB,EAKhBC,SALgB,EAMhBC,QANgB,EAOhBC,kBAPgB,EAQhBC,QARgB,EAShBK,YATgB,EAUhBgB,MAVgB,EAWhBD,SAXgB,EAYhBN,OAZgB,EAahBL,mBAbgB,EAchBC,qBAdgB,EAehBJ,IAfgB,EAgBhBK,kBAhBgB,EAiBhBC,qBAjBgB,EAkBhBC,cAlBgB,EAmBhBX,OAnBgB,CAAlB;;AAsBA,QAAMwB,iCAAiC,GAAG,MAAM;AAAA;;AAC9C,UAAMC,WAAW,GAAG,0BAAAH,SAAS,CAACP,QAAV,CAAmBU,WAAnB,gFAAgCC,iBAAhC,KAAqD,EAAzE;AACA,UAAMC,qBAAqB,GAAG9B,kBAAkB,CAAC2B,iCAAnB,CAAqDC,WAArD,CAA9B;AACA,WAAOE,qBAAP;AACD,GAJD;;AAMA9B,EAAAA,kBAAkB,CAAC+B,kBAAnB,CAAsCJ,iCAAiC,EAAvE;;AAEAK,kCAAqBC,yBAArB,CAA+C;AAC7CC,IAAAA,OAAO,EAAE,YAAY;AACnB;AACA,YAAMC,WAAoC,GAAG;AAC3CC,QAAAA,MAAM,EAAE,IADmC;AAE3CC,QAAAA,cAAc,EAAE,KAF2B;AAG3CC,QAAAA,MAAM,EAAE;AAHmC,OAA7C;AAKA,aAAOb,SAAS,CAACS,OAAV,CAAkBb,SAAlB,EAA6Bc,WAA7B,CAAP;AACD;AAT4C,GAA/C;;AAYAjB,EAAAA,QAAQ,CAACqB,YAAT,CAAsBC,IAAtB,CAA2B,MAAMf,SAAS,CAACgB,UAAV,EAAjC;;AAEA,MAAI,CAAChB,SAAS,CAACiB,QAAf,EAAyB;AACvBC,+BAAsBC,iCAAtB,CAAwD,MAAOC,eAAP,IAA8C;AACpG,YAAMC,EAAE,GAAG,MAAMrB,SAAS,CAACsB,kBAAV,CAA6BF,eAAe,CAACC,EAA7C,CAAjB;AACA,YAAME,YAAY,GAAG,MAAMvB,SAAS,CAACR,GAAV,CAAc6B,EAAd,EAAkB,KAAlB,EAAyBD,eAAzB,CAA3B;AACA,aAAOG,YAAY,CAACC,KAAb,CAAmBC,SAA1B;AACD,KAJD;AAKD;;AAEDC,uBAAkBC,gCAAlB,CAAmD5B,qBAAnD,EAA6D,MAAOsB,EAAP,IAAc;AACzE,UAAMO,WAAW,GAAG,MAAM5B,SAAS,CAACsB,kBAAV,CAA6BD,EAA7B,CAA1B,CADyE,CAEzE;AACA;AACA;;AACA,UAAMQ,kBAAkB,GAAG,MAAM7B,SAAS,CAAC5B,KAAV,CAAgBoB,GAAhB,CAAoBoC,WAApB,CAAjC;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAiB,MAAM9B,SAAS,CAAC+B,mBAAV,CAA8BH,WAA9B,EAA2CC,kBAA3C,CAA7B;AACA,UAAMG,YAAY,GAAG,MAAMhC,SAAS,CAACiC,qBAAV,CAAgCL,WAAhC,CAA3B;AAEA,UAAMM,wBAAwB,GAAGJ,UAAU,CAACK,GAAX,CAAe,MAAOC,SAAP,IAAqB;AACnE,YAAMC,WAAW,GAAGD,SAAS,CAACE,KAAV,EAApB;;AACA,UAAID,WAAW,CAACE,WAAhB,EAA6B;AAC3B,cAAMC,MAAM,GAAG,MAAMxC,SAAS,CAACsB,kBAAV,CAA6Be,WAAW,CAACE,WAAzC,CAArB;AACAF,QAAAA,WAAW,CAACE,WAAZ,GAA0BC,MAAM,CAACC,OAAjC;AACAJ,QAAAA,WAAW,CAACK,cAAZ,GAA6BF,MAA7B;AACD;;AAED,aAAOH,WAAP;AACD,KATgC,CAAjC;AAUA,UAAMM,uBAAuB,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYX,wBAAZ,CAAtC;AAEA,WAAO;AACLF,MAAAA,YADK;AAELF,MAAAA,UAAU,EAAEgB,mCAAkBC,SAAlB,CAA4BJ,uBAA5B;AAFP,KAAP;AAID,GAzBD;AA2BA;AACF;AACA;;;AACE,+CAA2B,MAAOtB,EAAP,IAAqB;AAC9C,UAAMO,WAAW,GAAG,MAAM5B,SAAS,CAACsB,kBAAV,CAA6BD,EAA7B,CAA1B;AACA,UAAMW,YAAY,GAAG,MAAMhC,SAAS,CAACiC,qBAAV,CAAgCL,WAAhC,CAA3B;AACA,WAAOI,YAAP;AACD,GAJD;AAMA,QAAMgB,eAAe,GAAG,2BAAmBhD,SAAnB,EAA8BtB,OAA9B,CAAxB;AACAC,EAAAA,EAAE,CAACsE,cAAH,CAAkB,KAAIC,6BAAJ,EAAoBlD,SAApB,EAA+BpB,OAA/B,CAAlB;AACAF,EAAAA,OAAO,CAACyE,QAAR,CAAiBH,eAAjB;AACA,QAAMI,UAAU,GAAG,KAAIC,qBAAJ,GAAnB;AACAD,EAAAA,UAAU,CAACE,QAAX,GAAsB,CACpB,KAAIC,yBAAJ,EAAmBjF,QAAnB,EAA6B0B,SAA7B,CADoB,EAEpB,KAAIwD,2BAAJ,EAAqBxD,SAArB,EAAgC1B,QAAhC,CAFoB,EAGpB,KAAImF,2BAAJ,EAAqBnF,QAArB,EAA+B0B,SAA/B,CAHoB,CAAtB;AAKA,QAAMsD,QAAqB,GAAG,CAC5B,KAAII,kBAAJ,EAAe1D,SAAf,EAA0BH,MAA1B,CAD4B,EAE5B,KAAI8D,iBAAJ,EAAc3D,SAAd,CAF4B,EAG5B,KAAI4D,oBAAJ,EAAiB5D,SAAjB,CAH4B,EAI5B,KAAI6D,oBAAJ,EAAiB7D,SAAjB,CAJ4B,EAK5BoD,UAL4B,CAA9B;AAOA,QAAMU,OAAO,GAAG,KAAIC,kBAAJ,EAAY/D,SAAZ,EAAuB9B,MAAvB,CAAhB;;AACA,MAAI8B,SAAS,IAAI,CAACA,SAAS,CAACP,QAAV,CAAmBwB,QAArC,EAA+C;AAC7C9C,IAAAA,GAAG,CAAC6F,UAAJ,CAAe,OAAf;AACAV,IAAAA,QAAQ,CAACvC,IAAT,CAAc,KAAIkD,qBAAJ,EAAiB/F,MAAjB,EAAyB2B,MAAzB,EAAiCiE,OAAjC,CAAd;AACA3F,IAAAA,GAAG,CAAC6F,UAAJ,CAAe,MAAf;AACAV,IAAAA,QAAQ,CAACvC,IAAT,CAAc,KAAImD,mBAAJ,EAAgBlE,SAAhB,EAA2BH,MAA3B,EAAmCd,SAAS,CAACoF,aAAV,EAAnC,CAAd;AACD;;AACDb,EAAAA,QAAQ,CAACvC,IAAT,CAAc,KAAIqD,yBAAJ,EAAmBpE,SAAnB,CAAd;AACA7B,EAAAA,GAAG,CAACgF,QAAJ,CAAa,GAAGG,QAAhB;AACAjF,EAAAA,SAAS,CAACgG,YAAV,CAAuBrE,SAAvB;AAEA7B,EAAAA,GAAG,CAACmG,eAAJ,CAAoB,YAAY;AAC9B,UAAMtE,SAAS,CAACuE,WAAV,CAAsB1F,YAAY,CAAC2F,gCAAb,EAAtB,CAAN;AACD,GAFD,EAzHA,CA6HA;;AACA,QAAMC,WAAW,GAAGtG,GAAG,CAACuG,UAAJ,CAAe,MAAf,CAApB;AACAD,EAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,qCAAAA,WAAW,CAAEnB,QAAb,gFAAuBvC,IAAvB,CAA4B,KAAI4D,qBAAJ,EAAe3E,SAAf,CAA5B,EA/HA,CA+HwD;;AACxDyE,EAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,sCAAAA,WAAW,CAAEnB,QAAb,kFAAuBvC,IAAvB,CAA4B,KAAI6D,yBAAJ,EAAiB5E,SAAjB,CAA5B,EAhIA,CAgI0D;;AAC1DyE,EAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,sCAAAA,WAAW,CAAEnB,QAAb,kFAAuBvC,IAAvB,CAA4B,KAAI8D,6BAAJ,EAAmB7E,SAAnB,CAA5B,EAjIA,CAiI4D;;AAE5D,SAAOA,SAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeN,WAAf,CAA2BoF,IAA3B,EAAyE;AACvE,SAAO,qCAAoBA,IAApB,CAAP;AACD","sourcesContent":["import { PubsubMain } from '@teambit/pubsub';\nimport type { AspectLoaderMain } from '@teambit/aspect-loader';\nimport { BundlerMain } from '@teambit/bundler';\nimport { CLIMain, CommandList } from '@teambit/cli';\nimport type { ComponentMain, Component } from '@teambit/component';\nimport { DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { EnvsMain } from '@teambit/envs';\nimport { GraphqlMain } from '@teambit/graphql';\nimport { Harmony, SlotRegistry } from '@teambit/harmony';\nimport { IsolatorMain } from '@teambit/isolator';\nimport { LoggerMain } from '@teambit/logger';\nimport type { ScopeMain } from '@teambit/scope';\nimport { UiMain } from '@teambit/ui';\nimport type { VariantsMain } from '@teambit/variants';\nimport { Consumer, loadConsumerIfExist } from '@teambit/legacy/dist/consumer';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport { registerDefaultScopeGetter } from '@teambit/legacy/dist/api/consumer';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport ManyComponentsWriter from '@teambit/legacy/dist/consumer/component-ops/many-components-writer';\nimport LegacyComponentLoader from '@teambit/legacy/dist/consumer/component/component-loader';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { CommunityMain } from '@teambit/community';\nimport { EXT_NAME } from './constants';\nimport EjectConfCmd from './eject-conf.cmd';\nimport InstallCmd from './install.cmd';\nimport UninstallCmd from './uninstall.cmd';\nimport UpdateCmd from './update.cmd';\nimport { OnComponentLoad, OnComponentAdd, OnComponentChange, OnComponentRemove } from './on-component-events';\nimport { WorkspaceExtConfig } from './types';\nimport { WatchCommand } from './watch/watch.cmd';\nimport { LinkCommand } from './link';\nimport { Watcher, WatchOptions } from './watch/watcher';\nimport { Workspace, WorkspaceInstallOptions } from './workspace';\nimport getWorkspaceSchema from './workspace.graphql';\nimport { WorkspaceUIRoot } from './workspace.ui-root';\nimport { CapsuleCmd, CapsuleCreateCmd, CapsuleDeleteCmd, CapsuleListCmd } from './capsule.cmd';\nimport { EnvsSetCmd } from './envs-subcommands/envs-set.cmd';\nimport { EnvsUnsetCmd } from './envs-subcommands/envs-unset.cmd';\nimport { PatternCommand } from './pattern.cmd';\nimport { EnvsReplaceCmd } from './envs-subcommands/envs-replace.cmd';\n\nexport type WorkspaceDeps = [\n  PubsubMain,\n  CLIMain,\n  ScopeMain,\n  ComponentMain,\n  IsolatorMain,\n  DependencyResolverMain,\n  VariantsMain,\n  LoggerMain,\n  GraphqlMain,\n  UiMain,\n  BundlerMain,\n  AspectLoaderMain,\n  EnvsMain,\n  CommunityMain\n];\n\nexport type OnComponentLoadSlot = SlotRegistry<OnComponentLoad>;\n\nexport type OnComponentChangeSlot = SlotRegistry<OnComponentChange>;\n\nexport type OnComponentAddSlot = SlotRegistry<OnComponentAdd>;\n\nexport type OnComponentRemoveSlot = SlotRegistry<OnComponentRemove>;\n\nexport type OnPreWatch = (components: Component[], watchOpts: WatchOptions) => Promise<void>;\nexport type OnPreWatchSlot = SlotRegistry<OnPreWatch>;\n\nexport default async function provideWorkspace(\n  [\n    pubsub,\n    cli,\n    scope,\n    component,\n    isolator,\n    dependencyResolver,\n    variants,\n    loggerExt,\n    graphql,\n    ui,\n    bundler,\n    aspectLoader,\n    envs,\n    community,\n  ]: WorkspaceDeps,\n  config: WorkspaceExtConfig,\n  [onComponentLoadSlot, onComponentChangeSlot, onComponentAddSlot, onComponentRemoveSlot, onPreWatchSlot]: [\n    OnComponentLoadSlot,\n    OnComponentChangeSlot,\n    OnComponentAddSlot,\n    OnComponentRemoveSlot,\n    OnPreWatchSlot\n  ],\n  harmony: Harmony\n) {\n  const bitConfig: any = harmony.config.get('teambit.harmony/bit');\n  const consumer = await getConsumer(bitConfig.cwd);\n  if (!consumer) return undefined;\n  // TODO: get the 'workspace' name in a better way\n  const logger = loggerExt.createLogger(EXT_NAME);\n  const workspace = new Workspace(\n    pubsub,\n    config,\n    consumer,\n    scope,\n    component,\n    isolator,\n    dependencyResolver,\n    variants,\n    aspectLoader,\n    logger,\n    undefined,\n    harmony,\n    onComponentLoadSlot,\n    onComponentChangeSlot,\n    envs,\n    onComponentAddSlot,\n    onComponentRemoveSlot,\n    onPreWatchSlot,\n    graphql\n  );\n\n  const getWorkspacePolicyFromPackageJson = () => {\n    const packageJson = workspace.consumer.packageJson?.packageJsonObject || {};\n    const policyFromPackageJson = dependencyResolver.getWorkspacePolicyFromPackageJson(packageJson);\n    return policyFromPackageJson;\n  };\n\n  dependencyResolver.registerRootPolicy(getWorkspacePolicyFromPackageJson());\n\n  ManyComponentsWriter.registerExternalInstaller({\n    install: async () => {\n      // TODO: think how we should pass this options\n      const installOpts: WorkspaceInstallOptions = {\n        dedupe: true,\n        updateExisting: false,\n        import: false,\n      };\n      return workspace.install(undefined, installOpts);\n    },\n  });\n\n  consumer.onCacheClear.push(() => workspace.clearCache());\n\n  if (!workspace.isLegacy) {\n    LegacyComponentLoader.registerOnComponentLoadSubscriber(async (legacyComponent: ConsumerComponent) => {\n      const id = await workspace.resolveComponentId(legacyComponent.id);\n      const newComponent = await workspace.get(id, false, legacyComponent);\n      return newComponent.state._consumer;\n    });\n  }\n\n  ConsumerComponent.registerOnComponentConfigLoading(EXT_NAME, async (id) => {\n    const componentId = await workspace.resolveComponentId(id);\n    // We call here directly workspace.scope.get instead of workspace.get because part of the workspace get is loading consumer component\n    // which in turn run this event, which will make an infinite loop\n    // This component from scope here are only used for merging the extensions with the workspace components\n    const componentFromScope = await workspace.scope.get(componentId);\n    const { extensions } = await workspace.componentExtensions(componentId, componentFromScope);\n    const defaultScope = await workspace.componentDefaultScope(componentId);\n\n    const extensionsWithLegacyIdsP = extensions.map(async (extension) => {\n      const legacyEntry = extension.clone();\n      if (legacyEntry.extensionId) {\n        const compId = await workspace.resolveComponentId(legacyEntry.extensionId);\n        legacyEntry.extensionId = compId._legacy;\n        legacyEntry.newExtensionId = compId;\n      }\n\n      return legacyEntry;\n    });\n    const extensionsWithLegacyIds = await Promise.all(extensionsWithLegacyIdsP);\n\n    return {\n      defaultScope,\n      extensions: ExtensionDataList.fromArray(extensionsWithLegacyIds),\n    };\n  });\n\n  /**\n   * Add default scope from harmony during export.\n   */\n  registerDefaultScopeGetter(async (id: BitId) => {\n    const componentId = await workspace.resolveComponentId(id);\n    const defaultScope = await workspace.componentDefaultScope(componentId);\n    return defaultScope;\n  });\n\n  const workspaceSchema = getWorkspaceSchema(workspace, graphql);\n  ui.registerUiRoot(new WorkspaceUIRoot(workspace, bundler));\n  graphql.register(workspaceSchema);\n  const capsuleCmd = new CapsuleCmd();\n  capsuleCmd.commands = [\n    new CapsuleListCmd(isolator, workspace),\n    new CapsuleCreateCmd(workspace, isolator),\n    new CapsuleDeleteCmd(isolator, workspace),\n  ];\n  const commands: CommandList = [\n    new InstallCmd(workspace, logger),\n    new UpdateCmd(workspace),\n    new UninstallCmd(workspace),\n    new EjectConfCmd(workspace),\n    capsuleCmd,\n  ];\n  const watcher = new Watcher(workspace, pubsub);\n  if (workspace && !workspace.consumer.isLegacy) {\n    cli.unregister('watch');\n    commands.push(new WatchCommand(pubsub, logger, watcher));\n    cli.unregister('link');\n    commands.push(new LinkCommand(workspace, logger, community.getDocsDomain()));\n  }\n  commands.push(new PatternCommand(workspace));\n  cli.register(...commands);\n  component.registerHost(workspace);\n\n  cli.registerOnStart(async () => {\n    await workspace.loadAspects(aspectLoader.getNotLoadedConfiguredExtensions());\n  });\n\n  // add sub-commands \"set\" and \"unset\" to envs command.\n  const envsCommand = cli.getCommand('envs');\n  envsCommand?.commands?.push(new EnvsSetCmd(workspace)); // bit envs set\n  envsCommand?.commands?.push(new EnvsUnsetCmd(workspace)); // bit envs unset\n  envsCommand?.commands?.push(new EnvsReplaceCmd(workspace)); // bit envs replace\n\n  return workspace;\n}\n\n/**\n * don't use loadConsumer() here, which throws ConsumerNotFound because some commands don't require\n * the consumer to be available. such as, `bit init` or `bit list --remote`.\n * most of the commands do need the consumer. the legacy commands that need the consumer throw an\n * error when is missing. in the new/Harmony commands, such as `bis compile`, the workspace object\n * is passed to the provider, so before using it, make sure it exists.\n * keep in mind that you can't verify it in the provider itself, because the provider is running\n * always for all commands before anything else is happening.\n */\nasync function getConsumer(path?: string): Promise<Consumer | undefined> {\n  return loadConsumerIfExist(path);\n}\n"]}