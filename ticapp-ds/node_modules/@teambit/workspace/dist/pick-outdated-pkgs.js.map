{"version":3,"sources":["pick-outdated-pkgs.ts"],"names":["pickOutdatedPkgs","outdatedPkgs","updateDependencies","choices","makeOutdatedPkgChoices","footer","indicator","state","choice","enabled","message","chalk","cyan","green","red","name","pointer","styles","dark","white","em","bgBlack","whiteBright","success","type","validate","value","length","j","down","k","up","filter","updateDependency","DEP_TYPE_PRIORITY","dependencies","devDependencies","peerDependencies","sort","pkg1","pkg2","targetField","localeCompare","renderedTable","alignColumns","outdatedPkgsRows","groupedChoices","forEach","outdatedPkg","index","context","renderContext","push","Object","entries","map","subChoices","variantPattern","componentId","TARGET_FIELD_TO_DEP_TYPE","change","diff","currentRange","latestRange","colorizeChange","latest","grey","rows","border","columnDefault","paddingLeft","paddingRight","columns","alignment","drawHorizontalLine","split"],"mappings":"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","sourcesContent":["import colorizeSemverDiff from '@pnpm/colorize-semver-diff';\nimport semverDiff from '@pnpm/semver-diff';\nimport { OutdatedPkg } from '@teambit/dependency-resolver';\nimport { getBorderCharacters, table } from 'table';\nimport chalk from 'chalk';\nimport { prompt } from 'enquirer';\n\n/**\n * Lets the user pick the packages that should be updated.\n */\nexport async function pickOutdatedPkgs(outdatedPkgs: OutdatedPkg[]): Promise<OutdatedPkg[]> {\n  const { updateDependencies } = (await prompt({\n    choices: makeOutdatedPkgChoices(outdatedPkgs),\n    footer: '\\nEnter to start updating. Ctrl-c to cancel.',\n    indicator: (state: any, choice: any) => ` ${choice.enabled ? '●' : '○'}`,\n    message:\n      'Choose which packages to update ' +\n      `(Press ${chalk.cyan('<space>')} to select, ` +\n      `${chalk.cyan('<a>')} to toggle all, ` +\n      `${chalk.cyan('<i>')} to invert selection)\n${chalk.green('Green')} - indicates a semantically safe update\n${chalk.red('Red')} - indicates a semantically breaking change`,\n    name: 'updateDependencies',\n    pointer: '❯',\n    styles: {\n      dark: chalk.white,\n      em: chalk.bgBlack.whiteBright,\n      success: chalk.white,\n    },\n    type: 'multiselect',\n    validate(value: string[]) {\n      if (value.length === 0) {\n        return 'You must choose at least one package.';\n      }\n      return true;\n    },\n    j() {\n      return this.down();\n    },\n    k() {\n      return this.up();\n    },\n  } as any)) as { updateDependencies: Array<string | OutdatedPkg> };\n  return updateDependencies.filter((updateDependency) => typeof updateDependency !== 'string') as OutdatedPkg[];\n}\n\nconst DEP_TYPE_PRIORITY = {\n  dependencies: 0,\n  devDependencies: 1,\n  peerDependencies: 2,\n};\n\n/**\n * Groups the outdated packages and makes choices for enquirer's prompt.\n */\nexport function makeOutdatedPkgChoices(outdatedPkgs: OutdatedPkg[]) {\n  outdatedPkgs.sort((pkg1, pkg2) => {\n    if (pkg1.targetField === pkg2.targetField) return pkg1.name.localeCompare(pkg2.name);\n    return DEP_TYPE_PRIORITY[pkg1.targetField] - DEP_TYPE_PRIORITY[pkg2.targetField];\n  });\n  const renderedTable = alignColumns(outdatedPkgsRows(outdatedPkgs));\n  const groupedChoices = {};\n  outdatedPkgs.forEach((outdatedPkg, index) => {\n    const context = renderContext(outdatedPkg);\n    if (!groupedChoices[context]) {\n      groupedChoices[context] = [];\n    }\n    groupedChoices[context].push({\n      message: renderedTable[index],\n      name: outdatedPkg,\n    });\n  });\n  const choices = Object.entries(groupedChoices).map(([context, subChoices]) => ({\n    message: chalk.cyan(context),\n    choices: subChoices,\n  }));\n  return choices;\n}\n\nfunction renderContext(outdatedPkg: OutdatedPkg) {\n  if (outdatedPkg.variantPattern) {\n    return `${outdatedPkg.variantPattern} (variant)`;\n  }\n  if (outdatedPkg.componentId) {\n    return `${outdatedPkg.componentId} (component)`;\n  }\n  return 'Root policies';\n}\n\nconst TARGET_FIELD_TO_DEP_TYPE = {\n  devDependencies: 'dev',\n  dependencies: 'runtime',\n  peerDependencies: 'peer',\n};\n\nfunction outdatedPkgsRows(outdatedPkgs: OutdatedPkg[]) {\n  return outdatedPkgs.map((outdatedPkg) => {\n    const { change, diff } = semverDiff(outdatedPkg.currentRange, outdatedPkg.latestRange);\n    let colorizeChange = change ?? 'breaking';\n    if (change === 'feature') {\n      colorizeChange = 'fix';\n    }\n    const latest = colorizeSemverDiff({\n      change: colorizeChange,\n      diff,\n    });\n    return [\n      outdatedPkg.name,\n      chalk.grey(`(${TARGET_FIELD_TO_DEP_TYPE[outdatedPkg.targetField]})`),\n      outdatedPkg.currentRange,\n      '❯',\n      latest,\n    ];\n  });\n}\n\nfunction alignColumns(rows: string[][]) {\n  return table(rows, {\n    border: getBorderCharacters('void'),\n    columnDefault: {\n      paddingLeft: 0,\n      paddingRight: 1,\n    },\n    columns: {\n      // This is the current range column\n      2: { alignment: 'right' },\n    },\n    drawHorizontalLine: () => false,\n  }).split('\\n');\n}\n"]}