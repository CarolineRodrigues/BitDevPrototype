"use strict";

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BitMap = void 0;

function _lodash() {
  const data = require("lodash");

  _lodash = function () {
    return data;
  };

  return data;
}

function _config() {
  const data = require("@teambit/legacy/dist/consumer/config");

  _config = function () {
    return data;
  };

  return data;
}

/**
 * consider extracting to a new component.
 * (pro: making Workspace aspect smaller. con: it's an implementation details of the workspace)
 */
class BitMap {
  constructor(legacyBitMap, consumer) {
    this.legacyBitMap = legacyBitMap;
    this.consumer = consumer;
  }
  /**
   * adds component config to the .bitmap file.
   * later, upon `bit tag`, the data is saved in the scope.
   * returns a boolean indicating whether a change has been made.
   */


  addComponentConfig(id, aspectId, config = {}) {
    if (!aspectId || typeof aspectId !== 'string') throw new Error(`expect aspectId to be string, got ${aspectId}`);
    const bitMapEntry = this.getBitmapEntry(id, {
      ignoreScopeAndVersion: true
    });
    const currentConfig = (bitMapEntry.config || (bitMapEntry.config = {}))[aspectId];

    if ((0, _lodash().isEqual)(currentConfig, config)) {
      return false; // no changes
    }

    if (!config) {
      delete bitMapEntry.config[aspectId];
    } else {
      bitMapEntry.config[aspectId] = config;
    }

    this.legacyBitMap.markAsChanged();
    return true; // changes have been made
  }

  removeComponentConfig(id, aspectId, markWithMinusIfNotExist) {
    if (!aspectId || typeof aspectId !== 'string') throw new Error(`expect aspectId to be string, got ${aspectId}`);
    const bitMapEntry = this.getBitmapEntry(id, {
      ignoreScopeAndVersion: true
    });
    const currentConfig = (bitMapEntry.config || (bitMapEntry.config = {}))[aspectId];

    if (currentConfig) {
      delete bitMapEntry.config[aspectId];
    } else {
      if (!markWithMinusIfNotExist) {
        return false; // no changes
      }

      bitMapEntry.config[aspectId] = _config().REMOVE_EXTENSION_SPECIAL_SIGN;
    }

    this.legacyBitMap.markAsChanged();
    return true; // changes have been made
  }

  removeEntireConfig(id) {
    const bitMapEntry = this.getBitmapEntry(id, {
      ignoreScopeAndVersion: true
    });
    if (!bitMapEntry.config) return false;
    delete bitMapEntry.config;
    this.legacyBitMap.markAsChanged();
    return true;
  }

  setEntireConfig(id, config) {
    const bitMapEntry = this.getBitmapEntry(id, {
      ignoreScopeAndVersion: true
    });
    bitMapEntry.config = config;
    this.legacyBitMap.markAsChanged();
  }
  /**
   * write .bitmap object to the filesystem
   */


  async write() {
    await this.consumer.writeBitMap();
  }
  /**
   * get the data saved in the .bitmap file for this component-id.
   */


  getBitmapEntry(id, {
    ignoreVersion,
    ignoreScopeAndVersion
  } = {}) {
    return this.legacyBitMap.getComponent(id._legacy, {
      ignoreVersion,
      ignoreScopeAndVersion
    });
  }
  /**
   * components that were not tagged yet are safe to rename them from the .bitmap file.
   */


  renameNewComponent(sourceId, targetId) {
    const bitMapEntry = this.getBitmapEntry(sourceId);

    if (bitMapEntry.id.hasVersion()) {
      throw new Error(`unable to rename tagged or exported component: ${bitMapEntry.id.toString()}`);
    }

    this.legacyBitMap.removeComponent(bitMapEntry.id);
    bitMapEntry.id = targetId._legacy;
    this.legacyBitMap.setComponent(bitMapEntry.id, bitMapEntry);
  }

}

exports.BitMap = BitMap;

//# sourceMappingURL=bit-map.js.map