{"version":3,"sources":["workspace.graphql.ts"],"names":["workspace","graphql","typeDefs","resolvers","Subscription","componentAdded","subscribe","pubsub","asyncIterator","ComponentAdded","componentChanged","ComponentChanged","componentRemoved","ComponentRemoved","Component","status","wsComponent","getStatus","issuesCount","getIssues","count","issues","toObjectWithDataAsString","Workspace","path","ws","name","icon","components","offset","limit","list","getComponent","id","componentID","resolveComponentId","component","get","error","Query"],"mappings":";;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;eAGe,CAACA,SAAD,EAAuBC,OAAvB,KAAgD;AAC7D,SAAO;AACLC,IAAAA,QAAQ,EAAE,0BAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA/ES;AAgFLC,IAAAA,SAAS,EAAE;AACTC,MAAAA,YAAY,EAAE;AACZC,QAAAA,cAAc,EAAE;AACdC,UAAAA,SAAS,EAAE,MAAML,OAAO,CAACM,MAAR,CAAeC,aAAf,CAA6BC,2BAA7B;AADH,SADJ;AAIZC,QAAAA,gBAAgB,EAAE;AAChBJ,UAAAA,SAAS,EAAE,MAAML,OAAO,CAACM,MAAR,CAAeC,aAAf,CAA6BG,6BAA7B;AADD,SAJN;AAOZC,QAAAA,gBAAgB,EAAE;AAChBN,UAAAA,SAAS,EAAE,MAAML,OAAO,CAACM,MAAR,CAAeC,aAAf,CAA6BK,6BAA7B;AADD;AAPN,OADL;AAYTC,MAAAA,SAAS,EAAE;AACTC,QAAAA,MAAM,EAAE,MAAOC,WAAP,IAA2C;AACjD,iBAAOA,WAAW,CAACC,SAAZ,EAAP;AACD,SAHQ;AAITC,QAAAA,WAAW,EAAGF,WAAD,IAA6C;AAAA;;AACxD,iBAAO,0BAAAA,WAAW,CAACG,SAAZ,kFAAyBC,KAAzB,KAAkC,CAAzC;AACD,SANQ;AAOTC,QAAAA,MAAM,EAAGL,WAAD,IAAqC;AAAA;;AAC3C,2CAAOA,WAAW,CAACG,SAAZ,EAAP,2DAAO,uBAAyBG,wBAAzB,EAAP;AACD;AATQ,OAZF;AAuBTC,MAAAA,SAAS,EAAE;AACTC,QAAAA,IAAI,EAAGC,EAAD,IAAQA,EAAE,CAACD,IADR;AAETE,QAAAA,IAAI,EAAGD,EAAD,IAAQA,EAAE,CAACC,IAFR;AAGTC,QAAAA,IAAI,EAAGF,EAAD,IAAQA,EAAE,CAACE,IAHR;AAITC,QAAAA,UAAU,EAAE,OAAOH,EAAP,EAAsB;AAAEI,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SAAtB,KAA+E;AACzF,iBAAOL,EAAE,CAACM,IAAH,CAAQ;AAAEF,YAAAA,MAAF;AAAUC,YAAAA;AAAV,WAAR,CAAP;AACD,SANQ;AAOTE,QAAAA,YAAY,EAAE,OAAOP,EAAP,EAAsB;AAAEQ,UAAAA;AAAF,SAAtB,KAAiD;AAC7D,cAAI;AACF,kBAAMC,WAAW,GAAG,MAAMT,EAAE,CAACU,kBAAH,CAAsBF,EAAtB,CAA1B;AACA,kBAAMG,SAAS,GAAG,MAAMX,EAAE,CAACY,GAAH,CAAOH,WAAP,CAAxB;AACA,mBAAOE,SAAP;AACD,WAJD,CAIE,OAAOE,KAAP,EAAmB;AACnB,mBAAO,IAAP;AACD;AACF;AAfQ,OAvBF;AAwCTC,MAAAA,KAAK,EAAE;AACLvC,QAAAA,SAAS,EAAE,MAAMA;AADZ;AAxCE;AAhFN,GAAP;AA6HD,C","sourcesContent":["import { GraphqlMain } from '@teambit/graphql';\nimport gql from 'graphql-tag';\n\nimport { ComponentAdded, ComponentChanged, ComponentRemoved, Workspace } from './workspace';\nimport { WorkspaceComponent } from './workspace-component';\n\nexport default (workspace: Workspace, graphql: GraphqlMain) => {\n  return {\n    typeDefs: gql`\n      type ModifyInfo {\n        # is the component modified.\n        hasModifiedFiles: Boolean\n\n        # the component has Modified Dependencies\n        hasModifiedDependencies: Boolean\n      }\n\n      type ComponentStatus {\n        # component is pending to be tagged automatically.\n        modifyInfo: ModifyInfo\n\n        # is the new component new.\n        isNew: Boolean\n\n        # is the component deleted from the workspace.\n        isDeleted: Boolean\n\n        # is the component staged.\n        isStaged: Boolean\n\n        # does the component exists in the workspace.\n        isInWorkspace: Boolean\n\n        # does the component exists in the scope.\n        isInScope: Boolean\n\n        # does the component is outdated (pending for update).\n        isOutdated: Boolean\n      }\n\n      extend type Component {\n        status: ComponentStatus\n      }\n\n      type Issue {\n        type: String!\n        description: String!\n        solution: String\n        data: String\n      }\n\n      extend type Component {\n        # the count of errors in component in workspace\n        issuesCount: Int\n        issues: [Issue]\n      }\n\n      type Workspace {\n        name: String\n        path: String\n        icon: String\n        components(offset: Int, limit: Int): [Component]\n        getComponent(id: String!): Component\n      }\n\n      type Subscription {\n        componentAdded: ComponentAdded\n        componentChanged: ComponentChanged\n        componentRemoved: ComponentRemoved\n      }\n\n      type ComponentAdded {\n        component: Component\n      }\n\n      type ComponentChanged {\n        component: Component\n      }\n\n      type ComponentRemoved {\n        componentIds: [ComponentID]\n      }\n\n      type Query {\n        workspace: Workspace\n      }\n    `,\n    resolvers: {\n      Subscription: {\n        componentAdded: {\n          subscribe: () => graphql.pubsub.asyncIterator(ComponentAdded),\n        },\n        componentChanged: {\n          subscribe: () => graphql.pubsub.asyncIterator(ComponentChanged),\n        },\n        componentRemoved: {\n          subscribe: () => graphql.pubsub.asyncIterator(ComponentRemoved),\n        },\n      },\n      Component: {\n        status: async (wsComponent: WorkspaceComponent) => {\n          return wsComponent.getStatus();\n        },\n        issuesCount: (wsComponent: WorkspaceComponent): number => {\n          return wsComponent.getIssues()?.count || 0;\n        },\n        issues: (wsComponent: WorkspaceComponent) => {\n          return wsComponent.getIssues()?.toObjectWithDataAsString();\n        },\n      },\n      Workspace: {\n        path: (ws) => ws.path,\n        name: (ws) => ws.name,\n        icon: (ws) => ws.icon,\n        components: async (ws: Workspace, { offset, limit }: { offset: number; limit: number }) => {\n          return ws.list({ offset, limit });\n        },\n        getComponent: async (ws: Workspace, { id }: { id: string }) => {\n          try {\n            const componentID = await ws.resolveComponentId(id);\n            const component = await ws.get(componentID);\n            return component;\n          } catch (error: any) {\n            return null;\n          }\n        },\n      },\n      Query: {\n        workspace: () => workspace,\n      },\n    },\n  };\n};\n"]}