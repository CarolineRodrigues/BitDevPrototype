{"version":3,"sources":["workspace-model.ts"],"names":["Workspace","constructor","name","path","icon","components","componentDescriptors","getComponent","id","find","component","fullName","from","map","ComponentID","fromObject","ComponentDescriptor","toString","value","ComponentModel","empty"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;AAsBO,MAAMA,SAAN,CAAgB;AACrBC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,IAJA;AAMT;AACJ;AACA;AACaC,EAAAA,IATA;AAWT;AACJ;AACA;AACaC,EAAAA,IAdA;AAgBT;AACJ;AACA;AACaC,EAAAA,UAnBA;AAqBT;AACJ;AACA;AACaC,EAAAA,oBAxBA,EAyBT;AAAA,SArBSJ,IAqBT,GArBSA,IAqBT;AAAA,SAhBSC,IAgBT,GAhBSA,IAgBT;AAAA,SAXSC,IAWT,GAXSA,IAWT;AAAA,SANSC,UAMT,GANSA,UAMT;AAAA,SADSC,oBACT,GADSA,oBACT;AAAE;AAEJ;AACF;AACA;;;AACEC,EAAAA,YAAY,CAACC,EAAD,EAAkB;AAC5B,WAAO,KAAKH,UAAL,CAAgBI,IAAhB,CAAsBC,SAAD,IAAeA,SAAS,CAACF,EAAV,CAAaG,QAAb,KAA0BH,EAAE,CAACG,QAAjE,CAAP;AACD;;AAEU,SAAJC,IAAI,CAAC;AAAEV,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcE,IAAAA,UAAd;AAA0BD,IAAAA;AAA1B,GAAD,EAAmD;AAC5D,UAAME,oBAAoB,GAAGD,UAAU,CAACQ,GAAX,CAAgBH,SAAD,IAAe;AACzD,YAAMF,EAAE,GAAGM,yBAAYC,UAAZ,CAAuBL,SAAS,CAACF,EAAjC,CAAX;;AACA,aAAOQ,2CAAoBD,UAApB,CAA+B;AAAEP,QAAAA,EAAE,EAAEA,EAAE,CAACS,QAAH;AAAN,OAA/B,CAAP;AACD,KAH4B,CAA7B;AAIA,WAAO,IAAIjB,SAAJ,CACLE,IADK,EAELC,IAFK,EAGLC,IAHK,EAILC,UAAU,CAACQ,GAAX,CAAgBK,KAAD,IAAW;AACxB,aAAOC,4BAAeP,IAAf,CAAoBM,KAApB,CAAP;AACD,KAFD,CAJK,EAOLZ,oBAPK,CAAP;AASD;;AAEW,SAALc,KAAK,GAAG;AACb,WAAO,IAAIpB,SAAJ,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,CAAP;AACD;;AArDoB","sourcesContent":["// import { ComponentMeta } from '@teambit/component';\nimport { ComponentID, ComponentModel, ComponentModelProps } from '@teambit/component';\nimport { ComponentDescriptor } from '@teambit/component-descriptor';\nimport { DeprecationInfo } from '@teambit/deprecation';\nimport { Descriptor } from '@teambit/envs';\n\nimport { ComponentStatus } from '../../workspace-component/component-status';\n\nexport type WorkspaceModelComponent = {\n  id: ComponentID;\n  status: ComponentStatus;\n  deprecation: DeprecationInfo;\n  env: Descriptor;\n};\n\nexport type WorkspaceProps = {\n  name: string;\n  path: string;\n  components: ComponentModelProps[];\n  icon: string;\n};\n\nexport class Workspace {\n  constructor(\n    /**\n     * name of the workspace.\n     */\n    readonly name: string,\n\n    /**\n     * absolute path of the workspace.\n     */\n    readonly path: string,\n\n    /**\n     * icon of the workspace.\n     */\n    readonly icon: string,\n\n    /**\n     * components container in the workspace.\n     */\n    readonly components: ComponentModel[],\n\n    /**\n     * components contained in the workspace.\n     */\n    readonly componentDescriptors: ComponentDescriptor[]\n  ) {}\n\n  /**\n   * return a component from the workspace.\n   */\n  getComponent(id: ComponentID) {\n    return this.components.find((component) => component.id.fullName === id.fullName);\n  }\n\n  static from({ name, path, components, icon }: WorkspaceProps) {\n    const componentDescriptors = components.map((component) => {\n      const id = ComponentID.fromObject(component.id);\n      return ComponentDescriptor.fromObject({ id: id.toString() });\n    });\n    return new Workspace(\n      name,\n      path,\n      icon,\n      components.map((value) => {\n        return ComponentModel.from(value);\n      }),\n      componentDescriptors\n    );\n  }\n\n  static empty() {\n    return new Workspace('', '', '', [], []);\n  }\n}\n"]}