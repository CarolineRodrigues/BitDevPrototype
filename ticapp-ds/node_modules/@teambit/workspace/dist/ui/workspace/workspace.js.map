{"version":3,"sources":["workspace.tsx"],"names":["Workspace","routeSlot","menuSlot","sidebar","workspaceUI","onSidebarTogglerChange","reactions","useComponentNotifications","workspace","isSidebarOpen","handleSidebarToggle","x","sidebarOpenness","Layout","row","right","styles","emptyContainer","setComponents","components","workspaceWrapper","topbar","name","icon","main","splitter","e","stopPropagation","notifications","onComponentAdded","comps","notificationId","log","length","map","comp","id","toString","join","setTimeout","dismiss","onComponentRemoved","ids"],"mappings":"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","sourcesContent":["import 'reset-css';\nimport pluralize from 'pluralize';\nimport React, { useReducer, useMemo } from 'react';\nimport { Route } from 'react-router-dom';\nimport type { ComponentModel } from '@teambit/component';\nimport type { ComponentID } from '@teambit/component-id';\nimport { useNotifications } from '@teambit/ui-foundation.ui.notifications.notification-context';\nimport { RouteSlot, SlotRouter } from '@teambit/ui-foundation.ui.react-router.slot-router';\nimport { Corner } from '@teambit/ui-foundation.ui.corner';\nimport { Collapser } from '@teambit/ui-foundation.ui.buttons.collapser';\nimport { SplitPane, Pane, Layout } from '@teambit/base-ui.surfaces.split-pane.split-pane';\nimport { HoverSplitter } from '@teambit/base-ui.surfaces.split-pane.hover-splitter';\nimport { TopBar } from '@teambit/ui-foundation.ui.top-bar';\n\nimport { useWorkspace } from './use-workspace';\nimport { WorkspaceOverview } from './workspace-overview';\nimport { WorkspaceProvider } from './workspace-provider';\nimport styles from './workspace.module.scss';\nimport WorkspaceUI from '../../workspace.ui.runtime';\n\nexport type WorkspaceProps = {\n  routeSlot: RouteSlot;\n  menuSlot: RouteSlot;\n  sidebar: JSX.Element;\n  workspaceUI: WorkspaceUI;\n  onSidebarTogglerChange: (callback: () => void) => void;\n};\n\n/**\n * main workspace component.\n */\nexport function Workspace({ routeSlot, menuSlot, sidebar, workspaceUI, onSidebarTogglerChange }: WorkspaceProps) {\n  const reactions = useComponentNotifications();\n  const { workspace } = useWorkspace(reactions);\n\n  const [isSidebarOpen, handleSidebarToggle] = useReducer((x) => !x, true);\n  const sidebarOpenness = isSidebarOpen ? Layout.row : Layout.right;\n\n  onSidebarTogglerChange(handleSidebarToggle);\n\n  if (!workspace) {\n    return <div className={styles.emptyContainer}></div>;\n  }\n\n  workspaceUI.setComponents(workspace.components);\n\n  return (\n    <WorkspaceProvider workspace={workspace}>\n      <div className={styles.workspaceWrapper}>\n        <TopBar\n          className={styles.topbar}\n          Corner={() => <Corner name={workspace.name} icon={workspace.icon} />}\n          menu={menuSlot}\n        />\n\n        <SplitPane className={styles.main} size={264} layout={sidebarOpenness}>\n          <Pane className={styles.sidebar}>{sidebar}</Pane>\n          <HoverSplitter className={styles.splitter}>\n            <Collapser\n              isOpen={isSidebarOpen}\n              onMouseDown={(e) => e.stopPropagation()} // avoid split-pane drag\n              onClick={handleSidebarToggle}\n              tooltipContent={`${isSidebarOpen ? 'Hide' : 'Show'} side panel`}\n            />\n          </HoverSplitter>\n          <Pane>\n            <SlotRouter slot={routeSlot} />\n            <Route exact path=\"/\">\n              <WorkspaceOverview />\n            </Route>\n          </Pane>\n        </SplitPane>\n      </div>\n    </WorkspaceProvider>\n  );\n}\nfunction useComponentNotifications() {\n  const notifications = useNotifications();\n\n  // memo not really needed, but for peace of mind\n  return useMemo(\n    () => ({\n      onComponentAdded: (comps: ComponentModel[]) => {\n        const notificationId = notifications.log(\n          `added ${pluralize('component', comps.length)}: ${comps.map((comp) => comp.id.toString()).join(', ')}`\n        );\n        setTimeout(() => notifications.dismiss(notificationId), 12 * 1000);\n      },\n\n      onComponentRemoved: (ids: ComponentID[]) => {\n        const notificationId = notifications.log(\n          `removed ${pluralize('component', ids.length)} ${ids.map((id) => id.toString()).join(', ')}`\n        );\n        setTimeout(() => notifications.dismiss(notificationId), 12 * 1000);\n      },\n    }),\n    [notifications]\n  );\n}\n"]}