{"version":3,"sources":["pkg.main.runtime.ts"],"names":["PkgMain","provider","cli","scope","envs","isolator","logger","workspace","builder","dependencyResolver","componentAspect","graphql","config","packageJsonPropsRegistry","logPublisher","createLogger","PkgAspect","id","host","getHost","packer","Packer","publisher","Publisher","legacyScope","publishTask","PublishTask","packTask","PackTask","pkg","registerShowFragments","PackageFragment","registerDependencyFactories","PackageDependencyFactory","register","registerService","PkgService","registerRoute","PackageRoute","preparePackagesTask","PreparePackagesTask","registerBuildTasks","registerTagTasks","registerSnapTasks","onComponentLoad","component","data","mergePackageJsonProps","packageJsonModification","PackageJsonTransformer","registerPackageJsonTransformer","transformPackageJson","bind","PackCmd","PublishCmd","getPackageName","state","_consumer","getModulePath","options","pkgName","relativePath","absPath","path","Error","constructor","registerPackageJsonNewProps","props","packComponent","componentId","scopePath","newProps","mergeToNewProps","otherProps","files","merged","length","env","calculateEnv","getPackageJsonProps","propsFromEnv","configuredIds","aspects","ids","forEach","extId","get","currentExtension","currentConfig","packageJson","specialKeys","getPackageJsonModifications","currentData","getPkgArtifact","artifacts","getArtifactsVinylByExtension","PkgArtifactNotFound","PkgArtifact","getManifest","name","latestVersion","latest","BitError","preReleaseLatestTags","tags","getPreReleaseLatestTags","distTags","versions","getAllSnapsManifests","versionsWithoutEmpty","externalRegistry","isPublishedToExternalRegistry","iterable","snapsIterable","result","snap","manifest","getSnapManifest","push","pkgExt","publishConfig","getComponentBuildData","getDataByAspect","idWithCorrectVersion","changeVersion","hash","updatedComponent","toString","pkgJson","undefined","checksum","error","dist","shasum","tarball","getRoute","routePath","getPackageTarFile","getArtifactsVinylByExtensionAndName","TAR_FILE_ARTIFACT_NAME","PackageTarFiletNotFound","legacyComponent","packageJsonObject","resolveComponentId","newComponent","Object","assign","MainRuntime","CLIAspect","ScopeAspect","EnvsAspect","IsolatorAspect","LoggerAspect","WorkspaceAspect","BuilderAspect","DependencyResolverAspect","ComponentAspect","GraphqlAspect","Slot","withType","addRuntime"],"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","sourcesContent":["import { compact, omit } from 'lodash';\nimport { join } from 'path';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport ComponentAspect, { Component, ComponentMain, Snap } from '@teambit/component';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { IsolatorAspect, IsolatorMain } from '@teambit/isolator';\nimport { LoggerAspect, LoggerMain, Logger } from '@teambit/logger';\nimport { ScopeAspect, ScopeMain } from '@teambit/scope';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { PackageJsonTransformer } from '@teambit/legacy/dist/consumer/component/package-json-transformer';\nimport LegacyComponent from '@teambit/legacy/dist/consumer/component';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport { BuilderMain, BuilderAspect } from '@teambit/builder';\nimport { CloneConfig } from '@teambit/new-component-helper';\nimport { BitError } from '@teambit/bit-error';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { GraphqlMain, GraphqlAspect } from '@teambit/graphql';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\n\nimport { Packer, PackOptions, PackResult, TAR_FILE_ARTIFACT_NAME } from './packer';\n// import { BitCli as CLI, BitCliExt as CLIExtension } from '@teambit/cli';\nimport { PackCmd } from './pack.cmd';\nimport { PkgAspect } from './pkg.aspect';\nimport { PreparePackagesTask } from './prepare-packages.task';\nimport { PublishCmd } from './publish.cmd';\nimport { Publisher } from './publisher';\nimport { PublishTask } from './publish.task';\nimport { PackageTarFiletNotFound, PkgArtifactNotFound } from './exceptions';\nimport { PkgArtifact } from './pkg-artifact';\nimport { PackageRoute, routePath } from './package.route';\nimport { PackageDependencyFactory } from './package-dependency';\nimport { pkgSchema } from './pkg.graphql';\nimport { PackageFragment } from './package.fragment';\nimport { PackTask } from './pack.task';\nimport { PkgService } from './pkg.service';\n\nexport interface PackageJsonProps {\n  [key: string]: any;\n}\n\nexport type PackageJsonPropsRegistry = SlotRegistry<PackageJsonProps>;\n\nexport type PkgExtensionConfig = {};\n\n/**\n * Config for variants\n */\nexport type ComponentPkgExtensionConfig = {\n  /**\n   * properties to add to the package.json of the component.\n   */\n  packageJson: Record<string, any>;\n};\n\n/**\n * Data stored in the component\n */\nexport type ComponentPkgExtensionData = {\n  /**\n   * properties to add to the package.json of the component.\n   */\n  packageJsonModification: Record<string, any>;\n\n  /**\n   * Final package.json after creating tar file\n   */\n  pkgJson?: Record<string, any>;\n\n  /**\n   * Checksum of the tar file\n   */\n  checksum?: string;\n};\n\ntype ComponentPackageManifest = {\n  name: string;\n  distTags: Record<string, string>;\n  externalRegistry: boolean;\n  versions: VersionPackageManifest[];\n};\n\ntype VersionPackageManifest = {\n  [key: string]: any;\n  dist: {\n    tarball: string;\n    shasum: string;\n  };\n};\n\nexport class PkgMain implements CloneConfig {\n  static runtime = MainRuntime;\n  static dependencies = [\n    CLIAspect,\n    ScopeAspect,\n    EnvsAspect,\n    IsolatorAspect,\n    LoggerAspect,\n    WorkspaceAspect,\n    BuilderAspect,\n    DependencyResolverAspect,\n    ComponentAspect,\n    GraphqlAspect,\n  ];\n  static slots = [Slot.withType<PackageJsonProps>()];\n  static defaultConfig = {};\n\n  static async provider(\n    [cli, scope, envs, isolator, logger, workspace, builder, dependencyResolver, componentAspect, graphql]: [\n      CLIMain,\n      ScopeMain,\n      EnvsMain,\n      IsolatorMain,\n      LoggerMain,\n      Workspace,\n      BuilderMain,\n      DependencyResolverMain,\n      ComponentMain,\n      GraphqlMain\n    ],\n    config: PkgExtensionConfig,\n    [packageJsonPropsRegistry]: [PackageJsonPropsRegistry]\n  ) {\n    const logPublisher = logger.createLogger(PkgAspect.id);\n    const host = componentAspect.getHost();\n    const packer = new Packer(isolator, logPublisher, host, scope);\n    const publisher = new Publisher(isolator, logPublisher, scope?.legacyScope, workspace);\n    const publishTask = new PublishTask(PkgAspect.id, publisher, logPublisher);\n    const packTask = new PackTask(PkgAspect.id, packer, logPublisher);\n    const pkg = new PkgMain(\n      logPublisher,\n      config,\n      packageJsonPropsRegistry,\n      workspace,\n      scope,\n      builder,\n      packer,\n      envs,\n      componentAspect,\n      publishTask\n    );\n\n    componentAspect.registerShowFragments([new PackageFragment(pkg)]);\n    dependencyResolver.registerDependencyFactories([new PackageDependencyFactory()]);\n\n    graphql.register(pkgSchema(pkg));\n    envs.registerService(new PkgService());\n\n    componentAspect.registerRoute([new PackageRoute(pkg)]);\n\n    // we ended up not using the publish-dry-run task. It used to run \"npm publish --dry-run\"\n    // and also \"npm pack --dry-run\", but it's not that useful and it takes long to complete.\n    // we might revise our decision later.\n    // const dryRunTask = new PublishDryRunTask(PkgAspect.id, publisher, packer, logPublisher);\n    const preparePackagesTask = new PreparePackagesTask(PkgAspect.id, logPublisher, envs);\n    // dryRunTask.dependencies = [BuildTaskHelper.serializeId(preparePackagesTask)];\n    builder.registerBuildTasks([preparePackagesTask]);\n    builder.registerTagTasks([packTask, publishTask]);\n    builder.registerSnapTasks([packTask]);\n    if (workspace) {\n      // workspace.onComponentLoad(pkg.mergePackageJsonProps.bind(pkg));\n      workspace.onComponentLoad(async (component) => {\n        const data = await pkg.mergePackageJsonProps(component);\n        return {\n          packageJsonModification: data,\n        };\n      });\n    }\n\n    PackageJsonTransformer.registerPackageJsonTransformer(pkg.transformPackageJson.bind(pkg));\n    // TODO: consider passing the pkg instead of packer\n    cli.register(new PackCmd(packer), new PublishCmd(publisher));\n    return pkg;\n  }\n\n  readonly shouldPreserveConfigForClonedComponent = false;\n\n  /**\n   * get the package name of a component.\n   */\n  getPackageName(component: Component) {\n    return componentIdToPackageName(component.state._consumer);\n  }\n\n  /**\n   * returns the package path in the /node_modules/ folder\n   */\n  getModulePath(component: Component, options: { absPath?: boolean } = {}) {\n    const pkgName = this.getPackageName(component);\n    const relativePath = join('node_modules', pkgName);\n    if (options?.absPath) {\n      if (this.workspace) {\n        return join(this.workspace.path, relativePath);\n      }\n      throw new Error('getModulePath with abs path option is not implemented for scope');\n    }\n    return relativePath;\n  }\n\n  /**\n   *Creates an instance of PkgExtension.\n   * @param {PkgExtensionConfig} config\n   * @param {PackageJsonPropsRegistry} packageJsonPropsRegistry\n   * @param {Packer} packer\n   * @memberof PkgExtension\n   */\n  constructor(\n    /**\n     * logger extension\n     */\n    readonly logger: Logger,\n    /**\n     * pkg extension configuration.\n     */\n    readonly config: PkgExtensionConfig,\n\n    /**\n     * Registry for changes by other extensions.\n     */\n    private packageJsonPropsRegistry: PackageJsonPropsRegistry,\n\n    private workspace: Workspace,\n    private scope: ScopeMain,\n\n    private builder: BuilderMain,\n    /**\n     * A utils class to packing components into tarball\n     */\n    private packer: Packer,\n\n    /**\n     * envs extension.\n     */\n    private envs: EnvsMain,\n\n    private componentAspect: ComponentMain,\n\n    /**\n     * keep it as public. external env might want to register it to the snap pipeline\n     */\n    public publishTask: PublishTask\n  ) {}\n\n  /**\n   * register changes in the package.json\n   */\n  registerPackageJsonNewProps(props: PackageJsonProps): void {\n    return this.packageJsonPropsRegistry.register(props);\n  }\n\n  /**\n   * Pack a component and generate a tarball suitable for npm registry\n   *\n   * @param {string} componentId\n   * @param {(string | undefined)} scopePath\n   * @param {string} outDir\n   * @param {boolean} [prefix=false]\n   * @param {boolean} [override=false]\n   * @param {boolean} [keep=false]\n   * @returns {Promise<PackResult>}\n   * @memberof PkgExtension\n   */\n  async packComponent(componentId: string, scopePath: string | undefined, options: PackOptions): Promise<PackResult> {\n    return this.packer.packComponent(componentId, scopePath, options);\n  }\n\n  /**\n   * Merge the configs provided by:\n   * 1. envs configured in the component - via getPackageJsonProps method\n   * 2. extensions that registered to the registerPackageJsonNewProps slot (and configured for the component)\n   * 3. props defined by the user (they are the strongest one)\n   */\n  async mergePackageJsonProps(component: Component): Promise<PackageJsonProps> {\n    let newProps: PackageJsonProps = {};\n    const mergeToNewProps = (otherProps: PackageJsonProps) => {\n      const files = [...(newProps.files || []), ...(otherProps.files || [])];\n      const merged = { ...newProps, ...otherProps };\n      if (files.length) merged.files = files;\n      return merged;\n    };\n    const env = this.envs.calculateEnv(component)?.env;\n    if (env?.getPackageJsonProps && typeof env.getPackageJsonProps === 'function') {\n      const propsFromEnv = env.getPackageJsonProps();\n      newProps = mergeToNewProps(propsFromEnv);\n    }\n\n    const configuredIds = component.state.aspects.ids;\n    configuredIds.forEach((extId) => {\n      // Only get props from configured extensions on this specific component\n      const props = this.packageJsonPropsRegistry.get(extId);\n      if (props) {\n        newProps = mergeToNewProps(props);\n      }\n    });\n\n    const currentExtension = component.state.aspects.get(PkgAspect.id);\n    const currentConfig = currentExtension?.config as unknown as ComponentPkgExtensionConfig;\n    if (currentConfig && currentConfig.packageJson) {\n      newProps = mergeToNewProps(currentConfig.packageJson);\n    }\n    // Keys not allowed to override\n    const specialKeys = ['extensions', 'dependencies', 'devDependencies', 'peerDependencies'];\n    return omit(newProps, specialKeys);\n  }\n\n  getPackageJsonModifications(component: Component): Record<string, any> {\n    const currentExtension = component.state.aspects.get(PkgAspect.id);\n    const currentData = currentExtension?.data as unknown as ComponentPkgExtensionData;\n    return currentData?.packageJsonModification ?? {};\n  }\n\n  async getPkgArtifact(component: Component): Promise<PkgArtifact> {\n    const artifacts = await this.builder.getArtifactsVinylByExtension(component, PkgAspect.id);\n    if (!artifacts.length) throw new PkgArtifactNotFound(component.id);\n\n    return new PkgArtifact(artifacts);\n  }\n\n  async getManifest(component: Component): Promise<ComponentPackageManifest> {\n    const name = this.getPackageName(component);\n    const latestVersion = component.latest;\n    if (!latestVersion) {\n      throw new BitError('can not get manifest for component without versions');\n    }\n    const preReleaseLatestTags = component.tags.getPreReleaseLatestTags();\n    const distTags = {\n      latest: latestVersion,\n      ...preReleaseLatestTags,\n    };\n\n    const versions = await this.getAllSnapsManifests(component);\n    const versionsWithoutEmpty: VersionPackageManifest[] = compact(versions);\n    const externalRegistry = this.isPublishedToExternalRegistry(component);\n    return {\n      name,\n      distTags,\n      externalRegistry,\n      versions: versionsWithoutEmpty,\n    };\n  }\n\n  private async getAllSnapsManifests(component: Component): Promise<VersionPackageManifest[]> {\n    const iterable = component.snapsIterable();\n    const result: VersionPackageManifest[] = [];\n    for await (const snap of iterable) {\n      const manifest = await this.getSnapManifest(component, snap);\n      if (manifest) {\n        result.push(manifest);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Check if the component should be fetched from bit registry or from another registry\n   * This will usually determined by the latest version of the component\n   * @param component\n   */\n  isPublishedToExternalRegistry(component: Component): boolean {\n    const pkgExt = component.state.aspects.get(PkgAspect.id);\n    // By default publish to bit registry\n    if (!pkgExt) return false;\n    return !!(pkgExt.config?.packageJson?.name || pkgExt.config?.packageJson?.publishConfig);\n  }\n\n  private getComponentBuildData(component: Component): ComponentPkgExtensionData | undefined {\n    const data = this.builder.getDataByAspect(component, PkgAspect.id);\n    if (data) return data as ComponentPkgExtensionData;\n    // backward compatibility. the data used to be saved on the pkg aspect rather than on the\n    // builder aspect\n    const currentExtension = component.state.aspects.get(PkgAspect.id);\n    return currentExtension?.data as ComponentPkgExtensionData | undefined;\n  }\n\n  async getSnapManifest(component: Component, snap: Snap): Promise<VersionPackageManifest | undefined> {\n    const idWithCorrectVersion = component.id.changeVersion(snap.hash);\n    // const state = await this.scope.getState(component.id, tag.hash);\n    // const currentExtension = state.aspects.get(PkgAspect.id);\n    const updatedComponent = await this.componentAspect.getHost().get(idWithCorrectVersion, true);\n    if (!updatedComponent) {\n      throw new BitError(`snap ${snap.hash} for component ${component.id.toString()} is missing`);\n    }\n    const currentData = this.getComponentBuildData(updatedComponent);\n    // If for some reason the version has no package.json manifest, return undefined\n    if (!currentData?.pkgJson) {\n      return undefined;\n    }\n    const pkgJson = currentData?.pkgJson ?? {};\n    const checksum = currentData?.checksum;\n    if (!checksum) {\n      this.logger.error(`checksum for ${component.id.toString()} is missing`);\n      return undefined;\n    }\n    const dist = {\n      shasum: checksum,\n      tarball: this.componentAspect.getRoute(idWithCorrectVersion, routePath),\n    };\n\n    const manifest = {\n      ...pkgJson,\n      dist,\n    };\n    return manifest;\n  }\n\n  async getPackageTarFile(component: Component): Promise<AbstractVinyl> {\n    const artifacts = await this.builder.getArtifactsVinylByExtensionAndName(\n      component,\n      PkgAspect.id,\n      TAR_FILE_ARTIFACT_NAME\n    );\n    if (!artifacts.length) throw new PackageTarFiletNotFound(component.id);\n\n    return artifacts[0];\n  }\n\n  async transformPackageJson(\n    legacyComponent: LegacyComponent,\n    packageJsonObject: Record<string, any>\n  ): Promise<Record<string, any>> {\n    // const newId = await this.workspace.resolveComponentId(component.id);\n    // const newComponent = await this.workspace.get(newId);\n    const host = this.componentAspect.getHost();\n    const id = await host.resolveComponentId(legacyComponent.id);\n    const newComponent = await host.get(id);\n    if (!newComponent) throw new Error(`cannot transform package.json of component: ${legacyComponent.id.toString()}`);\n    const newProps = this.getPackageJsonModifications(newComponent);\n    return Object.assign(packageJsonObject, newProps);\n  }\n}\n\nPkgAspect.addRuntime(PkgMain);\n"]}