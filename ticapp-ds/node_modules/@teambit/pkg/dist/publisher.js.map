{"version":3,"sources":["publisher.ts"],"names":["Publisher","constructor","isolator","logger","scope","workspace","options","publish","componentIds","length","all","consumer","bitMap","getAuthoredAndImportedBitIds","map","id","toString","capsules","getComponentCapsules","publishMultipleCapsules","description","dryRun","longProcessLogger","createLongProcessLogger","results","capsule","logProgress","component","publishOneCapsule","end","startTime","Date","now","publishParams","push","getTagFlagForPreRelease","extraArgs","getExtraArgsFromConfig","Array","isArray","extraArgsSplit","arg","split","flat","publishParamsStr","join","cwd","path","componentIdStr","errors","metadata","stdout","stderr","packageManager","debug","publishedPackage","replace","err","errorMsg","error","endTime","preReleaseData","getVersionPreReleaseData","maybeIdentifier","isLegacy","idsToPublish","getIdsToPublish","componentIdsToPublish","resolveMultipleComponentIds","network","isolateComponents","seedersCapsules","bitIds","Promise","getParsedId","throwForNonStagedOrTaggedComponents","ids","BitIds","fromArray","components","getComponentsAndVersions","filter","c","shouldPublish","version","extensions","toBitId","changeVersion","versionStr","pkgExt","findExtension","PkgAspect","config","packageJson","name","publishConfig","packageManagerPublishArgs","idsWithoutScope","hasScope","allowStaged","BitError","missingFromScope","inScope","isComponentInScope"],"mappings":"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","sourcesContent":["import { ComponentResult, TaskMetadata } from '@teambit/builder';\nimport { Component, ComponentID } from '@teambit/component';\nimport { Capsule, IsolatorMain } from '@teambit/isolator';\nimport { Logger } from '@teambit/logger';\nimport { Workspace } from '@teambit/workspace';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { BitError } from '@teambit/bit-error';\nimport { Scope } from '@teambit/legacy/dist/scope';\nimport mapSeries from 'p-map-series';\nimport execa from 'execa';\nimport { PkgAspect } from './pkg.aspect';\n\nexport type PublisherOptions = {\n  dryRun?: boolean;\n  allowStaged?: boolean;\n};\n\nexport class Publisher {\n  packageManager = 'npm'; // @todo: decide if this is mandatory or using the workspace settings\n  constructor(\n    private isolator: IsolatorMain,\n    private logger: Logger,\n    private scope: Scope,\n    private workspace: Workspace,\n    public options: PublisherOptions = {}\n  ) {}\n\n  async publish(componentIds: string[], options: PublisherOptions): Promise<ComponentResult[]> {\n    // @todo: replace by `workspace.byPatter` once ready.\n    if (componentIds.length === 1 && componentIds[0] === '*') {\n      const all = this.workspace.consumer.bitMap.getAuthoredAndImportedBitIds();\n      componentIds = all.map((id) => id.toString());\n    }\n    this.options = options;\n    const capsules = await this.getComponentCapsules(componentIds);\n    // const capsules = await this.getComponentCapsulesFromScope(componentIds);\n    return this.publishMultipleCapsules(capsules);\n  }\n\n  public async publishMultipleCapsules(capsules: Capsule[]): Promise<ComponentResult[]> {\n    const description = `publish components${this.options.dryRun ? ' (dry-run)' : ''}`;\n    const longProcessLogger = this.logger.createLongProcessLogger(description, capsules.length);\n    const results = mapSeries(capsules, (capsule) => {\n      longProcessLogger.logProgress(capsule.component.id.toString());\n      return this.publishOneCapsule(capsule);\n    });\n    longProcessLogger.end();\n    return results;\n  }\n\n  private async publishOneCapsule(capsule: Capsule): Promise<ComponentResult> {\n    const startTime = Date.now();\n    const publishParams = ['publish'];\n    if (this.options.dryRun) publishParams.push('--dry-run');\n    publishParams.push(...this.getTagFlagForPreRelease(capsule.component.id));\n    const extraArgs = this.getExtraArgsFromConfig(capsule.component);\n    if (extraArgs && Array.isArray(extraArgs) && extraArgs?.length) {\n      const extraArgsSplit = extraArgs.map((arg) => arg.split(' ')).flat();\n      publishParams.push(...extraArgsSplit);\n    }\n    const publishParamsStr = publishParams.join(' ');\n    const cwd = capsule.path;\n    const componentIdStr = capsule.id.toString();\n    const errors: string[] = [];\n    let metadata: TaskMetadata = {};\n    try {\n      // @todo: once capsule.exec works properly, replace this\n      const { stdout, stderr } = await execa(this.packageManager, publishParams, { cwd });\n      this.logger.debug(`${componentIdStr}, successfully ran ${this.packageManager} ${publishParamsStr} at ${cwd}`);\n      this.logger.debug(`${componentIdStr}, stdout: ${stdout}`);\n      this.logger.debug(`${componentIdStr}, stderr: ${stderr}`);\n      const publishedPackage = stdout.replace('+ ', ''); // npm adds \"+ \" prefix before the published package\n      metadata = this.options.dryRun ? {} : { publishedPackage };\n    } catch (err: any) {\n      const errorMsg = `failed running ${this.packageManager} ${publishParamsStr} at ${cwd}`;\n      this.logger.error(`${componentIdStr}, ${errorMsg}`);\n      if (err.stderr) this.logger.error(`${componentIdStr}, ${err.stderr}`);\n      errors.push(`${errorMsg}\\n${err.stderr}`);\n    }\n    const component = capsule.component;\n    return { component, metadata, errors, startTime, endTime: Date.now() };\n  }\n\n  private getTagFlagForPreRelease(id: ComponentID): string[] {\n    const preReleaseData = id.getVersionPreReleaseData();\n    if (!preReleaseData) return [];\n    const maybeIdentifier = preReleaseData[0]; // it can be numeric as in 1.0.0-0.\n    if (typeof maybeIdentifier !== 'string') return [];\n    return ['--tag', maybeIdentifier];\n  }\n\n  private async getComponentCapsules(componentIds: string[]): Promise<Capsule[]> {\n    const consumer = this.workspace.consumer;\n    if (consumer.isLegacy) {\n      // publish is supported on Harmony only\n      return [];\n    }\n    const idsToPublish = await this.getIdsToPublish(componentIds);\n    this.logger.debug(`total ${idsToPublish.length} to publish out of ${componentIds.length}`);\n    const componentIdsToPublish = await this.workspace.resolveMultipleComponentIds(idsToPublish);\n    const network = await this.isolator.isolateComponents(componentIdsToPublish);\n    return network.seedersCapsules;\n  }\n\n  /**\n   * only components that use pkg extension and configure \"publishConfig\" with their own registry\n   * or custom \"name\", should be published. ignore the rest.\n   */\n  private async getIdsToPublish(componentIds: string[]): Promise<string[]> {\n    const bitIds = await Promise.all(componentIds.map((id) => this.scope.getParsedId(id)));\n    await this.throwForNonStagedOrTaggedComponents(bitIds);\n    const ids = BitIds.fromArray(bitIds);\n    const components = await this.scope.getComponentsAndVersions(ids, true);\n    return components\n      .filter((c) => this.shouldPublish(c.version.extensions))\n      .map((c) => c.component.toBitId().changeVersion(c.versionStr).toString());\n  }\n\n  // TODO: consider using isPublishedToExternalRegistry from pkg.main.runtime (need to send it a component not extensions)\n  public shouldPublish(extensions: ExtensionDataList): boolean {\n    const pkgExt = extensions.findExtension(PkgAspect.id);\n    if (!pkgExt) return false;\n    return pkgExt.config?.packageJson?.name || pkgExt.config?.packageJson?.publishConfig;\n  }\n\n  private getExtraArgsFromConfig(component: Component): string | undefined {\n    const pkgExt = component.config.extensions.findExtension(PkgAspect.id);\n    return pkgExt?.config?.packageManagerPublishArgs;\n  }\n\n  private async throwForNonStagedOrTaggedComponents(bitIds: BitId[]) {\n    const idsWithoutScope = bitIds.filter((id) => !id.hasScope());\n    if (!idsWithoutScope.length) return;\n    if (!this.options.allowStaged && !this.options.dryRun) {\n      throw new BitError(\n        `unable to publish the following component(s), please make sure they are exported: ${idsWithoutScope.join(\n          ', '\n        )}`\n      );\n    }\n    const missingFromScope: BitId[] = [];\n    await Promise.all(\n      idsWithoutScope.map(async (id) => {\n        const inScope = await this.scope.isComponentInScope(id);\n        if (!inScope) {\n          missingFromScope.push(id);\n        }\n      })\n    );\n    if (missingFromScope.length) {\n      throw new BitError(\n        `unable to publish the following component(s), please make sure they are tagged: ${missingFromScope.join(', ')}`\n      );\n    }\n  }\n}\n"]}