{"version":3,"sources":["package-dependency-factory.ts"],"names":["TYPE","PackageDependencyFactory","constructor","type","parse","serialized","PackageDependency","id","version","lifecycle","source","fromLegacyComponent","legacyComponent","runtimePackageDeps","transformLegacyComponentPackageDepsToSerializedDependency","packageDependencies","devPackageDeps","devPackageDependencies","peerPackageDeps","peerPackageDependencies","serializedPackageDeps","concat","packageDepsP","map","dep","packageDeps","Promise","all","dependencyList","DependencyList","packageDepObj","res","Object","entries","packageName","__type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA,MAAMA,IAAI,GAAG,SAAb,C,CACA;;AACO,MAAMC,wBAAN,CAA4D;AACjE;AACA;AACA;AAGAC,EAAAA,WAAW,GAAG;AAAA;AACZ,SAAKC,IAAL,GAAYH,IAAZ;AACD;;AAEU,QAALI,KAAK,CAAoDC,UAApD,EAA+F;AACxG;AACA,WAAQ,KAAIC,sCAAJ,EACND,UAAU,CAACE,EADL,EAENF,UAAU,CAACG,OAFL,EAGNH,UAAU,CAACI,SAHL,EAINJ,UAAU,CAACK,MAJL,CAAR;AAMD;;AAEwB,QAAnBC,mBAAmB,CAACC,eAAD,EAA4D;AACnF,UAAMC,kBAAkB,GAAGC,yDAAyD,CAClFF,eAAe,CAACG,mBADkE,EAElF,SAFkF,CAApF;AAIA,UAAMC,cAAc,GAAGF,yDAAyD,CAC9EF,eAAe,CAACK,sBAD8D,EAE9E,KAF8E,CAAhF;AAIA,UAAMC,eAAe,GAAGJ,yDAAyD,CAC/EF,eAAe,CAACO,uBAD+D,EAE/E,MAF+E,CAAjF;AAKA,UAAMC,qBAAqB,GAAGP,kBAAkB,CAACQ,MAAnB,CAA0BL,cAA1B,EAA0CK,MAA1C,CAAiDH,eAAjD,CAA9B;AACA,UAAMI,YAA0C,GAAGF,qBAAqB,CAACG,GAAtB,CAA2BC,GAAD,IAAS,KAAKpB,KAAL,CAAWoB,GAAX,CAAnC,CAAnD;AACA,UAAMC,WAAgC,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,YAAZ,CAA/C;AACA,UAAMM,cAAc,GAAG,KAAIC,oCAAJ,EAAmBJ,WAAnB,CAAvB;AACA,WAAOG,cAAP;AACD,GAvCgE,CAyCjE;AACA;AACA;;;AA3CiE;;;;AA8CnE,SAASd,yDAAT,CACEgB,aADF,EAEErB,SAFF,EAGiC;AAC/B,QAAMsB,GAAG,GAAGC,MAAM,CAACC,OAAP,CAAeH,aAAf,EAA8BP,GAA9B,CAAkC,CAAC,CAACW,WAAD,EAAc1B,OAAd,CAAD,KAA4B;AACxE,WAAO;AACLD,MAAAA,EAAE,EAAE2B,WADC;AAEL1B,MAAAA,OAFK;AAGL2B,MAAAA,MAAM,EAAEnC,IAHH;AAILS,MAAAA;AAJK,KAAP;AAMD,GAPW,CAAZ;AAQA,SAAOsB,GAAP;AACD","sourcesContent":["import {\n  DependencyLifecycleType,\n  SerializedDependency,\n  DependencyFactory,\n  DependencyList,\n} from '@teambit/dependency-resolver';\nimport LegacyComponent from '@teambit/legacy/dist/consumer/component';\nimport { PackageDependency, SerializedPackageDependency } from './package-dependency';\n\nconst TYPE = 'package';\n// TODO: think about where is the right place to put this\nexport class PackageDependencyFactory implements DependencyFactory {\n  // parse<PackageDependency, SerializedDependency>(serialized: SerializedDependency): PackageDependency {\n  //   return new PackageDependency(serialized.id, serialized.version, serialized.type, serialized.lifecycle as DependencyLifecycleType);\n  // }\n  type: string;\n\n  constructor() {\n    this.type = TYPE;\n  }\n\n  async parse<PackageDependency, S extends SerializedDependency>(serialized: S): Promise<PackageDependency> {\n    // return new PackageDependency(serialized.id, serialized.version, serialized.type, serialized.lifecycle as DependencyLifecycleType) as unknown as PackageDependency;\n    return (new PackageDependency(\n      serialized.id,\n      serialized.version,\n      serialized.lifecycle as DependencyLifecycleType,\n      serialized.source\n    ) as unknown) as PackageDependency;\n  }\n\n  async fromLegacyComponent(legacyComponent: LegacyComponent): Promise<DependencyList> {\n    const runtimePackageDeps = transformLegacyComponentPackageDepsToSerializedDependency(\n      legacyComponent.packageDependencies,\n      'runtime'\n    );\n    const devPackageDeps = transformLegacyComponentPackageDepsToSerializedDependency(\n      legacyComponent.devPackageDependencies,\n      'dev'\n    );\n    const peerPackageDeps = transformLegacyComponentPackageDepsToSerializedDependency(\n      legacyComponent.peerPackageDependencies,\n      'peer'\n    );\n\n    const serializedPackageDeps = runtimePackageDeps.concat(devPackageDeps).concat(peerPackageDeps);\n    const packageDepsP: Promise<PackageDependency>[] = serializedPackageDeps.map((dep) => this.parse(dep));\n    const packageDeps: PackageDependency[] = await Promise.all(packageDepsP);\n    const dependencyList = new DependencyList(packageDeps);\n    return dependencyList;\n  }\n\n  // parse: <PackageDependency, SerializedDependency>(serialized: SerializedDependency) =>  {\n  //   return new PackageDependency(serialized.id, serialized.version, serialized.type, serialized.lifecycle as DependencyLifecycleType);\n  // }\n}\n\nfunction transformLegacyComponentPackageDepsToSerializedDependency(\n  packageDepObj: Record<string, string>,\n  lifecycle: DependencyLifecycleType\n): SerializedPackageDependency[] {\n  const res = Object.entries(packageDepObj).map(([packageName, version]) => {\n    return {\n      id: packageName,\n      version,\n      __type: TYPE,\n      lifecycle,\n    };\n  });\n  return res;\n}\n"]}