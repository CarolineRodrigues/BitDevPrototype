{"version":3,"sources":["prepare-packages.task.ts"],"names":["PreparePackagesTask","constructor","aspectId","logger","envs","execute","context","writeNpmIgnoreFile","result","componentsResults","Promise","all","capsuleNetwork","seedersCapsules","map","capsule","executeDistAsRootTask","env","getCompiler","compilerInstance","distDir","graphCapsules","removeSourceFiles","moveDistToRoot","updatePackageJson","excludeDirs","dir","excludeFiles","allFiles","getAllFilesPaths","ignore","debug","join","file","fs","remove","path","from","to","moveSync","compiler","distMainFile","getDistPathBySrcPath","component","state","_consumer","mainFile","distMainFileWithoutDistDir","replace","sep","packageJson","PackageJsonFile","loadFromCapsuleSync","addOrUpdateProperty","write"],"mappings":"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","sourcesContent":["import { BuildContext, BuiltTaskResult, BuildTask } from '@teambit/builder';\nimport { Compiler } from '@teambit/compiler';\nimport { Capsule } from '@teambit/isolator';\nimport { EnvsMain } from '@teambit/envs';\nimport { Logger } from '@teambit/logger';\nimport PackageJsonFile from '@teambit/legacy/dist/consumer/component/package-json-file';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { writeNpmIgnore } from './write-npm-ignore';\n\n/**\n * prepare packages for publishing.\n */\nexport class PreparePackagesTask implements BuildTask {\n  readonly name = 'PreparePackages';\n  readonly location = 'end';\n  constructor(readonly aspectId: string, private logger: Logger, private envs: EnvsMain) {}\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    await this.writeNpmIgnoreFile(context);\n    const result = {\n      componentsResults: [],\n    };\n\n    return result;\n  }\n\n  private async writeNpmIgnoreFile(context: BuildContext) {\n    await Promise.all(\n      context.capsuleNetwork.seedersCapsules.map(async (capsule) => {\n        await writeNpmIgnore(capsule, this.envs);\n      })\n    );\n  }\n\n  /**\n   * remove the source files and copy the dists files\n   * into the root of the capsule.\n   * this is needed when components import from other components internal paths. without this task,\n   * the internal paths are the source, so node will throw an error when trying to use them. this\n   * task makes sure that the internal paths point to the consumable code (dists).\n   */\n  private async executeDistAsRootTask(context: BuildContext) {\n    if (!context.env.getCompiler) return;\n    const compilerInstance: Compiler = context.env.getCompiler();\n    const distDir = compilerInstance.distDir;\n\n    await Promise.all(\n      context.capsuleNetwork.graphCapsules.map(async (capsule) => {\n        await this.removeSourceFiles(capsule, distDir);\n        await this.moveDistToRoot(capsule, distDir);\n        await this.updatePackageJson(capsule, compilerInstance, distDir);\n      })\n    );\n  }\n\n  private async removeSourceFiles(capsule: Capsule, distDir: string) {\n    const excludeDirs = [distDir, 'node_modules', 'public', 'bin'].map((dir) => `${dir}/**`);\n    const excludeFiles = ['package.json'];\n    const allFiles = capsule.getAllFilesPaths('.', { ignore: [...excludeDirs, ...excludeFiles] });\n    this.logger.debug(`delete the following files:\\n${allFiles.join('\\n')}`);\n    await Promise.all(allFiles.map((file) => fs.remove(path.join(capsule.path, file))));\n  }\n\n  private async moveDistToRoot(capsule: Capsule, distDir: string) {\n    const from = path.join(capsule.path, distDir);\n    const to = capsule.path;\n    this.logger.debug(`move from ${from} to: ${to}`);\n    // for some reason `fs.move` throws an error \"dest already exists.\".\n    fs.moveSync(from, to);\n  }\n\n  /**\n   * by default, the \"main\" prop points to the dist file (e.g. \"dist/index./js\").\n   * here, we have to change it because there is no dist dir anymore.\n   */\n  private async updatePackageJson(capsule: Capsule, compiler: Compiler, distDir: string) {\n    const distMainFile = compiler.getDistPathBySrcPath(capsule.component.state._consumer.mainFile);\n    const distMainFileWithoutDistDir = distMainFile.replace(`${distDir}${path.sep}`, '');\n    const packageJson = PackageJsonFile.loadFromCapsuleSync(capsule.path);\n    packageJson.addOrUpdateProperty('main', distMainFileWithoutDistDir);\n    await packageJson.write();\n  }\n}\n"]}