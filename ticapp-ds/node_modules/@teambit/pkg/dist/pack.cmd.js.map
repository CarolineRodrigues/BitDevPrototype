{"version":3,"sources":["pack.cmd.tsx"],"names":["PackCmd","constructor","packer","report","args","options","packResult","json","warnings","data","warningsOutput","map","warning","chalk","yellow","join","errors","errorsOutput","error","tarPathOutput","metadata","tarPath","green","id","componentId","scopePath","compId","scopePathStr","concreteOpts","writeOptions","outDir","override","prefix","keep","packComponent","code"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;AAeO,MAAMA,OAAN,CAAiC;AAetCC,EAAAA,WAAW,CAASC,MAAT,EAAyB;AAAA,SAAhBA,MAAgB,GAAhBA,MAAgB;AAAA,kDAd7B,gCAc6B;AAAA,yDAbtB,4BAasB;AAAA,qDAZ1B,CACR,CAAC,GAAD,EAAM,mBAAN,EAA2B,sCAA3B,CADQ,EAER,CAAC,GAAD,EAAM,UAAN,EAAkB,6BAAlB,CAFQ,EAGR,CAAC,GAAD,EAAM,MAAN,EAAc,oDAAd,CAHQ,EAIR,CAAC,GAAD,EAAM,QAAN,EAAgB,8BAAhB,CAJQ,EAKR;AACA,KAAC,GAAD,EAAM,MAAN,EAAc,2BAAd,CANQ,CAY0B;AAAA,8DAJjB,EAIiB;AAAA,mDAH5B,EAG4B;AAAA,mDAF5B,aAE4B;AAAE;;AAE1B,QAANC,MAAM,CAACC,IAAD,EAAiBC,OAAjB,EAA0C;AAAA;;AACpD,UAAMC,UAAU,GAAG,MAAM,KAAKC,IAAL,CAAUH,IAAV,EAAgBC,OAAhB,CAAzB;AACA,UAAMG,QAAa,GAAG,qBAAAF,UAAU,CAACG,IAAX,sEAAiBD,QAAjB,KAA6B,EAAnD;AACA,UAAME,cAAmB,GAAGF,QAAQ,CAACG,GAAT,CAAcC,OAAD,IAAaC,iBAAMC,MAAN,CAAaF,OAAb,CAA1B,EAAiDG,IAAjD,CAAsD,IAAtD,CAA5B;AACA,UAAMC,MAAW,GAAG,sBAAAV,UAAU,CAACG,IAAX,wEAAiBO,MAAjB,KAA2B,EAA/C;AACA,UAAMC,YAAiB,GAAGD,MAAM,CAACL,GAAP,CAAYO,KAAD,IAAWL,iBAAMC,MAAN,CAAaI,KAAb,CAAtB,EAA2CH,IAA3C,CAAgD,IAAhD,CAA1B;AACA,UAAMI,aAAa,GAAG,yBAAAb,UAAU,CAACG,IAAX,CAAgBW,QAAhB,wEAA0BC,OAA1B,GAClBR,iBAAMS,KAAN,CAAa,0BAAyBhB,UAAU,CAACG,IAAX,CAAgBc,EAAG,KAA7C,0BAAiDjB,UAAU,CAACG,IAAX,CAAgBW,QAAjE,2DAAiD,uBAA0BC,OAAQ,EAA/F,CADkB,GAElB,EAFJ;AAGA,WAAQ,GAAEX,cAAe,KAAIO,YAAa,KAAIE,aAAc,EAA5D;AACD;;AAES,QAAJZ,IAAI,CAAC,CAACiB,WAAD,EAAcC,SAAd,CAAD,EAAqCpB,OAArC,EAA8D;AACtE,UAAMqB,MAAM,GAAG,OAAOF,WAAP,KAAuB,QAAvB,GAAkCA,WAAlC,GAAgDA,WAAW,CAAC,CAAD,CAA1E;AACA,QAAIG,YAAJ;;AACA,QAAIF,SAAJ,EAAe;AACbE,MAAAA,YAAY,GAAG,OAAOF,SAAP,KAAqB,QAArB,GAAgCA,SAAS,CAAC,CAAD,CAAzC,GAA+CA,SAA9D;AACD;;AAED,UAAMG,YAAyB,GAAG;AAChCC,MAAAA,YAAY,EAAE;AACZC,QAAAA,MAAM,EAAEzB,OAAO,CAACyB,MADJ;AAEZC,QAAAA,QAAQ,EAAE1B,OAAO,CAAC0B;AAFN,OADkB;AAKhCC,MAAAA,MAAM,EAAE3B,OAAO,CAAC2B,MALgB;AAMhCC,MAAAA,IAAI,EAAE5B,OAAO,CAAC4B,IANkB,CAOhC;;AAPgC,KAAlC;AAUA,UAAM3B,UAAU,GAAG,MAAM,KAAKJ,MAAL,CAAYgC,aAAZ,CAA0BR,MAA1B,EAAkCC,YAAlC,EAAgDC,YAAhD,CAAzB;AACA,WAAO;AACLnB,MAAAA,IAAI,EAAEH,UADD;AAEL6B,MAAAA,IAAI,EAAE;AAFD,KAAP;AAID;;AAnDqC","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\n\nimport { Packer, PackOptions } from './packer';\n\ntype PackArgs = [string, string];\ntype PackCmdOptions = {\n  outDir?: string;\n  override?: boolean;\n  prefix?: boolean;\n  keep?: boolean;\n  // useCapsule?: boolean;\n};\n\nexport class PackCmd implements Command {\n  name = 'pack <componentId> [scopePath]';\n  description = 'create tar for npm publish';\n  options = [\n    ['d', 'out-dir <out-dir>', 'directory to put the result tar file'],\n    ['o', 'override', 'override existing pack file'],\n    ['k', 'keep', 'should keep isolated environment [default = false]'],\n    ['p', 'prefix', 'keep custom (binding) prefix'],\n    // ['c', 'use-capsule', 'isolate using the capsule and pack on the capsule'],\n    ['j', 'json', 'return the output as JSON'],\n  ] as CommandOptions;\n  shortDescription = '';\n  alias = '';\n  group = 'collaborate';\n\n  constructor(private packer: Packer) {}\n\n  async report(args: PackArgs, options: PackCmdOptions) {\n    const packResult = await this.json(args, options);\n    const warnings: any = packResult.data?.warnings || [];\n    const warningsOutput: any = warnings.map((warning) => chalk.yellow(warning)).join('\\n');\n    const errors: any = packResult.data?.errors || [];\n    const errorsOutput: any = errors.map((error) => chalk.yellow(error)).join('\\n');\n    const tarPathOutput = packResult.data.metadata?.tarPath\n      ? chalk.green(`tar path for component ${packResult.data.id}: ${packResult.data.metadata?.tarPath}`)\n      : '';\n    return `${warningsOutput}\\n${errorsOutput}\\n${tarPathOutput}`;\n  }\n\n  async json([componentId, scopePath]: PackArgs, options: PackCmdOptions) {\n    const compId = typeof componentId === 'string' ? componentId : componentId[0];\n    let scopePathStr: string | undefined;\n    if (scopePath) {\n      scopePathStr = typeof scopePath !== 'string' ? scopePath[0] : scopePath;\n    }\n\n    const concreteOpts: PackOptions = {\n      writeOptions: {\n        outDir: options.outDir,\n        override: options.override,\n      },\n      prefix: options.prefix,\n      keep: options.keep,\n      // useCapsule: options.useCapsule,\n    };\n\n    const packResult = await this.packer.packComponent(compId, scopePathStr, concreteOpts);\n    return {\n      data: packResult,\n      code: 0,\n    };\n  }\n}\n"]}