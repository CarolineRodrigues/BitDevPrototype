"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CompositionsUI = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _harmony() {
  const data = require("@teambit/harmony");

  _harmony = function () {
    return data;
  };

  return data;
}

function _component() {
  const data = require("@teambit/component");

  _component = function () {
    return data;
  };

  return data;
}

function _ui() {
  const data = require("@teambit/ui");

  _ui = function () {
    return data;
  };

  return data;
}

function _composition() {
  const data = require("./composition.section");

  _composition = function () {
    return data;
  };

  return data;
}

function _compositions() {
  const data = require("./compositions.aspect");

  _compositions = function () {
    return data;
  };

  return data;
}

class CompositionsUI {
  constructor(menuBarWidgetSlot, emptyStateSlot) {
    this.menuBarWidgetSlot = menuBarWidgetSlot;
    this.emptyStateSlot = emptyStateSlot;
  }
  /**
   * register a new tester empty state. this allows to register a different empty state from each environment for example.
   */


  registerEmptyState(emptyStateComponent) {
    this.emptyStateSlot.register(emptyStateComponent);
    return this;
  }

  registerMenuWidget(...widget) {
    this.menuBarWidgetSlot.register(widget);
  }

  static async provider([component], config, [compositionMenuSlot, emptyStateSlot]) {
    const compositions = new CompositionsUI(compositionMenuSlot, emptyStateSlot);
    const section = new (_composition().CompositionsSection)(compositions, {
      menuBarWidgetSlot: compositions.menuBarWidgetSlot
    }, emptyStateSlot);
    component.registerRoute(section.route);
    component.registerNavigation(section.navigationLink, section.order);
    return compositions;
  }

}

exports.CompositionsUI = CompositionsUI;
(0, _defineProperty2().default)(CompositionsUI, "dependencies", [_component().ComponentAspect]);
(0, _defineProperty2().default)(CompositionsUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(CompositionsUI, "slots", [_harmony().Slot.withType(), _harmony().Slot.withType()]);
var _default = CompositionsUI;
exports.default = _default;

_compositions().CompositionsAspect.addRuntime(CompositionsUI);

//# sourceMappingURL=compositions.ui.runtime.js.map