{"version":3,"sources":["compositions.graphql.ts"],"names":["compositionsSchema","compositions","typeDefs","resolvers","Component","component","getCompositions"],"mappings":";;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIO,SAASA,kBAAT,CAA4BC,YAA5B,EAAoE;AACzE,SAAO;AACLC,IAAAA,QAAQ,EAAE,0BAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfS;AAgBLC,IAAAA,SAAS,EAAE;AACTC,MAAAA,SAAS,EAAE;AACTH,QAAAA,YAAY,EAAGI,SAAD,IAA0B;AACtC,iBAAOJ,YAAY,CAACK,eAAb,CAA6BD,SAA7B,CAAP;AACD;AAHQ;AADF;AAhBN,GAAP;AAwBD","sourcesContent":["import { Component } from '@teambit/component';\nimport { Schema } from '@teambit/graphql';\nimport gql from 'graphql-tag';\n\nimport { CompositionsMain } from './compositions.main.runtime';\n\nexport function compositionsSchema(compositions: CompositionsMain): Schema {\n  return {\n    typeDefs: gql`\n      extend type Component {\n        compositions: [Composition]\n      }\n\n      type Subscription {\n        compositionAdded: Composition\n      }\n\n      type Composition {\n        filepath: String\n        identifier: String\n        displayName: String\n      }\n    `,\n    resolvers: {\n      Component: {\n        compositions: (component: Component) => {\n          return compositions.getCompositions(component);\n        },\n      },\n    },\n  };\n}\n"]}