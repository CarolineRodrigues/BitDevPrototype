{"version":3,"sources":["compositions.main.runtime.ts"],"names":["CompositionsMain","constructor","compositionFilePattern","previewFilePattern","preview","workspace","schema","devFiles","getPreviewFiles","components","ComponentMap","as","component","compositionFiles","state","filesystem","byGlob","previewFiles","Set","map","file","relative","files","filter","has","getCompositions","entry","aspects","get","CompositionsAspect","id","compositions","data","Composition","fromArray","readCompositions","maybeFiles","byComponent","computeCompositions","onComponentLoad","composition","toObject","pathArray","path","split","length","module","parseModule","componentDir","exports","exportModel","displayName","staticProperties","identifier","undefined","provider","graphql","config","compositionPreviewFilePattern","registerDevPattern","register","registerDefinition","CompositionPreviewDefinition","bind","MainRuntime","PreviewAspect","GraphqlAspect","WorkspaceAspect","SchemaAspect","DevFilesAspect","ComponentAspect","addRuntime"],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport { MainRuntime } from '@teambit/cli';\nimport { Component, ComponentAspect, ComponentMap, AspectData } from '@teambit/component';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { PreviewAspect, PreviewMain } from '@teambit/preview';\nimport { SchemaAspect, SchemaMain } from '@teambit/schema';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { flatten } from '@teambit/legacy/dist/utils';\nimport { DevFilesAspect, DevFilesMain } from '@teambit/dev-files';\nimport { Composition } from './composition';\nimport { CompositionsAspect } from './compositions.aspect';\nimport { compositionsSchema } from './compositions.graphql';\nimport { CompositionPreviewDefinition } from './compositions.preview-definition';\n\nexport type CompositionsConfig = {\n  /**\n   * glob pattern to detect composition files. This includes all related files, like styles and jsons.\n   * @example ['/*.composition?(s).*']\n   */\n  compositionFilePattern: string[];\n  /**\n   * glob pattern to select Preview files. this will only include files matched by compositionFilePattern.\n   * @example ['*.{t,j}s', '*.{t,j}sx']\n   */\n  compositionPreviewFilePattern: string[];\n};\n\n/**\n * the component documentation extension.\n */\nexport class CompositionsMain {\n  constructor(\n    /**\n     * Glob pattern to select all composition files\n     */\n    private compositionFilePattern: string[],\n\n    /**\n     * Glob pattern to select composition preview files\n     */\n    private previewFilePattern: string[],\n\n    /**\n     * envs extension.\n     */\n    private preview: PreviewMain,\n\n    /**\n     * workspace extension.\n     */\n    private workspace: Workspace,\n\n    /**\n     * schema extension.\n     */\n    private schema: SchemaMain,\n\n    private devFiles: DevFilesMain\n  ) {}\n\n  /**\n   * returns an array of doc file paths for a set of components.\n   */\n  getPreviewFiles(components: Component[]): ComponentMap<AbstractVinyl[]> {\n    return ComponentMap.as<AbstractVinyl[]>(components, (component) => {\n      // this includes non executables, like `button.compositions.module.scss` or `presets.compositions.json`\n      const compositionFiles = component.state.filesystem.byGlob(this.compositionFilePattern);\n\n      // select only relevant preview files (.tsx, etc)\n      const previewFiles = new Set(\n        component.state.filesystem.byGlob(this.previewFilePattern).map((file) => file.relative)\n      );\n      const files = compositionFiles.filter((file) => previewFiles.has(file.relative));\n\n      return files;\n    });\n  }\n\n  /**\n   * get component compositions.\n   */\n  getCompositions(component: Component): Composition[] {\n    const entry = component.state.aspects.get(CompositionsAspect.id);\n    if (!entry) return [];\n    const compositions = entry.data.compositions;\n    if (!compositions) return [];\n\n    return Composition.fromArray(compositions);\n  }\n\n  /**\n   * read composition from the component source code.\n   */\n  readCompositions(component: Component): Composition[] {\n    const maybeFiles = this.getPreviewFiles([component]).byComponent(component);\n\n    if (!maybeFiles) return [];\n    const [, files] = maybeFiles;\n    return flatten(\n      files.map((file) => {\n        return this.computeCompositions(component, file);\n      })\n    );\n  }\n\n  async onComponentLoad(component: Component): Promise<AspectData> {\n    const compositions = this.readCompositions(component);\n    return {\n      compositions: compositions.map((composition) => composition.toObject()),\n    };\n  }\n\n  private computeCompositions(component: Component, file: AbstractVinyl): Composition[] {\n    // :TODO hacked for a specific file extension now until david will take care in the compiler.\n    const pathArray = file.path.split('.');\n    pathArray[pathArray.length - 1] = 'js';\n\n    const module = this.schema.parseModule(join(this.workspace.componentDir(component.id), file.relative));\n    return module.exports.map((exportModel) => {\n      const displayName = exportModel.staticProperties?.get('compositionName');\n\n      return new Composition(\n        exportModel.identifier,\n        file.relative,\n        typeof displayName === 'string' ? displayName : undefined\n      );\n    });\n  }\n\n  static defaultConfig: CompositionsConfig = {\n    compositionFilePattern: ['**/*.composition?(s).*'],\n    compositionPreviewFilePattern: ['**/*.{t,j}s?(x)'],\n  };\n\n  static runtime = MainRuntime;\n  static dependencies = [PreviewAspect, GraphqlAspect, WorkspaceAspect, SchemaAspect, DevFilesAspect, ComponentAspect];\n\n  static async provider(\n    [preview, graphql, workspace, schema, devFiles]: [PreviewMain, GraphqlMain, Workspace, SchemaMain, DevFilesMain],\n    config: CompositionsConfig\n  ) {\n    const compositions = new CompositionsMain(\n      config.compositionFilePattern,\n      config.compositionPreviewFilePattern,\n      preview,\n      workspace,\n      schema,\n      devFiles\n    );\n    devFiles.registerDevPattern(config.compositionFilePattern);\n\n    graphql.register(compositionsSchema(compositions));\n    preview.registerDefinition(new CompositionPreviewDefinition(compositions));\n\n    if (workspace) {\n      workspace.onComponentLoad(compositions.onComponentLoad.bind(compositions));\n    }\n\n    return compositions;\n  }\n}\n\nCompositionsAspect.addRuntime(CompositionsMain);\n"]}