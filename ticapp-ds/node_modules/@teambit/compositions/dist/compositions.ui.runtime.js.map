{"version":3,"sources":["compositions.ui.runtime.tsx"],"names":["CompositionsUI","constructor","menuBarWidgetSlot","emptyStateSlot","registerEmptyState","emptyStateComponent","register","registerMenuWidget","widget","provider","component","config","compositionMenuSlot","compositions","section","CompositionsSection","registerRoute","route","registerNavigation","navigationLink","order","ComponentAspect","UIRuntime","Slot","withType","CompositionsAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMO,MAAMA,cAAN,CAAqB;AAC1BC,EAAAA,WAAW,CAASC,iBAAT,EAA0DC,cAA1D,EAA0F;AAAA,SAAjFD,iBAAiF,GAAjFA,iBAAiF;AAAA,SAAhCC,cAAgC,GAAhCA,cAAgC;AAAE;AAEvG;AACF;AACA;;;AACEC,EAAAA,kBAAkB,CAACC,mBAAD,EAAqC;AACrD,SAAKF,cAAL,CAAoBG,QAApB,CAA6BD,mBAA7B;AACA,WAAO,IAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAAC,GAAGC,MAAJ,EAA6B;AAC7C,SAAKN,iBAAL,CAAuBI,QAAvB,CAAgCE,MAAhC;AACD;;AAMoB,eAARC,QAAQ,CACnB,CAACC,SAAD,CADmB,EAEnBC,MAFmB,EAGnB,CAACC,mBAAD,EAAsBT,cAAtB,CAHmB,EAInB;AACA,UAAMU,YAAY,GAAG,IAAIb,cAAJ,CAAmBY,mBAAnB,EAAwCT,cAAxC,CAArB;AACA,UAAMW,OAAO,GAAG,KAAIC,kCAAJ,EACdF,YADc,EAEd;AAAEX,MAAAA,iBAAiB,EAAEW,YAAY,CAACX;AAAlC,KAFc,EAGdC,cAHc,CAAhB;AAMAO,IAAAA,SAAS,CAACM,aAAV,CAAwBF,OAAO,CAACG,KAAhC;AACAP,IAAAA,SAAS,CAACQ,kBAAV,CAA6BJ,OAAO,CAACK,cAArC,EAAqDL,OAAO,CAACM,KAA7D;AAEA,WAAOP,YAAP;AACD;;AAnCyB;;;gCAAfb,c,kBAeW,CAACqB,4BAAD,C;gCAfXrB,c,aAgBMsB,e;gCAhBNtB,c,WAiBI,CAACuB,gBAAKC,QAAL,EAAD,EAA6BD,gBAAKC,QAAL,EAA7B,C;eAqBFxB,c;;;AAEfyB,mCAAmBC,UAAnB,CAA8B1B,cAA9B","sourcesContent":["import type { ReactNode } from 'react';\nimport { ComponentType } from 'react';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { ComponentAspect, ComponentUI } from '@teambit/component';\nimport { UIRuntime } from '@teambit/ui';\nimport { CompositionsSection } from './composition.section';\nimport { CompositionsAspect } from './compositions.aspect';\nimport { MenuBarWidget } from './compositions';\n\nexport type CompositionsMenuSlot = SlotRegistry<MenuBarWidget[]>;\nexport type EmptyStateSlot = SlotRegistry<ComponentType>;\n\nexport class CompositionsUI {\n  constructor(private menuBarWidgetSlot: CompositionsMenuSlot, private emptyStateSlot: EmptyStateSlot) {}\n\n  /**\n   * register a new tester empty state. this allows to register a different empty state from each environment for example.\n   */\n  registerEmptyState(emptyStateComponent: ComponentType) {\n    this.emptyStateSlot.register(emptyStateComponent);\n    return this;\n  }\n\n  registerMenuWidget(...widget: MenuBarWidget[]) {\n    this.menuBarWidgetSlot.register(widget);\n  }\n\n  static dependencies = [ComponentAspect];\n  static runtime = UIRuntime;\n  static slots = [Slot.withType<ReactNode>(), Slot.withType<ComponentType>()];\n\n  static async provider(\n    [component]: [ComponentUI],\n    config: {},\n    [compositionMenuSlot, emptyStateSlot]: [CompositionsMenuSlot, EmptyStateSlot]\n  ) {\n    const compositions = new CompositionsUI(compositionMenuSlot, emptyStateSlot);\n    const section = new CompositionsSection(\n      compositions,\n      { menuBarWidgetSlot: compositions.menuBarWidgetSlot },\n      emptyStateSlot\n    );\n\n    component.registerRoute(section.route);\n    component.registerNavigation(section.navigationLink, section.order);\n\n    return compositions;\n  }\n}\n\nexport default CompositionsUI;\n\nCompositionsAspect.addRuntime(CompositionsUI);\n"]}