"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.exec.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompositionsPreview = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _preview() {
  const data = require("@teambit/preview");

  _preview = function () {
    return data;
  };

  return data;
}

function _lodash() {
  const data = _interopRequireDefault(require("lodash.head"));

  _lodash = function () {
    return data;
  };

  return data;
}

function _compositions() {
  const data = require("./compositions.aspect");

  _compositions = function () {
    return data;
  };

  return data;
}

class CompositionsPreview {
  constructor(
  /**
   * preview extension.
   */
  preview) {
    this.preview = preview;
  }

  render(componentId, modules, otherPreviewDefs, context) {
    if (!modules.componentMap[componentId.fullName]) return;
    const compositions = this.selectPreviewModel(componentId.fullName, modules);
    const active = this.getActiveComposition(compositions);
    modules.mainModule.default(active, context);
  }
  /** gets relevant information for this preview to render */


  selectPreviewModel(componentId, previewModule) {
    const files = previewModule.componentMap[componentId] || []; // allow compositions to come from many files. It is assumed they will have unique named

    const combined = Object.assign({}, ...files);
    return combined;
  }

  getActiveComposition(module) {
    const chosen = window.location.hash.split('&')[1];

    if (!chosen) {
      const first = (0, _lodash().default)(Object.values(module));
      return first;
    }

    return module[chosen];
  }

  static async provider([preview]) {
    const compPreview = new CompositionsPreview(preview);
    preview.registerPreview({
      name: 'compositions',
      render: compPreview.render.bind(compPreview),
      selectPreviewModel: compPreview.selectPreviewModel.bind(compPreview),
      default: true
    });
    return compPreview;
  }

}

exports.CompositionsPreview = CompositionsPreview;
(0, _defineProperty2().default)(CompositionsPreview, "runtime", _preview().PreviewRuntime);
(0, _defineProperty2().default)(CompositionsPreview, "dependencies", [_preview().PreviewAspect]);

_compositions().CompositionsAspect.addRuntime(CompositionsPreview);

//# sourceMappingURL=compositions.preview.runtime.js.map