import { CreateStoreControllerOptions } from '@pnpm/store-connection-manager';
import { ResolvedPackageVersion, Registries, PackageManagerProxyConfig, PackageManagerNetworkConfig } from '@teambit/dependency-resolver';
import { InstallOptions, PeerDependencyIssuesByProjects } from '@pnpm/core';
import { ProjectManifest } from '@pnpm/types';
import { Logger } from '@teambit/logger';
export declare function getPeerDependencyIssues(rootManifest: {
    rootDir: string;
    manifest: ProjectManifest;
}, manifestsByPaths: Record<string, any>, opts: {
    storeDir: string;
    cacheDir: string;
    registries: Registries;
    proxyConfig: PackageManagerProxyConfig;
    networkConfig: PackageManagerNetworkConfig;
    overrides?: Record<string, string>;
} & Pick<CreateStoreControllerOptions, 'packageImportMethod'>): Promise<PeerDependencyIssuesByProjects>;
export declare function install(rootManifest: any, manifestsByPaths: Record<string, ProjectManifest>, storeDir: string, cacheDir: string, registries: Registries, proxyConfig?: PackageManagerProxyConfig, networkConfig?: PackageManagerNetworkConfig, options?: {
    nodeLinker?: 'hoisted' | 'isolated';
    overrides?: Record<string, string>;
} & Pick<InstallOptions, 'publicHoistPattern' | 'hoistPattern'> & Pick<CreateStoreControllerOptions, 'packageImportMethod'>, logger?: Logger): Promise<void>;
export declare function resolveRemoteVersion(packageName: string, rootDir: string, cacheDir: string, registries: Registries, proxyConfig?: PackageManagerProxyConfig, networkConfig?: PackageManagerNetworkConfig): Promise<ResolvedPackageVersion>;
