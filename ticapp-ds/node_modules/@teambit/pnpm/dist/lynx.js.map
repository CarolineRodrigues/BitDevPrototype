{"version":3,"sources":["lynx.ts"],"names":["STORE_CACHE","createStoreController","options","authConfig","getAuthConfig","registries","opts","dir","rootDir","cacheDir","storeDir","rawConfig","verifyStoreIntegrity","httpProxy","proxyConfig","httpsProxy","ca","cert","key","localAddress","networkConfig","noProxy","strictSsl","strictSSL","maxSockets","networkConcurrency","packageImportMethod","cacheKey","JSON","stringify","generateResolverAndFetcher","pnpmConfig","Object","assign","config","timeout","fetchTimeout","retry","factor","fetchRetryFactor","maxTimeout","fetchRetryMaxtimeout","minTimeout","fetchRetryMintimeout","retries","fetchRetries","result","getPeerDependencyIssues","rootManifest","manifestsByPaths","projects","workspacePackages","manifest","entries","push","name","version","registriesMap","getRegistriesMap","storeController","pnpm","ctrl","overrides","install","logger","packagesToBuild","groupPkgs","extendNodePath","preferFrozenLockfile","pruneLockfileImporters","stopReporting","context","argv","reportingOptions","appendOnly","throttleProgress","streamParser","pkgs","map","graph","chunks","forEach","dirs","buildIndex","mutation","resolveRemoteVersion","packageName","resolve","resolveOpts","projectDir","registry","parsedPackage","wantedDep","alias","pref","isValidRange","semver","validRange","val","isSemver","resolvedVia","e","message","includes","undefined","normalizedPref","default","defaultRegistry","uri","NPM_REGISTRY","scopes","registryName","res","alwaysAuth","defaultAuthTokens","getAuthTokenForRegistry","keyName","authTokens","nerfed","alwaysAuthKeyName","isDefault","originalAuthType","originalAuthValue","split"],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport parsePackageName from 'parse-package-name';\nimport defaultReporter from '@pnpm/default-reporter';\nimport { streamParser } from '@pnpm/logger';\nimport { StoreController, WantedDependency } from '@pnpm/package-store';\nimport { createOrConnectStoreController, CreateStoreControllerOptions } from '@pnpm/store-connection-manager';\nimport sortPackages from '@pnpm/sort-packages';\nimport {\n  ResolvedPackageVersion,\n  Registries,\n  NPM_REGISTRY,\n  Registry,\n  PackageManagerProxyConfig,\n  PackageManagerNetworkConfig,\n} from '@teambit/dependency-resolver';\nimport {\n  MutatedProject,\n  mutateModules,\n  InstallOptions,\n  PeerDependencyIssuesByProjects,\n  ProjectOptions,\n} from '@pnpm/core';\nimport * as pnpm from '@pnpm/core';\nimport createResolverAndFetcher, { ClientOptions } from '@pnpm/client';\nimport pickRegistryForPackage from '@pnpm/pick-registry-for-package';\nimport { ProjectManifest } from '@pnpm/types';\nimport { Logger } from '@teambit/logger';\nimport toNerfDart from 'nerf-dart';\nimport pkgsGraph from 'pkgs-graph';\nimport { readConfig } from './read-config';\n\ntype RegistriesMap = {\n  default: string;\n  [registryName: string]: string;\n};\n\nconst STORE_CACHE: Record<string, { ctrl: StoreController; dir: string }> = {};\n\nasync function createStoreController(\n  options: {\n    rootDir: string;\n    storeDir: string;\n    cacheDir: string;\n    registries: Registries;\n    proxyConfig: PackageManagerProxyConfig;\n    networkConfig: PackageManagerNetworkConfig;\n  } & Pick<CreateStoreControllerOptions, 'packageImportMethod'>\n): Promise<{ ctrl: StoreController; dir: string }> {\n  const authConfig = getAuthConfig(options.registries);\n  const opts: CreateStoreControllerOptions = {\n    dir: options.rootDir,\n    cacheDir: options.cacheDir,\n    storeDir: options.storeDir,\n    rawConfig: authConfig,\n    verifyStoreIntegrity: true,\n    httpProxy: options.proxyConfig?.httpProxy,\n    httpsProxy: options.proxyConfig?.httpsProxy,\n    ca: options.proxyConfig?.ca,\n    cert: options.proxyConfig?.cert,\n    key: options.proxyConfig?.key,\n    localAddress: options.networkConfig?.localAddress,\n    noProxy: options.proxyConfig?.noProxy,\n    strictSsl: options.proxyConfig.strictSSL,\n    maxSockets: options.networkConfig.maxSockets,\n    networkConcurrency: options.networkConfig.networkConcurrency,\n    packageImportMethod: options.packageImportMethod,\n  };\n  // We should avoid the recreation of store.\n  // The store holds cache that makes subsequent resolutions faster.\n  const cacheKey = JSON.stringify(opts);\n  if (!STORE_CACHE[cacheKey]) {\n    // Although it would be enough to call createNewStoreController(),\n    // that doesn't resolve the store directory location.\n    STORE_CACHE[cacheKey] = await createOrConnectStoreController(opts);\n  }\n  return STORE_CACHE[cacheKey];\n}\n\nasync function generateResolverAndFetcher(\n  cacheDir: string,\n  registries: Registries,\n  proxyConfig: PackageManagerProxyConfig = {},\n  networkConfig: PackageManagerNetworkConfig = {}\n) {\n  const pnpmConfig = await readConfig();\n  const authConfig = getAuthConfig(registries);\n  const opts: ClientOptions = {\n    authConfig: Object.assign({}, pnpmConfig.config.rawConfig, authConfig),\n    cacheDir,\n    httpProxy: proxyConfig?.httpProxy,\n    httpsProxy: proxyConfig?.httpsProxy,\n    ca: proxyConfig?.ca,\n    cert: proxyConfig?.cert,\n    key: proxyConfig?.key,\n    localAddress: networkConfig?.localAddress,\n    noProxy: proxyConfig?.noProxy,\n    strictSsl: proxyConfig.strictSSL,\n    timeout: networkConfig.fetchTimeout,\n    retry: {\n      factor: networkConfig.fetchRetryFactor,\n      maxTimeout: networkConfig.fetchRetryMaxtimeout,\n      minTimeout: networkConfig.fetchRetryMintimeout,\n      retries: networkConfig.fetchRetries,\n    },\n  };\n  const result = createResolverAndFetcher(opts);\n  return result;\n}\n\nexport async function getPeerDependencyIssues(\n  rootManifest: {\n    rootDir: string;\n    manifest: ProjectManifest;\n  },\n  manifestsByPaths: Record<string, any>,\n  opts: {\n    storeDir: string;\n    cacheDir: string;\n    registries: Registries;\n    proxyConfig: PackageManagerProxyConfig;\n    networkConfig: PackageManagerNetworkConfig;\n    overrides?: Record<string, string>;\n  } & Pick<CreateStoreControllerOptions, 'packageImportMethod'>\n): Promise<PeerDependencyIssuesByProjects> {\n  const projects: ProjectOptions[] = [];\n  const workspacePackages = {};\n  for (const [rootDir, manifest] of Object.entries(manifestsByPaths)) {\n    projects.push({\n      manifest,\n      rootDir,\n    });\n    workspacePackages[manifest.name] = workspacePackages[manifest.name] || {};\n    workspacePackages[manifest.name][manifest.version] = { dir: rootDir, manifest };\n  }\n  projects.push({\n    manifest: rootManifest.manifest,\n    rootDir: rootManifest.rootDir,\n  });\n  const registriesMap = getRegistriesMap(opts.registries);\n  const storeController = await createStoreController({\n    ...opts,\n    rootDir: rootManifest.rootDir,\n  });\n  return pnpm.getPeerDependencyIssues(projects, {\n    storeController: storeController.ctrl,\n    storeDir: storeController.dir,\n    overrides: opts.overrides,\n    workspacePackages,\n    registries: registriesMap,\n  });\n}\n\nexport async function install(\n  rootManifest,\n  manifestsByPaths: Record<string, ProjectManifest>,\n  storeDir: string,\n  cacheDir: string,\n  registries: Registries,\n  proxyConfig: PackageManagerProxyConfig = {},\n  networkConfig: PackageManagerNetworkConfig = {},\n  options?: {\n    nodeLinker?: 'hoisted' | 'isolated';\n    overrides?: Record<string, string>;\n  } & Pick<InstallOptions, 'publicHoistPattern' | 'hoistPattern'> &\n    Pick<CreateStoreControllerOptions, 'packageImportMethod'>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logger?: Logger\n) {\n  const { packagesToBuild, workspacePackages } = groupPkgs({\n    ...manifestsByPaths,\n    [rootManifest.rootDir]: rootManifest.manifest,\n  });\n  const registriesMap = getRegistriesMap(registries);\n  const authConfig = getAuthConfig(registries);\n  const storeController = await createStoreController({\n    rootDir: rootManifest.rootDir,\n    storeDir,\n    cacheDir,\n    registries,\n    proxyConfig,\n    networkConfig,\n    packageImportMethod: options?.packageImportMethod,\n  });\n  const opts: InstallOptions = {\n    storeDir: storeController.dir,\n    dir: rootManifest.rootDir,\n    extendNodePath: false,\n    storeController: storeController.ctrl,\n    workspacePackages,\n    preferFrozenLockfile: true,\n    pruneLockfileImporters: true,\n    registries: registriesMap,\n    rawConfig: authConfig,\n    ...options,\n  };\n\n  const stopReporting = defaultReporter({\n    context: {\n      argv: [],\n    },\n    reportingOptions: {\n      appendOnly: false,\n      throttleProgress: 200,\n    },\n    streamParser,\n  });\n  try {\n    await mutateModules(packagesToBuild, opts);\n  } finally {\n    stopReporting();\n  }\n}\n\nfunction groupPkgs(manifestsByPaths: Record<string, ProjectManifest>) {\n  const pkgs = Object.entries(manifestsByPaths).map(([dir, manifest]) => ({ dir, manifest }));\n  const { graph } = pkgsGraph(pkgs);\n  const chunks = sortPackages(graph as any);\n\n  // This will create local link by pnpm to a component exists in the ws.\n  // it will later deleted by the link process\n  // we keep it here to better support case like this:\n  // compA@1.0.0 uses compB@1.0.0\n  // I have compB@2.0.0 in my workspace\n  // now I install compA@1.0.0\n  // compA is hoisted to the root and install B@1.0.0 hoisted to the root as well\n  // now we will make link to B@2.0.0 and A will break\n  // with this we will have a link to the local B by pnpm so it will install B@1.0.0 inside A\n  // then when overriding the link, A will still works\n  // This is the rational behind not deleting this completely, but need further check that it really works\n  const packagesToBuild: MutatedProject[] = []; // @pnpm/core will use this to install the packages\n  const workspacePackages = {}; // @pnpm/core will use this to link packages to each other\n\n  chunks.forEach((dirs, buildIndex) => {\n    for (const rootDir of dirs) {\n      const manifest = manifestsByPaths[rootDir];\n      packagesToBuild.push({\n        buildIndex,\n        manifest,\n        rootDir,\n        mutation: 'install',\n      });\n      if (manifest.name) {\n        workspacePackages[manifest.name] = workspacePackages[manifest.name] || {};\n        workspacePackages[manifest.name][manifest.version] = { dir: rootDir, manifest };\n      }\n    }\n  });\n  return { packagesToBuild, workspacePackages };\n}\n\nexport async function resolveRemoteVersion(\n  packageName: string,\n  rootDir: string,\n  cacheDir: string,\n  registries: Registries,\n  proxyConfig: PackageManagerProxyConfig = {},\n  networkConfig: PackageManagerNetworkConfig = {}\n): Promise<ResolvedPackageVersion> {\n  const { resolve } = await generateResolverAndFetcher(cacheDir, registries, proxyConfig, networkConfig);\n  const resolveOpts = {\n    projectDir: rootDir,\n    registry: '',\n  };\n  try {\n    const parsedPackage = parsePackageName(packageName);\n    const registriesMap = getRegistriesMap(registries);\n    const registry = pickRegistryForPackage(registriesMap, parsedPackage.name);\n    const wantedDep: WantedDependency = {\n      alias: parsedPackage.name,\n      pref: parsedPackage.version,\n    };\n    const isValidRange = parsedPackage.version ? !!semver.validRange(parsedPackage.version) : false;\n    resolveOpts.registry = registry;\n    const val = await resolve(wantedDep, resolveOpts);\n    const version = isValidRange ? parsedPackage.version : val.manifest.version;\n\n    return {\n      packageName: val.manifest.name,\n      version,\n      isSemver: true,\n      resolvedVia: val.resolvedVia,\n    };\n  } catch (e: any) {\n    if (!e.message?.includes('is not a valid string')) {\n      throw e;\n    }\n    // The provided package is probably a git url or path to a folder\n    const wantedDep: WantedDependency = {\n      alias: undefined,\n      pref: packageName,\n    };\n    const val = await resolve(wantedDep, resolveOpts);\n    return {\n      packageName: val.manifest.name,\n      version: val.normalizedPref,\n      isSemver: false,\n      resolvedVia: val.resolvedVia,\n    };\n  }\n}\n\nfunction getRegistriesMap(registries: Registries): RegistriesMap {\n  const registriesMap = {\n    default: registries.defaultRegistry.uri || NPM_REGISTRY,\n  };\n\n  Object.entries(registries.scopes).forEach(([registryName, registry]) => {\n    registriesMap[`@${registryName}`] = registry.uri;\n  });\n  return registriesMap;\n}\n\nfunction getAuthConfig(registries: Registries): Record<string, any> {\n  const res: any = {};\n  res.registry = registries.defaultRegistry.uri;\n  if (registries.defaultRegistry.alwaysAuth) {\n    res['always-auth'] = true;\n  }\n  const defaultAuthTokens = getAuthTokenForRegistry(registries.defaultRegistry, true);\n  defaultAuthTokens.forEach(({ keyName, val }) => {\n    res[keyName] = val;\n  });\n\n  Object.entries(registries.scopes).forEach(([, registry]) => {\n    const authTokens = getAuthTokenForRegistry(registry);\n    authTokens.forEach(({ keyName, val }) => {\n      res[keyName] = val;\n    });\n    if (registry.alwaysAuth) {\n      const nerfed = toNerfDart(registry.uri);\n      const alwaysAuthKeyName = `${nerfed}:always-auth`;\n      res[alwaysAuthKeyName] = true;\n    }\n  });\n  return res;\n}\n\nfunction getAuthTokenForRegistry(registry: Registry, isDefault = false): { keyName: string; val: string }[] {\n  const nerfed = toNerfDart(registry.uri);\n  if (registry.originalAuthType === 'authToken') {\n    return [\n      {\n        keyName: `${nerfed}:_authToken`,\n        val: registry.originalAuthValue || '',\n      },\n    ];\n  }\n  if (registry.originalAuthType === 'auth') {\n    return [\n      {\n        keyName: isDefault ? '_auth' : `${nerfed}:_auth`,\n        val: registry.originalAuthValue || '',\n      },\n    ];\n  }\n  if (registry.originalAuthType === 'user-pass') {\n    return [\n      {\n        keyName: `${nerfed}:username`,\n        val: registry.originalAuthValue?.split(':')[0] || '',\n      },\n      {\n        keyName: `${nerfed}:_password`,\n        val: registry.originalAuthValue?.split(':')[1] || '',\n      },\n    ];\n  }\n  return [];\n}\n"]}