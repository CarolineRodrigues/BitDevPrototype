{"version":3,"sources":["create-resolver.ts"],"names":["createResolver","fetchFromRegistry","getCredentials","pnpmOpts","resolveFromNpm","resolveFromGit","wantedDependency","opts","resolution","pref","PnpmError","alias"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAIO,SAASA,cAAT,CACLC,iBADK,EAELC,cAFK,EAGLC,QAHK,EAIY;AACjB,QAAMC,cAAc,GAAG,4BAAqBH,iBAArB,EAAwCC,cAAxC,EAAwDC,QAAxD,CAAvB;AACA,QAAME,cAAc,GAAG,4BAAqBF,QAArB,CAAvB;AACA,SAAO,OAAOG,gBAAP,EAAyBC,IAAzB,KAAkC;AACvC,UAAMC,UAAU,GACd,CAAC,MAAMJ,cAAc,CAACE,gBAAD,EAAmBC,IAAnB,CAArB,KACCD,gBAAgB,CAACG,IAAjB,KACE,CAAC,MAAM,gCAAmBH,gBAAnB,CAAP,MACE,MAAMD,cAAc,CAACC,gBAAD,CADtB,MAEE,MAAM,8BAAiBA,gBAAjB,EAAuDC,IAAvD,CAFR,CADF,CAFH;;AAMA,QAAI,CAACC,UAAL,EAAiB;AACf,YAAM,KAAIE,gBAAJ,EACJ,oCADI,EAEH,GAAEJ,gBAAgB,CAACK,KAAjB,GAA0B,GAAEL,gBAAgB,CAACK,KAAM,GAAnD,GAAwD,EAAG,GAC5DL,gBAAgB,CAACG,IAClB,6CAJG,CAAN;AAMD;;AACD,WAAOD,UAAP;AACD,GAhBD;AAiBD","sourcesContent":["import PnpmError from '@pnpm/error';\nimport { FetchFromRegistry, GetCredentials } from '@pnpm/fetching-types';\nimport createResolveFromGit from '@pnpm/git-resolver';\nimport resolveFromLocal from '@pnpm/local-resolver';\nimport createResolveFromNpm, {\n  PackageMeta,\n  PackageMetaCache,\n  ResolveFromNpmOptions,\n  ResolverFactoryOptions,\n} from '@pnpm/npm-resolver';\nimport { ResolveFunction } from '@pnpm/resolver-base';\nimport resolveFromTarball from '@pnpm/tarball-resolver';\n\nexport { PackageMeta, PackageMetaCache, ResolveFunction, ResolverFactoryOptions };\n\nexport function createResolver(\n  fetchFromRegistry: FetchFromRegistry,\n  getCredentials: GetCredentials,\n  pnpmOpts: ResolverFactoryOptions\n): ResolveFunction {\n  const resolveFromNpm = createResolveFromNpm(fetchFromRegistry, getCredentials, pnpmOpts);\n  const resolveFromGit = createResolveFromGit(pnpmOpts);\n  return async (wantedDependency, opts) => {\n    const resolution =\n      (await resolveFromNpm(wantedDependency, opts as ResolveFromNpmOptions)) ||\n      (wantedDependency.pref &&\n        ((await resolveFromTarball(wantedDependency as { pref: string })) ||\n          (await resolveFromGit(wantedDependency as { pref: string })) ||\n          (await resolveFromLocal(wantedDependency as { pref: string }, opts))));\n    if (!resolution) {\n      throw new PnpmError(\n        'SPEC_NOT_SUPPORTED_BY_ANY_RESOLVER',\n        `${wantedDependency.alias ? `${wantedDependency.alias}@` : ''}${\n          wantedDependency.pref\n        } isn't supported by any available resolver.`\n      );\n    }\n    return resolution;\n  };\n}\n"]}