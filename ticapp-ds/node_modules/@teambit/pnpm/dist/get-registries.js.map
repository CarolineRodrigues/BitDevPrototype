{"version":3,"sources":["get-registries.ts"],"names":["getRegistries","config","registriesMap","Object","keys","registries","forEach","regName","uri","credentials","rawConfig","originalAuthConfig","getOriginalAuthConfigByUri","switchTrailingSlash","alwaysAuth","authHeaderValue","nerfed","defnerf","registry","creds","getScopedCredentials","defaultCredentials","originalAuthType","originalAuthValue","scope","token","auth","username","password","Buffer","from","toString","endsWith"],"mappings":"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","sourcesContent":["import getCredentialsByURI from 'credentials-by-uri';\nimport { RegistriesMap } from '@teambit/dependency-resolver';\nimport { stripTrailingChar } from '@teambit/legacy/dist/utils';\nimport { Config } from '@pnpm/config';\nimport { isEmpty } from 'lodash';\nimport toNerfDart from 'nerf-dart';\n\ntype OriginalAuthConfig = {\n  originalAuthType: string;\n  originalAuthValue: string;\n};\n\nexport function getRegistries(config: Config): RegistriesMap {\n  const registriesMap: RegistriesMap = {};\n\n  Object.keys(config.registries).forEach((regName) => {\n    const uri = config.registries[regName];\n    let credentials = getCredentialsByURI(config.rawConfig, uri);\n    let originalAuthConfig = getOriginalAuthConfigByUri(config.rawConfig, uri);\n    if (isEmpty(credentials)) {\n      credentials = getCredentialsByURI(config.rawConfig, switchTrailingSlash(uri));\n      originalAuthConfig = getOriginalAuthConfigByUri(config.rawConfig, switchTrailingSlash(uri));\n    }\n    registriesMap[regName] = {\n      uri,\n      alwaysAuth: !!credentials.alwaysAuth,\n      authHeaderValue: credentials.authHeaderValue,\n      ...originalAuthConfig,\n    };\n  });\n  return registriesMap;\n}\n\n// based on https://github.com/pnpm/credentials-by-uri/blob/master/index.js\nfunction getOriginalAuthConfigByUri(config: Record<string, any>, uri: string): OriginalAuthConfig {\n  const nerfed = toNerfDart(uri);\n  const defnerf = toNerfDart(config.registry);\n\n  const creds = getScopedCredentials(nerfed, `${nerfed}:`, config);\n  if (nerfed !== defnerf) return creds;\n  const defaultCredentials = getScopedCredentials(nerfed, '', config);\n  return {\n    originalAuthType: creds.originalAuthType || defaultCredentials.originalAuthType,\n    originalAuthValue: creds.originalAuthValue || defaultCredentials.originalAuthValue,\n  };\n}\n\nfunction getScopedCredentials(nerfed: string, scope: string, config: Record<string, any>): OriginalAuthConfig {\n  const token = config[`${scope}_authToken`];\n  // Check for bearer token\n  if (token) {\n    return {\n      originalAuthType: `authToken`,\n      originalAuthValue: token,\n    };\n  }\n\n  const auth = config[`${scope}_auth`];\n\n  // Check for basic auth token\n  if (auth) {\n    return {\n      originalAuthType: `auth`,\n      originalAuthValue: auth,\n    };\n  }\n\n  // Check for username/password auth\n  let username;\n  let password;\n  if (config[`${scope}username`]) {\n    username = config[`${scope}username`];\n  }\n  if (config[`${scope}_password`]) {\n    if (scope === '') {\n      password = config[`${scope}_password`];\n    } else {\n      password = Buffer.from(config[`${scope}_password`], 'base64').toString('utf8');\n    }\n  }\n\n  if (username && password) {\n    return {\n      originalAuthType: `user-pass`,\n      originalAuthValue: `${username}:${password}`,\n    };\n  }\n\n  return {\n    originalAuthType: '',\n    originalAuthValue: '',\n  };\n}\n\nfunction switchTrailingSlash(uri: string): string {\n  if (!uri.endsWith('/')) {\n    return `${uri}/`;\n  }\n  return stripTrailingChar(uri, '/');\n}\n"]}