"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PackageMeta", {
  enumerable: true,
  get: function () {
    return _npmResolver().PackageMeta;
  }
});
Object.defineProperty(exports, "PackageMetaCache", {
  enumerable: true,
  get: function () {
    return _npmResolver().PackageMetaCache;
  }
});
Object.defineProperty(exports, "ResolveFunction", {
  enumerable: true,
  get: function () {
    return _resolverBase().ResolveFunction;
  }
});
Object.defineProperty(exports, "ResolverFactoryOptions", {
  enumerable: true,
  get: function () {
    return _npmResolver().ResolverFactoryOptions;
  }
});
exports.createResolver = createResolver;

function _error() {
  const data = _interopRequireDefault(require("@pnpm/error"));

  _error = function () {
    return data;
  };

  return data;
}

function _gitResolver() {
  const data = _interopRequireDefault(require("@pnpm/git-resolver"));

  _gitResolver = function () {
    return data;
  };

  return data;
}

function _localResolver() {
  const data = _interopRequireDefault(require("@pnpm/local-resolver"));

  _localResolver = function () {
    return data;
  };

  return data;
}

function _npmResolver() {
  const data = _interopRequireWildcard(require("@pnpm/npm-resolver"));

  _npmResolver = function () {
    return data;
  };

  return data;
}

function _resolverBase() {
  const data = require("@pnpm/resolver-base");

  _resolverBase = function () {
    return data;
  };

  return data;
}

function _tarballResolver() {
  const data = _interopRequireDefault(require("@pnpm/tarball-resolver"));

  _tarballResolver = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function createResolver(fetchFromRegistry, getCredentials, pnpmOpts) {
  const resolveFromNpm = (0, _npmResolver().default)(fetchFromRegistry, getCredentials, pnpmOpts);
  const resolveFromGit = (0, _gitResolver().default)(pnpmOpts);
  return async (wantedDependency, opts) => {
    const resolution = (await resolveFromNpm(wantedDependency, opts)) || wantedDependency.pref && ((await (0, _tarballResolver().default)(wantedDependency)) || (await resolveFromGit(wantedDependency)) || (await (0, _localResolver().default)(wantedDependency, opts)));

    if (!resolution) {
      throw new (_error().default)('SPEC_NOT_SUPPORTED_BY_ANY_RESOLVER', `${wantedDependency.alias ? `${wantedDependency.alias}@` : ''}${wantedDependency.pref} isn't supported by any available resolver.`);
    }

    return resolution;
  };
}

//# sourceMappingURL=create-resolver.js.map