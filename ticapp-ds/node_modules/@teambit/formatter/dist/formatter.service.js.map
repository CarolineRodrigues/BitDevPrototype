{"version":3,"sources":["formatter.service.tsx"],"names":["FormatterService","constructor","formatterConfig","run","context","options","mergedOpts","optionsWithDefaults","formatterContext","mergeContext","formatter","env","getFormatter","results","check","format","Object","assign","render","descriptor","getDescriptor","id","displayName","version","config","language","ignoreIllegals","undefined","icon","displayConfig"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AASO,MAAMA,gBAAN,CAA4D;AAGjEC,EAAAA,WAAW,CAASC,eAAT,EAA2C;AAAA,SAAlCA,eAAkC,GAAlCA,eAAkC;AAAA,kDAF/C,WAE+C;AAAE;;AAE/C,QAAHC,GAAG,CAACC,OAAD,EAA4BC,OAA5B,EAAsF;AAC7F,UAAMC,UAAU,GAAG,KAAKC,mBAAL,CAAyBF,OAAzB,CAAnB;AACA,UAAMG,gBAAkC,GAAG,KAAKC,YAAL,CAAkBH,UAAlB,EAA8BF,OAA9B,CAA3C;AACA,UAAMM,SAAoB,GAAGN,OAAO,CAACO,GAAR,CAAYC,YAAZ,CAAyBJ,gBAAzB,CAA7B;AAEA,UAAMK,OAAO,GAAGR,OAAO,CAACS,KAAR,GAAgB,MAAMJ,SAAS,CAACI,KAAV,CAAgBN,gBAAhB,CAAtB,GAA0D,MAAME,SAAS,CAACK,MAAV,CAAiBP,gBAAjB,CAAhF;AACA,WAAOK,OAAP;AACD;;AAEON,EAAAA,mBAAmB,CAACF,OAAD,EAA4D;AACrF,WAAO,wBAASA,OAAT,EAAkB,KAAKH,eAAvB,CAAP;AACD;;AAEOO,EAAAA,YAAY,CAACJ,OAAD,EAAmCD,OAAnC,EAAiF;AACnG,UAAMI,gBAAkC,GAAGQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,OAAlB,EAA2BD,OAA3B,CAA3C;AACA,WAAOI,gBAAP;AACD;;AAEDU,EAAAA,MAAM,CAACP,GAAD,EAAqB;AACzB,UAAMQ,UAAU,GAAG,KAAKC,aAAL,CAAmBT,GAAnB,CAAnB;AAEA,wBACE,+BAAC,WAAD;AAAM,MAAA,GAAG,EAAEQ,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEE;AAAvB,oBACE,+BAAC,WAAD;AAAM,MAAA,KAAK,EAAC;AAAZ,gCADF,eAEE,+BAAC,WAAD,QACGF,UADH,aACGA,UADH,uBACGA,UAAU,CAAEE,EADf,QACqBF,UADrB,aACqBA,UADrB,uBACqBA,UAAU,CAAEG,WADjC,SACiDH,UADjD,aACiDA,UADjD,uBACiDA,UAAU,CAAEI,OAD7D,MAFF,eAKE,+BAAC,cAAD,OALF,eAME,+BAAC,WAAD;AAAM,MAAA,KAAK,EAAC;AAAZ,2BANF,eAOE,+BAAC,cAAD,OAPF,eAQE,+BAAC,WAAD,QACG,CAAAJ,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEK,MAAZ,KAAsB,6BAAUL,UAAV,aAAUA,UAAV,uBAAUA,UAAU,CAAEK,MAAtB,EAA8B;AAAEC,MAAAA,QAAQ,EAAE,YAAZ;AAA0BC,MAAAA,cAAc,EAAE;AAA1C,KAA9B,CADzB,CARF,eAWE,+BAAC,cAAD,OAXF,CADF;AAeD;;AAEDN,EAAAA,aAAa,CAACT,GAAD,EAAqB;AAChC,QAAI,CAACA,GAAG,CAACA,GAAJ,CAAQC,YAAb,EAA2B,OAAOe,SAAP;AAC3B,UAAMrB,UAAU,GAAG,KAAKC,mBAAL,CAAyB,EAAzB,CAAnB;AACA,UAAMC,gBAAgB,GAAG,KAAKC,YAAL,CAAkBH,UAAlB,CAAzB;AACA,UAAMI,SAAS,GAAGC,GAAG,CAACA,GAAJ,CAAQC,YAAR,CAAqBJ,gBAArB,CAAlB;AAEA,WAAO;AACLa,MAAAA,EAAE,EAAEX,SAAS,CAACW,EADT;AAELO,MAAAA,IAAI,EAAElB,SAAS,CAACkB,IAFX;AAGLJ,MAAAA,MAAM,EAAEd,SAAS,CAACmB,aAAV,GAA0BnB,SAAS,CAACmB,aAAV,EAA1B,GAAsDF,SAHzD;AAILJ,MAAAA,OAAO,EAAEb,SAAS,CAACa,OAAV,GAAoBb,SAAS,CAACa,OAAV,EAApB,GAA0C,GAJ9C;AAKLD,MAAAA,WAAW,EAAEZ,SAAS,CAACY,WAAV,GAAwBZ,SAAS,CAACY,WAAlC,GAAgD;AALxD,KAAP;AAOD;;AAxDgE","sourcesContent":["import { defaults } from 'lodash';\nimport React from 'react';\nimport { EnvService, ExecutionContext, EnvDefinition } from '@teambit/envs';\nimport { Text, Newline } from 'ink';\nimport highlight from 'cli-highlight';\nimport { Formatter, FormatResults } from './formatter';\nimport { FormatterContext, FormatterOptions } from './formatter-context';\nimport { FormatterConfig } from './formatter.main.runtime';\n\nexport type FormatterServiceOptions = FormatterOptions & {\n  check?: boolean;\n};\n\nexport class FormatterService implements EnvService<FormatResults> {\n  name = 'formatter';\n\n  constructor(private formatterConfig: FormatterConfig) {}\n\n  async run(context: ExecutionContext, options: FormatterServiceOptions): Promise<FormatResults> {\n    const mergedOpts = this.optionsWithDefaults(options);\n    const formatterContext: FormatterContext = this.mergeContext(mergedOpts, context);\n    const formatter: Formatter = context.env.getFormatter(formatterContext);\n\n    const results = options.check ? await formatter.check(formatterContext) : await formatter.format(formatterContext);\n    return results;\n  }\n\n  private optionsWithDefaults(options: FormatterServiceOptions): FormatterServiceOptions {\n    return defaults(options, this.formatterConfig);\n  }\n\n  private mergeContext(options: FormatterServiceOptions, context?: ExecutionContext): FormatterContext {\n    const formatterContext: FormatterContext = Object.assign({}, options, context);\n    return formatterContext;\n  }\n\n  render(env: EnvDefinition) {\n    const descriptor = this.getDescriptor(env);\n\n    return (\n      <Text key={descriptor?.id}>\n        <Text color=\"cyan\">configured formatter: </Text>\n        <Text>\n          {descriptor?.id} ({descriptor?.displayName} @ {descriptor?.version})\n        </Text>\n        <Newline />\n        <Text color=\"cyan\">formatter config:</Text>\n        <Newline />\n        <Text>\n          {descriptor?.config && highlight(descriptor?.config, { language: 'javascript', ignoreIllegals: true })}\n        </Text>\n        <Newline />\n      </Text>\n    );\n  }\n\n  getDescriptor(env: EnvDefinition) {\n    if (!env.env.getFormatter) return undefined;\n    const mergedOpts = this.optionsWithDefaults({});\n    const formatterContext = this.mergeContext(mergedOpts);\n    const formatter = env.env.getFormatter(formatterContext);\n\n    return {\n      id: formatter.id,\n      icon: formatter.icon,\n      config: formatter.displayConfig ? formatter.displayConfig() : undefined,\n      version: formatter.version ? formatter.version() : '?',\n      displayName: formatter.displayName ? formatter.displayName : '?',\n    };\n  }\n}\n"]}