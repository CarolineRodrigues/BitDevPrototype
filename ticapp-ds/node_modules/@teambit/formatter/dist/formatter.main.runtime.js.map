{"version":3,"sources":["formatter.main.runtime.ts"],"names":["FormatterMain","constructor","envs","formatterService","format","components","opts","envsRuntime","createEnvironment","formatResults","run","toFormatServiceOptions","check","createTask","name","FormatTask","FormatterAspect","id","provider","cli","component","loggerAspect","workspace","config","logger","createLogger","FormatterService","formatterAspect","registerService","register","FormatCmd","getHost","MainRuntime","EnvsAspect","CLIAspect","ComponentAspect","LoggerAspect","WorkspaceAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAIO,MAAMA,aAAN,CAAoB;AAGzBC,EAAAA,WAAW,CAASC,IAAT,EAAiCC,gBAAjC,EAAqE;AAAA,SAA5DD,IAA4D,GAA5DA,IAA4D;AAAA,SAApCC,gBAAoC,GAApCA,gBAAoC;AAAE;AAElF;AACF;AACA;;;AACc,QAANC,MAAM,CAACC,UAAD,EAA0BC,IAA1B,EAAkD;AAC5D,UAAMC,WAAW,GAAG,MAAM,KAAKL,IAAL,CAAUM,iBAAV,CAA4BH,UAA5B,CAA1B;AACA,UAAMI,aAAa,GAAGF,WAAW,CAACG,GAAZ,CAAgB,KAAKP,gBAArB,EAAuC,KAAKQ,sBAAL,CAA4BL,IAA5B,EAAkC,KAAlC,CAAvC,CAAtB;AACA,WAAOG,aAAP;AACD;AAED;AACF;AACA;;;AACa,QAALG,KAAK,CAACP,UAAD,EAA0BC,IAA1B,EAAkD;AAC3D,UAAMC,WAAW,GAAG,MAAM,KAAKL,IAAL,CAAUM,iBAAV,CAA4BH,UAA5B,CAA1B;AACA,UAAMI,aAAa,GAAGF,WAAW,CAACG,GAAZ,CAAgB,KAAKP,gBAArB,EAAuC,KAAKQ,sBAAL,CAA4BL,IAA5B,EAAkC,IAAlC,CAAvC,CAAtB;AACA,WAAOG,aAAP;AACD;;AAEOE,EAAAA,sBAAsB,CAACL,IAAD,EAAyBM,KAAK,GAAG,KAAjC,EAAiE;AAC7F,2CACKN,IADL;AAEEM,MAAAA;AAFF;AAID;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,UAAU,CAACC,IAAD,EAA4B;AACpC,WAAO,KAAIC,oBAAJ,EAAeC,6BAAgBC,EAA/B,EAAmCH,IAAnC,CAAP;AACD;;AAMoB,eAARI,QAAQ,CACnB,CAAChB,IAAD,EAAOiB,GAAP,EAAYC,SAAZ,EAAuBC,YAAvB,EAAqCC,SAArC,CADmB,EAEnBC,MAFmB,EAGnB;AACA;AACA,UAAMC,MAAM,GAAGH,YAAY,CAACI,YAAb,CAA0BT,6BAAgBC,EAA1C,CAAf;AACA,UAAMd,gBAAgB,GAAG,KAAIuB,8BAAJ,EAAqBH,MAArB,CAAzB;AACA,UAAMI,eAAe,GAAG,IAAI3B,aAAJ,CAAkBE,IAAlB,EAAwBC,gBAAxB,CAAxB;AACAD,IAAAA,IAAI,CAAC0B,eAAL,CAAqBzB,gBAArB;AACAgB,IAAAA,GAAG,CAACU,QAAJ,CAAa,KAAIC,oBAAJ,EAAcH,eAAd,EAA+BP,SAAS,CAACW,OAAV,EAA/B,EAAoDT,SAApD,CAAb;AAEA,WAAOK,eAAP;AACD;;AAtDwB;;;gCAAd3B,a,aACMgC,kB;gCADNhC,a,kBAsCW,CAACiC,kBAAD,EAAaC,gBAAb,EAAwBC,4BAAxB,EAAyCC,sBAAzC,EAAuDC,4BAAvD,C;gCAtCXrC,a,mBAwC6B,E;;AAiB1CgB,6BAAgBsB,UAAhB,CAA2BtC,aAA3B","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component, ComponentAspect, ComponentMain } from '@teambit/component';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { FormatterAspect } from './formatter.aspect';\nimport { FormatterService, FormatterServiceOptions } from './formatter.service';\nimport { FormatTask } from './format.task';\nimport { FormatCmd } from './format.cmd';\nimport { FormatterOptions } from './formatter-context';\n\nexport type FormatterConfig = {};\nexport class FormatterMain {\n  static runtime = MainRuntime;\n\n  constructor(private envs: EnvsMain, private formatterService: FormatterService) {}\n\n  /**\n   * format an array of components.\n   */\n  async format(components: Component[], opts: FormatterOptions) {\n    const envsRuntime = await this.envs.createEnvironment(components);\n    const formatResults = envsRuntime.run(this.formatterService, this.toFormatServiceOptions(opts, false));\n    return formatResults;\n  }\n\n  /**\n   * check format an array of components.\n   */\n  async check(components: Component[], opts: FormatterOptions) {\n    const envsRuntime = await this.envs.createEnvironment(components);\n    const formatResults = envsRuntime.run(this.formatterService, this.toFormatServiceOptions(opts, true));\n    return formatResults;\n  }\n\n  private toFormatServiceOptions(opts: FormatterOptions, check = false): FormatterServiceOptions {\n    return {\n      ...opts,\n      check,\n    };\n  }\n\n  /**\n   * create a format task for build pipelines.\n   * @param name name of the task.\n   */\n  createTask(name?: string): FormatTask {\n    return new FormatTask(FormatterAspect.id, name);\n  }\n\n  static dependencies = [EnvsAspect, CLIAspect, ComponentAspect, LoggerAspect, WorkspaceAspect];\n\n  static defaultConfig: FormatterConfig = {};\n\n  static async provider(\n    [envs, cli, component, loggerAspect, workspace]: [EnvsMain, CLIMain, ComponentMain, LoggerMain, Workspace],\n    config: FormatterConfig\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const logger = loggerAspect.createLogger(FormatterAspect.id);\n    const formatterService = new FormatterService(config);\n    const formatterAspect = new FormatterMain(envs, formatterService);\n    envs.registerService(formatterService);\n    cli.register(new FormatCmd(formatterAspect, component.getHost(), workspace));\n\n    return formatterAspect;\n  }\n}\n\nFormatterAspect.addRuntime(FormatterMain);\n"]}