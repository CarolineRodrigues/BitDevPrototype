{"version":3,"sources":["format.cmd.ts"],"names":["FormatCmd","constructor","formatter","componentHost","workspace","report","components","formatterOptions","duration","data","componentsIdsToFormat","json","title","chalk","bold","cyan","length","toString","name","componentsOutputs","getAllComponentsResultOutput","results","check","seconds","summery","formatterCmdOptions","timer","Timer","create","start","componentsIds","getIdsToFormat","changed","componentsToFormat","getMany","opts","formatterResults","format","jsonFormatterResults","toJsonFormatResults","timerResponse","stop","map","comp","id","resolveMultipleComponentIds","getNewAndModifiedIds","listIds","componentsResult","context","allResults","getOneComponentResultOutput","join","componentResult","componentId","ignoreVersion","filesWithIssues","filter","fileResult","hasIssues","green","subTitle","red","files","getOneComponentFileResultOutput","filePath","newResults","res","resultsWithoutComponent","result","component","errors"],"mappings":"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","sourcesContent":["import { TimerResponse, Timer } from '@teambit/legacy/dist/toolbox/timer';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ComponentFactory, ComponentID } from '@teambit/component';\nimport chalk from 'chalk';\nimport { EnvsExecutionResult } from '@teambit/envs';\nimport { Workspace } from '@teambit/workspace';\nimport { compact, flatten } from 'lodash';\nimport { FormatterMain } from './formatter.main.runtime';\nimport { ComponentFormatResult, FormatResults, FileFormatResult } from './formatter';\nimport { FormatterOptions } from './formatter-context';\n\nexport type FormatCmdOptions = {\n  changed?: boolean;\n  json?: boolean;\n  check?: boolean;\n};\n\ntype OutputContext = {\n  check?: boolean;\n};\n\n/**\n * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component\n */\nexport type JsonComponentFormatResult = Omit<ComponentFormatResult, 'component'> & {\n  componentId: ComponentID;\n};\n\nexport type JsonFormatDataResults = Omit<FormatResults, 'results'> & { results: JsonComponentFormatResult[] };\n/**\n * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component\n */\nexport type JsonFormatResults = {\n  duration: TimerResponse;\n  data: JsonFormatDataResults;\n  componentsIdsToFormat: string[];\n};\n\nexport class FormatCmd implements Command {\n  name = 'format [component...]';\n  description = 'format components in the development workspace';\n  group = 'development';\n  options = [\n    ['c', 'changed', 'format only new and modified components'],\n    ['', 'check', 'will output a human-friendly message and a list of unformatted files, if any'],\n    ['j', 'json', 'return the format results in json format'],\n  ] as CommandOptions;\n\n  constructor(\n    private formatter: FormatterMain,\n    private componentHost: ComponentFactory,\n    private workspace: Workspace\n  ) {}\n\n  async report([components = []]: [string[]], formatterOptions: FormatCmdOptions) {\n    const { duration, data, componentsIdsToFormat } = await this.json([components], formatterOptions);\n\n    const title = chalk.bold(\n      `formatting total of ${chalk.cyan(\n        componentsIdsToFormat.length.toString()\n      )} component(s) in workspace '${chalk.cyan(this.componentHost.name)}`\n    );\n\n    const componentsOutputs = this.getAllComponentsResultOutput(data.results, { check: formatterOptions.check });\n\n    const { seconds } = duration;\n    const summery = `formatted ${chalk.cyan(componentsIdsToFormat.length.toString())} components in ${chalk.cyan(\n      seconds.toString()\n    )}.`;\n\n    return `${title}\\n\\n${componentsOutputs}\\n\\n${summery}`;\n  }\n\n  async json([components = []]: [string[]], formatterCmdOptions: FormatCmdOptions): Promise<JsonFormatResults> {\n    const timer = Timer.create();\n    timer.start();\n    const componentsIds = await this.getIdsToFormat(components, formatterCmdOptions.changed);\n    const componentsToFormat = await this.workspace.getMany(componentsIds);\n    const opts: FormatterOptions = {};\n    const formatterResults = formatterCmdOptions.check\n      ? await this.formatter.check(componentsToFormat, opts)\n      : await this.formatter.format(componentsToFormat, opts);\n    const jsonFormatterResults = toJsonFormatResults(formatterResults);\n    const timerResponse = timer.stop();\n    return {\n      duration: timerResponse,\n      data: jsonFormatterResults,\n      componentsIdsToFormat: componentsToFormat.map((comp) => comp.id.toString()),\n    };\n  }\n\n  private async getIdsToFormat(components: string[], changed = false): Promise<ComponentID[]> {\n    if (components.length) {\n      return this.workspace.resolveMultipleComponentIds(components);\n    }\n    if (changed) {\n      return this.workspace.getNewAndModifiedIds();\n    }\n    return this.componentHost.listIds();\n  }\n\n  private getAllComponentsResultOutput(componentsResult: JsonComponentFormatResult[], context: OutputContext) {\n    const allResults = componentsResult.map((comp) => this.getOneComponentResultOutput(comp, context));\n    return allResults.join('\\n\\n');\n  }\n\n  private getOneComponentResultOutput(componentResult: JsonComponentFormatResult, context: OutputContext) {\n    const title = chalk.bold.cyan(componentResult.componentId.toString({ ignoreVersion: true }));\n    const filesWithIssues = componentResult.results.filter((fileResult) => fileResult.hasIssues);\n    if (!filesWithIssues || !filesWithIssues.length) {\n      return `${title}\\n${chalk.green('no issues found')}`;\n    }\n    let subTitle = chalk.green('the following files have been re-formatted:');\n    if (context.check) {\n      subTitle = chalk.red('issues found in the following files:');\n    }\n    const files = filesWithIssues.map(this.getOneComponentFileResultOutput);\n    return `${title}\\n${subTitle}\\n${files.join('\\n')}`;\n  }\n\n  private getOneComponentFileResultOutput(fileResult: FileFormatResult) {\n    return fileResult.filePath;\n  }\n}\n\nfunction toJsonFormatResults(results: EnvsExecutionResult<FormatResults>): JsonFormatDataResults {\n  const newResults = results.results.map((res) => {\n    const resultsWithoutComponent = res.data?.results.map((result) => {\n      return {\n        componentId: result.component.id,\n        results: result.results,\n      };\n    });\n    return compact(resultsWithoutComponent);\n  });\n  return {\n    results: compact(flatten(newResults)),\n    errors: results?.errors,\n  };\n}\n"]}