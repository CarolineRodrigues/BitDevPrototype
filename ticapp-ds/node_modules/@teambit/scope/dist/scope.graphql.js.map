{"version":3,"sources":["scope.graphql.ts"],"names":["scopeSchema","scopeMain","typeDefs","resolvers","Scope","name","scope","description","icon","backgroundIconColor","components","props","list","offset","limit","includeCache","get","id","ComponentID","fromString","_getLegacy","resolvedId","resolveId","component","state","_consumer","toString","_legacyLatestVersions","ids","path","_legacyList","namespaces","listData","forEach","data","getLogs","getMany","map","str","Query"],"mappings":"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","sourcesContent":["import { ComponentID } from '@teambit/component';\nimport gql from 'graphql-tag';\nimport { latestVersions } from '@teambit/legacy/dist/api/scope';\nimport list from '@teambit/legacy/dist/api/scope/lib/scope-list';\nimport { ScopeMain } from './scope.main.runtime';\n\nexport function scopeSchema(scopeMain: ScopeMain) {\n  return {\n    typeDefs: gql`\n      type Scope {\n        # name of the scope.\n        name: String\n\n        # description of the scope.\n        description: String\n\n        # icon of the scope.\n        icon: String\n\n        # background color of the icon.\n        backgroundIconColor: String\n\n        # path of the scope.\n        path: String\n\n        # list of components contained in the scope.\n        components(offset: Int, limit: Int, includeCache: Boolean): [Component]\n\n        # get a specific component.\n        get(id: String!): Component\n\n        # get serialized legacy component. deprecated. PLEASE DO NOT USE THIS API.\n        _getLegacy(id: String!): String\n\n        # get logs.\n        getLogs(id: String!): [Log]\n\n        # get many components by ID.\n        getMany(ids: [String]!): [Component]\n\n        # get serialized legacy component ids with versions. deprecated. PLEASE DO NOT USE THIS API.\n        _legacyLatestVersions(ids: [String]!): [String]\n\n        # get serialized list component of components. deprecated. PLEASE DO NOT USE THIS API.\n        _legacyList(namespaces: String): [LegacyMeta]\n      }\n\n      type Log {\n        message: String\n        username: String\n        email: String\n        date: String\n        hash: String!\n        tag: String\n      }\n\n      type LegacyMeta {\n        id: String\n        deprecated: Boolean\n      }\n\n      type Query {\n        scope: Scope\n      }\n    `,\n    resolvers: {\n      Scope: {\n        name: (scope: ScopeMain) => {\n          return scope.name;\n        },\n        description: (scope: ScopeMain) => {\n          return scope.description;\n        },\n        icon: (scope: ScopeMain) => {\n          return scope.icon;\n        },\n        backgroundIconColor: (scope: ScopeMain) => {\n          return scope.backgroundIconColor;\n        },\n        components: (scope: ScopeMain, props?: { offset: number; limit: number; includeCache?: boolean }) => {\n          if (!props) return scope.list();\n          return scope.list({ offset: props.offset, limit: props.limit }, props.includeCache);\n        },\n\n        get: async (scope: ScopeMain, { id }: { id: string }) => {\n          return scope.get(ComponentID.fromString(id));\n        },\n\n        _getLegacy: async (scope: ScopeMain, { id }: { id: string }) => {\n          const resolvedId = await scope.resolveId(id);\n          const component = await scope.get(resolvedId);\n          if (!component) return null;\n          return component.state._consumer.toString();\n        },\n\n        _legacyLatestVersions: async (scope: ScopeMain, { ids }: { ids: string[] }) => {\n          return latestVersions(scope.path, ids);\n        },\n\n        _legacyList: async (scope: ScopeMain, { namespaces }: { namespaces: string }) => {\n          const listData: any = await list(scope.path, namespaces);\n          listData.forEach((data) => {\n            data.id = data.id.toString();\n          });\n          return listData;\n        },\n\n        getLogs: async (scope: ScopeMain, { id }: { id: string }) => {\n          return scope.getLogs(ComponentID.fromString(id));\n        },\n\n        getMany: async (scope: ScopeMain, { ids }: { ids: string[] }) => {\n          return scope.getMany(ids.map((str) => ComponentID.fromString(str)));\n        },\n        // delete: async (scope: ScopeMain, props: {  }) => {\n\n        // }\n      },\n      Query: {\n        scope: () => scopeMain,\n      },\n    },\n  };\n}\n"]}