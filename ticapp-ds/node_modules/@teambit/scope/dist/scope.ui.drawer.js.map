{"version":3,"sources":["scope.ui.drawer.tsx"],"names":["scopeDrawer","treeWidgets","filtersSlot","drawerWidgetSlot","customScopeTreeNodeRenderer","treeNodeSlot","TreeNode","props","children","node","payload","ScopePayload","map","childNode","id","ComponentsDrawer","order","name","plugins","tree","widgets","customRenderer","filters","drawerWidgets","emptyMessage","useComponents","scope","ScopeContext","loading","components"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAUO,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,WAAf;AAA4BC,EAAAA;AAA5B,CAAD,KAAsE;AAC/F,QAAMC,2BAA2B,GAAIC,YAAD,IAClC,SAASC,QAAT,CAAkBC,KAAlB,EAAqD;AACnD,UAAMC,QAAQ,GAAGD,KAAK,CAACE,IAAN,CAAWD,QAA5B;AAEA,QAAI,CAACA,QAAL,EAAe,oBAAO,+BAAC,+BAAD,+BAAmBD,KAAnB;AAA0B,MAAA,YAAY,EAAEF;AAAxC,OAAP,CAHoC,CAKnD;;AACA,QAAIE,KAAK,CAACE,IAAN,CAAWC,OAAX,YAA8BC,8BAAlC,EAAgD;AAC9C,0BACE,gEACGH,QAAQ,CAACI,GAAT,CAAcC,SAAD,iBACZ,+BAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,SAAS,CAACC;AAAzB,SAAiCP,KAAjC;AAAwC,QAAA,IAAI,EAAEM;AAA9C,SADD,CADH,CADF;AAOD;;AAED,wBAAO,+BAAC,mCAAD,EAAuBN,KAAvB,CAAP;AACD,GAlBH;;AAoBA,SAAO,KAAIQ,+BAAJ,EAAqB;AAC1BC,IAAAA,KAAK,EAAE,CADmB;AAE1BF,IAAAA,EAAE,EAAE,yBAFsB;AAG1BG,IAAAA,IAAI,EAAE,YAHoB;AAI1BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAEnB,WADL;AAEJoB,QAAAA,cAAc,EAAEjB;AAFZ,OADC;AAKPkB,MAAAA,OAAO,EAAEpB,WALF;AAMPqB,MAAAA,aAAa,EAAEpB;AANR,KAJiB;AAY1BqB,IAAAA,YAAY,EAAE,gBAZY;AAa1BC,IAAAA,aAAa,EAAE,MAAM;AACnB,YAAMC,KAAK,GAAG,yBAAWC,4BAAX,CAAd;AACA,aAAO;AACLC,QAAAA,OAAO,EAAE,CAACF,KADL;AAELG,QAAAA,UAAU,EAAEH,KAAK,CAACG,UAAN,IAAoB;AAF3B,OAAP;AAID;AAnByB,GAArB,CAAP;AAqBD,CA1CM","sourcesContent":["import React, { useContext } from 'react';\nimport { ComponentsDrawer, ComponentFiltersSlot, DrawerWidgetSlot } from '@teambit/component.ui.component-drawer';\nimport { ScopeContext } from '@teambit/scope.ui.hooks.scope-context';\nimport { ComponentView, NamespaceTreeNode, PayloadType, ScopePayload } from '@teambit/ui-foundation.ui.side-bar';\nimport { TreeNodeProps } from '@teambit/design.ui.tree';\nimport { SidebarSlot } from './scope.ui.runtime';\n\nexport type ScopeDrawerProps = {\n  treeWidgets: SidebarSlot;\n  filtersSlot: ComponentFiltersSlot;\n  drawerWidgetSlot: DrawerWidgetSlot;\n};\n\nexport const scopeDrawer = ({ treeWidgets, filtersSlot, drawerWidgetSlot }: ScopeDrawerProps) => {\n  const customScopeTreeNodeRenderer = (treeNodeSlot) =>\n    function TreeNode(props: TreeNodeProps<PayloadType>) {\n      const children = props.node.children;\n\n      if (!children) return <ComponentView {...props} treeNodeSlot={treeNodeSlot} />;\n\n      // skip over scope node and render only children\n      if (props.node.payload instanceof ScopePayload) {\n        return (\n          <>\n            {children.map((childNode) => (\n              <TreeNode key={childNode.id} {...props} node={childNode}></TreeNode>\n            ))}\n          </>\n        );\n      }\n\n      return <NamespaceTreeNode {...props} />;\n    };\n\n  return new ComponentsDrawer({\n    order: 0,\n    id: 'scope-components-drawer',\n    name: 'COMPONENTS',\n    plugins: {\n      tree: {\n        widgets: treeWidgets,\n        customRenderer: customScopeTreeNodeRenderer,\n      },\n      filters: filtersSlot,\n      drawerWidgets: drawerWidgetSlot,\n    },\n    emptyMessage: 'Scope is empty',\n    useComponents: () => {\n      const scope = useContext(ScopeContext);\n      return {\n        loading: !scope,\n        components: scope.components || [],\n      };\n    },\n  });\n};\n"]}