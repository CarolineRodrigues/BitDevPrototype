"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scopeDrawer = void 0;

function _extends2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

  _extends2 = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireWildcard(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _componentUi() {
  const data = require("@teambit/component.ui.component-drawer");

  _componentUi = function () {
    return data;
  };

  return data;
}

function _scopeUiHooks() {
  const data = require("@teambit/scope.ui.hooks.scope-context");

  _scopeUiHooks = function () {
    return data;
  };

  return data;
}

function _uiFoundationUi() {
  const data = require("@teambit/ui-foundation.ui.side-bar");

  _uiFoundationUi = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const scopeDrawer = ({
  treeWidgets,
  filtersSlot,
  drawerWidgetSlot
}) => {
  const customScopeTreeNodeRenderer = treeNodeSlot => function TreeNode(props) {
    const children = props.node.children;
    if (!children) return /*#__PURE__*/_react().default.createElement(_uiFoundationUi().ComponentView, (0, _extends2().default)({}, props, {
      treeNodeSlot: treeNodeSlot
    })); // skip over scope node and render only children

    if (props.node.payload instanceof _uiFoundationUi().ScopePayload) {
      return /*#__PURE__*/_react().default.createElement(_react().default.Fragment, null, children.map(childNode => /*#__PURE__*/_react().default.createElement(TreeNode, (0, _extends2().default)({
        key: childNode.id
      }, props, {
        node: childNode
      }))));
    }

    return /*#__PURE__*/_react().default.createElement(_uiFoundationUi().NamespaceTreeNode, props);
  };

  return new (_componentUi().ComponentsDrawer)({
    order: 0,
    id: 'scope-components-drawer',
    name: 'COMPONENTS',
    plugins: {
      tree: {
        widgets: treeWidgets,
        customRenderer: customScopeTreeNodeRenderer
      },
      filters: filtersSlot,
      drawerWidgets: drawerWidgetSlot
    },
    emptyMessage: 'Scope is empty',
    useComponents: () => {
      const scope = (0, _react().useContext)(_scopeUiHooks().ScopeContext);
      return {
        loading: !scope,
        components: scope.components || []
      };
    }
  });
};

exports.scopeDrawer = scopeDrawer;

//# sourceMappingURL=scope.ui.drawer.js.map