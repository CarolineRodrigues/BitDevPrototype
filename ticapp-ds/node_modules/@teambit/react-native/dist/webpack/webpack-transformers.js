"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.previewConfigTransformer = exports.devServerConfigTransformer = void 0;
const reactNativePackagesRule = {
  test: /\.(jsx?|tsx?)$/,
  include: [/node_modules\/react-native-/],
  loader: require.resolve('babel-loader'),
  options: {
    cacheDirectory: false,
    presets: [require.resolve('@babel/preset-env'), require.resolve('@babel/preset-react')]
  }
};
/**
 * Transformation to apply for both preview and dev server
 * @param config
 * @param _context
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars

function commonTransformation(config, _context) {
  config.addAliases({
    react: require.resolve('react'),
    'react-dom/server': require.resolve('react-dom/server'),
    'react-native$': require.resolve('react-native-web')
  }).addModuleRule(reactNativePackagesRule);
  return config;
}
/**
 * Transformation for the preview only
 * @param config
 * @param context
 * @returns
 */


const previewConfigTransformer = (config, context) => {
  const newConfig = commonTransformation(config, context);
  return newConfig;
};
/**
 * Transformation for the dev server only
 * @param config
 * @param context
 * @returns
 */


exports.previewConfigTransformer = previewConfigTransformer;

const devServerConfigTransformer = (config, context) => {
  const newConfig = commonTransformation(config, context);
  return newConfig;
};

exports.devServerConfigTransformer = devServerConfigTransformer;

//# sourceMappingURL=webpack-transformers.js.map