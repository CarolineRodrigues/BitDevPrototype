{"version":3,"sources":["react-native.main.runtime.ts"],"names":["jestConfig","require","resolve","ReactNativeMain","constructor","react","reactNativeEnv","envs","overrideTsConfig","bind","overrideJestConfig","overrideBuildPipe","overrideBuildTsConfig","overridePackageJsonProps","useTypescript","usePrettier","useEslint","icon","useWebpack","modifiers","mergedModifiers","previewConfig","previewConfigTransformer","concat","devServerConfig","devServerConfigTransformer","overrideDependencies","dependencyPolicy","override","getDependencies","compose","transformers","targetEnv","merge","provider","generator","webpackModifiers","reactNativeComposedEnv","ReactNativeEnv","registerEnv","registerComponentTemplate","componentTemplates","registerWorkspaceTemplate","workspaceTemplates","ReactAspect","EnvsAspect","GeneratorAspect","MainRuntime","ReactNativeAspect","addRuntime"],"mappings":"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","sourcesContent":["import { EnvPolicyConfigObject } from '@teambit/dependency-resolver';\nimport { GeneratorAspect, GeneratorMain } from '@teambit/generator';\nimport { TsConfigSourceFile } from 'typescript';\nimport type { TsCompilerOptionsWithoutTsConfig } from '@teambit/typescript';\nimport { merge } from 'lodash';\nimport { MainRuntime } from '@teambit/cli';\nimport { BuildTask } from '@teambit/builder';\nimport { Aspect } from '@teambit/harmony';\nimport { PackageJsonProps } from '@teambit/pkg';\nimport { EnvsAspect, EnvsMain, EnvTransformer, Environment } from '@teambit/envs';\nimport { ReactAspect, ReactMain, ReactEnv, UseWebpackModifiers } from '@teambit/react';\nimport { ReactNativeAspect } from './react-native.aspect';\nimport { componentTemplates, workspaceTemplates } from './react-native.templates';\nimport { previewConfigTransformer, devServerConfigTransformer } from './webpack/webpack-transformers';\nimport { ReactNativeEnv } from './react-native.env';\n\nconst jestConfig = require.resolve('./jest/jest.config');\n\nexport class ReactNativeMain {\n  constructor(\n    private react: ReactMain,\n\n    readonly reactNativeEnv: ReactNativeEnv,\n\n    private envs: EnvsMain\n  ) {}\n\n  icon() {\n    return 'https://static.bit.dev/extensions-icons/react.svg';\n  }\n\n  /**\n   * @deprecated use useTypescript()\n   * override the TS config of the environment.\n   */\n  overrideTsConfig: (\n    tsconfig?: TsConfigSourceFile,\n    compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>,\n    tsModule?: any\n  ) => EnvTransformer = this.react.overrideTsConfig.bind(this.react);\n\n  /**\n   * override the jest config of the environment.\n   */\n  overrideJestConfig = this.react.overrideJestConfig.bind(this.react);\n\n  /**\n   * override the env build pipeline.\n   */\n  overrideBuildPipe: (tasks: BuildTask[]) => EnvTransformer = this.react.overrideBuildPipe.bind(this.react);\n\n  /**\n   * @deprecated use useTypescript()\n   * override the build ts config.\n   */\n  overrideBuildTsConfig: (\n    tsconfig?: TsConfigSourceFile,\n    compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>\n  ) => EnvTransformer = this.react.overrideBuildTsConfig.bind(this.react);\n\n  /**\n   * override package json properties.\n   */\n  overridePackageJsonProps: (props: PackageJsonProps) => EnvTransformer = this.react.overridePackageJsonProps.bind(\n    this.react\n  );\n\n  /**\n   * override the env's typescript config for both dev and build time.\n   * Replaces both overrideTsConfig (devConfig) and overrideBuildTsConfig (buildConfig)\n   */\n  useTypescript = this.react.useTypescript.bind(this.react);\n\n  /**\n   * override the env's dev server and preview webpack configurations.\n   * Replaces both overrideDevServerConfig and overridePreviewConfig\n   */\n  useWebpack(modifiers?: UseWebpackModifiers) {\n    const mergedModifiers: UseWebpackModifiers = {\n      previewConfig: [previewConfigTransformer].concat(modifiers?.previewConfig ?? []),\n      devServerConfig: [devServerConfigTransformer].concat(modifiers?.devServerConfig ?? []),\n    };\n    return this.react.useWebpack(mergedModifiers);\n  }\n\n  /**\n   * An API to mutate the prettier config\n   */\n  usePrettier = this.react.usePrettier.bind(this.react);\n\n  /**\n   * An API to mutate the eslint config\n   */\n  useEslint = this.react.useEslint.bind(this.react);\n\n  /**\n   * override the dependency configuration of the component environment.\n   */\n  overrideDependencies(dependencyPolicy: EnvPolicyConfigObject) {\n    return this.envs.override({\n      getDependencies: () => merge(dependencyPolicy, this.reactNativeEnv.getDependencies()),\n    });\n  }\n\n  /**\n   * create a new composition of the node environment.\n   */\n  compose(transformers: EnvTransformer[], targetEnv: Environment = {}) {\n    return this.envs.compose(this.envs.merge(targetEnv, this.reactNativeEnv), transformers);\n  }\n\n  static dependencies: Aspect[] = [ReactAspect, EnvsAspect, GeneratorAspect];\n  static runtime = MainRuntime;\n  static async provider([react, envs, generator]: [ReactMain, EnvsMain, GeneratorMain]) {\n    const webpackModifiers: UseWebpackModifiers = {\n      previewConfig: [previewConfigTransformer],\n      devServerConfig: [devServerConfigTransformer],\n    };\n\n    const reactNativeComposedEnv: ReactNativeEnv = envs.merge<ReactNativeEnv, ReactEnv>(\n      new ReactNativeEnv(react),\n      react.compose([react.useWebpack(webpackModifiers), react.overrideJestConfig(jestConfig)])\n    );\n    envs.registerEnv(reactNativeComposedEnv);\n    generator.registerComponentTemplate(componentTemplates);\n    generator.registerWorkspaceTemplate(workspaceTemplates);\n    return new ReactNativeMain(react, reactNativeComposedEnv, envs);\n  }\n}\n\nReactNativeAspect.addRuntime(ReactNativeMain);\n"]}