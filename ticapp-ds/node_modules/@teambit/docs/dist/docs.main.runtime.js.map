{"version":3,"sources":["docs.main.runtime.ts"],"names":["DocsMain","constructor","patterns","preview","pkg","compiler","workspace","logger","devFiles","docPropSlot","docReaderSlot","getDocsMap","components","ComponentMap","as","component","getDocsFiles","computeDevFiles","docFiles","get","DocsAspect","id","state","filesystem","files","filter","file","includes","relative","getDescription","componentDoc","getDoc","desc","description","consumerComponent","_consumer","fromJsDocs","docs","find","doc","getTemplate","env","getDocsTemplate","getDocReader","extension","values","docReader","isFormatSupported","computeDoc","length","docFile","extname","FileExtensionNotSupported","read","contents","err","error","docData","aspects","data","Doc","filePath","DocPropList","props","getPatterns","registerDocReader","register","provider","graphql","loggerAspect","config","createLogger","DefaultDocReader","registerDevPattern","onComponentLoad","toObject","registerDefinition","DocsPreviewDefinition","Slot","withType","MainRuntime","PreviewAspect","GraphqlAspect","WorkspaceAspect","PkgAspect","CompilerAspect","LoggerAspect","DevFilesAspect","ComponentAspect","addRuntime"],"mappings":"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","sourcesContent":["import { Slot, SlotRegistry } from '@teambit/harmony';\nimport { MainRuntime } from '@teambit/cli';\nimport { LoggerAspect, LoggerMain, Logger } from '@teambit/logger';\nimport { CompilerAspect, CompilerMain } from '@teambit/compiler';\nimport ComponentAspect, { Component, ComponentMap } from '@teambit/component';\nimport { PkgAspect, PkgMain } from '@teambit/pkg';\nimport type { Environment } from '@teambit/envs';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { PreviewAspect, PreviewMain } from '@teambit/preview';\nimport DevFilesAspect, { DevFilesMain } from '@teambit/dev-files';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { Doc, DocPropList } from '@teambit/docs.entities.doc';\nimport { DocsAspect } from './docs.aspect';\nimport { DocsPreviewDefinition } from './docs.preview-definition';\nimport { docsSchema } from './docs.graphql';\nimport { DocReader } from './doc-reader';\nimport { DefaultDocReader } from './default-doc-reader';\nimport { FileExtensionNotSupported } from './exceptions';\n\nexport type ComponentDocs = {\n  files: string[];\n  component: Component;\n};\n\nexport type DocProp = {};\n\nexport type DocPropSlot = SlotRegistry<DocProp>;\n\nexport type DocReaderSlot = SlotRegistry<DocReader>;\n\nexport type DocsConfig = {\n  /**\n   * glob patterns to identify doc files.\n   */\n  patterns: string[];\n};\n\n/**\n * the component documentation extension.\n */\nexport class DocsMain {\n  constructor(\n    private patterns: string[],\n    /**\n     * envs extension.\n     */\n    private preview: PreviewMain,\n\n    private pkg: PkgMain,\n\n    private compiler: CompilerMain,\n\n    private workspace: Workspace,\n\n    private logger: Logger,\n\n    private devFiles: DevFilesMain,\n\n    private docPropSlot: DocPropSlot,\n\n    private docReaderSlot: DocReaderSlot\n  ) {}\n\n  /**\n   * returns an array of doc file paths for a set of components.\n   */\n  getDocsMap(components: Component[]): ComponentMap<AbstractVinyl[]> {\n    return ComponentMap.as<AbstractVinyl[]>(components, (component) => {\n      return this.getDocsFiles(component);\n    });\n  }\n\n  getDocsFiles(component: Component): AbstractVinyl[] {\n    const devFiles = this.devFiles.computeDevFiles(component);\n    const docFiles = devFiles.get(DocsAspect.id);\n    return component.state.filesystem.files.filter((file) => docFiles.includes(file.relative));\n  }\n\n  /**\n   * compute the description of the component from its source code and docs file.\n   */\n  async getDescription(component: Component): Promise<string> {\n    const componentDoc = this.getDoc(component);\n    const desc = componentDoc?.description;\n    if (desc) return desc;\n    const consumerComponent: ConsumerComponent = component.state._consumer;\n    const fromJsDocs = consumerComponent.docs?.find((doc) => doc.description);\n\n    return fromJsDocs?.description || '';\n  }\n\n  async getTemplate(env: Environment) {\n    return env.getDocsTemplate();\n  }\n\n  getDocReader(extension: string) {\n    return this.docReaderSlot.values().find((docReader) => docReader.isFormatSupported(extension));\n  }\n\n  /**\n   * compute a doc for a component.\n   */\n  async computeDoc(component: Component) {\n    const docFiles = this.getDocsFiles(component);\n    if (docFiles.length) {\n      // currently taking the the first docs file found with an abstract. (we support only one)\n      const docFile = docFiles[0];\n\n      try {\n        const docReader = this.getDocReader(docFile.extname);\n        if (!docReader) throw new FileExtensionNotSupported(docFile.relative, docFile.extname);\n        const doc = await docReader.read(docFile.relative, docFile.contents, component);\n        return doc;\n      } catch (err: any) {\n        this.logger.error('docs.main.runtime.computeDoc caught an error', err);\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  getDoc(component: Component) {\n    const docData = component.state.aspects.get(DocsAspect.id)?.data?.doc;\n    if (!docData) return null;\n    return new Doc(docData.filePath, new DocPropList(docData.props));\n  }\n\n  getPatterns() {\n    return this.patterns;\n  }\n\n  /**\n   * register a new doc reader. this allows to support further\n   * documentation file formats.\n   */\n  registerDocReader(docReader: DocReader) {\n    this.docReaderSlot.register(docReader);\n    return this;\n  }\n\n  static slots = [Slot.withType<DocProp>(), Slot.withType<DocReader>()];\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    PreviewAspect,\n    GraphqlAspect,\n    WorkspaceAspect,\n    PkgAspect,\n    CompilerAspect,\n    LoggerAspect,\n    DevFilesAspect,\n    ComponentAspect,\n  ];\n\n  static defaultConfig = {\n    patterns: ['**/*.docs.*'],\n  };\n\n  static async provider(\n    [preview, graphql, workspace, pkg, compiler, loggerAspect, devFiles]: [\n      PreviewMain,\n      GraphqlMain,\n      Workspace,\n      PkgMain,\n      CompilerMain,\n      LoggerMain,\n      DevFilesMain\n    ],\n    config: DocsConfig,\n    [docPropSlot, docReaderSlot]: [DocPropSlot, DocReaderSlot]\n  ) {\n    const logger = loggerAspect.createLogger(DocsAspect.id);\n    const docs = new DocsMain(\n      config.patterns,\n\n      preview,\n\n      pkg,\n\n      compiler,\n\n      workspace,\n\n      logger,\n\n      devFiles,\n\n      docPropSlot,\n\n      docReaderSlot\n    );\n    docs.registerDocReader(new DefaultDocReader(pkg, compiler, workspace));\n    devFiles.registerDevPattern(config.patterns);\n\n    if (workspace) {\n      workspace.onComponentLoad(async (component) => {\n        const doc = await docs.computeDoc(component);\n\n        return {\n          doc: doc?.toObject(),\n        };\n      });\n    }\n\n    graphql.register(docsSchema(docs));\n\n    preview.registerDefinition(new DocsPreviewDefinition(docs));\n    return docs;\n  }\n}\n\nDocsAspect.addRuntime(DocsMain);\n"]}