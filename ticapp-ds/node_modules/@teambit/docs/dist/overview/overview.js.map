{"version":3,"sources":["overview.tsx"],"names":["ENV_LIST_WITH_DOCS_TEMPLATE","ENV_ASPECT_NAME","Overview","titleBadges","component","ComponentContext","componentDescriptor","lanesModel","currentLane","envType","get","type","showHeaderOutsideIframe","preview","includesEnvTemplate","includes","buildStatus","host","margin","badges","values","styles","overviewWrapper","componentOverviewBlock","displayName","version","description","labels","packageName","width","height"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport flatten from 'lodash.flatten';\nimport { ComponentContext, useComponentDescriptor } from '@teambit/component';\nimport type { SlotRegistry } from '@teambit/harmony';\nimport { ComponentPreview } from '@teambit/preview.ui.component-preview';\nimport { StatusMessageCard } from '@teambit/design.ui.surfaces.status-message-card';\nimport { ComponentOverview, TitleBadge } from '@teambit/component.ui.component-meta';\nimport { LaneBreadcrumb, useLanesContext } from '@teambit/lanes.ui.lanes';\nimport { Separator } from '@teambit/design.ui.separator';\nimport styles from './overview.module.scss';\n\nconst ENV_LIST_WITH_DOCS_TEMPLATE = ['react', 'env', 'aspect', 'lit', 'html', 'node', 'mdx', 'react-native']; // envs using react based docs\n\nconst ENV_ASPECT_NAME = 'teambit.envs/envs';\n\nexport type TitleBadgeSlot = SlotRegistry<TitleBadge[]>;\n\nexport type OverviewProps = {\n  titleBadges: TitleBadgeSlot;\n};\n\nexport function Overview({ titleBadges }: OverviewProps) {\n  const component = useContext(ComponentContext);\n  const componentDescriptor = useComponentDescriptor();\n  const lanesModel = useLanesContext();\n  const currentLane = lanesModel?.currentLane;\n\n  const envType: string = componentDescriptor?.get<any>(ENV_ASPECT_NAME)?.type;\n  const showHeaderOutsideIframe =\n    component?.preview?.includesEnvTemplate === false || !ENV_LIST_WITH_DOCS_TEMPLATE.includes(envType);\n\n  if (component?.buildStatus === 'pending' && component?.host === 'teambit.scope/scope')\n    return (\n      <StatusMessageCard style={{ margin: 'auto' }} status=\"PROCESSING\" title=\"component preview pending\">\n        this might take some time\n      </StatusMessageCard>\n    );\n  if (component?.buildStatus === 'failed' && component?.host === 'teambit.scope/scope')\n    return (\n      <StatusMessageCard\n        style={{ margin: 'auto' }}\n        status=\"FAILURE\"\n        title=\"failed to get component preview \"\n      ></StatusMessageCard>\n    );\n\n  if (showHeaderOutsideIframe) {\n    const badges = flatten(titleBadges.values());\n\n    return (\n      <div className={styles.overviewWrapper}>\n        <LaneBreadcrumb lane={currentLane} />\n        <Separator isPresentational />\n        <ComponentOverview\n          className={styles.componentOverviewBlock}\n          displayName={component.displayName}\n          version={component.version}\n          abstract={component.description}\n          labels={component.labels}\n          packageName={component.packageName}\n          titleBadges={badges}\n          componentDescriptor={componentDescriptor}\n        />\n        <ComponentPreview\n          component={component}\n          style={{ width: '100%', height: '100%' }}\n          previewName=\"overview\"\n          fullContentHeight\n          scrolling=\"no\"\n        />\n      </div>\n    );\n  }\n\n  return currentLane ? (\n    <div className={styles.overviewWrapper}>\n      <LaneBreadcrumb lane={currentLane} />\n      <Separator isPresentational />\n      <ComponentPreview\n        component={component}\n        style={{ width: '100%', height: '100%' }}\n        previewName=\"overview\"\n        fullContentHeight\n        scrolling=\"no\"\n      />\n    </div>\n  ) : (\n    <ComponentPreview\n      component={component}\n      style={{ width: '100%', height: '100%' }}\n      previewName=\"overview\"\n      fullContentHeight\n    />\n  );\n}\n"]}