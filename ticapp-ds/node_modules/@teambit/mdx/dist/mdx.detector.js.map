{"version":3,"sources":["mdx.detector.ts"],"names":["MDXDependencyDetector","constructor","supportedExtensions","isSupported","context","includes","ext","detect","source","output","imports","getImportSpecifiers","files","map","importSpec","fromModule"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,qBAAN,CAA0D;AAC/DC,EAAAA,WAAW,CAASC,mBAAT,EAAwC;AAAA,SAA/BA,mBAA+B,GAA/BA,mBAA+B;AAAE;;AAErDC,EAAAA,WAAW,CAACC,OAAD,EAAgC;AACzC,WAAO,KAAKF,mBAAL,CAAyBG,QAAzB,CAAkCD,OAAO,CAACE,GAA1C,CAAP;AACD;;AAEDC,EAAAA,MAAM,CAACC,MAAD,EAA2B;AAC/B,UAAMC,MAAM,GAAG,+BAAYD,MAAZ,CAAf;AACA,UAAME,OAAO,GAAGD,MAAM,CAACE,mBAAP,EAAhB;AACA,QAAI,CAACD,OAAL,EAAc,OAAO,EAAP;AACd,UAAME,KAAe,GAAGF,OAAO,CAACG,GAAR,CAAaC,UAAD,IAAgB;AAClD,aAAOA,UAAU,CAACC,UAAlB;AACD,KAFuB,CAAxB;AAIA,WAAOH,KAAP;AACD;;AAhB8D","sourcesContent":["import { DependencyDetector, FileContext } from '@teambit/dependency-resolver';\nimport { compileSync } from '@teambit/mdx.modules.mdx-compiler';\n\nexport class MDXDependencyDetector implements DependencyDetector {\n  constructor(private supportedExtensions: string[]) {}\n\n  isSupported(context: FileContext): boolean {\n    return this.supportedExtensions.includes(context.ext);\n  }\n\n  detect(source: string): string[] {\n    const output = compileSync(source);\n    const imports = output.getImportSpecifiers();\n    if (!imports) return [];\n    const files: string[] = imports.map((importSpec) => {\n      return importSpec.fromModule;\n    });\n\n    return files;\n  }\n}\n"]}