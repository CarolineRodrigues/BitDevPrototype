{"version":3,"sources":["mdx.compiler.ts"],"names":["MDXCompiler","constructor","id","config","displayConfig","JSON","stringify","transpileFile","fileContent","options","afterMdxCompile","filepath","filePath","bitFlavour","filePathAfterMdxCompile","replaceFileExtToJs","afterBabelCompile","contents","rootDir","componentDir","babelTransformOptions","build","context","capsules","capsuleNetwork","seedersCapsules","componentsResults","map","capsule","srcFiles","component","filesystem","files","filter","file","isFileSupported","relative","errors","srcFile","toString","path","undefined","getDistPathBySrcPath","outputPath","outputText","length","distDir","err","artifacts","name","globPatterns","srcPath","fileWithNewExt","replace","ignoredExtensions","ignoredExt","find","ext","endsWith","ignoredPatterns","ignoredPattern","pattern","version"],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport { outputFileSync } from 'fs-extra';\nimport { Compiler, TranspileFileOutput, TranspileFileParams } from '@teambit/compiler';\nimport { BuiltTaskResult, BuildContext } from '@teambit/builder';\nimport { compileSync as mdxCompileSync } from '@teambit/mdx.modules.mdx-compiler';\nimport minimatch from 'minimatch';\nimport { transpileFileContent as babelTranspileFileContent } from '@teambit/compilation.modules.babel-compiler';\nimport type { TransformOptions } from '@babel/core';\n\nexport type MDXCompilerOpts = {\n  ignoredExtensions?: string[];\n  ignoredPatterns?: string[];\n  babelTransformOptions?: TransformOptions;\n};\nexport class MDXCompiler implements Compiler {\n  displayName = 'MDX';\n\n  shouldCopyNonSupportedFiles = true;\n\n  distDir = 'dist';\n\n  constructor(readonly id: string, readonly config: MDXCompilerOpts) {}\n\n  displayConfig() {\n    return JSON.stringify(this.config, null, 2);\n  }\n\n  transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput {\n    const afterMdxCompile = mdxCompileSync(fileContent, {\n      filepath: options.filePath,\n      // this compiler is not indented to compile according to the bit flavour.\n      bitFlavour: false,\n    });\n    const filePathAfterMdxCompile = this.replaceFileExtToJs(options.filePath);\n    const afterBabelCompile = babelTranspileFileContent(\n      afterMdxCompile.contents,\n      {\n        rootDir: options.componentDir,\n        filePath: filePathAfterMdxCompile,\n      },\n      this.config.babelTransformOptions || {}\n    );\n\n    return afterBabelCompile;\n  }\n\n  /**\n   * compile components inside isolated capsules. this being used during tag for the release.\n   * meaning, the final package of the component has the dists generated by this method.\n   */\n  async build(context: BuildContext): Promise<BuiltTaskResult> {\n    const capsules = context.capsuleNetwork.seedersCapsules;\n    const componentsResults = capsules.map((capsule) => {\n      const srcFiles = capsule.component.filesystem.files.filter((file) => {\n        return this.isFileSupported(file.relative);\n      });\n\n      const errors = srcFiles.map((srcFile) => {\n        try {\n          const afterMdxCompile = mdxCompileSync(srcFile.contents.toString('utf-8'));\n          const afterBabelCompile = babelTranspileFileContent(\n            afterMdxCompile.contents,\n            {\n              rootDir: capsule.path,\n              filePath: this.replaceFileExtToJs(srcFile.relative),\n            },\n            this.config.babelTransformOptions || {}\n          );\n          if (!afterBabelCompile) {\n            return undefined;\n          }\n          outputFileSync(\n            join(capsule.path, this.getDistPathBySrcPath(afterBabelCompile[0].outputPath)),\n            afterBabelCompile[0].outputText\n          );\n          if (afterBabelCompile.length > 1) {\n            outputFileSync(\n              join(capsule.path, this.distDir, afterBabelCompile[1].outputPath),\n              afterBabelCompile[1].outputText\n            );\n          }\n          return undefined;\n        } catch (err: any) {\n          return err;\n        }\n      });\n\n      return {\n        errors: errors.filter((err) => !!err),\n        component: capsule.component,\n      };\n    });\n\n    return {\n      componentsResults,\n      artifacts: [\n        {\n          name: 'dist',\n          globPatterns: [`${this.distDir}/**`],\n        },\n      ],\n    };\n  }\n\n  /**\n   * given a source file, return its parallel in the dists. e.g. \"index.ts\" => \"dist/index.js\"\n   * both, the return path and the given path are relative paths.\n   */\n  getDistPathBySrcPath(srcPath: string): string {\n    const fileWithNewExt = this.replaceFileExtToJs(srcPath);\n    return join(this.distDir, fileWithNewExt);\n  }\n\n  private replaceFileExtToJs(srcPath: string): string {\n    let fileWithNewExt = srcPath;\n    if (this.isFileSupported(srcPath)) {\n      fileWithNewExt = srcPath.replace('.mdx', '.mdx.js');\n    }\n    return fileWithNewExt;\n  }\n\n  /**\n   * only supported files matching get compiled. others, are copied to the dist dir.\n   */\n  isFileSupported(filePath: string): boolean {\n    const ignoredExtensions = this.config.ignoredExtensions ?? [];\n    const ignoredExt = ignoredExtensions.find((ext) => filePath.endsWith(ext));\n    const ignoredPatterns = this.config.ignoredPatterns ?? [];\n    const ignoredPattern = ignoredPatterns.find((pattern) => minimatch(filePath, pattern));\n    return !ignoredExt && !ignoredPattern && (filePath.endsWith('.mdx') || filePath.endsWith('.md'));\n  }\n\n  /**\n   * returns the version of the current compiler instance (e.g. '4.0.1').\n   */\n  version(): string {\n    return '';\n  }\n}\n"]}