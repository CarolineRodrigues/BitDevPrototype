{"version":3,"sources":["prettier.formatter.ts"],"names":["PrettierFormatter","constructor","logger","options","prettierModule","PrettierLib","displayConfig","JSON","stringify","format","context","run","check","longProcessLogger","createLongProcessLogger","components","length","resultsP","component","logProgress","id","toString","mergedOpts","getOptions","filesP","filesystem","files","map","file","sourceCode","contents","optsWithFilePath","addFilePathToOpts","checkFormatResults","formatResults","hasIssues","newContent","undefined","Buffer","from","write","filePath","relative","Promise","all","results","errors","Object","assign","filepath","path","version"],"mappings":"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","sourcesContent":["import { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport {\n  Formatter,\n  FormatterContext,\n  FormatResults,\n  FileFormatResult,\n  ComponentFormatResult,\n} from '@teambit/formatter';\nimport PrettierLib, { Options as PrettierModuleOptions } from 'prettier';\nimport mapSeries from 'p-map-series';\nimport { Logger } from '@teambit/logger';\n// import { PrettierOptions } from './prettier.main.runtime';\n\nexport class PrettierFormatter implements Formatter {\n  constructor(\n    private logger: Logger,\n\n    private options: PrettierModuleOptions,\n\n    /**\n     * reference to the prettier module.\n     */\n    private prettierModule = PrettierLib\n  ) {}\n\n  displayName = 'Prettier';\n\n  displayConfig() {\n    return JSON.stringify(this.options, null, 2);\n  }\n\n  async format(context: FormatterContext): Promise<FormatResults> {\n    return this.run(context);\n  }\n  async check(context: FormatterContext): Promise<FormatResults> {\n    return this.run(context);\n  }\n\n  private async run(context: FormatterContext): Promise<FormatResults> {\n    const check = !!context.check;\n    const longProcessLogger = this.logger.createLongProcessLogger('formatting components', context.components.length);\n    const resultsP = mapSeries(context.components, async (component): Promise<ComponentFormatResult> => {\n      longProcessLogger.logProgress(component.id.toString());\n      const mergedOpts = this.getOptions(this.options, context);\n      const filesP = component.filesystem.files.map(async (file): Promise<FileFormatResult> => {\n        const sourceCode = file.contents.toString('utf8');\n        const optsWithFilePath = this.addFilePathToOpts(mergedOpts, file);\n        const checkFormatResults = await this.prettierModule.check(sourceCode, optsWithFilePath);\n        const formatResults = await this.prettierModule.format(sourceCode, optsWithFilePath);\n\n        const hasIssues = !checkFormatResults;\n        const newContent = typeof formatResults === 'string' && hasIssues ? formatResults : undefined;\n\n        if (!check && newContent) {\n          file.contents = Buffer.from(newContent);\n          await file.write(undefined, true);\n        }\n\n        return {\n          filePath: file.relative,\n          hasIssues,\n          newContent,\n        };\n      });\n\n      const files = await Promise.all(filesP);\n\n      return {\n        component,\n        results: files,\n      };\n    });\n\n    const results = await resultsP;\n\n    return {\n      results,\n      errors: [],\n    };\n  }\n\n  /**\n   * get options for eslint.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private getOptions(options: PrettierModuleOptions, context: FormatterContext): PrettierModuleOptions {\n    return options;\n  }\n\n  private addFilePathToOpts(options: PrettierModuleOptions, file: AbstractVinyl): PrettierModuleOptions {\n    return Object.assign({}, options, { filepath: file.path });\n  }\n\n  version() {\n    return this.prettierModule.version;\n  }\n}\n"]}