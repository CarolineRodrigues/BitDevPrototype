{"version":3,"sources":["components-ejector.ts"],"names":["ComponentsEjector","constructor","workspace","logger","componentsIds","ejectOptions","consumer","idsToEject","BitIds","failedComponents","modifiedComponents","stagedComponents","notExportedComponents","selfHostedExportedComponents","eject","decideWhichComponentsToEject","debug","length","loadComponentsToEject","_validateIdsHaveScopesAndVersions","removeComponentsFromNodeModules","untrackComponents","installPackages","removeComponentsFiles","writeBitMap","ejectedComponents","setStatusLine","remotes","scope","hubExportedComponents","forEach","componentId","bitId","_legacy","hasScope","push","isHub","force","Promise","all","map","id","componentStatus","getComponentStatusById","modified","staged","err","throwEjectError","toString","consoleSuccess","components","loadComponents","componentsToEject","action","packageJsonUtils","packages","getPackagesToInstall","install","c","_buildExceptionMessageWithRollbackData","keepFiles","dataToPersist","DataToPersist","component","componentMap","Error","rootDir","removePath","RemovePath","addBasePath","getPath","persistAllToFS","cleanFromBitMap","message","originalError","originalErrorMessage","error","hasVersion","TypeError"],"mappings":"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","sourcesContent":["/**\n * a classic use case of eject is when a user imports a component using `bit import` to update it,\n * but the user has no intention to have the code as part of the project source code.\n * the eject provides the option to delete the component locally and install it via the NPM client.\n *\n * an implementation note, the entire process is done with rollback in mind.\n * since installing the component via NPM client is an error prone process, we do it first, before\n * removing the component files, so then it's easier to rollback.\n */\nimport { Workspace } from '@teambit/workspace';\nimport { Consumer } from '@teambit/legacy/dist/consumer';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport defaultErrorHandler from '@teambit/legacy/dist/cli/default-error-handler';\nimport { getScopeRemotes } from '@teambit/legacy/dist/scope/scope-remotes';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport Component from '@teambit/legacy/dist/consumer/component/consumer-component';\nimport PackageJsonFile from '@teambit/legacy/dist/consumer/component/package-json-file';\nimport * as packageJsonUtils from '@teambit/legacy/dist/consumer/component/package-json-utils';\nimport DataToPersist from '@teambit/legacy/dist/consumer/component/sources/data-to-persist';\nimport RemovePath from '@teambit/legacy/dist/consumer/component/sources/remove-path';\nimport { Logger } from '@teambit/logger';\nimport { ComponentID } from '@teambit/component-id';\n\nexport type EjectResults = {\n  ejectedComponents: BitIds;\n  failedComponents: FailedComponents;\n};\n\nexport type EjectOptions = {\n  force: boolean; // eject although a component is modified/staged\n  keepFiles: boolean; // keep component files on the workspace\n};\n\ntype FailedComponents = {\n  modifiedComponents: BitIds;\n  stagedComponents: BitIds;\n  notExportedComponents: BitIds;\n  selfHostedExportedComponents: BitIds;\n};\n\nexport class ComponentsEjector {\n  consumer: Consumer;\n  idsToEject: BitIds;\n  componentsToEject: Component[] = [];\n  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n  notEjectedDependents: Array<{ dependent: Component; ejectedDependencies: Component[] }>;\n  failedComponents: FailedComponents;\n  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n  packageJsonFilesBeforeChanges: PackageJsonFile[]; // for rollback in case of errors\n  constructor(\n    private workspace: Workspace,\n    private logger: Logger,\n    private componentsIds: ComponentID[],\n    private ejectOptions: EjectOptions\n  ) {\n    this.consumer = this.workspace.consumer;\n    this.idsToEject = new BitIds();\n    this.failedComponents = {\n      modifiedComponents: new BitIds(),\n      stagedComponents: new BitIds(),\n      notExportedComponents: new BitIds(),\n      selfHostedExportedComponents: new BitIds(),\n    };\n  }\n\n  async eject(): Promise<EjectResults> {\n    await this.decideWhichComponentsToEject();\n    this.logger.debug(`${this.idsToEject.length} to eject`);\n    await this.loadComponentsToEject();\n    if (this.idsToEject.length) {\n      this._validateIdsHaveScopesAndVersions();\n      await this.removeComponentsFromNodeModules();\n      await this.untrackComponents();\n      await this.installPackages();\n      await this.removeComponentsFiles();\n      await this.consumer.writeBitMap();\n    }\n    this.logger.debug('eject: completed successfully');\n    return {\n      ejectedComponents: this.idsToEject,\n      failedComponents: this.failedComponents,\n    };\n  }\n\n  async decideWhichComponentsToEject(): Promise<void> {\n    this.logger.setStatusLine('Eject: getting the components status');\n    if (!this.componentsIds.length) return;\n    const remotes = await getScopeRemotes(this.consumer.scope);\n    const hubExportedComponents = new BitIds();\n    this.componentsIds.forEach((componentId) => {\n      const bitId = componentId._legacy;\n      if (!bitId.hasScope()) this.failedComponents.notExportedComponents.push(bitId);\n      else if (remotes.isHub(bitId.scope as string)) hubExportedComponents.push(bitId);\n      else this.failedComponents.selfHostedExportedComponents.push(bitId);\n    });\n    if (this.ejectOptions.force) {\n      this.idsToEject = hubExportedComponents;\n    } else {\n      await Promise.all(\n        hubExportedComponents.map(async (id) => {\n          try {\n            const componentStatus = await this.consumer.getComponentStatusById(id);\n            if (componentStatus.modified) this.failedComponents.modifiedComponents.push(id);\n            else if (componentStatus.staged) this.failedComponents.stagedComponents.push(id);\n            else this.idsToEject.push(id);\n          } catch (err: any) {\n            this.throwEjectError(\n              `eject operation failed getting the status of ${id.toString()}, no action has been done.\n            please fix the issue to continue.`,\n              err\n            );\n          }\n        })\n      );\n    }\n    this.logger.consoleSuccess();\n  }\n\n  async loadComponentsToEject() {\n    const { components } = await this.consumer.loadComponents(this.idsToEject);\n    this.componentsToEject = components;\n  }\n\n  async removeComponentsFromNodeModules() {\n    const action = 'Eject: removing the existing components from node_modules';\n    this.logger.setStatusLine(action);\n    this.logger.debug(action);\n    await packageJsonUtils.removeComponentsFromNodeModules(this.consumer, this.componentsToEject);\n    this.logger.consoleSuccess(action);\n  }\n\n  async installPackages() {\n    this.logger.setStatusLine('Eject: installing packages using the package-manager');\n    const packages = this.getPackagesToInstall();\n    await this.workspace.install(packages);\n  }\n\n  getPackagesToInstall(): string[] {\n    return this.componentsToEject.map((c) => componentIdToPackageName(c));\n  }\n\n  _buildExceptionMessageWithRollbackData(action: string): string {\n    return `eject failed ${action}.\nyour package.json (if existed) has been restored, however, some bit generated data may have been deleted, please run \"bit link\" to restore them.`;\n  }\n\n  /**\n   * as part of the 'eject' operation, a component is removed locally. as opposed to the remove\n   * command, in this case, no need to remove the objects from the scope, only remove from the\n   * filesystem, which means, delete the component files, untrack from .bitmap and clean\n   * package.json and bit.json traces.\n   */\n  private async removeComponentsFiles() {\n    if (this.ejectOptions.keepFiles) {\n      return;\n    }\n    this.logger.setStatusLine('Eject: removing the components files from the filesystem');\n    const dataToPersist = new DataToPersist();\n    this.componentsToEject.forEach((component) => {\n      const componentMap = component.componentMap;\n      if (!componentMap) {\n        throw new Error('ComponentEjector.removeComponentsFiles expect a component to have componentMap prop');\n      }\n      const rootDir = componentMap.rootDir;\n      if (!rootDir) {\n        throw new Error('ComponentEjector.removeComponentsFiles expect a componentMap to have rootDir');\n      }\n      dataToPersist.removePath(new RemovePath(rootDir, true));\n    });\n    dataToPersist.addBasePath(this.consumer.getPath());\n    await dataToPersist.persistAllToFS();\n    this.logger.consoleSuccess();\n  }\n\n  private async untrackComponents() {\n    this.logger.debug('eject: removing the components from the .bitmap');\n    await this.consumer.cleanFromBitMap(this.idsToEject);\n  }\n\n  throwEjectError(message: string, originalError: Error) {\n    const { message: originalErrorMessage } = defaultErrorHandler(originalError);\n    this.logger.error(`eject has stopped due to an error ${originalErrorMessage}`, originalError);\n    throw new Error(`${message}\n\ngot the following error: ${originalErrorMessage}`);\n  }\n\n  _validateIdsHaveScopesAndVersions() {\n    this.idsToEject.forEach((id) => {\n      if (!id.hasScope() || !id.hasVersion()) {\n        throw new TypeError(`EjectComponents expects ids with scope and version, got ${id.toString()}`);\n      }\n    });\n  }\n}\n"]}