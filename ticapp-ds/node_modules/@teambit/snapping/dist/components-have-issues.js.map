{"version":3,"sources":["components-have-issues.ts"],"names":["ComponentsHaveIssues","BitError","constructor","components","issuesColored","IssuesAspect","id"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,MAAMA,oBAAN,SAAmCC,oBAAnC,CAA4C;AACjDC,EAAAA,WAAW,CAACC,UAAD,EAAkC;AAC3C,UAAMC,aAAa,GAAG,wCAAwBD,UAAxB,CAAtB;AACA,UAAO;AACX,EAAEC,aAAc;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,GAAGC,kBAAaC,EAAG;AACnB;AACA;AACA,CAXI;AAYD;;AAfgD","sourcesContent":["import { BitError } from '@teambit/bit-error';\nimport IssuesAspect from '@teambit/issues';\nimport componentIssuesTemplate from '@teambit/legacy/dist/cli/templates/component-issues-template';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\n\nexport class ComponentsHaveIssues extends BitError {\n  constructor(components: ConsumerComponent[]) {\n    const issuesColored = componentIssuesTemplate(components);\n    super(`error: issues found with the following components\n${issuesColored}\n\nto get the list of component-issues names and suggestions how to resolve them, run \"bit component-issues\".\n\nwhile highly not recommended, it's possible to ignore issues in two ways:\n1) temporarily ignore for this tag/snap command by entering \"--ignore-issues\" flag, e.g. \\`bit tag --ignore-issues \"MultipleEnvs, ImportNonMainFiles\" \\`\n2) ignore the issue completely by configuring it in the workspace.jsonc file. e.g:\n\"${IssuesAspect.id}\": {\n  \"ignoreIssues\": [\"ParseErrors\", \"MissingPackagesDependenciesOnFs\"]\n}\n`);\n  }\n}\n"]}