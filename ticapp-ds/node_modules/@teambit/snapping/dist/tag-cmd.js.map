{"version":3,"sources":["tag-cmd.ts"],"names":["TagCmd","constructor","docsDomain","snapping","Object","keys","IssuesClasses","join","description","report","id","message","ver","all","editor","snapped","patch","minor","major","preRelease","force","verbose","ignoreUnresolvedDependencies","ignoreIssues","ignoreNewestVersion","skipTests","skipAutoTag","scope","build","soft","persist","disableDeployPipeline","disableTagPipeline","forceDeploy","incrementBy","Error","disableTagAndSnapPipelines","params","ids","results","tag","chalk","yellow","NOTHING_TO_TAG_MSG","taggedComponents","autoTaggedResults","warnings","newComponents","changedComponents","filter","component","searchWithoutVersion","addedComponents","autoTaggedCount","length","warningsOutput","tagExplanationPersist","tagExplanationSoft","tagExplanation","isSoftTag","outputComponents","comps","map","componentOutput","toString","autoTag","result","triggeredBy","searchWithoutScopeAndVersion","autoTagComp","a","AUTO_TAGGED_MSG","publishOutput","publishedPackages","successTitle","green","successCompsStr","successOutput","softTagPrefix","outputIfExists","label","explanation","components","underline","newDesc","changedDesc","softTagClarification","bold"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport {\n  TagResults,\n  NOTHING_TO_TAG_MSG,\n  AUTO_TAGGED_MSG,\n  BasicTagParams,\n} from '@teambit/legacy/dist/api/consumer/lib/tag';\nimport { WILDCARD_HELP } from '@teambit/legacy/dist/constants';\nimport { IssuesClasses } from '@teambit/component-issues';\nimport { SnappingMain } from './snapping.main.runtime';\n\nexport class TagCmd implements Command {\n  name = 'tag [id...]';\n  group = 'development';\n  shortDescription = 'record component changes and lock versions';\n  description: string;\n  alias = 't';\n  loader = true;\n  options = [\n    ['m', 'message <message>', 'log message describing the user changes'],\n    ['a', 'all [version]', 'tag all new and modified components'],\n    ['s', 'scope [version]', 'tag all components of the current scope'],\n    [\n      '',\n      'editor [editor]',\n      'EXPERIMENTAL. open an editor to edit the tag messages per component, optionally specify the editor-name, default to vim',\n    ],\n    ['', 'snapped [version]', 'tag components that their head is a snap (not a tag)'],\n    ['', 'ver <version>', 'tag specified components with the given version'],\n    ['p', 'patch', 'increment the patch version number'],\n    ['', 'minor', 'increment the minor version number'],\n    ['', 'major', 'increment the major version number'],\n    ['', 'pre-release [identifier]', 'EXPERIMENTAL. increment a pre-release version (e.g. 1.0.0-dev.1)'],\n    ['f', 'force', 'force-tag even if tests are failing and even when component has not changed'],\n    ['v', 'verbose', 'show specs output on failure'],\n    ['I', 'ignore-newest-version', 'ignore existing of newer versions (default = false)'],\n    ['', 'skip-tests', 'skip running component tests during tag process'],\n    ['', 'skip-auto-tag', 'skip auto tagging dependents'],\n    ['b', 'build', 'EXPERIMENTAL. not needed for now. run the pipeline build and complete the tag'],\n    ['', 'soft', 'do not persist. only keep note of the changes to be made'],\n    ['', 'persist', 'persist the changes generated by --soft tag'],\n    ['', 'disable-deploy-pipeline', 'DEPRECATED. use --disable-tag-pipeline instead'],\n    ['', 'disable-tag-pipeline', 'skip the tag pipeline to avoid publishing the components'],\n    ['', 'force-deploy', 'run the tag pipeline although the build failed'],\n    [\n      '',\n      'increment-by <number>',\n      '(default to 1) increment semver flag (patch/minor/major) by. e.g. incrementing patch by 2: 0.0.1 -> 0.0.3.',\n    ],\n    [\n      'i',\n      'ignore-issues [issues]',\n      `ignore component issues (shown in \"bit status\" as \"issues found\"), issues to ignore:\n[${Object.keys(IssuesClasses).join(', ')}]\nto ignore multiple issues, separate them by a comma and wrap with quotes. to ignore all issues, specify \"*\".`,\n    ],\n  ] as CommandOptions;\n  migration = true;\n  remoteOp = true; // In case a compiler / tester is not installed\n\n  constructor(docsDomain: string, private snapping: SnappingMain) {\n    this.description = `record component changes and lock versions.\nif component ids are entered, you can specify a version per id using \"@\" sign, e.g. bit tag foo@1.0.0 bar@minor baz@major\nhttps://${docsDomain}/components/tags\n${WILDCARD_HELP('tag')}`;\n  }\n\n  async report(\n    [id = []]: [string[]],\n    {\n      message = '',\n      ver,\n      all = false,\n      editor = '',\n      snapped = false,\n      patch,\n      minor,\n      major,\n      preRelease,\n      force = false,\n      verbose = false,\n      ignoreUnresolvedDependencies,\n      ignoreIssues,\n      ignoreNewestVersion = false,\n      skipTests = false,\n      skipAutoTag = false,\n      scope,\n      build,\n      soft = false,\n      persist = false,\n      disableDeployPipeline = false,\n      disableTagPipeline = false,\n      forceDeploy = false,\n      incrementBy = 1,\n    }: {\n      all?: boolean | string;\n      snapped?: boolean | string;\n      ver?: string;\n      patch?: boolean;\n      minor?: boolean;\n      major?: boolean;\n      ignoreUnresolvedDependencies?: boolean;\n      ignoreIssues?: string;\n      scope?: string | boolean;\n      incrementBy?: number;\n      disableDeployPipeline?: boolean;\n      disableTagPipeline?: boolean;\n    } & Partial<BasicTagParams>\n  ): Promise<string> {\n    if (typeof ignoreUnresolvedDependencies === 'boolean') {\n      throw new Error(`--ignore-unresolved-dependencies has been removed, please use --ignore-issues instead`);\n    }\n    if (ignoreIssues && typeof ignoreIssues === 'boolean') {\n      throw new Error(`--ignore-issues expects issues to be ignored, please run \"bit tag -h\" for the issues list`);\n    }\n    const disableTagAndSnapPipelines = disableTagPipeline || disableDeployPipeline;\n\n    const params = {\n      ids: id,\n      all,\n      snapped,\n      editor,\n      message,\n      preRelease,\n      force,\n      verbose,\n      ignoreIssues,\n      ignoreNewestVersion,\n      skipTests,\n      skipAutoTag,\n      build,\n      soft,\n      persist,\n      scope,\n      disableTagAndSnapPipelines,\n      forceDeploy,\n      incrementBy,\n      ver,\n      patch,\n      minor,\n      major,\n    };\n\n    const results = await this.snapping.tag(params);\n    if (!results) return chalk.yellow(NOTHING_TO_TAG_MSG);\n    const { taggedComponents, autoTaggedResults, warnings, newComponents }: TagResults = results;\n    const changedComponents = taggedComponents.filter((component) => !newComponents.searchWithoutVersion(component.id));\n    const addedComponents = taggedComponents.filter((component) => newComponents.searchWithoutVersion(component.id));\n    const autoTaggedCount = autoTaggedResults ? autoTaggedResults.length : 0;\n\n    const warningsOutput = warnings && warnings.length ? `${chalk.yellow(warnings.join('\\n'))}\\n\\n` : '';\n    const tagExplanationPersist = `\\n(use \"bit export [collection]\" to push these components to a remote\")\n(use \"bit untag\" to unstage versions)\\n`;\n    const tagExplanationSoft = `\\n(use \"bit tag --persist\" to persist the changes\")\n(use \"bit untag --soft\" to remove the soft-tags)\\n`;\n\n    const tagExplanation = results.isSoftTag ? tagExplanationSoft : tagExplanationPersist;\n\n    const outputComponents = (comps) => {\n      return comps\n        .map((component) => {\n          let componentOutput = `     > ${component.id.toString()}`;\n          const autoTag = autoTaggedResults.filter((result) =>\n            result.triggeredBy.searchWithoutScopeAndVersion(component.id)\n          );\n          if (autoTag.length) {\n            const autoTagComp = autoTag.map((a) => a.component.id.toString());\n            componentOutput += `\\n       ${AUTO_TAGGED_MSG}:\n            ${autoTagComp.join('\\n            ')}`;\n          }\n          return componentOutput;\n        })\n        .join('\\n');\n    };\n\n    const publishOutput = () => {\n      const { publishedPackages } = results;\n      if (!publishedPackages || !publishedPackages.length) return '';\n      const successTitle = `\\n\\n${chalk.green(\n        `published the following ${publishedPackages.length} component(s) successfully\\n`\n      )}`;\n      const successCompsStr = publishedPackages.join('\\n');\n      const successOutput = successCompsStr ? successTitle + successCompsStr : '';\n      return successOutput;\n    };\n\n    const softTagPrefix = results.isSoftTag ? 'soft-tagged ' : '';\n    const outputIfExists = (label, explanation, components) => {\n      if (!components.length) return '';\n      return `\\n${chalk.underline(softTagPrefix + label)}\\n(${explanation})\\n${outputComponents(components)}\\n`;\n    };\n\n    const newDesc = results.isSoftTag\n      ? 'set to be tagged first version for components'\n      : 'first version for components';\n    const changedDesc = results.isSoftTag\n      ? 'components that set to get a version bump'\n      : 'components that got a version bump';\n    const softTagClarification = results.isSoftTag\n      ? chalk.bold(\n          'keep in mind that this is a soft-tag (changes recorded to be tagged), to persist the changes use --persist flag'\n        )\n      : '';\n    return (\n      warningsOutput +\n      chalk.green(\n        `${taggedComponents.length + autoTaggedCount} component(s) ${results.isSoftTag ? 'soft-' : ''}tagged`\n      ) +\n      tagExplanation +\n      outputIfExists('new components', newDesc, addedComponents) +\n      outputIfExists('changed components', changedDesc, changedComponents) +\n      publishOutput() +\n      softTagClarification\n    );\n  }\n}\n"]}