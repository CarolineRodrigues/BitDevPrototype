"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentsHaveIssues = void 0;

function _bitError() {
  const data = require("@teambit/bit-error");

  _bitError = function () {
    return data;
  };

  return data;
}

function _issues() {
  const data = _interopRequireDefault(require("@teambit/issues"));

  _issues = function () {
    return data;
  };

  return data;
}

function _componentIssuesTemplate() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/cli/templates/component-issues-template"));

  _componentIssuesTemplate = function () {
    return data;
  };

  return data;
}

class ComponentsHaveIssues extends _bitError().BitError {
  constructor(components) {
    const issuesColored = (0, _componentIssuesTemplate().default)(components);
    super(`error: issues found with the following components
${issuesColored}

to get the list of component-issues names and suggestions how to resolve them, run "bit component-issues".

while highly not recommended, it's possible to ignore issues in two ways:
1) temporarily ignore for this tag/snap command by entering "--ignore-issues" flag, e.g. \`bit tag --ignore-issues "MultipleEnvs, ImportNonMainFiles" \`
2) ignore the issue completely by configuring it in the workspace.jsonc file. e.g:
"${_issues().default.id}": {
  "ignoreIssues": ["ParseErrors", "MissingPackagesDependenciesOnFs"]
}
`);
  }

}

exports.ComponentsHaveIssues = ComponentsHaveIssues;

//# sourceMappingURL=components-have-issues.js.map