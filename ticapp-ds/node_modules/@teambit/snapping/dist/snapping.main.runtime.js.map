{"version":3,"sources":["snapping.main.runtime.ts"],"names":["HooksManagerInstance","HooksManager","getInstance","SnappingMain","constructor","workspace","logger","issues","tag","ids","message","ver","all","editor","snapped","patch","minor","major","preRelease","force","verbose","ignoreIssues","ignoreNewestVersion","skipTests","skipAutoTag","scope","build","soft","persist","forceDeploy","incrementBy","disableTagAndSnapPipelines","BUILD_ON_CI","Boolean","getVersion","length","BitError","releaseFlags","filter","x","releaseType","DEFAULT_BIT_RELEASE_TYPE","includeImported","exactVersion","ConsumerNotFound","idsHasWildcard","isAll","validExactVersion","consumer","componentsList","ComponentsList","loader","start","newComponents","listNewComponents","bitIds","warnings","getComponentsToTag","R","isEmpty","legacyBitIds","BitIds","fromArray","isLegacy","debug","toString","Analytics","addBreadCrumb","hashData","componentFsCache","deleteAllDependenciesDataCache","components","loadComponentsForTag","throwForComponentIssues","areComponentsMissingFromScope","some","c","componentFromModel","id","hasScope","ComponentsPendingImport","taggedComponents","autoTaggedResults","publishedPackages","consumerComponents","legacyScope","resolveUnmerged","tagResults","isSoftTag","postHook","POST_TAG_ALL_HOOK","POST_TAG_HOOK","triggerHook","setExtraData","concat","onDestroy","snap","skipAutoSnap","Error","LanesIsDisabled","getIdsToSnap","isSnap","snapResults","snappedComponents","autoSnappedResults","currentLane","getCurrentLaneId","laneName","isDefault","name","idHasWildcard","bitId","getParsedId","componentStatus","getComponentStatusById","modified","tagPendingComponents","listTagPendingComponents","filterComponentsByWildcard","loadComponents","toVersionLatest","shouldReloadComponents","componentsWithRelativePaths","componentsWithFilesNotDir","componentsWithCustomModuleResolution","forEach","component","componentMap","rootDir","hasRelativePaths","getIssue","IssuesClasses","RelativeComponentsAuthored","hasCustomModuleResolutions","MissingCustomModuleResolutionLinks","trackDir","changeRootDirAndUpdateFilesAccordingly","push","toStringWithoutVersion","FailedLoadForTag","sort","clearCache","reloadedComponents","delete","issuesToIgnoreFromFlag","split","map","issue","trim","issuesToIgnoreFromConfig","getIssuesToIgnore","issuesToIgnore","issueClass","Object","keys","join","componentsWithBlockingIssues","shouldBlockTagging","ComponentsHaveIssues","isAllScope","softTaggedComponents","listSoftTaggedComponents","listTagPendingOfAllScope","listSnappedComponentsOnMain","snappedComponentsIds","toBitId","Promise","idWithoutVer","version","allIds","changeVersion","flat","tagPendingComponentsLatest","latestVersions","componentId","semver","valid","gt","undefined","provider","cli","community","loggerMain","createLogger","SnappingAspect","snapping","snapCmd","SnapCmd","getBaseDomain","tagCmd","TagCmd","register","WorkspaceAspect","CLIAspect","CommunityAspect","LoggerAspect","IssuesAspect","MainRuntime","addRuntime"],"mappings":"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","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { isString } from '@teambit/legacy/dist/utils';\nimport { isFeatureEnabled, BUILD_ON_CI } from '@teambit/legacy/dist/api/consumer/lib/feature-toggle';\nimport { IssuesClasses } from '@teambit/component-issues';\nimport CommunityAspect, { CommunityMain } from '@teambit/community';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport R from 'ramda';\nimport semver, { ReleaseType } from 'semver';\nimport { compact } from 'lodash';\nimport { Analytics } from '@teambit/legacy/dist/analytics/analytics';\nimport { BitId, BitIds } from '@teambit/legacy/dist/bit-id';\nimport { POST_TAG_ALL_HOOK, POST_TAG_HOOK, DEFAULT_BIT_RELEASE_TYPE } from '@teambit/legacy/dist/constants';\nimport { Consumer } from '@teambit/legacy/dist/consumer';\nimport ComponentsList from '@teambit/legacy/dist/consumer/component/components-list';\nimport HooksManager from '@teambit/legacy/dist/hooks';\nimport { TagResults, BasicTagParams } from '@teambit/legacy/dist/api/consumer/lib/tag';\nimport hasWildcard from '@teambit/legacy/dist/utils/string/has-wildcard';\nimport { validateVersion } from '@teambit/legacy/dist/utils/semver-helper';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport tagModelComponent from '@teambit/legacy/dist/scope/component-ops/tag-model-component';\nimport { LanesIsDisabled } from '@teambit/legacy/dist/consumer/lanes/exceptions/lanes-is-disabled';\nimport { SnapResults } from '@teambit/legacy/dist/api/consumer/lib/snap';\nimport ComponentsPendingImport from '@teambit/legacy/dist/consumer/component-ops/exceptions/components-pending-import';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { BitError } from '@teambit/bit-error';\nimport Component from '@teambit/legacy/dist/consumer/component/consumer-component';\nimport ComponentMap from '@teambit/legacy/dist/consumer/bit-map/component-map';\nimport { FailedLoadForTag } from '@teambit/legacy/dist/consumer/component/exceptions/failed-load-for-tag';\nimport IssuesAspect, { IssuesMain } from '@teambit/issues';\nimport { SnapCmd } from './snap-cmd';\nimport { SnappingAspect } from './snapping.aspect';\nimport { TagCmd } from './tag-cmd';\nimport { ComponentsHaveIssues } from './components-have-issues';\n\nconst HooksManagerInstance = HooksManager.getInstance();\n\nexport class SnappingMain {\n  constructor(private workspace: Workspace, private logger: Logger, private issues: IssuesMain) {}\n\n  /**\n   * tag the given component ids or all modified/new components if \"all\" param is set.\n   * tag is a similar operation as a snap, which saves the changes into the local scope, but it also creates an alias\n   * with a valid semver to that version.\n   * tag can be done only on main, not on a lane.\n   */\n  // eslint-disable-next-line complexity\n  async tag({\n    ids = [],\n    message = '',\n    ver,\n    all = false,\n    editor = '',\n    snapped = false,\n    patch,\n    minor,\n    major,\n    preRelease,\n    force = false,\n    verbose = false,\n    ignoreIssues,\n    ignoreNewestVersion = false,\n    skipTests = false,\n    skipAutoTag = false,\n    scope,\n    build,\n    soft = false,\n    persist = false,\n    forceDeploy = false,\n    incrementBy = 1,\n    disableTagAndSnapPipelines = false,\n  }: {\n    ids?: string[];\n    all?: boolean | string;\n    snapped?: boolean | string;\n    ver?: string;\n    patch?: boolean;\n    minor?: boolean;\n    major?: boolean;\n    ignoreIssues?: string;\n    scope?: string | boolean;\n    incrementBy?: number;\n  } & Partial<BasicTagParams>): Promise<TagResults | null> {\n    build = isFeatureEnabled(BUILD_ON_CI) ? Boolean(build) : true;\n    if (soft) build = false;\n    function getVersion(): string | undefined {\n      if (scope && isString(scope)) return scope;\n      if (all && isString(all)) return all;\n      if (snapped && isString(snapped)) return snapped;\n      return ver;\n    }\n\n    if (!ids.length && !all && !snapped && !scope && !persist) {\n      throw new BitError('missing [id]. to tag all components, please use --all flag');\n    }\n    if (ids.length && all) {\n      throw new BitError(\n        'you can use either a specific component [id] to tag a particular component or --all flag to tag them all'\n      );\n    }\n    if (disableTagAndSnapPipelines && forceDeploy) {\n      throw new BitError('you can use either force-deploy or disable-tag-pipeline, but not both');\n    }\n    if (all && persist) {\n      throw new BitError('you can use either --all or --persist, but not both');\n    }\n    if (editor && persist) {\n      throw new BitError('you can use either --editor or --persist, but not both');\n    }\n    if (editor && message) {\n      throw new BitError('you can use either --editor or --message, but not both');\n    }\n\n    const releaseFlags = [patch, minor, major, preRelease].filter((x) => x);\n    if (releaseFlags.length > 1) {\n      throw new BitError('you can use only one of the following - patch, minor, major, pre-release');\n    }\n\n    let releaseType: ReleaseType = DEFAULT_BIT_RELEASE_TYPE;\n    const includeImported = Boolean(scope && all);\n\n    if (major) releaseType = 'major';\n    else if (minor) releaseType = 'minor';\n    else if (patch) releaseType = 'patch';\n    else if (preRelease) releaseType = 'prerelease';\n\n    const exactVersion = getVersion();\n    all = Boolean(all);\n    snapped = Boolean(snapped);\n    preRelease = typeof preRelease === 'string' ? preRelease : '';\n\n    if (!this.workspace) throw new ConsumerNotFound();\n    const idsHasWildcard = hasWildcard(ids);\n    const isAll = Boolean(all || scope || idsHasWildcard);\n    const validExactVersion = validateVersion(exactVersion);\n    const consumer = this.workspace.consumer;\n    const componentsList = new ComponentsList(consumer);\n    loader.start('determine components to tag...');\n    const newComponents = await componentsList.listNewComponents();\n    const { bitIds, warnings } = await this.getComponentsToTag(\n      Boolean(scope),\n      exactVersion,\n      includeImported,\n      persist,\n      force,\n      ids,\n      snapped\n    );\n    if (R.isEmpty(bitIds)) return null;\n\n    const legacyBitIds = BitIds.fromArray(bitIds);\n\n    if (this.workspace.isLegacy) {\n      persist = true;\n    }\n    this.logger.debug(`tagging the following components: ${legacyBitIds.toString()}`);\n    Analytics.addBreadCrumb('tag', `tagging the following components: ${Analytics.hashData(legacyBitIds)}`);\n    if (!soft) {\n      await this.workspace.consumer.componentFsCache.deleteAllDependenciesDataCache();\n    }\n    const components = await this.loadComponentsForTag(legacyBitIds);\n    this.throwForComponentIssues(components, ignoreIssues);\n    const areComponentsMissingFromScope = components.some((c) => !c.componentFromModel && c.id.hasScope());\n    if (areComponentsMissingFromScope) {\n      throw new ComponentsPendingImport();\n    }\n\n    const { taggedComponents, autoTaggedResults, publishedPackages } = await tagModelComponent({\n      consumerComponents: components,\n      ids: legacyBitIds,\n      scope: this.workspace.scope.legacyScope,\n      message,\n      editor,\n      exactVersion: validExactVersion,\n      releaseType,\n      preRelease,\n      force,\n      consumer: this.workspace.consumer,\n      ignoreNewestVersion,\n      skipTests,\n      verbose,\n      skipAutoTag,\n      soft,\n      build,\n      persist,\n      resolveUnmerged: false,\n      disableTagAndSnapPipelines,\n      forceDeploy,\n      incrementBy,\n    });\n\n    const tagResults = { taggedComponents, autoTaggedResults, isSoftTag: soft, publishedPackages };\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    tagResults.warnings = warnings;\n\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    tagResults.newComponents = newComponents;\n    const postHook = isAll ? POST_TAG_ALL_HOOK : POST_TAG_HOOK;\n    HooksManagerInstance?.triggerHook(postHook, tagResults);\n    Analytics.setExtraData(\n      'num_components',\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      R.concat(tagResults.taggedComponents, tagResults.autoTaggedResults, tagResults.newComponents).length\n    );\n    await consumer.onDestroy();\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    return tagResults;\n  }\n\n  /**\n   * save the local changes of a component(s) into the scope. snap can be done on main or on a lane.\n   * once a component is snapped on a lane, it becomes part of it.\n   */\n  async snap({\n    id, // @todo: rename to \"patterns\"\n    legacyBitIds, // @todo: change to ComponentID[]. pass only if have the ids already parsed.\n    resolveUnmerged = false,\n    message = '',\n    force = false,\n    verbose = false,\n    ignoreIssues,\n    skipTests = false,\n    skipAutoSnap = false,\n    build,\n    disableTagAndSnapPipelines = false,\n    forceDeploy = false,\n  }: {\n    id?: string;\n    legacyBitIds?: BitIds;\n    resolveUnmerged?: boolean;\n    message?: string;\n    force?: boolean;\n    verbose?: boolean;\n    ignoreIssues?: string;\n    build: boolean;\n    skipTests?: boolean;\n    skipAutoSnap?: boolean;\n    disableTagAndSnapPipelines?: boolean;\n    forceDeploy?: boolean;\n  }): Promise<SnapResults | null> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    if (id && legacyBitIds) throw new Error(`please pass either id or legacyBitIds, not both`);\n    const consumer: Consumer = this.workspace.consumer;\n    if (consumer.isLegacy) throw new LanesIsDisabled();\n    const componentsList = new ComponentsList(consumer);\n    const newComponents = (await componentsList.listNewComponents()) as BitIds;\n    const ids = legacyBitIds || (await getIdsToSnap());\n    if (!ids) return null;\n    this.logger.debug(`snapping the following components: ${ids.toString()}`);\n    await this.workspace.consumer.componentFsCache.deleteAllDependenciesDataCache();\n    const components = await this.loadComponentsForTag(ids);\n    this.throwForComponentIssues(components, ignoreIssues);\n    const areComponentsMissingFromScope = components.some((c) => !c.componentFromModel && c.id.hasScope());\n    if (areComponentsMissingFromScope) {\n      throw new ComponentsPendingImport();\n    }\n\n    const { taggedComponents, autoTaggedResults } = await tagModelComponent({\n      consumerComponents: components,\n      ids,\n      ignoreNewestVersion: false,\n      scope: this.workspace.scope.legacyScope,\n      message,\n      force,\n      consumer: this.workspace.consumer,\n      skipTests,\n      verbose,\n      skipAutoTag: skipAutoSnap,\n      persist: true,\n      soft: false,\n      build,\n      resolveUnmerged,\n      isSnap: true,\n      disableTagAndSnapPipelines,\n      forceDeploy,\n    });\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    const snapResults: SnapResults = { snappedComponents: taggedComponents, autoSnappedResults: autoTaggedResults };\n\n    snapResults.newComponents = newComponents;\n    const currentLane = consumer.getCurrentLaneId();\n    snapResults.laneName = currentLane.isDefault() ? null : currentLane.name;\n    await consumer.onDestroy();\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    return snapResults;\n\n    async function getIdsToSnap(): Promise<BitIds> {\n      const idHasWildcard = id && hasWildcard(id);\n      if (id && !idHasWildcard) {\n        const bitId = consumer.getParsedId(id);\n        if (!force) {\n          const componentStatus = await consumer.getComponentStatusById(bitId);\n          // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n          if (componentStatus.modified === false) return null;\n        }\n        return new BitIds(bitId);\n      }\n      const tagPendingComponents = await componentsList.listTagPendingComponents();\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      if (R.isEmpty(tagPendingComponents)) return null;\n      return idHasWildcard ? ComponentsList.filterComponentsByWildcard(tagPendingComponents, id) : tagPendingComponents;\n    }\n  }\n\n  private async loadComponentsForTag(ids: BitIds): Promise<Component[]> {\n    const { components } = await this.workspace.consumer.loadComponents(ids.toVersionLatest());\n    if (this.workspace.isLegacy) {\n      return components;\n    }\n    let shouldReloadComponents = false;\n    const componentsWithRelativePaths: string[] = [];\n    const componentsWithFilesNotDir: string[] = [];\n    const componentsWithCustomModuleResolution: string[] = [];\n    components.forEach((component) => {\n      const componentMap = component.componentMap as ComponentMap;\n      if (componentMap.rootDir) return;\n      const hasRelativePaths = component.issues?.getIssue(IssuesClasses.RelativeComponentsAuthored);\n      const hasCustomModuleResolutions = component.issues?.getIssue(IssuesClasses.MissingCustomModuleResolutionLinks);\n      // leaving this because it can be helpful for users upgrade from legacy\n      if (componentMap.trackDir && !hasRelativePaths) {\n        componentMap.changeRootDirAndUpdateFilesAccordingly(componentMap.trackDir);\n        shouldReloadComponents = true;\n        return;\n      }\n      if (hasRelativePaths) {\n        componentsWithRelativePaths.push(component.id.toStringWithoutVersion());\n      }\n      if (!componentMap.trackDir) {\n        componentsWithFilesNotDir.push(component.id.toStringWithoutVersion());\n      }\n      if (hasCustomModuleResolutions) {\n        componentsWithCustomModuleResolution.push(component.id.toStringWithoutVersion());\n      }\n    });\n    if (componentsWithRelativePaths.length || componentsWithFilesNotDir.length) {\n      throw new FailedLoadForTag(\n        componentsWithRelativePaths.sort(),\n        componentsWithFilesNotDir.sort(),\n        componentsWithCustomModuleResolution.sort()\n      );\n    }\n    if (!shouldReloadComponents) return components;\n    this.workspace.clearCache();\n    const { components: reloadedComponents } = await this.workspace.consumer.loadComponents(ids);\n    return reloadedComponents;\n  }\n\n  private throwForComponentIssues(components: Component[], ignoreIssues?: string) {\n    components.forEach((component) => {\n      if (this.workspace.isLegacy && component.issues) {\n        component.issues.delete(IssuesClasses.RelativeComponentsAuthored);\n      }\n    });\n    if (ignoreIssues === '*') {\n      // ignore all issues\n      return;\n    }\n    const issuesToIgnoreFromFlag = ignoreIssues?.split(',').map((issue) => issue.trim()) || [];\n    const issuesToIgnoreFromConfig = this.issues.getIssuesToIgnore();\n    const issuesToIgnore = [...issuesToIgnoreFromFlag, ...issuesToIgnoreFromConfig];\n    issuesToIgnore.forEach((issue) => {\n      const issueClass = IssuesClasses[issue];\n      if (!issueClass) {\n        throw new Error(\n          `unrecognized component-issue \"${issue}\". please specify one of the following:\\n${Object.keys(\n            IssuesClasses\n          ).join('\\n')}`\n        );\n      }\n      components.forEach((component) => {\n        component.issues.delete(issueClass);\n      });\n    });\n    const componentsWithBlockingIssues = components.filter((component) => component.issues?.shouldBlockTagging());\n    if (!R.isEmpty(componentsWithBlockingIssues)) {\n      throw new ComponentsHaveIssues(componentsWithBlockingIssues);\n    }\n  }\n\n  private async getComponentsToTag(\n    isAllScope: boolean,\n    exactVersion: string | undefined,\n    includeImported: boolean,\n    persist: boolean,\n    force: boolean,\n    ids: string[],\n    snapped: boolean\n  ): Promise<{ bitIds: BitId[]; warnings: string[] }> {\n    const warnings: string[] = [];\n    const componentsList = new ComponentsList(this.workspace.consumer);\n    if (persist) {\n      const softTaggedComponents = componentsList.listSoftTaggedComponents();\n      return { bitIds: softTaggedComponents, warnings: [] };\n    }\n\n    const tagPendingComponents = isAllScope\n      ? await componentsList.listTagPendingOfAllScope(includeImported)\n      : await componentsList.listTagPendingComponents();\n\n    const snappedComponents = await componentsList.listSnappedComponentsOnMain();\n    const snappedComponentsIds = snappedComponents.map((c) => c.toBitId());\n\n    if (ids.length) {\n      const bitIds = await Promise.all(\n        ids.map(async (id) => {\n          const [idWithoutVer, version] = id.split('@');\n          const idHasWildcard = hasWildcard(id);\n          if (idHasWildcard) {\n            const allIds = ComponentsList.filterComponentsByWildcard(tagPendingComponents, idWithoutVer);\n            return allIds.map((bitId) => bitId.changeVersion(version));\n          }\n          const bitId = this.workspace.consumer.getParsedId(idWithoutVer);\n          if (!force) {\n            const componentStatus = await this.workspace.consumer.getComponentStatusById(bitId);\n            if (componentStatus.modified === false) return null;\n          }\n          return bitId.changeVersion(version);\n        })\n      );\n\n      return { bitIds: compact(bitIds.flat()), warnings };\n    }\n\n    if (snapped) {\n      return { bitIds: snappedComponentsIds, warnings };\n    }\n\n    tagPendingComponents.push(...snappedComponentsIds);\n\n    if (isAllScope && exactVersion) {\n      const tagPendingComponentsLatest = await this.workspace.scope.legacyScope.latestVersions(\n        tagPendingComponents,\n        false\n      );\n      tagPendingComponentsLatest.forEach((componentId) => {\n        if (componentId.version && semver.valid(componentId.version) && semver.gt(componentId.version, exactVersion)) {\n          warnings.push(`warning: ${componentId.toString()} has a version greater than ${exactVersion}`);\n        }\n      });\n    }\n\n    return { bitIds: tagPendingComponents.map((id) => id.changeVersion(undefined)), warnings };\n  }\n\n  static slots = [];\n  static dependencies = [WorkspaceAspect, CLIAspect, CommunityAspect, LoggerAspect, IssuesAspect];\n  static runtime = MainRuntime;\n  static async provider([workspace, cli, community, loggerMain, issues]: [\n    Workspace,\n    CLIMain,\n    CommunityMain,\n    LoggerMain,\n    IssuesMain\n  ]) {\n    const logger = loggerMain.createLogger(SnappingAspect.id);\n    const snapping = new SnappingMain(workspace, logger, issues);\n    const snapCmd = new SnapCmd(community.getBaseDomain(), snapping);\n    const tagCmd = new TagCmd(community.getBaseDomain(), snapping);\n    cli.register(tagCmd, snapCmd);\n    return snapping;\n  }\n}\n\nSnappingAspect.addRuntime(SnappingMain);\n\nexport default SnappingMain;\n"]}