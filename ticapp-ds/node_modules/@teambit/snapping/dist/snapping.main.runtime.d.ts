import { CLIMain } from '@teambit/cli';
import { CommunityMain } from '@teambit/community';
import { Workspace } from '@teambit/workspace';
import { BitIds } from '@teambit/legacy/dist/bit-id';
import { TagResults, BasicTagParams } from '@teambit/legacy/dist/api/consumer/lib/tag';
import { SnapResults } from '@teambit/legacy/dist/api/consumer/lib/snap';
import { Logger, LoggerMain } from '@teambit/logger';
import { IssuesMain } from '@teambit/issues';
export declare class SnappingMain {
    private workspace;
    private logger;
    private issues;
    constructor(workspace: Workspace, logger: Logger, issues: IssuesMain);
    /**
     * tag the given component ids or all modified/new components if "all" param is set.
     * tag is a similar operation as a snap, which saves the changes into the local scope, but it also creates an alias
     * with a valid semver to that version.
     * tag can be done only on main, not on a lane.
     */
    tag({ ids, message, ver, all, editor, snapped, patch, minor, major, preRelease, force, verbose, ignoreIssues, ignoreNewestVersion, skipTests, skipAutoTag, scope, build, soft, persist, forceDeploy, incrementBy, disableTagAndSnapPipelines, }: {
        ids?: string[];
        all?: boolean | string;
        snapped?: boolean | string;
        ver?: string;
        patch?: boolean;
        minor?: boolean;
        major?: boolean;
        ignoreIssues?: string;
        scope?: string | boolean;
        incrementBy?: number;
    } & Partial<BasicTagParams>): Promise<TagResults | null>;
    /**
     * save the local changes of a component(s) into the scope. snap can be done on main or on a lane.
     * once a component is snapped on a lane, it becomes part of it.
     */
    snap({ id, // @todo: rename to "patterns"
    legacyBitIds, // @todo: change to ComponentID[]. pass only if have the ids already parsed.
    resolveUnmerged, message, force, verbose, ignoreIssues, skipTests, skipAutoSnap, build, disableTagAndSnapPipelines, forceDeploy, }: {
        id?: string;
        legacyBitIds?: BitIds;
        resolveUnmerged?: boolean;
        message?: string;
        force?: boolean;
        verbose?: boolean;
        ignoreIssues?: string;
        build: boolean;
        skipTests?: boolean;
        skipAutoSnap?: boolean;
        disableTagAndSnapPipelines?: boolean;
        forceDeploy?: boolean;
    }): Promise<SnapResults | null>;
    private loadComponentsForTag;
    private throwForComponentIssues;
    private getComponentsToTag;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([workspace, cli, community, loggerMain, issues]: [
        Workspace,
        CLIMain,
        CommunityMain,
        LoggerMain,
        IssuesMain
    ]): Promise<SnappingMain>;
}
export default SnappingMain;
