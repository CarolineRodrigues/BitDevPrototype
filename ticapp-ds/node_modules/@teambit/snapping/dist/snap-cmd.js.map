{"version":3,"sources":["snap-cmd.ts"],"names":["SnapCmd","constructor","docsDomain","snapping","Object","keys","IssuesClasses","join","description","report","id","message","all","force","verbose","ignoreIssues","build","skipTests","skipAutoSnap","disableSnapPipeline","forceDeploy","BUILD_ON_CI","Boolean","BitError","disableTagAndSnapPipelines","results","snap","chalk","yellow","NOTHING_TO_SNAP_MSG","snappedComponents","autoSnappedResults","warnings","newComponents","laneName","changedComponents","filter","component","searchWithoutVersion","addedComponents","autoTaggedCount","length","warningsOutput","tagExplanation","outputComponents","comps","map","componentOutput","toString","autoTag","result","triggeredBy","searchWithoutScopeAndVersion","autoTagComp","a","AUTO_SNAPPED_MSG","outputIfExists","label","explanation","components","underline","laneStr","green"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { IssuesClasses } from '@teambit/component-issues';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { isFeatureEnabled, BUILD_ON_CI } from '@teambit/legacy/dist/api/consumer/lib/feature-toggle';\nimport { WILDCARD_HELP, NOTHING_TO_SNAP_MSG, AUTO_SNAPPED_MSG } from '@teambit/legacy/dist/constants';\nimport { BitError } from '@teambit/bit-error';\nimport { SnapResults } from '@teambit/legacy/dist/api/consumer/lib/snap';\nimport { SnappingMain } from './snapping.main.runtime';\n\nexport class SnapCmd implements Command {\n  name = 'snap [id]';\n  description: string;\n  alias = '';\n  options = [\n    ['m', 'message <message>', 'log message describing the user changes'],\n    ['a', 'all', 'snap all new and modified components'],\n    ['f', 'force', 'force-snap even if tests are failing and even when component has not changed'],\n    ['v', 'verbose', 'show specs output on failure'],\n    ['', 'build', 'Harmony only. run the pipeline build and complete the tag'],\n    ['', 'skip-tests', 'skip running component tests during snap process'],\n    ['', 'skip-auto-snap', 'skip auto snapping dependents'],\n    ['', 'disable-snap-pipeline', 'skip the snap pipeline'],\n    ['', 'force-deploy', 'Harmony only. run the deploy pipeline although the build failed'],\n    [\n      'i',\n      'ignore-issues [issues]',\n      `ignore component issues (shown in \"bit status\" as \"issues found\"), issues to ignore:\n[${Object.keys(IssuesClasses).join(', ')}]\nto ignore multiple issues, separate them by a comma and wrap with quotes. to ignore all issues, specify \"*\".`,\n    ],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(docsDomain: string, private snapping: SnappingMain) {\n    this.description = `record component changes.\nhttps://${docsDomain}/components/snaps\n${WILDCARD_HELP('snap')}`;\n  }\n\n  async report(\n    [id]: string[],\n    {\n      message = '',\n      all = false,\n      force = false,\n      verbose = false,\n      ignoreIssues,\n      build,\n      skipTests = false,\n      skipAutoSnap = false,\n      disableSnapPipeline = false,\n      forceDeploy = false,\n    }: {\n      message?: string;\n      all?: boolean;\n      force?: boolean;\n      verbose?: boolean;\n      ignoreIssues?: string;\n      build?: boolean;\n      skipTests?: boolean;\n      skipAutoSnap?: boolean;\n      disableSnapPipeline?: boolean;\n      forceDeploy?: boolean;\n    }\n  ) {\n    build = isFeatureEnabled(BUILD_ON_CI) ? Boolean(build) : true;\n    if (!id && !all) {\n      throw new BitError('missing [id]. to snap all components, please use --all flag');\n    }\n    if (id && all) {\n      throw new BitError(\n        'you can use either a specific component [id] to snap a particular component or --all flag to snap them all'\n      );\n    }\n    const disableTagAndSnapPipelines = disableSnapPipeline;\n    if (disableTagAndSnapPipelines && forceDeploy) {\n      throw new BitError('you can use either force-deploy or disable-snap-pipeline, but not both');\n    }\n\n    const results = await this.snapping.snap({\n      id,\n      message,\n      force,\n      verbose,\n      ignoreIssues,\n      build,\n      skipTests,\n      skipAutoSnap,\n      disableTagAndSnapPipelines,\n      forceDeploy,\n    });\n\n    if (!results) return chalk.yellow(NOTHING_TO_SNAP_MSG);\n    const { snappedComponents, autoSnappedResults, warnings, newComponents, laneName }: SnapResults = results;\n    const changedComponents = snappedComponents.filter(\n      (component) => !newComponents.searchWithoutVersion(component.id)\n    );\n    const addedComponents = snappedComponents.filter((component) => newComponents.searchWithoutVersion(component.id));\n    const autoTaggedCount = autoSnappedResults ? autoSnappedResults.length : 0;\n\n    const warningsOutput = warnings && warnings.length ? `${chalk.yellow(warnings.join('\\n'))}\\n\\n` : '';\n    const tagExplanation = `\\n(use \"bit export\" to push these components to a remote\")\n(use \"bit untag\" to unstage versions)\\n`;\n\n    const outputComponents = (comps) => {\n      return comps\n        .map((component) => {\n          let componentOutput = `     > ${component.id.toString()}`;\n          const autoTag = autoSnappedResults.filter((result) =>\n            result.triggeredBy.searchWithoutScopeAndVersion(component.id)\n          );\n          if (autoTag.length) {\n            const autoTagComp = autoTag.map((a) => a.component.id.toString());\n            componentOutput += `\\n       ${AUTO_SNAPPED_MSG}: ${autoTagComp.join(', ')}`;\n          }\n          return componentOutput;\n        })\n        .join('\\n');\n    };\n\n    const outputIfExists = (label, explanation, components) => {\n      if (!components.length) return '';\n      return `\\n${chalk.underline(label)}\\n(${explanation})\\n${outputComponents(components)}\\n`;\n    };\n    const laneStr = laneName ? ` on \"${laneName}\" lane` : '';\n\n    return (\n      warningsOutput +\n      chalk.green(`${snappedComponents.length + autoTaggedCount} component(s) snapped${laneStr}`) +\n      tagExplanation +\n      outputIfExists('new components', 'first version for components', addedComponents) +\n      outputIfExists('changed components', 'components that got a version bump', changedComponents)\n    );\n  }\n}\n"]}