{"version":3,"sources":["snapping.spec.ts"],"names":["describe","workspaceData","snapping","beforeAll","workspacePath","console","log","fs","writeFile","path","join","compiler","CompilerAspect","compileOnWorkspace","SnappingAspect","it","tag","ids","err","expect","constructor","name","toEqual","ComponentsHaveIssues","skip","IssuesAspect","id","ignoreIssues","results","taggedComponents","length","afterAll"],"mappings":";;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChC,MAAIC,aAAJ;AACA,MAAIC,QAAJ;AACAF,EAAAA,QAAQ,CAAC,wBAAD,EAA2B,MAAM;AACvCG,IAAAA,SAAS,CAAC,YAAY;AACpBF,MAAAA,aAAa,GAAG,wCAAhB;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAoBH,aAA1B,CAFoB,CAGpB;;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,aAArC;AACA,YAAM,wCAAeA,aAAf,CAAN;AACA,YAAMG,mBAAGC,SAAH,CAAaC,gBAAKC,IAAL,CAAUN,aAAV,EAAyB,gBAAzB,CAAb,EAA0D,wCAA1D,CAAN;AACA,YAAMO,QAAsB,GAAG,MAAM,kCAAWC,0BAAX,EAA2BR,aAA3B,CAArC;AACA,YAAMO,QAAQ,CAACE,kBAAT,EAAN;AACAX,MAAAA,QAAQ,GAAG,MAAM,kCAAWY,0BAAX,EAA2BV,aAA3B,CAAjB;AACD,KAVQ,CAAT;AAWAW,IAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAY;AAC/D,UAAI;AACF,cAAMb,QAAQ,CAACc,GAAT,CAAa;AAAEC,UAAAA,GAAG,EAAE,CAAC,OAAD;AAAP,SAAb,CAAN;AACD,OAFD,CAEE,OAAOC,GAAP,EAAiB;AACjBC,QAAAA,MAAM,CAACD,GAAG,CAACE,WAAJ,CAAgBC,IAAjB,CAAN,CAA6BC,OAA7B,CAAqCC,6CAAqBF,IAA1D;AACD;AACF,KANC,CAAF,CAZuC,CAmBvC;;AACAN,IAAAA,EAAE,CAACS,IAAH,CAAQ,iGAAR,EAA2G,YAAY;AACrH,YAAM,4CAAmBvB,aAAa,CAACG,aAAjC,EAAgDqB,kBAAaC,EAA7D,EAAiE;AACrEC,QAAAA,YAAY,EAAE,CAAC,iCAAD;AADuD,OAAjE,CAAN;AAGAzB,MAAAA,QAAQ,GAAG,MAAM,kCAAWY,0BAAX,EAA2Bb,aAAa,CAACG,aAAzC,CAAjB;AACA,YAAMwB,OAAO,GAAG,MAAM1B,QAAQ,CAACc,GAAT,CAAa;AAAEC,QAAAA,GAAG,EAAE,CAAC,OAAD;AAAP,OAAb,CAAtB;AACAE,MAAAA,MAAM,CAACS,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEC,gBAAT,CAA0BC,MAA3B,CAAN,CAAyCR,OAAzC,CAAiD,CAAjD;AACD,KAPD;AAQAS,IAAAA,QAAQ,CAAC,YAAY;AACnB,YAAM,0CAAiB9B,aAAjB,CAAN;AACD,KAFO,CAAR;AAGD,GA/BO,CAAR;AAgCD,CAnCO,CAAR","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { loadAspect } from '@teambit/harmony.testing.load-aspect';\nimport {\n  mockWorkspace,\n  destroyWorkspace,\n  WorkspaceData,\n  setWorkspaceConfig,\n} from '@teambit/workspace.testing.mock-workspace';\nimport IssuesAspect from '@teambit/issues';\nimport { CompilerAspect, CompilerMain } from '@teambit/compiler';\nimport { mockComponents } from '@teambit/component.testing.mock-components';\nimport { SnappingMain } from './snapping.main.runtime';\nimport { SnappingAspect } from './snapping.aspect';\nimport { ComponentsHaveIssues } from './components-have-issues';\n\ndescribe('Snapping aspect', () => {\n  let workspaceData: WorkspaceData;\n  let snapping: SnappingMain;\n  describe('components with issues', () => {\n    beforeAll(async () => {\n      workspaceData = mockWorkspace();\n      const { workspacePath } = workspaceData;\n      // eslint-disable-next-line no-console\n      console.log('workspace created at ', workspacePath);\n      await mockComponents(workspacePath);\n      await fs.writeFile(path.join(workspacePath, 'comp1/index.js'), `const nonExist = require(\"non-exist\");`);\n      const compiler: CompilerMain = await loadAspect(CompilerAspect, workspacePath);\n      await compiler.compileOnWorkspace();\n      snapping = await loadAspect(SnappingAspect, workspacePath);\n    });\n    it('tag should throw an ComponentsHaveIssues error', async () => {\n      try {\n        await snapping.tag({ ids: ['comp1'] });\n      } catch (err: any) {\n        expect(err.constructor.name).toEqual(ComponentsHaveIssues.name);\n      }\n    });\n    // @todo: this test fails during \"bit build\" for some reason. It passes on \"bit test\";\n    it.skip('should not throw an error if the config was set to ignore MissingPackagesDependenciesOnFs error', async () => {\n      await setWorkspaceConfig(workspaceData.workspacePath, IssuesAspect.id, {\n        ignoreIssues: ['MissingPackagesDependenciesOnFs'],\n      });\n      snapping = await loadAspect(SnappingAspect, workspaceData.workspacePath);\n      const results = await snapping.tag({ ids: ['comp1'] });\n      expect(results?.taggedComponents.length).toEqual(1);\n    });\n    afterAll(async () => {\n      await destroyWorkspace(workspaceData);\n    });\n  });\n});\n"]}