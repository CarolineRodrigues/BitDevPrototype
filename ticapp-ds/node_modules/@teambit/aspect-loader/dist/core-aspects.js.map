{"version":3,"sources":["core-aspects.ts"],"names":["_bvmConfig","getAspectDirFromPath","id","pathsToResolveAspects","aspectName","getCoreAspectName","packageName","getCoreAspectPackageName","moduleDirectory","length","require","resolve","paths","dirPath","Error","getAspectDir","err","__dirname","getAspectDirFromBvm","bvmDirOptions","Config","load","bvmConfig","version","link","linkName","getDefaultLinkName","links","getLinks","BitError","versionDir","exists","getSpecificVersionDir","getAspectDistDir","name","split","join","getAspectDef","runtime","files","runtimeFile","find","file","includes","aspectPath","runtimePath"],"mappings":"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","sourcesContent":["import { BitError } from '@teambit/bit-error';\nimport { existsSync, readdir } from 'fs-extra';\nimport { join, resolve } from 'path';\nimport { Config } from '@teambit/bvm.config';\n\nlet _bvmConfig;\n\nfunction getAspectDirFromPath(id: string, pathsToResolveAspects?: string[]): string {\n  const aspectName = getCoreAspectName(id);\n  const packageName = getCoreAspectPackageName(id);\n\n  let moduleDirectory;\n  if (pathsToResolveAspects && pathsToResolveAspects.length) {\n    moduleDirectory = require.resolve(packageName, { paths: pathsToResolveAspects });\n  } else {\n    moduleDirectory = require.resolve(packageName);\n  }\n  const dirPath = join(moduleDirectory, '../..'); // to remove the \"index.js\" at the end\n  if (!existsSync(dirPath)) {\n    throw new Error(`unable to find ${aspectName} in ${dirPath}`);\n  }\n  return dirPath;\n}\n\nexport function getAspectDir(id: string): string {\n  const aspectName = getCoreAspectName(id);\n  let dirPath;\n\n  try {\n    dirPath = getAspectDirFromPath(id);\n  } catch (err: any) {\n    dirPath = resolve(__dirname, '../..', aspectName, 'dist');\n  }\n  if (!existsSync(dirPath)) {\n    throw new Error(`unable to find ${aspectName} in ${dirPath}`);\n  }\n  return dirPath;\n}\n\ntype BvmDirOptions = {\n  version?: string;\n  linkName?: string;\n};\nexport function getAspectDirFromBvm(id: string, bvmDirOptions?: BvmDirOptions): string {\n  if (!_bvmConfig) {\n    _bvmConfig = Config.load(false, ['env', 'file']);\n  }\n  const bvmConfig = _bvmConfig;\n  let version;\n  if (bvmDirOptions?.version) {\n    version = bvmDirOptions?.version;\n  } else {\n    const link = bvmDirOptions?.linkName || bvmConfig.getDefaultLinkName();\n    const links = bvmConfig.getLinks();\n    version = links[link];\n    if (!version) {\n      throw new BitError(`can't find link named ${bvmDirOptions?.linkName} in bvm config`);\n    }\n  }\n  const { versionDir, exists } = bvmConfig.getSpecificVersionDir(version, true);\n  if (!exists) {\n    throw new BitError(`can't find version ${version} in bvm folder`);\n  }\n  return getAspectDirFromPath(id, [versionDir]);\n}\n\nexport function getAspectDistDir(id: string) {\n  return resolve(`${getAspectDir(id)}/dist`);\n}\n\nexport function getCoreAspectName(id: string): string {\n  const [, ...name] = id.split('/');\n  const aspectName = name.join('.');\n  return aspectName;\n}\n\nexport function getCoreAspectPackageName(id: string): string {\n  const aspectName = getCoreAspectName(id);\n  return `@teambit/${aspectName}`;\n}\n\nexport async function getAspectDef(aspectName: string, runtime?: string) {\n  const dirPath = getAspectDistDir(aspectName);\n\n  const files = await readdir(dirPath);\n  let runtimeFile;\n  if (runtime) {\n    runtimeFile = files.find((file) => file.includes(`.${runtime}.runtime.js`)) || null;\n  }\n\n  return {\n    id: aspectName,\n    aspectPath: join(dirPath, '..'),\n    runtimePath: runtimeFile ? resolve(`${dirPath}/${runtimeFile}`) : null,\n  };\n}\n"]}