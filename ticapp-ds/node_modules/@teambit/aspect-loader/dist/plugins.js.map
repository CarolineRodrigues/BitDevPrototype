{"version":3,"sources":["plugins.ts"],"names":["Plugins","constructor","component","plugins","getByRuntime","runtime","filter","plugin","supportsRuntime","load","aspect","Aspect","create","id","toString","addRuntime","provider","forEach","register","dependencies","has","Boolean","length","from","defs","resolvePath","flatMap","pluginDef","files","pattern","filesystem","byGlob","byRegex","map","file","Plugin","relative","path"],"mappings":";;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIO,MAAMA,OAAN,CAAc;AACnBC,EAAAA,WAAW,CAAUC,SAAV,EAAyCC,OAAzC,EAA4D;AAAA,SAAlDD,SAAkD,GAAlDA,SAAkD;AAAA,SAAnBC,OAAmB,GAAnBA,OAAmB;AAAE,GADtD,CAGnB;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,YAAY,CAACC,OAAD,EAAkB;AAC5B,WAAO,KAAKF,OAAL,CAAaG,MAAb,CAAqBC,MAAD,IAAY;AACrC,aAAOA,MAAM,CAACC,eAAP,CAAuBH,OAAvB,CAAP;AACD,KAFM,CAAP;AAGD;;AAEDI,EAAAA,IAAI,CAACJ,OAAD,EAAkB;AACpB,UAAMF,OAAO,GAAG,KAAKC,YAAL,CAAkBC,OAAlB,CAAhB;;AACA,UAAMK,MAAM,GAAGC,kBAAOC,MAAP,CAAc;AAC3BC,MAAAA,EAAE,EAAE,KAAKX,SAAL,CAAeW,EAAf,CAAkBC,QAAlB;AADuB,KAAd,CAAf;;AAIAJ,IAAAA,MAAM,CAACK,UAAP,CAAkB;AAChBC,MAAAA,QAAQ,EAAE,YAAY;AACpBb,QAAAA,OAAO,CAACc,OAAR,CAAiBV,MAAD,IAAY;AAC1BA,UAAAA,MAAM,CAACW,QAAP;AACD,SAFD;AAGD,OALe;AAMhBb,MAAAA,OANgB;AAOhB;AACAc,MAAAA,YAAY,EAAE;AARE,KAAlB;AAWA,WAAOT,MAAP;AACD;;AAEDU,EAAAA,GAAG,GAAG;AACJ,WAAOC,OAAO,CAAC,KAAKlB,OAAL,CAAamB,MAAd,CAAd;AACD;;AAEU,SAAJC,IAAI,CAACrB,SAAD,EAAuBsB,IAAvB,EAAiDC,WAAjD,EAAyF;AAClG,UAAMtB,OAAO,GAAGqB,IAAI,CAACE,OAAL,CAAcC,SAAD,IAAe;AAC1C,YAAMC,KAAK,GACT,OAAOD,SAAS,CAACE,OAAjB,KAA6B,QAA7B,GACI3B,SAAS,CAAC4B,UAAV,CAAqBC,MAArB,CAA4B,CAACJ,SAAS,CAACE,OAAX,CAA5B,CADJ,GAEI3B,SAAS,CAAC4B,UAAV,CAAqBE,OAArB,CAA6BL,SAAS,CAACE,OAAvC,CAHN;AAKA,aAAOD,KAAK,CAACK,GAAN,CAAWC,IAAD,IAAU;AACzB,eAAO,KAAIC,gBAAJ,EAAWR,SAAX,EAAsBF,WAAW,GAAGA,WAAW,CAACS,IAAI,CAACE,QAAN,CAAd,GAAgCF,IAAI,CAACG,IAAtE,CAAP;AACD,OAFM,CAAP;AAGD,KATe,CAAhB;AAWA,WAAO,IAAIrC,OAAJ,CAAYE,SAAZ,EAAuBC,OAAvB,CAAP;AACD;;AArDkB","sourcesContent":["import { Component } from '@teambit/component';\nimport { Aspect } from '@teambit/harmony';\nimport { PluginDefinition } from './plugin-definition';\nimport { Plugin } from './plugin';\n\nexport type PluginMap = { [filePath: string]: PluginDefinition };\n\nexport class Plugins {\n  constructor(readonly component: Component, readonly plugins: Plugin[]) {}\n\n  // computeDependencies(runtime: string): Aspect[] {\n  //   const inRuntime = this.getByRuntime(runtime);\n  //   return inRuntime.flatMap((plugin) => {\n  //     return plugin.def.dependencies;\n  //   });\n  // }\n\n  getByRuntime(runtime: string) {\n    return this.plugins.filter((plugin) => {\n      return plugin.supportsRuntime(runtime);\n    });\n  }\n\n  load(runtime: string) {\n    const plugins = this.getByRuntime(runtime);\n    const aspect = Aspect.create({\n      id: this.component.id.toString(),\n    });\n\n    aspect.addRuntime({\n      provider: async () => {\n        plugins.forEach((plugin) => {\n          plugin.register();\n        });\n      },\n      runtime,\n      // dependencies: this.computeDependencies(runtime)\n      dependencies: [],\n    });\n\n    return aspect;\n  }\n\n  has() {\n    return Boolean(this.plugins.length);\n  }\n\n  static from(component: Component, defs: PluginDefinition[], resolvePath?: (path: string) => string) {\n    const plugins = defs.flatMap((pluginDef) => {\n      const files =\n        typeof pluginDef.pattern === 'string'\n          ? component.filesystem.byGlob([pluginDef.pattern])\n          : component.filesystem.byRegex(pluginDef.pattern);\n\n      return files.map((file) => {\n        return new Plugin(pluginDef, resolvePath ? resolvePath(file.relative) : file.path);\n      });\n    });\n\n    return new Plugins(component, plugins);\n  }\n}\n"]}