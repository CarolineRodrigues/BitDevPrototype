{"version":3,"sources":["aspect-loader.main.runtime.ts"],"names":["AspectLoaderMain","constructor","logger","envs","harmony","onAspectLoadErrorSlot","onLoadRequireableExtensionSlot","pluginSlot","getCompiler","component","env","getEnv","registerOnAspectLoadErrorSlot","onAspectLoadError","register","registerOnLoadRequireableExtensionSlot","onLoadRequireableExtension","triggerOnAspectLoadError","err","entries","toArray","isFixed","onAspectFailFunc","result","id","getRuntimePath","modulePath","runtime","runtimeFile","filesystem","files","find","file","relative","includes","compiler","dist","getDistPathBySrcPath","e","info","distPath","DEFAULT_DIST_DIRNAME","isAspectLoaded","failedAspects","get","getDescriptor","instance","iconFn","icon","apply","undefined","getNotLoadedConfiguredExtensions","configuredAspects","Array","from","config","raw","keys","loadedExtensions","extensionsIds","extensionsToLoad","loadDefinition","props","AspectDefinition","coreAspects","_coreAspects","isCoreAspect","ids","getCoreAspectIds","setCoreAspects","aspects","map","aspect","concat","_reserved","getCoreEnvsIds","envsIds","allIds","isCoreEnv","getUserAspects","coreAspectIds","getCoreAspectDefs","runtimeName","defs","Promise","all","rawDef","filter","def","runtimePath","resolveAspects","components","resolver","promises","resolvedAspect","aspectPath","aspectDefs","mainAspect","_mainAspect","setMainAspect","failedLoadAspect","addFailure","push","cloneManifest","manifest","cloned","Object","assign","create","getPrototypeOf","provider","addRuntime","getRuntime","doRequire","requireableExtension","idStr","toString","require","default","newManifest","runOnLoadRequireableExtensionSubscribers","loadRequireableExtensions","requireableExtensions","throwOnError","manifests","getManifestsFromRequireableExtensions","loadExtensionsByManifests","manifestsP","errorMsg","error","errAfterReLoad","handleExtensionLoadingError","console","CannotLoadExtension","isLoaderStarted","consoleFailure","message","updatedManifest","onLoadRequireableExtensionFunc","getPluginDefs","values","getPlugins","componentPath","Plugins","relativePath","isAspect","isValidAspect","isAspectComponent","isUsingAspectEnv","loadAspectsFromGlobalScope","aspectIds","globalScope","LegacyScope","ensure","GLOBAL_SCOPE","ensureDir","globalScopeHarmony","path","scope","ScopeAspect","ComponentID","fromLegacy","BitId","parse","hasVersions","every","hasVersion","useCache","import","throwIfNotExist","resolvedAspects","getResolvedAspects","code","resolvedAspectsAgain","skipIfExists","prepareManifests","MainRuntime","Error","Aspect","registerPlugins","pluginDefs","extensionsManifests","isValid","warn","preparedManifests","load","warning","loggerExt","createLogger","AspectLoaderAspect","aspectLoader","LoggerAspect","EnvsAspect","Slot","withType"],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport LegacyScope from '@teambit/legacy/dist/scope/scope';\nimport { GLOBAL_SCOPE, DEFAULT_DIST_DIRNAME } from '@teambit/legacy/dist/constants';\nimport { MainRuntime } from '@teambit/cli';\nimport { ExtensionManifest, Harmony, Aspect, SlotRegistry, Slot } from '@teambit/harmony';\nimport type { LoggerMain } from '@teambit/logger';\nimport { ComponentID, Component } from '@teambit/component';\nimport { Logger, LoggerAspect } from '@teambit/logger';\nimport { RequireableComponent } from '@teambit/harmony.modules.requireable-component';\nimport { replaceFileExtToJs } from '@teambit/compilation.modules.babel-compiler';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { loadBit } from '@teambit/bit';\nimport { ScopeAspect, ScopeMain } from '@teambit/scope';\nimport mapSeries from 'p-map-series';\nimport { difference, compact, flatten, intersection } from 'lodash';\nimport { AspectDefinition, AspectDefinitionProps } from './aspect-definition';\nimport { PluginDefinition } from './plugin-definition';\nimport { AspectLoaderAspect } from './aspect-loader.aspect';\nimport { UNABLE_TO_LOAD_EXTENSION, UNABLE_TO_LOAD_EXTENSION_FROM_LIST } from './constants';\nimport { CannotLoadExtension } from './exceptions';\nimport { getAspectDef } from './core-aspects';\nimport { Plugins } from './plugins';\n\nexport type PluginDefinitionSlot = SlotRegistry<PluginDefinition[]>;\n\nexport type AspectDescriptor = {\n  /**\n   * name of the extension.\n   */\n  id: string;\n\n  /**\n   * icon of the extension.\n   */\n  icon?: string;\n};\n\nexport type AspectResolver = (component: Component) => Promise<ResolvedAspect>;\n\nexport type ResolvedAspect = {\n  aspectPath: string;\n  runtimePath: string | null;\n};\n\ntype OnAspectLoadError = (err: Error, id: ComponentID) => Promise<boolean>;\nexport type OnAspectLoadErrorSlot = SlotRegistry<OnAspectLoadError>;\n\nexport type OnLoadRequireableExtension = (\n  requireableExtension: RequireableComponent,\n  manifest: ExtensionManifest | Aspect\n) => Promise<ExtensionManifest | Aspect>;\n/**\n * A slot which run during loading the requirable extension (after first manifest calculation)\n */\nexport type OnLoadRequireableExtensionSlot = SlotRegistry<OnLoadRequireableExtension>;\n\nexport type MainAspect = {\n  /**\n   * path to the main aspect.\n   */\n  path: string;\n\n  /**\n   * version of the aspect.\n   */\n  version: string | undefined;\n\n  /**\n   * package name of the aspect\n   */\n  packageName: string | undefined;\n\n  /**\n   * reference to aspect manifest.\n   */\n  aspect: Aspect;\n\n  /**\n   * The name of the aspect (without the scope prefix)\n   */\n  name: string;\n\n  /**\n   * The name of the aspect\n   */\n  id: string;\n};\n\nexport class AspectLoaderMain {\n  constructor(\n    private logger: Logger,\n    private envs: EnvsMain,\n    private harmony: Harmony,\n    private onAspectLoadErrorSlot: OnAspectLoadErrorSlot,\n    private onLoadRequireableExtensionSlot: OnLoadRequireableExtensionSlot,\n    private pluginSlot: PluginDefinitionSlot\n  ) {}\n\n  private getCompiler(component: Component) {\n    const env = this.envs.getEnv(component)?.env;\n    return env?.getCompiler();\n  }\n\n  registerOnAspectLoadErrorSlot(onAspectLoadError: OnAspectLoadError) {\n    this.onAspectLoadErrorSlot.register(onAspectLoadError);\n  }\n\n  registerOnLoadRequireableExtensionSlot(onLoadRequireableExtension: OnLoadRequireableExtension) {\n    this.onLoadRequireableExtensionSlot.register(onLoadRequireableExtension);\n  }\n\n  /**\n   * returns whether the aspect-load issue has been fixed.\n   */\n  async triggerOnAspectLoadError(err: Error, component: Component): Promise<boolean> {\n    const entries = this.onAspectLoadErrorSlot.toArray(); // e.g. [ [ 'teambit.bit/compiler', [Function: bound onAspectLoadError] ] ]\n    let isFixed = false;\n    await mapSeries(entries, async ([, onAspectFailFunc]) => {\n      const result = await onAspectFailFunc(err, component.id);\n      if (result) isFixed = true;\n    });\n\n    return isFixed;\n  }\n\n  async getRuntimePath(component: Component, modulePath: string, runtime: string): Promise<string | null> {\n    const runtimeFile = component.filesystem.files.find((file: any) => {\n      return file.relative.includes(`.${runtime}.runtime`);\n    });\n\n    // @david we should add a compiler api for this.\n    if (!runtimeFile) return null;\n    try {\n      const compiler = this.getCompiler(component);\n\n      if (!compiler) {\n        return join(modulePath, runtimeFile.relative);\n      }\n\n      const dist = compiler.getDistPathBySrcPath(runtimeFile.relative);\n      return join(modulePath, dist);\n    } catch (e) {\n      this.logger.info(`got an error during get runtime path, probably the env is not loaded yet ${e}`);\n      // TODO: we are manually adding the dist here and replace the file name to handle case when\n      // we load aspects from scope, and their env in the same iteration, but we get into the aspect before its\n      // env, so it's env doesn't exist yet\n      // we should make sure to first load the env correctly before loading the aspect\n      const distPath = join(modulePath, DEFAULT_DIST_DIRNAME, replaceFileExtToJs(runtimeFile.relative));\n      return distPath;\n    }\n  }\n\n  isAspectLoaded(id: string) {\n    if (this.failedAspects.includes(id)) return true;\n    try {\n      return this.harmony.get(id);\n    } catch (err: any) {\n      return false;\n    }\n  }\n\n  getDescriptor(id: string): AspectDescriptor {\n    const instance = this.harmony.get<any>(id);\n    const iconFn = instance.icon;\n\n    const icon = iconFn ? iconFn.apply(instance) : undefined;\n\n    return {\n      id,\n      icon,\n    };\n  }\n\n  getNotLoadedConfiguredExtensions() {\n    const configuredAspects = Array.from(this.harmony.config.raw.keys());\n    const loadedExtensions = this.harmony.extensionsIds;\n    const extensionsToLoad = difference(configuredAspects, loadedExtensions);\n    return extensionsToLoad;\n  }\n\n  loadDefinition(props: AspectDefinitionProps): AspectDefinition {\n    return AspectDefinition.from(props);\n  }\n\n  private _coreAspects: Aspect[] = [];\n\n  get coreAspects() {\n    return this._coreAspects;\n  }\n\n  isCoreAspect(id: string) {\n    const ids = this.getCoreAspectIds();\n    return ids.includes(id);\n  }\n\n  setCoreAspects(aspects: Aspect[]) {\n    this._coreAspects = aspects;\n    return this;\n  }\n\n  getCoreAspectIds() {\n    const ids = this.coreAspects.map((aspect) => aspect.id);\n    return ids.concat(this._reserved);\n  }\n\n  /**\n   * Get all the core envs ids which is still register in the bit manifest as core aspect\n   */\n  getCoreEnvsIds(): string[] {\n    const envsIds = this.envs.getCoreEnvsIds();\n    const allIds = this.getCoreAspectIds();\n    return intersection(allIds, envsIds);\n  }\n\n  isCoreEnv(id: string): boolean {\n    const ids = this.getCoreEnvsIds();\n    return ids.includes(id);\n  }\n\n  private _reserved = ['teambit.harmony/bit', 'teambit.harmony/config'];\n\n  getUserAspects(): string[] {\n    const coreAspectIds = this.getCoreAspectIds();\n    return difference(this.harmony.extensionsIds, coreAspectIds);\n  }\n\n  async getCoreAspectDefs(runtimeName?: string) {\n    const defs = await Promise.all(\n      this.coreAspects.map(async (aspect) => {\n        const id = aspect.id;\n        const rawDef = await getAspectDef(id, runtimeName);\n        return this.loadDefinition(rawDef);\n      })\n    );\n\n    return defs.filter((def) => def.runtimePath);\n  }\n\n  async resolveAspects(components: Component[], resolver: AspectResolver): Promise<AspectDefinition[]> {\n    const promises = components.map(async (component) => {\n      const resolvedAspect = await resolver(component);\n      return new AspectDefinition(resolvedAspect.aspectPath, resolvedAspect.runtimePath, component);\n    });\n\n    const aspectDefs = await Promise.all(promises);\n    // return aspectDefs.filter((def) => def.runtimePath);\n    return aspectDefs;\n  }\n\n  private _mainAspect: MainAspect;\n\n  get mainAspect() {\n    return this._mainAspect;\n  }\n\n  setMainAspect(mainAspect: MainAspect) {\n    this._mainAspect = mainAspect;\n    return this;\n  }\n\n  private failedLoadAspect: string[] = [];\n\n  get failedAspects() {\n    return this.failedLoadAspect;\n  }\n\n  private addFailure(id: string): void {\n    if (this.failedAspects.includes(id)) return;\n    this.failedLoadAspect.push(id);\n  }\n\n  cloneManifest(manifest: any) {\n    const cloned = Object.assign(Object.create(Object.getPrototypeOf(manifest)), manifest);\n    cloned.provider = manifest.provider;\n    cloned.addRuntime = manifest.addRuntime;\n    cloned.getRuntime = manifest.getRuntime;\n    return cloned;\n  }\n\n  /**\n   * run \"require\" of the component code to get the manifest\n   */\n  async doRequire(requireableExtension: RequireableComponent): Promise<ExtensionManifest | Aspect> {\n    const idStr = requireableExtension.component.id.toString();\n    const aspect = await requireableExtension.require();\n    const manifest = aspect.default || aspect;\n    manifest.id = idStr;\n    // It's important to clone deep the manifest here to prevent mutate dependencies of other manifests as they point to the same location in memory\n    const cloned = this.cloneManifest(manifest);\n    const newManifest = await this.runOnLoadRequireableExtensionSubscribers(requireableExtension, cloned);\n    return newManifest;\n  }\n\n  /**\n   * in case the extension failed to load, prefer to throw an error, unless `throwOnError` param\n   * passed as `false`.\n   * there are cases when throwing an error blocks the user from doing anything else. for example,\n   * when a user develops an extension and deletes the node-modules, the extension on the workspace\n   * cannot be loaded anymore until \"bit compile\" is running. however, if this function throws an\n   * error, it'll throw for \"bit compile\" as well, which blocks the user.\n   * for the CI, it is important to throw an error because errors on console can be ignored.\n   * for now, when loading the extension from the workspace the throwOnError is passed as false.\n   * when loading from the scope (CI) it should be true.\n   *\n   * the console printing here is done directly by \"console.error\" and not by the logger. the reason\n   * is that the logger.console only prints when the loader started (which, btw, happens after\n   * entering this function, so it can't work) and here we want it to be printed regardless of the\n   * rules of starting the loader. e.g. if by mistake the CI got it as throwOnError=false, it's ok\n   * to break the output by the console.error.\n   *\n   * @todo: this is not the final word however about throwing/non throwing errors here.\n   * in some cases, such as \"bit tag\", it's better not to tag if an extension changes the model.\n   */\n  async loadRequireableExtensions(requireableExtensions: RequireableComponent[], throwOnError = false): Promise<void> {\n    const manifests = await this.getManifestsFromRequireableExtensions(requireableExtensions, throwOnError);\n    return this.loadExtensionsByManifests(manifests, throwOnError);\n  }\n\n  async getManifestsFromRequireableExtensions(\n    requireableExtensions: RequireableComponent[],\n    throwOnError = false\n  ): Promise<Array<ExtensionManifest | Aspect>> {\n    const manifestsP = mapSeries(requireableExtensions, async (requireableExtension) => {\n      if (!requireableExtensions) return undefined;\n      const idStr = requireableExtension.component.id.toString();\n      try {\n        return await this.doRequire(requireableExtension);\n      } catch (e: any) {\n        this.addFailure(idStr);\n        const errorMsg = UNABLE_TO_LOAD_EXTENSION(idStr);\n        this.logger.error(errorMsg, e);\n        const isFixed = await this.triggerOnAspectLoadError(e, requireableExtension.component);\n        let errAfterReLoad;\n        if (isFixed) {\n          this.logger.info(`the loading issue has been fixed, re-loading ${idStr}`);\n          try {\n            return await this.doRequire(requireableExtension);\n          } catch (err: any) {\n            this.logger.error('re-load of the aspect failed as well', err);\n            errAfterReLoad = err;\n          }\n        }\n        const error = errAfterReLoad || e;\n        this.handleExtensionLoadingError(error, idStr, throwOnError);\n      }\n      return undefined;\n    });\n    const manifests = await manifestsP;\n\n    // Remove empty manifests as a result of loading issue\n    return compact(manifests);\n  }\n\n  handleExtensionLoadingError(error: Error, idStr: string, throwOnError: boolean) {\n    const errorMsg = UNABLE_TO_LOAD_EXTENSION(idStr);\n    if (throwOnError) {\n      // @ts-ignore\n      this.logger.console(error);\n      throw new CannotLoadExtension(idStr, error);\n    }\n    this.logger.error(errorMsg, error);\n    if (this.logger.isLoaderStarted) {\n      this.logger.consoleFailure(errorMsg);\n    } else {\n      this.logger.console(errorMsg);\n      this.logger.console(error.message);\n    }\n  }\n\n  async runOnLoadRequireableExtensionSubscribers(\n    requireableExtension: RequireableComponent,\n    manifest: ExtensionManifest | Aspect\n  ): Promise<ExtensionManifest | Aspect> {\n    let updatedManifest = manifest;\n    const entries = this.onLoadRequireableExtensionSlot.toArray();\n    await mapSeries(entries, async ([, onLoadRequireableExtensionFunc]) => {\n      updatedManifest = await onLoadRequireableExtensionFunc(requireableExtension, updatedManifest);\n    });\n    return updatedManifest;\n  }\n\n  getPluginDefs() {\n    return flatten(this.pluginSlot.values());\n  }\n\n  getPlugins(component: Component, componentPath: string): Plugins {\n    const defs = this.getPluginDefs();\n    return Plugins.from(component, defs, (relativePath) => {\n      const compiler = this.getCompiler(component);\n      if (!compiler) {\n        return join(componentPath, relativePath);\n      }\n\n      const dist = compiler.getDistPathBySrcPath(relativePath);\n      return join(componentPath, dist);\n    });\n  }\n\n  isAspect(manifest: any) {\n    return !!(manifest.addRuntime && manifest.getRuntime);\n  }\n\n  isValidAspect(manifest: any): boolean {\n    return this.isAspect(manifest) || manifest.provider;\n  }\n\n  isAspectComponent(component: Component): boolean {\n    return this.envs.isUsingAspectEnv(component);\n  }\n\n  /**\n   * get or create a global scope, import the non-core aspects, load bit from that scope, create\n   * capsules for the aspects and load them from the capsules.\n   */\n  async loadAspectsFromGlobalScope(aspectIds: string[]): Promise<Component[]> {\n    const globalScope = await LegacyScope.ensure(GLOBAL_SCOPE, 'global-scope');\n    await globalScope.ensureDir();\n    const globalScopeHarmony = await loadBit(globalScope.path);\n    const scope = globalScopeHarmony.get<ScopeMain>(ScopeAspect.id);\n    // @todo: Gilad make this work\n    // const ids = await scope.resolveMultipleComponentIds(aspectIds);\n    const ids = aspectIds.map((id) => ComponentID.fromLegacy(BitId.parse(id, true)));\n    const hasVersions = ids.every((id) => id.hasVersion());\n    const useCache = hasVersions; // if all components has versions, try to use the cached aspects\n    const components = await scope.import(ids, { useCache, throwIfNotExist: true });\n\n    // don't use `await scope.loadAspectsFromCapsules(components, true);`\n    // it won't work for globalScope because `this !== scope.aspectLoader` (this instance\n    // is not the same as the aspectLoader instance Scope has)\n    const resolvedAspects = await scope.getResolvedAspects(components);\n    try {\n      await this.loadRequireableExtensions(resolvedAspects, true);\n    } catch (err: any) {\n      if (err?.error.code === 'MODULE_NOT_FOUND') {\n        const resolvedAspectsAgain = await scope.getResolvedAspects(components, { skipIfExists: false });\n        await this.loadRequireableExtensions(resolvedAspectsAgain, true);\n      } else {\n        throw err;\n      }\n    }\n\n    return components;\n  }\n\n  private prepareManifests(manifests: Array<ExtensionManifest | Aspect>): Aspect[] {\n    return manifests.map((manifest: any) => {\n      if (this.isAspect(manifest)) return manifest as Aspect;\n      manifest.runtime = MainRuntime;\n      if (!manifest.id) throw new Error('manifest must have static id');\n      const aspect = Aspect.create({\n        id: manifest.id,\n      });\n      aspect.addRuntime(manifest);\n      return aspect;\n    });\n  }\n\n  /**\n   * register a plugin.\n   */\n  registerPlugins(pluginDefs: PluginDefinition[]) {\n    this.pluginSlot.register(pluginDefs);\n    return this;\n  }\n\n  // TODO: change to use the new logger, see more info at loadExtensions function in the workspace\n  async loadExtensionsByManifests(extensionsManifests: Array<ExtensionManifest | Aspect>, throwOnError = true) {\n    try {\n      const manifests = extensionsManifests.filter((manifest) => {\n        const isValid = this.isValidAspect(manifest);\n        if (!isValid) this.logger.warn(`${manifest.id} is invalid. please make sure the extension is valid.`);\n        return isValid;\n      });\n      const preparedManifests = this.prepareManifests(manifests);\n      // @ts-ignore TODO: fix this\n      await this.harmony.load(preparedManifests);\n    } catch (e: any) {\n      const ids = extensionsManifests.map((manifest) => manifest.id || 'unknown');\n      // TODO: improve texts\n      const warning = UNABLE_TO_LOAD_EXTENSION_FROM_LIST(ids);\n      this.logger.warn(warning, e);\n      if (this.logger.isLoaderStarted) {\n        this.logger.consoleFailure(warning);\n      } else {\n        this.logger.console(warning);\n        this.logger.console(e);\n      }\n      if (throwOnError) {\n        throw e;\n      }\n    }\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [LoggerAspect, EnvsAspect];\n  static slots = [\n    Slot.withType<OnAspectLoadError>(),\n    Slot.withType<OnLoadRequireableExtension>(),\n    Slot.withType<PluginDefinition[]>(),\n  ];\n\n  static async provider(\n    [loggerExt, envs]: [LoggerMain, EnvsMain],\n    config,\n    [onAspectLoadErrorSlot, onLoadRequireableExtensionSlot, pluginSlot]: [\n      OnAspectLoadErrorSlot,\n      OnLoadRequireableExtensionSlot,\n      PluginDefinitionSlot\n    ],\n    harmony: Harmony\n  ) {\n    const logger = loggerExt.createLogger(AspectLoaderAspect.id);\n    const aspectLoader = new AspectLoaderMain(\n      logger,\n      envs,\n      harmony,\n      onAspectLoadErrorSlot,\n      onLoadRequireableExtensionSlot,\n      pluginSlot\n    );\n\n    return aspectLoader;\n  }\n}\n\nAspectLoaderAspect.addRuntime(AspectLoaderMain);\n"]}