{"version":3,"sources":["compiler.task.ts"],"names":["CompilerTask","constructor","aspectId","name","compilerInstance","artifactName","description","preBuild","context","Promise","all","capsuleNetwork","seedersCapsules","map","capsule","copyNonSupportedFiles","execute","buildResults","build","postBuild","tasksResults","compiler","shouldCopyNonSupportedFiles","component","filesystem","files","file","isFileSupported","path","content","contents","fs","outputFile","join","distDir","relative"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AACA;AACA;AACO,MAAMA,YAAN,CAAwC;AAE7CC,EAAAA,WAAW,CAAUC,QAAV,EAAqCC,IAArC,EAA2DC,gBAA3D,EAAuF;AAAA,SAA7EF,QAA6E,GAA7EA,QAA6E;AAAA,SAAlDC,IAAkD,GAAlDA,IAAkD;AAAA,SAA5BC,gBAA4B,GAA5BA,gBAA4B;AAAA,yDAD3E,oBAC2E;;AAChG,QAAIA,gBAAgB,CAACC,YAArB,EAAmC;AACjC,WAAKC,WAAL,IAAqB,iBAAgBF,gBAAgB,CAACC,YAAa,EAAnE;AACD;AACF;;AAEa,QAARE,QAAQ,CAACC,OAAD,EAAwB;AACpC,UAAMC,OAAO,CAACC,GAAR,CACJF,OAAO,CAACG,cAAR,CAAuBC,eAAvB,CAAuCC,GAAvC,CAA4CC,OAAD,IACzC,KAAKC,qBAAL,CAA2BD,OAA3B,EAAoC,KAAKV,gBAAzC,CADF,CADI,CAAN;AAKA,QAAI,CAAC,KAAKA,gBAAL,CAAsBG,QAA3B,EAAqC;AACrC,UAAM,KAAKH,gBAAL,CAAsBG,QAAtB,CAA+BC,OAA/B,CAAN;AACD;;AAEY,QAAPQ,OAAO,CAACR,OAAD,EAAkD;AAC7D,UAAMS,YAAY,GAAG,MAAM,KAAKb,gBAAL,CAAsBc,KAAtB,CAA4BV,OAA5B,CAA3B;AACA,WAAOS,YAAP;AACD;;AAEc,QAATE,SAAS,CAAEX,OAAF,EAAyBY,YAAzB,EAAuE;AACpF,QAAI,CAAC,KAAKhB,gBAAL,CAAsBe,SAA3B,EAAsC;AACtC,UAAM,KAAKf,gBAAL,CAAsBe,SAAtB,CAAgCX,OAAhC,EAAyCY,YAAzC,CAAN;AACD;;AAE0B,QAArBL,qBAAqB,CAACD,OAAD,EAAmBO,QAAnB,EAAuC;AAChE,QAAI,CAACA,QAAQ,CAACC,2BAAd,EAA2C;AACzC;AACD;;AACD,UAAMC,SAAS,GAAGT,OAAO,CAACS,SAA1B;AACA,UAAMd,OAAO,CAACC,GAAR,CACJa,SAAS,CAACC,UAAV,CAAqBC,KAArB,CAA2BZ,GAA3B,CAA+B,MAAOa,IAAP,IAAgB;AAC7C,UAAIL,QAAQ,CAACM,eAAT,CAAyBD,IAAI,CAACE,IAA9B,CAAJ,EAAyC;AACzC,YAAMC,OAAO,GAAGH,IAAI,CAACI,QAArB;AACA,YAAMC,mBAAGC,UAAH,CAAcJ,gBAAKK,IAAL,CAAUnB,OAAO,CAACc,IAAlB,EAAwBP,QAAQ,CAACa,OAAjC,EAA0CR,IAAI,CAACS,QAA/C,CAAd,EAAwEN,OAAxE,CAAN;AACD,KAJD,CADI,CAAN;AAOD;;AAxC4C","sourcesContent":["import { BuildContext, BuiltTaskResult, BuildTask, TaskResultsList } from '@teambit/builder';\nimport { Capsule } from '@teambit/isolator';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { Compiler } from './types';\n\n/**\n * compiler build task. Allows to compile components during component build.\n */\nexport class CompilerTask implements BuildTask {\n  readonly description = 'compile components';\n  constructor(readonly aspectId: string, readonly name: string, private compilerInstance: Compiler) {\n    if (compilerInstance.artifactName) {\n      this.description += ` for artifact ${compilerInstance.artifactName}`;\n    }\n  }\n\n  async preBuild(context: BuildContext) {\n    await Promise.all(\n      context.capsuleNetwork.seedersCapsules.map((capsule) =>\n        this.copyNonSupportedFiles(capsule, this.compilerInstance)\n      )\n    );\n    if (!this.compilerInstance.preBuild) return;\n    await this.compilerInstance.preBuild(context);\n  }\n\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    const buildResults = await this.compilerInstance.build(context);\n    return buildResults;\n  }\n\n  async postBuild?(context: BuildContext, tasksResults: TaskResultsList): Promise<void> {\n    if (!this.compilerInstance.postBuild) return;\n    await this.compilerInstance.postBuild(context, tasksResults);\n  }\n\n  async copyNonSupportedFiles(capsule: Capsule, compiler: Compiler) {\n    if (!compiler.shouldCopyNonSupportedFiles) {\n      return;\n    }\n    const component = capsule.component;\n    await Promise.all(\n      component.filesystem.files.map(async (file) => {\n        if (compiler.isFileSupported(file.path)) return;\n        const content = file.contents;\n        await fs.outputFile(path.join(capsule.path, compiler.distDir, file.relative), content);\n      })\n    );\n  }\n}\n"]}