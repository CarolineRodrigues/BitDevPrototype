{"version":3,"sources":["forking.main.runtime.ts"],"names":["ForkingMain","constructor","workspace","dependencyResolver","newComponentHelper","fork","sourceIdStr","targetId","options","sourceId","resolveComponentId","exists","existingInWorkspace","get","forkExistingInWorkspace","sourceIdWithScope","_legacy","scope","ComponentID","fromLegacy","BitId","parse","forkRemoteComponent","getForkInfo","component","forkConfig","state","aspects","ForkingAspect","id","config","forkedFrom","fromObject","existing","Error","toStringWithoutVersion","targetCompId","getNewComponentId","undefined","getConfig","writeAndAddNewComp","targetName","fullName","comp","getRemoteComponent","deps","getDependencies","workspacePolicyEntries","filter","dep","source","map","dependencyId","getPackageName","lifecycleType","lifecycle","value","version","addToRootPolicy","updateExisting","persistConfig","path","install","dedupe","import","copyPeerToRuntimeOnRoot","copyPeerToRuntimeOnComponents","fromExisting","getConfigFromExistingToNewComponent","toObject","provider","cli","componentMain","graphql","forkingMain","register","ForkCmd","registerShowFragments","ForkingFragment","CLIAspect","WorkspaceAspect","DependencyResolverAspect","ComponentAspect","NewComponentHelperAspect","GraphqlAspect","MainRuntime","addRuntime"],"mappings":"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","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport ComponentAspect, { Component, ComponentID, ComponentMain } from '@teambit/component';\nimport { ComponentIdObj } from '@teambit/component-id';\nimport GraphqlAspect, { GraphqlMain } from '@teambit/graphql';\nimport NewComponentHelperAspect, { NewComponentHelperMain } from '@teambit/new-component-helper';\nimport { ForkCmd, ForkOptions } from './fork.cmd';\nimport { ForkingAspect } from './forking.aspect';\nimport { ForkingFragment } from './forking.fragment';\nimport { forkingSchema } from './forking.graphql';\n\nexport type ForkInfo = {\n  forkedFrom: ComponentID;\n};\n\nexport class ForkingMain {\n  constructor(\n    private workspace: Workspace,\n    private dependencyResolver: DependencyResolverMain,\n    private newComponentHelper: NewComponentHelperMain\n  ) {}\n\n  async fork(sourceIdStr: string, targetId?: string, options?: ForkOptions): Promise<ComponentID> {\n    const sourceId = await this.workspace.resolveComponentId(sourceIdStr);\n    const exists = this.workspace.exists(sourceId);\n    if (exists) {\n      const existingInWorkspace = await this.workspace.get(sourceId);\n      return this.forkExistingInWorkspace(existingInWorkspace, targetId, options);\n    }\n    const sourceIdWithScope = sourceId._legacy.scope\n      ? sourceId\n      : ComponentID.fromLegacy(BitId.parse(sourceIdStr, true));\n    return this.forkRemoteComponent(sourceIdWithScope, targetId, options);\n  }\n\n  getForkInfo(component: Component): ForkInfo | null {\n    const forkConfig = component.state.aspects.get(ForkingAspect.id)?.config as ForkConfig | undefined;\n    if (!forkConfig) return null;\n    return {\n      forkedFrom: ComponentID.fromObject(forkConfig.forkedFrom),\n    };\n  }\n\n  private async forkExistingInWorkspace(existing: Component, targetId?: string, options?: ForkOptions) {\n    if (!targetId) {\n      throw new Error(`error: unable to create \"${existing.id.toStringWithoutVersion()}\" component, a component with the same name already exists.\nplease specify the target-id arg`);\n    }\n    const targetCompId = this.newComponentHelper.getNewComponentId(targetId, undefined, options?.scope);\n\n    const config = await this.getConfig(existing);\n    await this.newComponentHelper.writeAndAddNewComp(existing, targetCompId, options, config);\n\n    return targetCompId;\n  }\n  private async forkRemoteComponent(sourceId: ComponentID, targetId?: string, options?: ForkOptions) {\n    const targetName = targetId || sourceId.fullName;\n    const targetCompId = this.newComponentHelper.getNewComponentId(targetName, undefined, options?.scope);\n    const comp = await this.workspace.scope.getRemoteComponent(sourceId);\n\n    const deps = await this.dependencyResolver.getDependencies(comp);\n    // only bring auto-resolved dependencies, others should be set in the workspace.jsonc template\n    const workspacePolicyEntries = deps\n      .filter((dep) => dep.source === 'auto')\n      .map((dep) => ({\n        dependencyId: dep.getPackageName?.() || dep.id,\n        lifecycleType: dep.lifecycle === 'dev' ? 'runtime' : dep.lifecycle,\n        value: {\n          version: dep.version,\n        },\n      }));\n    this.dependencyResolver.addToRootPolicy(workspacePolicyEntries, { updateExisting: true });\n    const config = await this.getConfig(comp);\n    await this.newComponentHelper.writeAndAddNewComp(comp, targetCompId, options, config);\n    await this.dependencyResolver.persistConfig(this.workspace.path);\n    await this.workspace.install(undefined, {\n      dedupe: true,\n      import: false,\n      copyPeerToRuntimeOnRoot: true,\n      copyPeerToRuntimeOnComponents: false,\n      updateExisting: false,\n    });\n\n    return targetCompId;\n  }\n\n  private async getConfig(comp: Component) {\n    const fromExisting = await this.newComponentHelper.getConfigFromExistingToNewComponent(comp);\n    return {\n      ...fromExisting,\n      [ForkingAspect.id]: {\n        forkedFrom: comp.id.toObject(),\n      },\n    };\n  }\n\n  static slots = [];\n  static dependencies = [\n    CLIAspect,\n    WorkspaceAspect,\n    DependencyResolverAspect,\n    ComponentAspect,\n    NewComponentHelperAspect,\n    GraphqlAspect,\n  ];\n  static runtime = MainRuntime;\n  static async provider([cli, workspace, dependencyResolver, componentMain, newComponentHelper, graphql]: [\n    CLIMain,\n    Workspace,\n    DependencyResolverMain,\n    ComponentMain,\n    NewComponentHelperMain,\n    GraphqlMain\n  ]) {\n    const forkingMain = new ForkingMain(workspace, dependencyResolver, newComponentHelper);\n    cli.register(new ForkCmd(forkingMain));\n    graphql.register(forkingSchema(forkingMain));\n    componentMain.registerShowFragments([new ForkingFragment(forkingMain)]);\n    return forkingMain;\n  }\n}\n\nForkingAspect.addRuntime(ForkingMain);\n\nexport type ForkConfig = {\n  forkedFrom: ComponentIdObj;\n};\n"]}