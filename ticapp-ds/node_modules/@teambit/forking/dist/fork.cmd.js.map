{"version":3,"sources":["fork.cmd.ts"],"names":["ForkCmd","constructor","forking","report","sourceId","targetId","options","results","fork","targetIdStr","toString","chalk","green","bold"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AASO,MAAMA,OAAN,CAAiC;AAgBtCC,EAAAA,WAAW,CAASC,OAAT,EAA+B;AAAA,SAAtBA,OAAsB,GAAtBA,OAAsB;AAAA,kDAfnC,gCAemC;AAAA,yDAd5B,6DAc4B;AAAA,iEAbnB;AACzB,kDAY4C;AAAA,mDAXlC,aAWkC;AAAA,2DAV1B,IAU0B;AAAA,mDATlC,EASkC;AAAA,qDARhC,CACR,CAAC,GAAD,EAAM,gBAAN,EAAwB,+CAAxB,CADQ,EAER,CAAC,GAAD,EAAM,eAAN,EAAuB,qFAAvB,CAFQ,CAQgC;AAAA,oDAJjC,IAIiC;AAAA,uDAH9B,IAG8B;AAAA,sDAF/B,IAE+B;AAAE;;AAEhC,QAANC,MAAM,CAAC,CAACC,QAAD,EAAWC,QAAX,CAAD,EAAyCC,OAAzC,EAAgF;AAC1F,UAAMC,OAAO,GAAG,MAAM,KAAKL,OAAL,CAAaM,IAAb,CAAkBJ,QAAlB,EAA4BC,QAA5B,EAAsCC,OAAtC,CAAtB;AACA,UAAMG,WAAW,GAAGF,OAAO,CAACG,QAAR,EAApB;AACA,WAAOC,iBAAMC,KAAN,CAAa,uBAAsBD,iBAAME,IAAN,CAAWJ,WAAX,CAAwB,SAAQE,iBAAME,IAAN,CAAWT,QAAX,CAAqB,EAAxF,CAAP;AACD;;AAtBqC","sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ForkingMain } from '.';\n\nexport type ForkOptions = {\n  scope?: string;\n  path?: string;\n};\n\nexport class ForkCmd implements Command {\n  name = 'fork <source-id> [target-name]';\n  description = 'EXPERIMENTAL. create a new component out of an existing one';\n  extendedDescription = `note that [target-name] is the name only without the scope.\nto set the default-scope, please use --scope flag`;\n  group = 'collaborate';\n  skipWorkspace = true;\n  alias = '';\n  options = [\n    ['s', 'scope <string>', 'default scope for the newly created component'],\n    ['p', 'path <string>', 'relative path in the workspace. by default the path is `<scope>/<namespace>/<name>`'],\n  ] as CommandOptions;\n  loader = true;\n  migration = true;\n  remoteOp = true;\n\n  constructor(private forking: ForkingMain) {}\n\n  async report([sourceId, targetId]: [string, string], options: ForkOptions): Promise<string> {\n    const results = await this.forking.fork(sourceId, targetId, options);\n    const targetIdStr = results.toString();\n    return chalk.green(`successfully forked ${chalk.bold(targetIdStr)} from ${chalk.bold(sourceId)}`);\n  }\n}\n"]}