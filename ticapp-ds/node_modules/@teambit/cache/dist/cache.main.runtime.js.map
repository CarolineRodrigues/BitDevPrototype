{"version":3,"sources":["cache.main.runtime.ts"],"names":["CacheMain","constructor","config","logger","set","key","data","ttl","debug","expire","Date","getTime","cacache","put","globalCacheFolder","JSON","stringify","then","catch","get","cacheObject","parse","toString","rm","undefined","cacheDirectory","provider","loggerFactory","createLogger","CacheAspect","id","MainRuntime","LoggerAspect","CACHE_ROOT","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMO,MAAMA,SAAN,CAAgB;AAGrBC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,MAJA;AAMT;AACJ;AACA;AACqBC,EAAAA,MATR,EAUT;AAAA,SANSD,MAMT,GANSA,MAMT;AAAA,SADiBC,MACjB,GADiBA,MACjB;AAAE;;AAQK,QAAHC,GAAG,CAACC,GAAD,EAAcC,IAAd,EAAyBC,GAAzB,EAAyD;AAChE,SAAKJ,MAAL,CAAYK,KAAZ,CAAmB,gBAAeH,GAAI,cAAaC,IAAK,EAAxD;AACA,UAAMG,MAAM,GAAGF,GAAG,GAAG,IAAIG,IAAJ,GAAWC,OAAX,KAAuBJ,GAA1B,GAAgC,IAAlD;AACA,WAAOK,mBACJC,GADI,CACA,KAAKC,iBADL,EACwBT,GADxB,EAC6BU,IAAI,CAACC,SAAL,CAAe;AAAEV,MAAAA,IAAF;AAAQG,MAAAA;AAAR,KAAf,CAD7B,EAEJQ,IAFI,CAEC,MAAM,IAFP,EAGJC,KAHI,CAGE,MAAM,KAHR,CAAP;AAID;;AAEQ,QAAHC,GAAG,CAAId,GAAJ,EAAyC;AAChD,SAAKF,MAAL,CAAYK,KAAZ,CAAmB,iBAAgBH,GAAI,EAAvC;AACA,WAAOO,mBACJO,GADI,CACA,KAAKL,iBADL,EACwBT,GADxB,EAEJY,IAFI,CAEC,MAAOG,WAAP,IAAuB;AAC3B,YAAM;AAAEd,QAAAA,IAAF;AAAQG,QAAAA;AAAR,UAAmBM,IAAI,CAACM,KAAL,CAAWD,WAAW,CAACd,IAAZ,CAAiBgB,QAAjB,EAAX,CAAzB;;AACA,UAAIb,MAAM,IAAI,IAAIC,IAAJ,GAAWC,OAAX,KAAuBF,MAArC,EAA6C;AAC3C,eAAOG,mBAAQW,EAAR,CAAW,KAAKT,iBAAhB,EAAmCT,GAAnC,CAAP;AACD;;AACD,aAAOC,IAAP;AACD,KARI,EASJY,KATI,CASE,MAAMM,SATR,CAAP;AAUD;;AAE4B,MAAjBV,iBAAiB,GAAG;AAC9B,WAAO,KAAKZ,MAAL,CAAYuB,cAAnB;AACD;;AAEoB,eAARC,QAAQ,CAAC,CAACC,aAAD,CAAD,EAAgCzB,MAAhC,EAAqD;AACxE,UAAMC,MAAM,GAAGwB,aAAa,CAACC,YAAd,CAA2BC,qBAAYC,EAAvC,CAAf;AACA,WAAO,IAAI9B,SAAJ,CAAcE,MAAd,EAAsBC,MAAtB,CAAP;AACD;;AAnDoB;;;gCAAVH,S,aACM+B,kB;gCADN/B,S,kBAeW,CAACgC,sBAAD,C;gCAfXhC,S,mBAiBY;AACrByB,EAAAA,cAAc,EAAEQ;AADK,C;;AAqCzBJ,qBAAYK,UAAZ,CAAuBlC,SAAvB","sourcesContent":["import { MainRuntime } from '@teambit/cli';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { CACHE_ROOT } from '@teambit/legacy/dist/constants';\nimport cacache from 'cacache';\n\nimport { CacheAspect } from './cache.aspect';\n\nexport type CacheConfig = {\n  cacheDirectory: string;\n};\n\nexport class CacheMain {\n  static runtime = MainRuntime;\n\n  constructor(\n    /**\n     * extension config\n     */\n    readonly config: CacheConfig,\n\n    /**\n     * logger extension.\n     */\n    private readonly logger: Logger\n  ) {}\n\n  static dependencies = [LoggerAspect];\n\n  static defaultConfig = {\n    cacheDirectory: CACHE_ROOT,\n  };\n\n  async set(key: string, data: any, ttl?: number): Promise<boolean> {\n    this.logger.debug(`put cache to ${key} with data ${data}`);\n    const expire = ttl ? new Date().getTime() + ttl : null;\n    return cacache\n      .put(this.globalCacheFolder, key, JSON.stringify({ data, expire }))\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  async get<T>(key: string): Promise<T | undefined> {\n    this.logger.debug(`get cache for ${key}`);\n    return cacache\n      .get(this.globalCacheFolder, key)\n      .then(async (cacheObject) => {\n        const { data, expire } = JSON.parse(cacheObject.data.toString());\n        if (expire && new Date().getTime() > expire) {\n          return cacache.rm(this.globalCacheFolder, key);\n        }\n        return data;\n      })\n      .catch(() => undefined);\n  }\n\n  private get globalCacheFolder() {\n    return this.config.cacheDirectory;\n  }\n\n  static async provider([loggerFactory]: [LoggerMain], config: CacheConfig) {\n    const logger = loggerFactory.createLogger(CacheAspect.id);\n    return new CacheMain(config, logger);\n  }\n}\n\nCacheAspect.addRuntime(CacheMain);\n"]}