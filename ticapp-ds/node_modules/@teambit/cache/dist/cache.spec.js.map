{"version":3,"sources":["cache.spec.ts"],"names":["describe","cacheDirectory","cache","CacheMain","Logger","it","set","data","get","to","equal","afterAll","recursive"],"mappings":";;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIAA,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7B,QAAMC,cAAc,GAAI,YAAW,sBAAK,EAAxC;AACA,QAAMC,KAAK,GAAG,KAAIC,sBAAJ,EAAc;AAAEF,IAAAA;AAAF,GAAd,EAAkC,KAAIG,gBAAJ,EAAW,oBAAX,CAAlC,CAAd;AACAC,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAY;AAC7C,UAAMH,KAAK,CAACI,GAAN,CAAU,MAAV,EAAkB,KAAlB,EAAyB,IAAzB,CAAN;AACA,UAAMC,IAAI,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,MAAV,CAAnB;AACA,wBAAOD,IAAP,EAAaE,EAAb,CAAgBC,KAAhB,CAAsB,KAAtB;AACD,GAJC,CAAF;AAMAL,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAY;AACvC,UAAMH,KAAK,CAACI,GAAN,CAAU,MAAV,EAAkB,KAAlB,EAAyB,CAAzB,CAAN;AACA,UAAMC,IAAI,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,MAAV,CAAnB;AACA,wBAAOD,IAAP,EAAaE,EAAb,CAAgBC,KAAhB,CAAsB,IAAtB;AACD,GAJC,CAAF;AAMAL,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAY;AACvD,UAAMH,KAAK,CAACI,GAAN,CAAU,MAAV,EAAkB,KAAlB,CAAN;AACA,UAAMC,IAAI,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,MAAV,CAAnB;AACA,wBAAOD,IAAP,EAAaE,EAAb,CAAgBC,KAAhB,CAAsB,KAAtB;AACD,GAJC,CAAF;AAMAC,EAAAA,QAAQ,CAAC,MAAM;AACb,yBAAUV,cAAV,EAA0B;AAAEW,MAAAA,SAAS,EAAE;AAAb,KAA1B;AACD,GAFO,CAAR;AAGD,CAxBO,CAAR","sourcesContent":["import v4 from 'uuid';\nimport { rmdirSync } from 'fs';\nimport { expect } from 'chai';\nimport { Logger } from '@teambit/logger';\nimport { CacheMain } from './cache.main.runtime';\n \n\n\ndescribe('Cache Aspect', () => {\n  const cacheDirectory = `/tmp/bit/${v4()}`;\n  const cache = new CacheMain({ cacheDirectory }, new Logger('cache.main.runtime'));\n  it('it should set cache with ttl', async () => {\n    await cache.set('_foo', 'bar', 1000);\n    const data = await cache.get('_foo');\n    expect(data).to.equal('bar');\n  });\n\n  it('it should expire cache', async () => {\n    await cache.set('_foo', 'bar', 1);\n    const data = await cache.get('_foo');\n    expect(data).to.equal(null);\n  });\n\n  it('it should set cache without expire ttl', async () => {\n    await cache.set('_foo', 'bar');\n    const data = await cache.get('_foo');\n    expect(data).to.equal('bar');\n  });\n\n  afterAll(() => {\n    rmdirSync(cacheDirectory, { recursive: true });\n  });\n});\n"]}