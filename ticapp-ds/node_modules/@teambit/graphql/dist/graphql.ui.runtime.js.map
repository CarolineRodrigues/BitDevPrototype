{"version":3,"sources":["graphql.ui.runtime.tsx"],"names":["GraphqlUI","client","children","GraphqlRenderPlugins","createClient","uri","state","subscriptionUri","ApolloClient","link","createLink","cache","createCache","createSsrClient","serverUrl","headers","ApolloLink","from","logError","credentials","fetch","crossFetch","ssrMode","InMemoryCache","restore","httpLink","HttpLink","subsLink","WebSocketLink","options","reconnect","undefined","hybridLink","errorLogger","provider","graphqlUI","UIRuntime","GraphqlAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAeO,MAAMA,SAAN,CAAgB;AAAA;AAAA,yDAwDP,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAA+E;AAC3F,0BAAO,+BAAC,kCAAD;AAAiB,QAAA,MAAM,EAAED;AAAzB,SAAkCC,QAAlC,CAAP;AACD,KA1DoB;AAAA,2DA4DI,KAAIC,uCAAJ,EAAyB,IAAzB,CA5DJ;AAAA;;AACrBC,EAAAA,YAAY,CAACC,GAAD,EAAc;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA4C,EAA1D,EAA8D;AACxE,UAAMN,MAAM,GAAG,KAAIO,sBAAJ,EAAiB;AAC9BC,MAAAA,IAAI,EAAE,KAAKC,UAAL,CAAgBL,GAAhB,EAAqB;AAAEE,QAAAA;AAAF,OAArB,CADwB;AAE9BI,MAAAA,KAAK,EAAE,KAAKC,WAAL,CAAiB;AAAEN,QAAAA;AAAF,OAAjB;AAFuB,KAAjB,CAAf;AAKA,WAAOL,MAAP;AACD;;AAEDY,EAAAA,eAAe,CAAC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAD,EAA8D;AAC3E,UAAMN,IAAI,GAAGO,qBAAWC,IAAX,CAAgB,CAC3B,sBAAQC,mBAAR,CAD2B,EAE3B,8BAAe;AACbC,MAAAA,WAAW,EAAE,SADA;AAEbd,MAAAA,GAAG,EAAES,SAFQ;AAGbC,MAAAA,OAHa;AAIbK,MAAAA,KAAK,EAAEC;AAJM,KAAf,CAF2B,CAAhB,CAAb;;AAUA,UAAMpB,MAAM,GAAG,KAAIO,sBAAJ,EAAiB;AAC9Bc,MAAAA,OAAO,EAAE,IADqB;AAE9Bb,MAAAA,IAF8B;AAG9BE,MAAAA,KAAK,EAAE,KAAKC,WAAL;AAHuB,KAAjB,CAAf;AAMA,WAAOX,MAAP;AACD;;AAEOW,EAAAA,WAAW,CAAC;AAAEN,IAAAA;AAAF,MAA+C,EAAhD,EAAoD;AACrE,UAAMK,KAAK,GAAG,KAAIY,uBAAJ,GAAd;AAEA,QAAIjB,KAAJ,EAAWK,KAAK,CAACa,OAAN,CAAclB,KAAd;AAEX,WAAOK,KAAP;AACD;;AAEOD,EAAAA,UAAU,CAACL,GAAD,EAAc;AAAEE,IAAAA;AAAF,MAAoD,EAAlE,EAAsE;AACtF,UAAMkB,QAAQ,GAAG,KAAIC,kBAAJ,EAAa;AAAEP,MAAAA,WAAW,EAAE,SAAf;AAA0Bd,MAAAA;AAA1B,KAAb,CAAjB;AACA,UAAMsB,QAAQ,GAAGpB,eAAe,GAC5B,KAAIqB,mBAAJ,EAAkB;AAChBvB,MAAAA,GAAG,EAAEE,eADW;AAEhBsB,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb;AAFO,KAAlB,CAD4B,GAK5BC,SALJ;AAOA,UAAMC,UAAU,GAAGL,QAAQ,GAAG,mCAAgBF,QAAhB,EAA0BE,QAA1B,CAAH,GAAyCF,QAApE;AACA,UAAMQ,WAAW,GAAG,sBAAQf,mBAAR,CAApB;AAEA,WAAOF,qBAAWC,IAAX,CAAgB,CAACgB,WAAD,EAAcD,UAAd,CAAhB,CAAP;AACD;AAED;AACF;AACA;;;AAWuB,eAARE,QAAQ,GAAG;AACtB,UAAMC,SAAS,GAAG,IAAInC,SAAJ,EAAlB;AAEA,WAAOmC,SAAP;AACD;;AAtEoB;;;gCAAVnC,S,aA8DMoC,e;gCA9DNpC,S,kBA+DW,E;gCA/DXA,S,WAgEI,E;;AASjBqC,yBAAcC,UAAd,CAAyBtC,SAAzB","sourcesContent":["import React, { ReactNode } from 'react';\nimport { UIRuntime } from '@teambit/ui';\n\nimport { InMemoryCache, ApolloClient, ApolloLink, HttpLink, createHttpLink } from '@apollo/client';\nimport type { NormalizedCacheObject } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { onError } from '@apollo/client/link/error';\n\nimport crossFetch from 'cross-fetch';\n\nimport { createSplitLink } from './create-link';\nimport { GraphQLProvider } from './graphql-provider';\nimport { GraphqlAspect } from './graphql.aspect';\nimport { GraphqlRenderPlugins } from './render-lifecycle';\nimport { logError } from './logging';\n\n/**\n * Type of gql client.\n * Used to abstract Apollo client, so consumers could import the type from graphql.ui, and not have to depend on @apollo/client directly\n * */\nexport type GraphQLClient<T> = ApolloClient<T>;\n\ntype ClientOptions = {\n  /** Preset in-memory cache with state (e.g. continue state from SSR) */\n  state?: NormalizedCacheObject;\n  /** endpoint for websocket connections */\n  subscriptionUri?: string;\n};\n\nexport class GraphqlUI {\n  createClient(uri: string, { state, subscriptionUri }: ClientOptions = {}) {\n    const client = new ApolloClient({\n      link: this.createLink(uri, { subscriptionUri }),\n      cache: this.createCache({ state }),\n    });\n\n    return client;\n  }\n\n  createSsrClient({ serverUrl, headers }: { serverUrl: string; headers: any }) {\n    const link = ApolloLink.from([\n      onError(logError),\n      createHttpLink({\n        credentials: 'include',\n        uri: serverUrl,\n        headers,\n        fetch: crossFetch,\n      }),\n    ]);\n\n    const client = new ApolloClient({\n      ssrMode: true,\n      link,\n      cache: this.createCache(),\n    });\n\n    return client;\n  }\n\n  private createCache({ state }: { state?: NormalizedCacheObject } = {}) {\n    const cache = new InMemoryCache();\n\n    if (state) cache.restore(state);\n\n    return cache;\n  }\n\n  private createLink(uri: string, { subscriptionUri }: { subscriptionUri?: string } = {}) {\n    const httpLink = new HttpLink({ credentials: 'include', uri });\n    const subsLink = subscriptionUri\n      ? new WebSocketLink({\n          uri: subscriptionUri,\n          options: { reconnect: true },\n        })\n      : undefined;\n\n    const hybridLink = subsLink ? createSplitLink(httpLink, subsLink) : httpLink;\n    const errorLogger = onError(logError);\n\n    return ApolloLink.from([errorLogger, hybridLink]);\n  }\n\n  /**\n   * get the graphQL provider\n   */\n  getProvider = ({ client, children }: { client: GraphQLClient<any>; children: ReactNode }) => {\n    return <GraphQLProvider client={client}>{children}</GraphQLProvider>;\n  };\n\n  readonly renderPlugins = new GraphqlRenderPlugins(this);\n\n  static runtime = UIRuntime;\n  static dependencies = [];\n  static slots = [];\n\n  static async provider() {\n    const graphqlUI = new GraphqlUI();\n\n    return graphqlUI;\n  }\n}\n\nGraphqlAspect.addRuntime(GraphqlUI);\n"]}