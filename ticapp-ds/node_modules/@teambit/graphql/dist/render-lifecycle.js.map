{"version":3,"sources":["render-lifecycle.tsx"],"names":["ALLOWED_HEADERS","GraphqlRenderPlugins","constructor","graphqlUI","browser","server","undefined","port","serverUrl","client","createSsrClient","headers","connection","ctx","app","json","JSON","stringify","extract","raw","state","parse","e","console","error","location","window","isInsecure","protocol","wsUrl","host","createClient","subscriptionUri","_client","renderCtx","children","TypeError","isBrowser","BrowserGqlProvider","ServerGqlProvider","getClient","browserInit"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport type { ApolloClient, NormalizedCacheObject } from '@apollo/client';\nimport pick from 'lodash.pick';\n\nimport { isBrowser } from '@teambit/ui-foundation.ui.is-browser';\nimport type { BrowserData, RenderPlugins } from '@teambit/ui';\n\nimport type { GraphqlUI, GraphQLClient } from './graphql.ui.runtime';\nimport { GraphQLProvider } from './graphql-provider';\n\ntype RenderContext = {\n  client: GraphQLClient<any>;\n};\n\nconst ALLOWED_HEADERS = ['cookie'];\n\nexport class GraphqlRenderPlugins implements RenderPlugins<RenderContext, { state?: NormalizedCacheObject }> {\n  constructor(private graphqlUI: GraphqlUI) {}\n\n  serverInit = ({ browser, server }: { browser?: BrowserData; server?: { port: number } } = {}) => {\n    if (!browser) return undefined;\n\n    const port = server?.port || 3000;\n    const serverUrl = `http://localhost:${port}/graphql`;\n\n    const client = this.graphqlUI.createSsrClient({\n      serverUrl,\n      headers: pick(browser.connection.headers, ALLOWED_HEADERS),\n    });\n\n    const ctx: RenderContext = { client };\n    return ctx;\n  };\n\n  /**\n   * Eagerly and recursively execute all gql queries in the app.\n   * Data will be available in gqlClient.extract()\n   */\n  onBeforeRender = async (ctx: RenderContext, app: ReactNode) => {\n    await getDataFromTree(app);\n  };\n\n  serialize = (ctx?: RenderContext) => {\n    const client = ctx?.client;\n    if (!client) return undefined;\n\n    return {\n      json: JSON.stringify(client.extract()),\n    };\n  };\n\n  deserialize = (raw?: string) => {\n    if (!raw) return { state: undefined };\n    let state: NormalizedCacheObject | undefined;\n    try {\n      state = JSON.parse(raw);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('[GraphQL] failed deserializing state from DOM', e);\n    }\n\n    return { state };\n  };\n\n  private _client: ApolloClient<NormalizedCacheObject> | undefined = undefined;\n\n  browserInit = ({ state }: { state?: NormalizedCacheObject } = {}) => {\n    const { location } = window;\n    const isInsecure = location.protocol === 'http:';\n    const wsUrl = `${isInsecure ? 'ws:' : 'wss:'}//${location.host}/subscriptions`;\n\n    const client = this.graphqlUI.createClient('/graphql', { state, subscriptionUri: wsUrl });\n    this._client = client;\n\n    return { client };\n  };\n\n  getClient() {\n    if (!this._client) return this.browserInit().client;\n    return this._client;\n  }\n\n  private BrowserGqlProvider = ({ renderCtx, children }: { renderCtx?: RenderContext; children: ReactNode }) => {\n    if (!renderCtx?.client) throw new TypeError('GQL client is not initialized, make sure `.browserInit()` executes');\n\n    return <this.graphqlUI.getProvider client={renderCtx?.client}>{children}</this.graphqlUI.getProvider>;\n  };\n\n  reactContext = isBrowser ? this.BrowserGqlProvider : ServerGqlProvider;\n}\n\nfunction ServerGqlProvider({ renderCtx, children }: { renderCtx?: RenderContext; children: ReactNode }) {\n  if (!renderCtx?.client)\n    throw new TypeError('GQL client has not been initialized during SSR, make sure `.serverInit()` executes');\n\n  const { client } = renderCtx;\n  return <GraphQLProvider client={client}>{children}</GraphQLProvider>;\n}\n"]}