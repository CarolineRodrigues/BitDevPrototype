{"version":3,"sources":["logging.ts"],"names":["logError","graphQLErrors","networkError","operation","forEach","message","locations","path","console","error","operationName"],"mappings":";;;;;;;AAEO,SAASA,QAAT,CAAkB;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,YAAjB;AAA+BC,EAAAA;AAA/B,CAAlB,EAA6E;AAClF,MAAIF,aAAJ,EACEA,aAAa,CAACG,OAAd,CAAsB,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,GAAD,KACpB;AACAC,EAAAA,OAAO,CAACC,KAAR,CAAe,mBAAkBN,SAAS,CAACO,aAAc,QAAOL,OAAQ,GAAxE,EAA4EC,SAA5E,EAAuFC,IAAvF,CAFF,EAFgF,CAOlF;;AACA,MAAIL,YAAJ,EAAkBM,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAsC,IAAGN,SAAS,CAACO,aAAc,GAAjE,EAAqER,YAArE;AACnB,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ErrorResponse } from '@apollo/client/link/error';\n\nexport function logError({ graphQLErrors, networkError, operation }: ErrorResponse) {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      // eslint-disable-next-line no-console\n      console.error(`[gql] error on \"${operation.operationName}\" - \"${message}\"`, locations, path)\n    );\n\n  // eslint-disable-next-line no-console\n  if (networkError) console.error('[gql] network error', `\"${operation.operationName}\"`, networkError);\n}\n\n// // // a fetch monkey patch with logs. useful to debug gql\n// function loggingCrossFetch(...p: Parameters<typeof fetch>) {\n//   const [url, init] = p;\n//   const headers = init?.headers;\n//   const body = init?.body;\n\n//   console.debug('[gql]', 'fetching', url, body, { headers });\n//   const promise = crossFetch(...p);\n//   promise\n//     .then((result) => console.debug('[gql]', 'finished', result))\n//     .catch((err) => console.debug('[gql]', 'error', err));\n//   return promise;\n// }\n"]}