{"version":3,"sources":["create-remote-schemas.ts"],"names":["getRemoteSchema","uri","subscriptionsUri","http","HttpLink","fetch","httpLink","request","previousContext","headers","graphqlContext","concat","schema","link","client","SubscriptionClient","reconnect","ws","wsLink","WebSocketLink","operation","definition","query","kind","createRemoteSchemas","servers","schemasP","map","server","Promise","all"],"mappings":";;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA,eAAeA,eAAf,CAA+B;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAA/B,EAA0D;AACxD;AACA,QAAMC,IAAI,GAAG,KAAIC,0BAAJ,EAAa;AAAEH,IAAAA,GAAF;AAAOI,IAAAA,KAAK,EAALA;AAAP,GAAb,CAAb;AACA,QAAMC,QAAQ,GAAG,qCAAW,CAACC,OAAD,EAAUC,eAAV,KAA8B;AAAA;;AACxD,WAAO;AACLC,MAAAA,OAAO,EAAED,eAAF,aAAEA,eAAF,gDAAEA,eAAe,CAAEE,cAAnB,0DAAE,sBAAiCD;AADrC,KAAP;AAGD,GAJgB,EAIdE,MAJc,CAIPR,IAJO,CAAjB;;AAMA,MAAI,CAACD,gBAAL,EAAuB;AACrB,WAAO,gDAA2B;AAChCU,MAAAA,MAAM,EAAE,MAAM,sCAAiBN,QAAjB,CADkB;AAEhCO,MAAAA,IAAI,EAAEP;AAF0B,KAA3B,CAAP;AAID,GAduD,CAgBxD;;;AACA,QAAMQ,MAAM,GAAG,KAAIC,8CAAJ,EAAuBb,gBAAvB,EAAyC;AAAEc,IAAAA,SAAS,EAAE;AAAb,GAAzC,EAA8DC,aAA9D,CAAf;AACA,QAAMC,MAAM,GAAG,KAAIC,6BAAJ,EAAkBL,MAAlB,CAAf,CAlBwD,CAoBxD;AACA;;AACA,QAAMD,IAAI,GAAG,yBACVO,SAAD,IAAe;AACb,UAAMC,UAAU,GAAG,0CAAkBD,SAAS,CAACE,KAA5B,CAAnB;AACA,WAAOD,UAAU,CAACE,IAAX,KAAoB,qBAApB,IAA6CF,UAAU,CAACD,SAAX,KAAyB,cAA7E;AACD,GAJU,EAKXF,MALW,EAMXZ,QANW,CAAb;AASA,SAAO,gDAA2B;AAChCM,IAAAA,MAAM,EAAE,MAAM,sCAAiBN,QAAjB,CADkB;AAEhCO,IAAAA;AAFgC,GAA3B,CAAP;AAID;;AAEM,eAAeW,mBAAf,CAAmCC,OAAnC,EAA6D;AAClE,QAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAR,CAAY,MAAOC,MAAP,IAAkB;AAC7C,WAAO5B,eAAe,CAAC;AACrBC,MAAAA,GAAG,EAAE2B,MAAM,CAAC3B,GADS;AAErBC,MAAAA,gBAAgB,EAAE0B,MAAM,CAAC1B;AAFJ,KAAD,CAAtB;AAID,GALgB,CAAjB;AAOA,SAAO2B,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAAP;AACD","sourcesContent":["import fetch from 'node-fetch';\nimport { setContext } from 'apollo-link-context';\nimport { HttpLink } from 'apollo-link-http';\nimport { makeRemoteExecutableSchema, introspectSchema } from 'apollo-server';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { split } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport ws from 'ws';\nimport { GraphQLServer } from '../graphql-server';\n\nasync function getRemoteSchema({ uri, subscriptionsUri }) {\n  // @ts-ignore\n  const http = new HttpLink({ uri, fetch });\n  const httpLink = setContext((request, previousContext) => {\n    return {\n      headers: previousContext?.graphqlContext?.headers,\n    };\n  }).concat(http);\n\n  if (!subscriptionsUri) {\n    return makeRemoteExecutableSchema({\n      schema: await introspectSchema(httpLink),\n      link: httpLink,\n    });\n  }\n\n  // Create WebSocket link with custom client\n  const client = new SubscriptionClient(subscriptionsUri, { reconnect: true }, ws);\n  const wsLink = new WebSocketLink(client);\n\n  // Using the ability to split links, we can send data to each link\n  // depending on what kind of operation is being sent\n  const link = split(\n    (operation) => {\n      const definition = getMainDefinition(operation.query);\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n    },\n    wsLink,\n    httpLink\n  );\n\n  return makeRemoteExecutableSchema({\n    schema: await introspectSchema(httpLink),\n    link,\n  });\n}\n\nexport async function createRemoteSchemas(servers: GraphQLServer[]) {\n  const schemasP = servers.map(async (server) => {\n    return getRemoteSchema({\n      uri: server.uri,\n      subscriptionsUri: server.subscriptionsUri,\n    });\n  });\n\n  return Promise.all(schemasP);\n}\n"]}