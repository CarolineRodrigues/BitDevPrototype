"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRemoteSchemas = createRemoteSchemas;

function _nodeFetch() {
  const data = _interopRequireDefault(require("node-fetch"));

  _nodeFetch = function () {
    return data;
  };

  return data;
}

function _apolloLinkContext() {
  const data = require("apollo-link-context");

  _apolloLinkContext = function () {
    return data;
  };

  return data;
}

function _apolloLinkHttp() {
  const data = require("apollo-link-http");

  _apolloLinkHttp = function () {
    return data;
  };

  return data;
}

function _apolloServer() {
  const data = require("apollo-server");

  _apolloServer = function () {
    return data;
  };

  return data;
}

function _apolloLinkWs() {
  const data = require("apollo-link-ws");

  _apolloLinkWs = function () {
    return data;
  };

  return data;
}

function _apolloLink() {
  const data = require("apollo-link");

  _apolloLink = function () {
    return data;
  };

  return data;
}

function _apolloUtilities() {
  const data = require("apollo-utilities");

  _apolloUtilities = function () {
    return data;
  };

  return data;
}

function _subscriptionsTransportWs() {
  const data = require("subscriptions-transport-ws");

  _subscriptionsTransportWs = function () {
    return data;
  };

  return data;
}

function _ws() {
  const data = _interopRequireDefault(require("ws"));

  _ws = function () {
    return data;
  };

  return data;
}

async function getRemoteSchema({
  uri,
  subscriptionsUri
}) {
  // @ts-ignore
  const http = new (_apolloLinkHttp().HttpLink)({
    uri,
    fetch: _nodeFetch().default
  });
  const httpLink = (0, _apolloLinkContext().setContext)((request, previousContext) => {
    var _previousContext$grap;

    return {
      headers: previousContext === null || previousContext === void 0 ? void 0 : (_previousContext$grap = previousContext.graphqlContext) === null || _previousContext$grap === void 0 ? void 0 : _previousContext$grap.headers
    };
  }).concat(http);

  if (!subscriptionsUri) {
    return (0, _apolloServer().makeRemoteExecutableSchema)({
      schema: await (0, _apolloServer().introspectSchema)(httpLink),
      link: httpLink
    });
  } // Create WebSocket link with custom client


  const client = new (_subscriptionsTransportWs().SubscriptionClient)(subscriptionsUri, {
    reconnect: true
  }, _ws().default);
  const wsLink = new (_apolloLinkWs().WebSocketLink)(client); // Using the ability to split links, we can send data to each link
  // depending on what kind of operation is being sent

  const link = (0, _apolloLink().split)(operation => {
    const definition = (0, _apolloUtilities().getMainDefinition)(operation.query);
    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';
  }, wsLink, httpLink);
  return (0, _apolloServer().makeRemoteExecutableSchema)({
    schema: await (0, _apolloServer().introspectSchema)(httpLink),
    link
  });
}

async function createRemoteSchemas(servers) {
  const schemasP = servers.map(async server => {
    return getRemoteSchema({
      uri: server.uri,
      subscriptionsUri: server.subscriptionsUri
    });
  });
  return Promise.all(schemasP);
}

//# sourceMappingURL=create-remote-schemas.js.map