{"version":3,"sources":["merge-cmd.ts"],"names":["MergeCmd","constructor","merging","report","values","ours","theirs","manual","abort","resolve","build","noSnap","message","BUILD_ON_CI","Boolean","mergeStrategy","BitError","components","failedComponents","version","resolvedComponents","abortedComponents","mergeSnapResults","merge","title","componentsStr","map","c","id","toStringWithoutVersion","join","chalk","underline","green","mergeReport","getSuccessOutput","length","bold","getSnapsOutput","snappedComponents","autoSnappedResults","outputComponents","comps","component","componentOutput","toString","autoTag","filter","result","triggeredBy","searchWithoutScopeAndVersion","autoTagComp","a","AUTO_SNAPPED_MSG","getFailureOutput","body","failedComponent","red","failureMessage"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { WILDCARD_HELP, AUTO_SNAPPED_MSG } from '@teambit/legacy/dist/constants';\nimport {\n  ApplyVersionResults,\n  getMergeStrategy,\n  applyVersionReport,\n} from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport { isFeatureEnabled, BUILD_ON_CI } from '@teambit/legacy/dist/api/consumer/lib/feature-toggle';\nimport { BitError } from '@teambit/bit-error';\nimport { MergingMain } from './merging.main.runtime';\n\nexport class MergeCmd implements Command {\n  name = 'merge [values...]';\n  shortDescription = 'merge changes of different component versions';\n  group = 'development';\n  description = `merge changes of different component versions\n  \\`bit merge <version> [ids...]\\` => merge changes of the given version into the checked out version\n  \\`bit merge [ids...]\\` => EXPERIMENTAL. merge changes of the remote head into local, optionally use '--abort' or '--resolve'\n  ${WILDCARD_HELP('merge 0.0.1')}`;\n  alias = '';\n  options = [\n    ['', 'ours', 'in case of a conflict, override the used version with the current modification'],\n    ['', 'theirs', 'in case of a conflict, override the current modification with the specified version'],\n    ['', 'manual', 'in case of a conflict, leave the files with a conflict state to resolve them manually later'],\n    ['', 'abort', 'EXPERIMENTAL. in case of an unresolved merge, revert to the state before the merge began'],\n    ['', 'resolve', 'EXPERIMENTAL. mark an unresolved merge as resolved and create a new snap with the changes'],\n    ['', 'no-snap', 'EXPERIMENTAL. do not auto snap in case the merge completed without conflicts'],\n    ['', 'build', 'in case of snap during the merge, run the build-pipeline (similar to bit snap --build)'],\n    ['m', 'message <message>', 'EXPERIMENTAL. override the default message for the auto snap'],\n  ] as CommandOptions;\n  loader = true;\n\n  constructor(private merging: MergingMain) {}\n\n  async report(\n    [values = []]: [string[]],\n    {\n      ours = false,\n      theirs = false,\n      manual = false,\n      abort = false,\n      resolve = false,\n      build = false,\n      noSnap = false,\n      message,\n    }: {\n      ours?: boolean;\n      theirs?: boolean;\n      manual?: boolean;\n      abort?: boolean;\n      resolve?: boolean;\n      build?: boolean;\n      noSnap?: boolean;\n      message: string;\n    }\n  ) {\n    build = isFeatureEnabled(BUILD_ON_CI) ? Boolean(build) : true;\n    const mergeStrategy = getMergeStrategy(ours, theirs, manual);\n    if (abort && resolve) throw new BitError('unable to use \"abort\" and \"resolve\" flags together');\n    if (noSnap && message) throw new BitError('unable to use \"noSnap\" and \"message\" flags together');\n    const {\n      components,\n      failedComponents,\n      version,\n      resolvedComponents,\n      abortedComponents,\n      mergeSnapResults,\n    }: ApplyVersionResults = await this.merging.merge(\n      values,\n      mergeStrategy as any,\n      abort,\n      resolve,\n      noSnap,\n      message,\n      build\n    );\n    if (resolvedComponents) {\n      const title = 'successfully resolved component(s)\\n';\n      const componentsStr = resolvedComponents.map((c) => c.id.toStringWithoutVersion()).join('\\n');\n      return chalk.underline(title) + chalk.green(componentsStr);\n    }\n    if (abortedComponents) {\n      const title = 'successfully aborted the merge of the following component(s)\\n';\n      const componentsStr = abortedComponents.map((c) => c.id.toStringWithoutVersion()).join('\\n');\n      return chalk.underline(title) + chalk.green(componentsStr);\n    }\n    return mergeReport({\n      components,\n      failedComponents,\n      version,\n      mergeSnapResults,\n    });\n  }\n}\n\nexport function mergeReport({ components, failedComponents, version, mergeSnapResults }: ApplyVersionResults): string {\n  const getSuccessOutput = () => {\n    if (!components || !components.length) return '';\n    // @ts-ignore version is set in case of merge command\n    const title = `successfully merged components${version ? `from version ${chalk.bold(version)}` : ''}\\n`;\n    // @ts-ignore components is set in case of merge command\n    return chalk.underline(title) + chalk.green(applyVersionReport(components));\n  };\n\n  const getSnapsOutput = () => {\n    if (!mergeSnapResults || !mergeSnapResults.snappedComponents) return '';\n    const { snappedComponents, autoSnappedResults } = mergeSnapResults;\n    const outputComponents = (comps) => {\n      return comps\n        .map((component) => {\n          let componentOutput = `     > ${component.id.toString()}`;\n          const autoTag = autoSnappedResults.filter((result) =>\n            result.triggeredBy.searchWithoutScopeAndVersion(component.id)\n          );\n          if (autoTag.length) {\n            const autoTagComp = autoTag.map((a) => a.component.id.toString());\n            componentOutput += `\\n       ${AUTO_SNAPPED_MSG}: ${autoTagComp.join(', ')}`;\n          }\n          return componentOutput;\n        })\n        .join('\\n');\n    };\n\n    return `\\n${chalk.underline(\n      'merge-snapped components'\n    )}\\n(${'components that snapped as a result of the merge'})\\n${outputComponents(snappedComponents)}\\n`;\n  };\n\n  const getFailureOutput = () => {\n    if (!failedComponents || !failedComponents.length) return '';\n    const title = 'the merge has been canceled on the following component(s)';\n    const body = failedComponents\n      .map(\n        (failedComponent) =>\n          `${chalk.bold(failedComponent.id.toString())} - ${chalk.red(failedComponent.failureMessage)}`\n      )\n      .join('\\n');\n    return `${chalk.underline(title)}\\n${body}\\n\\n`;\n  };\n\n  return getSuccessOutput() + getFailureOutput() + getSnapsOutput();\n}\n"]}