import ts, { TsConfigSourceFile } from 'typescript';
import { BuildTask } from '@teambit/builder';
import { Bundler, BundlerContext, DevServer, DevServerContext } from '@teambit/bundler';
import { CompilerMain } from '@teambit/compiler';
import { BuilderEnv, CompilerEnv, DependenciesEnv, DevEnv, LinterEnv, PackageEnv, TesterEnv, FormatterEnv, PipeServiceModifier, PipeServiceModifiersMap } from '@teambit/envs';
import { JestMain } from '@teambit/jest';
import { PkgMain } from '@teambit/pkg';
import { Tester, TesterMain } from '@teambit/tester';
import { TsConfigTransformer, TypescriptMain } from '@teambit/typescript';
import { WebpackConfigTransformer, WebpackMain } from '@teambit/webpack';
import { Workspace } from '@teambit/workspace';
import { ESLintMain, EslintConfigTransformer } from '@teambit/eslint';
import { PrettierConfigTransformer, PrettierMain } from '@teambit/prettier';
import { Linter, LinterContext } from '@teambit/linter';
import { Formatter, FormatterContext } from '@teambit/formatter';
import { SchemaExtractor } from '@teambit/schema';
import { ReactMainConfig } from './react.main.runtime';
export declare const ReactEnvType = "react";
declare type GetBuildPipeModifiers = PipeServiceModifiersMap & {
    tsModifier?: PipeServiceModifier;
};
/**
 * a component environment built for [React](https://reactjs.org) .
 */
export declare class ReactEnv implements TesterEnv, CompilerEnv, LinterEnv, DevEnv, BuilderEnv, DependenciesEnv, PackageEnv, FormatterEnv {
    /**
     * jest extension
     */
    private jestAspect;
    /**
     * typescript extension.
     */
    private tsAspect;
    /**
     * compiler extension.
     */
    private compiler;
    /**
     * webpack extension.
     */
    private webpack;
    /**
     * workspace extension.
     */
    private workspace;
    /**
     * pkg extension.
     */
    private pkg;
    /**
     * tester extension
     */
    private tester;
    private config;
    private eslint;
    private prettier;
    constructor(
    /**
     * jest extension
     */
    jestAspect: JestMain, 
    /**
     * typescript extension.
     */
    tsAspect: TypescriptMain, 
    /**
     * compiler extension.
     */
    compiler: CompilerMain, 
    /**
     * webpack extension.
     */
    webpack: WebpackMain, 
    /**
     * workspace extension.
     */
    workspace: Workspace, 
    /**
     * pkg extension.
     */
    pkg: PkgMain, 
    /**
     * tester extension
     */
    tester: TesterMain, config: ReactMainConfig, eslint: ESLintMain, prettier: PrettierMain);
    getTsConfig(targetTsConfig?: TsConfigSourceFile): TsConfigSourceFile;
    getBuildTsConfig(targetTsConfig?: TsConfigSourceFile): TsConfigSourceFile;
    /**
     * returns a component tester.
     */
    getTester(jestConfigPath: string, jestModulePath?: string): Tester;
    private getTsCompilerOptions;
    private getTsCompiler;
    getCompiler(transformers?: TsConfigTransformer[], tsModule?: typeof ts): import("@teambit/compiler").Compiler;
    /**
     * returns and configures the component linter.
     */
    getLinter(context: LinterContext, transformers?: EslintConfigTransformer[]): Linter;
    /**
     * returns and configures the component formatter.
     */
    getFormatter(context: FormatterContext, transformers?: PrettierConfigTransformer[]): Formatter;
    private getFileMap;
    private writeFileMap;
    /**
     * required for `bit start`
     */
    getDevEnvId(id?: string): string;
    /**
     * get a schema generator instance configured with the correct tsconfig.
     */
    getSchemaExtractor(tsconfig: TsConfigSourceFile): SchemaExtractor;
    /**
     * returns and configures the React component dev server.
     * required for `bit start`
     */
    getDevServer(context: DevServerContext, transformers?: WebpackConfigTransformer[]): DevServer;
    getBundler(context: BundlerContext, transformers?: WebpackConfigTransformer[]): Promise<Bundler>;
    createComponentsWebpackBundler(context: BundlerContext, transformers?: WebpackConfigTransformer[]): Promise<Bundler>;
    createTemplateWebpackBundler(context: BundlerContext, transformers?: WebpackConfigTransformer[]): Promise<Bundler>;
    private createWebpackBundler;
    /**
     * Get the peers configured by the env on the components + the host deps configured by the env
     */
    getAllHostDependencies(): string[];
    getAdditionalHostDependencies(): string[];
    /**
     * returns a path to a docs template.
     */
    getDocsTemplate(): string;
    icon: string;
    /**
     * returns a paths to a function which mounts a given component to DOM
     */
    getMounter(): string;
    getPreviewConfig(): {
        strategyName: string;
        splitComponentBundle: boolean;
    };
    /**
     * define the package json properties to add to each component.
     */
    getPackageJsonProps(): import("@teambit/pkg").PackageJsonProps;
    getNpmIgnore(): string[];
    /**
     * adds dependencies to all configured components.
     */
    getDependencies(): {
        dependencies: {
            react: string;
            'react-dom': string;
            'core-js': string;
        };
        devDependencies: {
            react: string;
            'react-dom': string;
            '@types/mocha': string;
            '@types/node': string;
            '@types/react': string;
            '@types/react-dom': string;
            '@types/jest': string;
            '@babel/runtime': string;
            '@types/testing-library__jest-dom': string;
        };
        peerDependencies: {
            react: string;
            'react-dom': string;
        };
    };
    /**
     * returns the component build pipeline.
     */
    getBuildPipe(modifiers?: GetBuildPipeModifiers): BuildTask[];
    private getCompilerTask;
    __getDescriptor(): Promise<{
        type: string;
    }>;
}
export {};
