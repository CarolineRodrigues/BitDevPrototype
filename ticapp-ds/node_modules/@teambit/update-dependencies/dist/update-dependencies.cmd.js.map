{"version":3,"sources":["update-dependencies.cmd.ts"],"names":["UpdateDependenciesCmd","constructor","updateDependenciesMain","scope","logger","report","data","updateDepsOptions","push","simulation","Error","depsUpdateItems","parseData","results","updateDependenciesVersions","componentOutput","depUpdateItem","title","chalk","bold","component","id","toString","dependencies","map","dep","join","length","d","dataParsed","JSON","parse","err","message","Array","isArray","forEach","dataItem","componentId"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ScopeMain } from '@teambit/scope';\nimport { Logger } from '@teambit/logger';\nimport {\n  UpdateDependenciesMain,\n  UpdateDepsOptions,\n  DepUpdateItemRaw,\n  DepUpdateItem,\n} from './update-dependencies.main.runtime';\n\nexport class UpdateDependenciesCmd implements Command {\n  name = 'update-dependencies <data>';\n  private = true;\n  shortDescription = 'update dependencies for components and tag/snap the results';\n  description = `update versions dependencies for components and tag/snap the results.\nthis command should be running from a new bare scope, it first imports the components it needs and then processes the update.\nthe input data is a stringified JSON of an array of the following object.\n{\n  componentId: string; // ids always have scope, so it's safe to parse them from string\n  dependencies: string[]; // e.g. [teambit/compiler@1.0.0, teambit/tester@1.0.0]\n  versionToTag?: string; // specific version (e.g. '1.0.0') or semver (e.g. 'minor', 'patch')\n}\nan example of the final data: '[{\"componentId\":\"ci.remote2/comp-b\",\"dependencies\":[\"ci.remote/comp1@0.0.2\"]}]'\n`;\n  alias = '';\n  group = 'development';\n  options = [\n    ['', 'tag', 'tag once the build is completed (by default it snaps)'],\n    ['', 'simulation', 'simulation purpose. should never be pushed (otherwise, flattened-deps are invalid)'],\n    ['', 'push', 'export the updated objects to the original scopes once tagged/snapped'],\n    ['', 'message <string>', 'message to be saved as part of the version log'],\n    ['', 'username <string>', 'username to be saved as part of the version log'],\n    ['', 'email <string>', 'email to be saved as part of the version log'],\n    ['', 'skip-new-scope-validation', 'avoid throwing an error when running on a non-new scope'],\n  ] as CommandOptions;\n\n  constructor(\n    private updateDependenciesMain: UpdateDependenciesMain,\n    private scope: ScopeMain,\n    private logger: Logger\n  ) {}\n\n  async report([data]: [string], updateDepsOptions: UpdateDepsOptions) {\n    if (updateDepsOptions.push && updateDepsOptions.simulation) {\n      throw new Error('you cannot use both --push and --simulation flags');\n    }\n    const depsUpdateItems = this.parseData(data);\n    const results = await this.updateDependenciesMain.updateDependenciesVersions(depsUpdateItems, updateDepsOptions);\n    const componentOutput = (depUpdateItem: DepUpdateItem) => {\n      const title = chalk.bold(depUpdateItem.component.id.toString());\n      const dependencies = depUpdateItem.dependencies.map((dep) => `\\t${dep.toString()}`).join('\\n');\n      return `${title}\\n${dependencies}`;\n    };\n    return `the following ${results.depsUpdateItems.length} component(s) were updated:\n${results.depsUpdateItems.map((d) => componentOutput(d)).join('\\n\\n')}`;\n  }\n\n  private parseData(data: string): DepUpdateItemRaw[] {\n    let dataParsed: unknown;\n    try {\n      dataParsed = JSON.parse(data);\n    } catch (err: any) {\n      throw new Error(`failed parsing the data entered as JSON. err ${err.message}`);\n    }\n    if (!Array.isArray(dataParsed)) {\n      throw new Error('expect data to be an array');\n    }\n    dataParsed.forEach((dataItem) => {\n      if (!dataItem.componentId) throw new Error('expect data item to have \"componentId\" prop');\n      if (!dataItem.dependencies) throw new Error('expect data item to have \"dependencies\" prop');\n    });\n    return dataParsed;\n  }\n}\n"]}