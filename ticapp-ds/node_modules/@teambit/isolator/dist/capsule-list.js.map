{"version":3,"sources":["capsule-list.ts"],"names":["CapsuleList","Array","getCapsule","id","find","capsule","component","isEqual","getCapsuleByLegacyId","_legacy","getCapsuleIgnoreVersion","ignoreVersion","getCapsuleIgnoreScopeAndVersion","isEqualWithoutScopeAndVersion","getAllCapsuleDirs","map","path","getIdByPathInCapsule","pathInCapsule","normalizedPathInCapsule","found","getAllComponents","c","fromArray","capsules"],"mappings":";;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIe,MAAMA,WAAN,SAA0BC,KAA1B,CAAyC;AACtDC,EAAAA,UAAU,CAACC,EAAD,EAAuC;AAC/C,WAAO,KAAKC,IAAL,CAAWC,OAAD,IAAaA,OAAO,CAACC,SAAR,CAAkBH,EAAlB,CAAqBI,OAArB,CAA6BJ,EAA7B,CAAvB,CAAP;AACD;;AACDK,EAAAA,oBAAoB,CAACL,EAAD,EAAiC;AACnD,WAAO,KAAKC,IAAL,CAAWC,OAAD,IAAaA,OAAO,CAACC,SAAR,CAAkBH,EAAlB,CAAqBM,OAArB,CAA6BF,OAA7B,CAAqCJ,EAArC,CAAvB,CAAP;AACD;;AACDO,EAAAA,uBAAuB,CAACP,EAAD,EAAuC;AAC5D,WAAO,KAAKC,IAAL,CAAWC,OAAD,IAAaA,OAAO,CAACC,SAAR,CAAkBH,EAAlB,CAAqBI,OAArB,CAA6BJ,EAA7B,EAAiC;AAAEQ,MAAAA,aAAa,EAAE;AAAjB,KAAjC,CAAvB,CAAP;AACD;;AACDC,EAAAA,+BAA+B,CAACT,EAAD,EAAuC;AACpE,WAAO,KAAKC,IAAL,CAAWC,OAAD,IAAaA,OAAO,CAACC,SAAR,CAAkBH,EAAlB,CAAqBM,OAArB,CAA6BI,6BAA7B,CAA2DV,EAAE,CAACM,OAA9D,CAAvB,CAAP;AACD;;AACDK,EAAAA,iBAAiB,GAAa;AAC5B,WAAO,KAAKC,GAAL,CAAUV,OAAD,IAAaA,OAAO,CAACW,IAA9B,CAAP;AACD;;AACDC,EAAAA,oBAAoB,CAACC,aAAD,EAA4C;AAC9D,UAAMC,uBAAuB,GAAG,uBAAUD,aAAV,CAAhC;AACA,UAAME,KAAK,GAAG,KAAKhB,IAAL,CAAWC,OAAD,IAAac,uBAAuB,KAAK,uBAAUd,OAAO,CAACW,IAAlB,CAAnD,CAAd;AACA,WAAOI,KAAK,GAAGA,KAAK,CAACd,SAAN,CAAgBH,EAAnB,GAAwB,IAApC;AACD;;AACDkB,EAAAA,gBAAgB,GAAgB;AAC9B,WAAO,KAAKN,GAAL,CAAUO,CAAD,IAAOA,CAAC,CAAChB,SAAlB,CAAP;AACD;;AACe,SAATiB,SAAS,CAACC,QAAD,EAAsB;AACpC,WAAO,IAAIxB,WAAJ,CAAgB,GAAGwB,QAAnB,CAAP;AACD;;AA1BqD","sourcesContent":["import type { Component, ComponentID } from '@teambit/component';\nimport { normalize } from 'path';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { Capsule } from './capsule';\n\nexport default class CapsuleList extends Array<Capsule> {\n  getCapsule(id: ComponentID): Capsule | undefined {\n    return this.find((capsule) => capsule.component.id.isEqual(id));\n  }\n  getCapsuleByLegacyId(id: BitId): Capsule | undefined {\n    return this.find((capsule) => capsule.component.id._legacy.isEqual(id));\n  }\n  getCapsuleIgnoreVersion(id: ComponentID): Capsule | undefined {\n    return this.find((capsule) => capsule.component.id.isEqual(id, { ignoreVersion: true }));\n  }\n  getCapsuleIgnoreScopeAndVersion(id: ComponentID): Capsule | undefined {\n    return this.find((capsule) => capsule.component.id._legacy.isEqualWithoutScopeAndVersion(id._legacy));\n  }\n  getAllCapsuleDirs(): string[] {\n    return this.map((capsule) => capsule.path);\n  }\n  getIdByPathInCapsule(pathInCapsule: string): ComponentID | null {\n    const normalizedPathInCapsule = normalize(pathInCapsule);\n    const found = this.find((capsule) => normalizedPathInCapsule === normalize(capsule.path));\n    return found ? found.component.id : null;\n  }\n  getAllComponents(): Component[] {\n    return this.map((c) => c.component);\n  }\n  static fromArray(capsules: Capsule[]) {\n    return new CapsuleList(...capsules);\n  }\n}\n"]}