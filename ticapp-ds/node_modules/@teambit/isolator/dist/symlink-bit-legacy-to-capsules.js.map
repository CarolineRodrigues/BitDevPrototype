{"version":3,"sources":["symlink-bit-legacy-to-capsules.ts"],"names":["symlinkBitLegacyToCapsules","capsules","logger","debug","length","linksP","map","capsule","linkBitLegacyInCapsule","Promise","all","copyBitLegacyToCapsuleRoot","root","localBitLegacyPath","path","join","__dirname","targetPath","fs","copy","bitLegacyPath","wrkDir","getLocalBitLegacyPath","pathOutsideNodeModules","dirInIsolator","normalize","includes","replace","mkdirSync","e","remove"],"mappings":";;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIO,eAAeA,0BAAf,CAA0CC,QAA1C,EAA+DC,MAA/D,EAA+E;AACpFA,EAAAA,MAAM,CAACC,KAAP,CAAc,gCAA+BF,QAAQ,CAACG,MAAO,WAA7D;AACA,QAAMC,MAAM,GAAGJ,QAAQ,CAACK,GAAT,CAAa,MAAOC,OAAP,IAAmBC,sBAAsB,CAACD,OAAD,CAAtD,CAAf;AACA,SAAOE,OAAO,CAACC,GAAR,CAAYL,MAAZ,CAAP;AACD;;AAEM,eAAeM,0BAAf,CAA0CC,IAA1C,EAAwDV,MAAxD,EAAwE;AAC7EA,EAAAA,MAAM,CAACC,KAAP,CAAc,iDAAd;;AACA,QAAMU,kBAAkB,GAAGC,gBAAKC,IAAL,CAAUC,SAAV,EAAqB,yBAArB,CAA3B;;AACA,QAAMC,UAAU,GAAGH,gBAAKC,IAAL,CAAUH,IAAV,EAAgB,gCAAhB,CAAnB;;AACA,QAAMM,mBAAGC,IAAH,CAAQN,kBAAR,EAA4BI,UAA5B,CAAN;AACD;;AAED,eAAeT,sBAAf,CAAsCD,OAAtC,EAAwD;AACtD,QAAMa,aAAa,GAAGN,gBAAKC,IAAL,CAAUR,OAAO,CAACc,MAAlB,EAA0B,gCAA1B,CAAtB;;AACA,QAAMC,qBAAqB,GAAG,MAAM;AAClC,UAAMC,sBAAsB,GAAGT,gBAAKC,IAAL,CAAUC,SAAV,EAAqB,yBAArB,CAA/B;;AACA,UAAMQ,aAAa,GAAGV,gBAAKW,SAAL,CAAe,qDAAf,CAAtB;;AACA,QAAIF,sBAAsB,CAACG,QAAvB,CAAgCF,aAAhC,CAAJ,EAAoD;AAClD,aAAOD,sBAAsB,CAACI,OAAvB,CAA+BH,aAA/B,EAA8C,EAA9C,CAAP;AACD;;AACD,WAAOD,sBAAP,CANkC,CAOlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAfD;;AAgBA,QAAMV,kBAAkB,GAAGS,qBAAqB,EAAhD,CAlBsD,CAmBtD;AACA;;AACA,MAAI;AACFf,IAAAA,OAAO,CAACW,EAAR,CAAWU,SAAX,CAAqB,cAArB;AACD,GAFD,CAEE,OAAOC,CAAP,EAAe,CACf;AACD,GAzBqD,CA2BtD;AACA;AACA;;;AACA,QAAMX,mBAAGY,MAAH,CAAUV,aAAV,CAAN;AACA,sCAAoBP,kBAApB,EAAwCO,aAAxC;AACD","sourcesContent":["import { Logger } from '@teambit/logger';\nimport createSymlinkOrCopy from '@teambit/legacy/dist/utils/fs/create-symlink-or-copy';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { Capsule } from './capsule';\n\nexport async function symlinkBitLegacyToCapsules(capsules: Capsule[], logger: Logger) {\n  logger.debug(`symlink bit bin to capsules, ${capsules.length} capsules`);\n  const linksP = capsules.map(async (capsule) => linkBitLegacyInCapsule(capsule));\n  return Promise.all(linksP);\n}\n\nexport async function copyBitLegacyToCapsuleRoot(root: string, logger: Logger) {\n  logger.debug(`symlink @teambit/legacy package to capsule root`);\n  const localBitLegacyPath = path.join(__dirname, '@teambit/legacy/dist/..');\n  const targetPath = path.join(root, './node_modules/@teambit/legacy');\n  await fs.copy(localBitLegacyPath, targetPath);\n}\n\nasync function linkBitLegacyInCapsule(capsule: Capsule) {\n  const bitLegacyPath = path.join(capsule.wrkDir, './node_modules/@teambit/legacy');\n  const getLocalBitLegacyPath = () => {\n    const pathOutsideNodeModules = path.join(__dirname, '@teambit/legacy/dist/..');\n    const dirInIsolator = path.normalize('node_modules/@teambit/isolator/dist/@teambit/legacy');\n    if (pathOutsideNodeModules.includes(dirInIsolator)) {\n      return pathOutsideNodeModules.replace(dirInIsolator, '');\n    }\n    return pathOutsideNodeModules;\n    // if (pathOutsideNodeModules.endsWith(`${path.sep}dist`)) {\n    //   return pathOutsideNodeModules;\n    // }\n    // if (__dirname.includes('build-harmony')) {\n    //   // for @teambit/legacy development, the cli extension is installed as a package in build-harmony directory\n    //   return path.join(__dirname.split('build-harmony')[0], 'dist');\n    // }\n    // throw new Error('unable to link @teambit/legacy to the capsule, the location of @teambit/legacy is unknown');\n  };\n  const localBitLegacyPath = getLocalBitLegacyPath();\n  // if there are no deps, sometimes the node_modules folder is not created\n  // and we need it in order to perform the linking\n  try {\n    capsule.fs.mkdirSync('node_modules');\n  } catch (e: any) {\n    // fail silently - we only need to create it if it doesn't already exist\n  }\n\n  // we use fs directly here rather than the capsule.fs because there are some edge cases\n  // that the capsule fs does not deal with well (eg. identifying and deleting\n  // a symlink rather than the what the symlink links to)\n  await fs.remove(bitLegacyPath);\n  createSymlinkOrCopy(localBitLegacyPath, bitLegacyPath);\n}\n"]}