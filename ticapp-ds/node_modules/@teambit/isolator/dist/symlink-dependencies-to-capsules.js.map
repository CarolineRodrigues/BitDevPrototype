{"version":3,"sources":["symlink-dependencies-to-capsules.ts"],"names":["symlinkDependenciesToCapsules","capsules","capsuleList","logger","debug","length","Promise","all","map","capsule","symlinkComponent","component","state","_consumer","symlinkOnCapsuleRoot","capsuleRoot","modulesPath","path","join","symlinks","packageName","dest","src","relative","resolve","Symlink","id","_legacy","symlink","write","componentCapsule","getCapsuleIgnoreScopeAndVersion","ComponentID","Error","toString","allDeps","getAllDependenciesIds","depId","devCapsule","toStringWithoutVersion","devCapsulePath"],"mappings":"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","sourcesContent":["import { ComponentID } from '@teambit/component';\nimport { Logger } from '@teambit/logger';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport Symlink from '@teambit/legacy/dist/links/symlink';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport path from 'path';\n\nimport { Capsule } from './capsule';\nimport CapsuleList from './capsule-list';\n\nexport async function symlinkDependenciesToCapsules(capsules: Capsule[], capsuleList: CapsuleList, logger: Logger) {\n  logger.debug(`symlinkDependenciesToCapsules, ${capsules.length} capsules`);\n  await Promise.all(\n    capsules.map((capsule) => {\n      return symlinkComponent(capsule.component.state._consumer, capsuleList, logger);\n    })\n  );\n}\n\nexport async function symlinkOnCapsuleRoot(capsuleList: CapsuleList, logger: Logger, capsuleRoot: string) {\n  const modulesPath = path.join(capsuleRoot, 'node_modules');\n  const symlinks = capsuleList.map((capsule) => {\n    const packageName = componentIdToPackageName(capsule.component.state._consumer);\n    const dest = path.join(modulesPath, packageName);\n    const src = path.relative(path.resolve(dest, '..'), capsule.path);\n\n    return new Symlink(src, dest, capsule.component.id._legacy);\n  });\n\n  await Promise.all(symlinks.map((symlink) => symlink.write()));\n}\n\nasync function symlinkComponent(component: ConsumerComponent, capsuleList: CapsuleList, logger: Logger) {\n  const componentCapsule = capsuleList.getCapsuleIgnoreScopeAndVersion(new ComponentID(component.id));\n  if (!componentCapsule) throw new Error(`unable to find the capsule for ${component.id.toString()}`);\n  const allDeps = component.getAllDependenciesIds();\n  const symlinks = allDeps.map((depId: BitId) => {\n    // TODO: this is dangerous - we might have 2 capsules for the same component with different version, then we might link to the wrong place\n    const devCapsule = capsuleList.getCapsuleIgnoreScopeAndVersion(new ComponentID(depId));\n    if (!devCapsule) {\n      // happens when a dependency is not in the workspace. (it gets installed via the package manager)\n      logger.debug(\n        `symlinkComponentToCapsule: unable to find the capsule for ${depId.toStringWithoutVersion()}. skipping`\n      );\n      return null;\n    }\n    const packageName = componentIdToPackageName(devCapsule.component.state._consumer);\n    const devCapsulePath = devCapsule.path;\n    // @todo: this is a hack, the capsule should be the one responsible to symlink, this works only for FS capsules.\n    const dest = path.join(componentCapsule.path, 'node_modules', packageName);\n    // use relative symlink in capsules to make it really isolated from the machine fs\n    const src = path.relative(path.resolve(dest, '..'), devCapsulePath);\n    return new Symlink(src, dest, component.id);\n  });\n\n  await Promise.all(symlinks.map((symlink) => symlink && symlink.write()));\n}\n"]}