{"version":3,"sources":["container.ts"],"names":["debug","require","FsContainer","constructor","wrkDir","NodeFS","getPath","composePath","pathToCompose","path","join","outputFile","file","data","options","filePath","fs","removePath","dir","pathToRemove","remove","symlink","src","dest","srcPath","destPath","ensureDir","dirname","ensureSymlink","exec","execOptions","ContainerExec","cwd","command","subprocessP","execa","shell","stdio","on","msg","emit","stderr","pipe","stdout","forEach","eventName","statusCode","setStatus","execP","hasError","Promise","resolve","reject","getContents","size","toString","terminal","process","env","SHELL","start","inspect","pause","resume","stop","ttl","destroy","log","Error","event","fn"],"mappings":"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","sourcesContent":["import { AnyFS, NodeFS } from '@teambit/any-fs';\nimport { Container, ContainerFactoryOptions, ContainerStatus, Exec, ExecOptions } from '@teambit/capsule';\nimport execa from 'execa';\nimport fs from 'fs-extra';\nimport * as path from 'path';\nimport { Stream } from 'stream';\n\nimport ContainerExec from './container-exec';\n\nconst debug = require('debug')('fs-container');\n\nexport interface BitExecOption extends ExecOptions {\n  cwd: string;\n  stdio?: 'pipe' | 'ipc' | 'ignore' | 'inherit' | Stream | number | undefined;\n}\nexport interface BitContainerConfig extends ContainerFactoryOptions {\n  other?: string;\n}\n\nexport default class FsContainer implements Container<Exec, AnyFS> {\n  id = 'FS Container';\n\n  fs: NodeFS = new NodeFS(this.wrkDir);\n\n  constructor(readonly wrkDir: string) {}\n\n  // TODO: do we need this?\n  public getPath() {\n    return this.wrkDir;\n  }\n\n  private composePath(pathToCompose) {\n    return path.join(this.getPath(), pathToCompose);\n  }\n\n  outputFile(file, data, options) {\n    const filePath = this.composePath(file);\n    debug(`writing file on ${filePath}`);\n    return fs.outputFile(filePath, data, options);\n  }\n\n  removePath(dir: string): Promise<any> {\n    const pathToRemove = this.composePath(dir);\n    return fs.remove(pathToRemove);\n  }\n\n  async symlink(src: string, dest: string): Promise<any> {\n    const srcPath = this.composePath(src);\n    const destPath = this.composePath(dest);\n    await fs.ensureDir(path.dirname(destPath));\n    return fs.ensureSymlink(srcPath, destPath);\n  }\n\n  async exec(execOptions: BitExecOption, exec = new ContainerExec()): Promise<ContainerExec> {\n    const cwd = execOptions.cwd ? this.composePath(execOptions.cwd) : this.getPath();\n    debug(`executing the following command: ${execOptions.command.join(' ')}, on cwd: ${cwd}`);\n    const subprocessP = execa.command(execOptions.command.join(' '), {\n      shell: true,\n      cwd,\n      stdio: ['ipc'],\n    });\n\n    // @TODO: FIX! This probably causes errors ad the promise is not handled properly!\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    subprocessP.on('message', function (msg: any) {\n      exec.emit('message', msg);\n    });\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    subprocessP.stderr?.pipe(exec.stderr);\n    subprocessP.stdout?.pipe(exec.stdout);\n    ['close', 'exit'].forEach(function (eventName: string) {\n      // @TODO: FIX! This probably causes errors ad the promise is not handled properly!\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      subprocessP.on(eventName, function (statusCode) {\n        exec.setStatus(statusCode);\n      });\n    });\n\n    return exec;\n  }\n\n  async execP(execOptions: BitExecOption): Promise<string> {\n    let hasError = false;\n    const exec = await this.exec(execOptions);\n    return new Promise((resolve, reject) => {\n      exec.stdout.on('error', () => {\n        hasError = true;\n      });\n      exec.on('close', () => {\n        if (hasError) reject(exec.stderr.getContents!(exec.stderr.size).toString());\n        resolve(exec.stdout.getContents!(exec.stdout.size).toString());\n      });\n    });\n  }\n\n  async terminal() {\n    const cwd = this.getPath();\n    return execa.command(process.env.SHELL || '/bin/zsh', { cwd, stdio: 'inherit' });\n  }\n\n  start(): Promise<void> {\n    return fs.ensureDir(this.wrkDir);\n  }\n  // @ts-ignore\n  async inspect(): Promise<ContainerStatus> {\n    // todo: probably not needed for this container\n  }\n  async pause(): Promise<void> {\n    // do nothing\n  }\n  async resume(): Promise<void> {\n    // do nothing\n  }\n  // eslint-disable-next-line\n  stop(ttl?: number | undefined): Promise<void> {\n    return fs.remove(this.wrkDir);\n  }\n  async destroy(): Promise<void> {\n    await this.stop();\n  }\n  log(): Promise<Exec> {\n    throw new Error('Method not implemented.');\n  }\n  on(event: string, fn: (data: any) => void): void {\n    return fn(event);\n    // throw new Error('Method not implemented.');\n  }\n}\n"]}