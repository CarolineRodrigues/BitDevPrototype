{"version":3,"sources":["capsule.ts"],"names":["Capsule","CapsuleTemplate","constructor","container","fs","console","Console","state","component","_wrkDir","wrkDir","path","start","execNode","executable","args","exec","typedExec","command","cwd","opts","ContainerExec","outputFile","file","data","options","removePath","dir","symlink","src","dest","execute","cmd","execResults","split","stdout","stderr","Promise","resolve","reject","on","error","getAllFilesPaths","files","glob","sync","join","nodir","map","getCapsuleDirName","config","name","id","toString","replacement","getCapsuleRootDir","baseDir","createFromComponent","capsuleDirName","alwaysNew","FsContainer","capsule","State"],"mappings":"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","sourcesContent":["import { NodeFS } from '@teambit/any-fs';\nimport { Capsule as CapsuleTemplate, Console, Exec, State } from '@teambit/capsule';\nimport { Component } from '@teambit/component';\nimport filenamify from 'filenamify';\nimport { realpathSync } from 'fs';\nimport glob from 'glob';\nimport path from 'path';\nimport v4 from 'uuid';\n\nimport FsContainer, { BitExecOption } from './container';\nimport ContainerExec from './container-exec';\n\nexport default class Capsule extends CapsuleTemplate<Exec, NodeFS> {\n  private _wrkDir: string;\n  constructor(\n    /**\n     * container implementation the capsule is being executed within.\n     */\n    protected container: FsContainer,\n    /**\n     * the capsule's file system.\n     */\n    readonly fs: NodeFS,\n    /**\n     * console for controlling process streams as stdout, stdin and stderr.\n     */\n    readonly console: Console = new Console(),\n    /**\n     * capsule's state.\n     */\n    readonly state: State,\n    readonly component: Component\n  ) {\n    super(container, fs, console, state);\n    this._wrkDir = container.wrkDir;\n  }\n\n  /**\n   * @deprecated please use `this.path`\n   */\n  get wrkDir(): string {\n    return this.path;\n  }\n\n  get path(): string {\n    return realpathSync(this._wrkDir);\n  }\n\n  start(): Promise<any> {\n    return this.container.start();\n  }\n\n  async execNode(executable: string, args: any, exec: ContainerExec) {\n    return this.typedExec(\n      {\n        command: ['node', executable, ...(args.args || [])],\n        cwd: '',\n      },\n      exec\n    );\n  }\n\n  async typedExec(opts: BitExecOption, exec = new ContainerExec()) {\n    return this.container.exec(opts, exec);\n  }\n\n  outputFile(file: string, data: any, options?: any): Promise<any> {\n    return this.container.outputFile(file, data, options);\n  }\n\n  removePath(dir: string): Promise<any> {\n    return this.container.removePath(dir);\n  }\n\n  symlink(src: string, dest: string): Promise<any> {\n    return this.container.symlink(src, dest);\n  }\n\n  // TODO: refactor this crap and simplify capsule API\n  async execute(cmd: string, options?: Record<string, any> | null | undefined) {\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    const execResults = await this.exec({ command: cmd.split(' '), options });\n    let stdout = '';\n    let stderr = '';\n    return new Promise((resolve, reject) => {\n      execResults.stdout.on('data', (data: string) => {\n        stdout += data;\n      });\n      execResults.stdout.on('error', (error: string) => {\n        return reject(error);\n      });\n      // @ts-ignore\n      execResults.on('close', () => {\n        return resolve({ stdout, stderr });\n      });\n      execResults.stderr.on('error', (error: string) => {\n        return reject(error);\n      });\n      execResults.stderr.on('data', (data: string) => {\n        stderr += data;\n      });\n    });\n  }\n\n  /**\n   * @todo: fix.\n   * it skips the capsule fs because for some reason `capsule.fs.promises.readdir` doesn't work\n   * the same as `capsule.fs.readdir` and it doesn't have the capsule dir as pwd.\n   *\n   * returns the paths inside the capsule\n   */\n  getAllFilesPaths(dir = '.', options: { ignore?: string[] } = {}) {\n    const files = glob.sync('**', { cwd: path.join(this.path, dir), nodir: true, ...options });\n    return files.map((file) => path.join(dir, file));\n  }\n\n  static getCapsuleDirName(component: Component, config: { alwaysNew?: boolean; name?: string } = {}) {\n    return config.name || filenamify(component.id.toString(), { replacement: '_' });\n  }\n\n  static getCapsuleRootDir(component: Component, baseDir: string, config: { alwaysNew?: boolean; name?: string } = {}) {\n    return path.join(baseDir, Capsule.getCapsuleDirName(component, config));\n  }\n\n  static async createFromComponent(\n    component: Component,\n    baseDir: string,\n    config: { alwaysNew?: boolean; name?: string } = {}\n  ): Promise<Capsule> {\n    // TODO: make this a static method and combine with ComponentCapsule\n    const capsuleDirName = Capsule.getCapsuleDirName(component, config);\n    const wrkDir = path.join(baseDir, config.alwaysNew ? `${capsuleDirName}_${v4()}` : capsuleDirName);\n    const container = new FsContainer(wrkDir);\n    const capsule = new Capsule(container, container.fs, new Console(), new State(), component);\n    await capsule.start();\n    return capsule;\n  }\n}\n"]}