{"version":3,"sources":["network.ts"],"names":["Network","constructor","_graphCapsules","seedersIds","_capsulesRootDir","seedersCapsules","capsules","map","seederId","capsule","graphCapsules","getCapsule","Error","toString","CapsuleList","fromArray","originalSeedersCapsules","getOriginalSeeders","_originalSeeders","capsulesRootDir"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,OAAN,CAAc;AAEnBC,EAAAA,WAAW,CACDC,cADC,EAEDC,UAFC,EAGDC,gBAHC,EAIT;AAAA,SAHQF,cAGR,GAHQA,cAGR;AAAA,SAFQC,UAER,GAFQA,UAER;AAAA,SADQC,gBACR,GADQA,gBACR;AAAA;AAAE;AAEJ;AACF;AACA;AACA;;;AACqB,MAAfC,eAAe,GAAgB;AACjC,UAAMC,QAAQ,GAAG,KAAKH,UAAL,CAAgBI,GAAhB,CAAqBC,QAAD,IAAc;AACjD,YAAMC,OAAO,GAAG,KAAKC,aAAL,CAAmBC,UAAnB,CAA8BH,QAA9B,CAAhB;AACA,UAAI,CAACC,OAAL,EAAc,MAAM,IAAIG,KAAJ,CAAW,kBAAiBJ,QAAQ,CAACK,QAAT,EAAoB,sBAAhD,CAAN;AACd,aAAOJ,OAAP;AACD,KAJgB,CAAjB;AAKA,WAAOK,uBAAYC,SAAZ,CAAsBT,QAAtB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAC6B,MAAvBU,uBAAuB,GAAgB;AACzC,UAAMV,QAAQ,GAAG,KAAKW,kBAAL,GAA0BV,GAA1B,CAA+BC,QAAD,IAAc;AAC3D,YAAMC,OAAO,GAAG,KAAKC,aAAL,CAAmBC,UAAnB,CAA8BH,QAA9B,CAAhB;AACA,UAAI,CAACC,OAAL,EAAc,MAAM,IAAIG,KAAJ,CAAW,kBAAiBJ,QAAQ,CAACK,QAAT,EAAoB,sBAAhD,CAAN;AACd,aAAOJ,OAAP;AACD,KAJgB,CAAjB;AAKA,WAAOK,uBAAYC,SAAZ,CAAsBT,QAAtB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACUW,EAAAA,kBAAkB,GAAkB;AAC1C,WAAO,KAAKC,gBAAL,IAAyB,KAAKf,UAArC;AACD;AAED;AACF;AACA;;;AACmB,MAAbO,aAAa,GAAgB;AAC/B,WAAO,KAAKR,cAAZ;AACD;;AAEkB,MAAfiB,eAAe,GAAwB;AACzC,WAAO,KAAKf,gBAAZ;AACD;;AAnDkB","sourcesContent":["import { ComponentID } from '@teambit/component';\nimport { PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';\nimport CapsuleList from './capsule-list';\n\n/**\n * collection of isolated components (capsules).\n * normally, \"seeders\" are the components that this network was created for.\n * \"graphCapsules\" is the graph created from the seeders and it includes also the dependencies.\n *\n * however, during \"bit build\"/\"bit tag\"/\"bit snap\", things are more complex because there is one more variable in the\n * picture, which is the \"env\". the Network is created per env.\n * in practice, for \"build-task\", a task is called per env, and the network passed to the task is relevant to that env.\n * the \"originalSeeders\" are the ones the network was created for, but only for this env.\n * the \"seeders\" are similar to the \"graphCapsules\" above, which contains also the dependencies, but only for this env.\n * the \"graphCapsules\" is the entire graph, including capsules from other envs.\n *\n * for example:\n * comp1 depends on comp2. comp1 env is \"react\". comp2 env is \"aspect\".\n *\n * when the user is running \"bit build comp1\", two `Network` instances will be created with the following:\n * Network for \"react\" env:  originalSeeders: ['comp1'], seeders: ['comp1'], graphCapsules: ['comp1', 'comp2'].\n * Network for \"aspect\" env: originalSeeders: [], seeders: ['comp2'], graphCapsules: ['comp2'].\n *\n * on the other hand, when the user is running \"bit capsule create comp1\", only one `Network` instance is created:\n * Network: originalSeeders: ['comp1'], seeders: ['comp1'], graphCapsules: ['comp1', 'comp2'].\n *\n * (as a side note, another implementation was attempt to have the \"seeders\" as the original-seeders for build,\n * however, it's failed. see https://github.com/teambit/bit/pull/5407 for more details).\n */\nexport class Network {\n  _originalSeeders: ComponentID[] | undefined;\n  constructor(\n    private _graphCapsules: CapsuleList,\n    private seedersIds: ComponentID[],\n    private _capsulesRootDir: string\n  ) {}\n\n  /**\n   * for build-tasks (during bit build/tag/snap), this includes the component graph of the current env only.\n   * otherwise, this includes the original components the network was created for.\n   */\n  get seedersCapsules(): CapsuleList {\n    const capsules = this.seedersIds.map((seederId) => {\n      const capsule = this.graphCapsules.getCapsule(seederId);\n      if (!capsule) throw new Error(`unable to find ${seederId.toString()} in the capsule list`);\n      return capsule;\n    });\n    return CapsuleList.fromArray(capsules);\n  }\n\n  /**\n   * for build-tasks (during bit build/tag/snap), this includes the original components of the current env.\n   * otherwise, this is the same as `this.seedersCapsules()`.\n   */\n  get originalSeedersCapsules(): CapsuleList {\n    const capsules = this.getOriginalSeeders().map((seederId) => {\n      const capsule = this.graphCapsules.getCapsule(seederId);\n      if (!capsule) throw new Error(`unable to find ${seederId.toString()} in the capsule list`);\n      return capsule;\n    });\n    return CapsuleList.fromArray(capsules);\n  }\n\n  /**\n   * originalSeeders are not always set (currently, only during build process), so if they're missing, just provide the\n   * seeders, which are probably the original-seeders\n   */\n  private getOriginalSeeders(): ComponentID[] {\n    return this._originalSeeders || this.seedersIds;\n  }\n\n  /**\n   * all capsules, including the dependencies of the seeders. (even when they belong to another env)\n   */\n  get graphCapsules(): CapsuleList {\n    return this._graphCapsules;\n  }\n\n  get capsulesRootDir(): PathOsBasedAbsolute {\n    return this._capsulesRootDir;\n  }\n}\n"]}