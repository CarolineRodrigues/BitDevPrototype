"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// import searchIndex from 'search-index';
const indexName = 'search_index';
const logLevel = 'error';
let index;

function getIndexPath(scopePath) {
  return path().join(scopePath, indexName);
}

function deleteDb(scopePath) {
  const indexPath = getIndexPath(scopePath);

  _logger().default.debug(`deleting index-search at ${indexPath}`);

  if (!scopePath || !indexPath) return;

  _fsExtra().default.removeSync(indexPath);
}

async function initializeIndex(scopePath) {
  if (!index) {
    // static var to make sure the index is not instantiated twice
    const indexOptions = {
      indexPath: getIndexPath(scopePath),
      logLevel,
      stopwords: []
    };
    index = new Promise((resolve, reject) => {// searchIndex(indexOptions, (err, si) => {
      //   if (err) reject(err);
      //   resolve(si);
      // });
    });
  }

  return index;
}

module.exports = {
  deleteDb,
  getIndexPath,
  initializeIndex
};