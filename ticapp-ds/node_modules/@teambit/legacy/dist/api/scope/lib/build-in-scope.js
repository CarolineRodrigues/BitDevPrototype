"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = buildInScope;

function _consumer() {
  const data = require("../../../consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("../../../consumer/exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../../../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _scope() {
  const data = require("../../../scope");

  _scope = function () {
    return data;
  };

  return data;
}

function buildInScope({
  id,
  save,
  verbose,
  scopePath,
  directory,
  keep,
  noCache = false
}) {
  _logger().default.debugAndAddBreadCrumb('buildInScope', 'id: {id}, scopePath: {scopePath}', {
    id,
    scopePath
  });

  async function loadFromScope(initialError) {
    const getScope = async () => {
      try {
        const scope = await (0, _scope().loadScope)(scopePath || process.cwd());
        return scope;
      } catch (err) {
        throw new Error(initialError || err);
      }
    };

    const scope = await getScope();
    const bitId = await scope.getParsedId(id);
    return scope.build({
      bitId,
      save,
      verbose,
      directory,
      keep,
      noCache
    });
  }

  function loadFromConsumer() {
    return (0, _consumer().loadConsumer)().then(consumer => {
      const bitId = consumer.getParsedId(id);
      return consumer.scope.build({
        bitId,
        save,
        consumer,
        verbose
      });
    });
  } // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!


  if (scopePath) return loadFromScope();
  return loadFromConsumer().catch(err => {
    if (!(err instanceof _exceptions().ConsumerNotFound)) throw err;
    return loadFromScope(err);
  });
}