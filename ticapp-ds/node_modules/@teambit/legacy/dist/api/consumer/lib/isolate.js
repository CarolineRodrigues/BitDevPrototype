"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _consumer() {
  const data = require("../../../consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _isolator() {
  const data = _interopRequireDefault(require("../../../environment/isolator"));

  _isolator = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../../../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _scope() {
  const data = require("../../../scope");

  _scope = function () {
    return data;
  };

  return data;
}

function _scopeComponentsImporter() {
  const data = _interopRequireDefault(require("../../../scope/component-ops/scope-components-importer"));

  _scopeComponentsImporter = function () {
    return data;
  };

  return data;
}

function _flagHarmonyOnly() {
  const data = _interopRequireDefault(require("./exceptions/flag-harmony-only"));

  _flagHarmonyOnly = function () {
    return data;
  };

  return data;
}

var isolate = async function isolate(componentId, scopePath, opts) {
  if (opts.useCapsule) {
    return isolateUsingCapsule(componentId, opts);
  }

  _logger().default.debugAndAddBreadCrumb('isolate', 'starting isolation process');

  if (opts.verbose) console.log('starting isolation process'); // eslint-disable-line no-console

  let scope; // If a scope path provided we will take the component from that scope

  if (scopePath) {
    scope = await (0, _scope().loadScope)(scopePath);
    const bitId = await scope.getParsedId(componentId);
    return isolateComponent(scope, bitId, opts);
  } // If a scope path was not provided we will get the consumer's scope


  const consumer = await (0, _consumer().loadConsumer)();
  scope = consumer.scope;

  if (opts.writeConfig && consumer.config.isLegacy) {
    throw new (_flagHarmonyOnly().default)('--conf');
  }

  const bitId = consumer.getParsedId(componentId);
  return isolateComponent(scope, bitId, opts);
};

exports.default = isolate;

async function isolateUsingCapsule(componentId, opts) {
  const consumer = await (0, _consumer().loadConsumer)();
  const bitId = consumer.getParsedId(componentId);
  const isolator = await _isolator().default.getInstance('fs', consumer.scope, consumer, opts.writeToPath);
  return isolator.isolate(bitId, opts);
}
/**
 * import a component end to end. Including importing the dependencies and installing the npm
 * packages.
 *
 * @param {BitId} bitId - the component id to isolate
 * @param {IsolateOptions} opts
 * @return {Promise.<string>} - the path to the isolated component
 */


async function isolateComponent(scope, bitId, opts) {
  const scopeComponentsImporter = _scopeComponentsImporter().default.getInstance(scope);

  const component = await scopeComponentsImporter.loadComponent(bitId); // @ts-ignore

  return component.isolate(scope, opts);
}