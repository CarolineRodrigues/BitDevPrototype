"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.build = build;
exports.buildAll = buildAll;

function _isEmpty2() {
  const data = _interopRequireDefault(require("ramda/src/isEmpty"));

  _isEmpty2 = function () {
    return data;
  };

  return data;
}

function _loader() {
  const data = _interopRequireDefault(require("../../../cli/loader"));

  _loader = function () {
    return data;
  };

  return data;
}

function _loaderMessages() {
  const data = require("../../../cli/loader/loader-messages");

  _loaderMessages = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

async function build(id, noCache, verbose, workspaceDir = process.cwd()) {
  const consumer = await (0, _consumer().loadConsumer)(workspaceDir);
  const bitId = consumer.getParsedId(id);
  const component = await consumer.loadComponent(bitId);
  const results = await consumer.scope.buildMultiple([component], consumer, noCache, verbose);
  await consumer.onDestroy();
  return results[0].buildResults;
}

async function buildAll(noCache, verbose) {
  const consumer = await (0, _consumer().loadConsumer)();
  const authoredAndImportedIds = consumer.bitMap.getAllIdsAvailableOnLane([_constants().COMPONENT_ORIGINS.IMPORTED, _constants().COMPONENT_ORIGINS.AUTHORED]);

  if ((0, _isEmpty2().default)(authoredAndImportedIds)) {
    return {};
  }

  _loader().default.start(_loaderMessages().BEFORE_LOADING_COMPONENTS);

  const {
    components
  } = await consumer.loadComponents(authoredAndImportedIds);

  _loader().default.stop();

  const allComponents = await consumer.scope.buildMultiple(components, consumer, noCache, verbose);
  const componentsObj = {}; // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  allComponents.forEach(component => {
    componentsObj[component.component] = component.buildResults;
  });
  await consumer.onDestroy();
  return componentsObj;
}