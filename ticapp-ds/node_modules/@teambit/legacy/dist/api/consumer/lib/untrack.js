"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = untrack;

function _consumer() {
  const data = require("../../../consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _componentsList() {
  const data = _interopRequireDefault(require("../../../consumer/component/components-list"));

  _componentsList = function () {
    return data;
  };

  return data;
}

function _hasWildcard() {
  const data = _interopRequireDefault(require("../../../utils/string/has-wildcard"));

  _hasWildcard = function () {
    return data;
  };

  return data;
}

async function untrack(componentIds, all) {
  const untrackedComponents = [];
  const missing = [];
  const unRemovableComponents = [];
  const consumer = await (0, _consumer().loadConsumer)();
  const componentsList = new (_componentsList().default)(consumer); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  const newComponents = await componentsList.listNewComponents(false);
  const idsHaveWildcard = (0, _hasWildcard().default)(componentIds);

  if (all || idsHaveWildcard) {
    const componentsToUntrack = (0, _hasWildcard().default)(componentIds) ? _componentsList().default.filterComponentsByWildcard(newComponents, componentIds) : newComponents;
    componentsToUntrack.forEach(componentId => consumer.bitMap.removeComponent(componentId));
    await consumer.onDestroy();
    return {
      untrackedComponents: componentsToUntrack,
      unRemovableComponents,
      missingComponents: missing
    };
  }

  componentIds.forEach(componentId => {
    const bitId = consumer.getParsedIdIfExist(componentId);

    if (!bitId) {
      missing.push(componentId);
      return;
    }

    if (newComponents.has(bitId)) {
      untrackedComponents.push(bitId);
      consumer.bitMap.removeComponent(bitId);
    } else {
      unRemovableComponents.push(bitId);
    }
  });
  await consumer.onDestroy();
  return {
    untrackedComponents,
    unRemovableComponents,
    missingComponents: missing
  };
}