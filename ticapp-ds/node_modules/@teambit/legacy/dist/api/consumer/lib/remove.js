"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = remove;

function _flatten2() {
  const data = _interopRequireDefault(require("ramda/src/flatten"));

  _flatten2 = function () {
    return data;
  };

  return data;
}

function _bitId() {
  const data = require("../../../bit-id");

  _bitId = function () {
    return data;
  };

  return data;
}

function _loader() {
  const data = _interopRequireDefault(require("../../../cli/loader"));

  _loader = function () {
    return data;
  };

  return data;
}

function _loaderMessages() {
  const data = require("../../../cli/loader/loader-messages");

  _loaderMessages = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _removeComponents() {
  const data = _interopRequireDefault(require("../../../consumer/component-ops/remove-components"));

  _removeComponents = function () {
    return data;
  };

  return data;
}

function _componentsList() {
  const data = _interopRequireDefault(require("../../../consumer/component/components-list"));

  _componentsList = function () {
    return data;
  };

  return data;
}

function _hasWildcard() {
  const data = _interopRequireDefault(require("../../../utils/string/has-wildcard"));

  _hasWildcard = function () {
    return data;
  };

  return data;
}

function _noIdMatchWildcard() {
  const data = _interopRequireDefault(require("./exceptions/no-id-match-wildcard"));

  _noIdMatchWildcard = function () {
    return data;
  };

  return data;
}

function _listScope() {
  const data = require("./list-scope");

  _listScope = function () {
    return data;
  };

  return data;
}

async function remove({
  ids,
  force,
  remote,
  track,
  deleteFiles
}) {
  _loader().default.start(_loaderMessages().BEFORE_REMOVE);

  const consumer = remote ? await (0, _consumer().loadConsumerIfExist)() : await (0, _consumer().loadConsumer)(); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  const bitIds = remote ? await getRemoteBitIdsToRemove(ids) : await getLocalBitIdsToRemove(consumer, ids);
  const removeResults = await (0, _removeComponents().default)({
    consumer,
    ids: _bitId().BitIds.fromArray(bitIds),
    force,
    remote,
    track,
    deleteFiles
  });
  if (consumer) await consumer.onDestroy();
  return removeResults;
}

async function getLocalBitIdsToRemove(consumer, ids) {
  if ((0, _hasWildcard().default)(ids)) {
    const allIds = consumer.bitMap.getAllIdsAvailableOnLane();

    const bitIds = _componentsList().default.filterComponentsByWildcard(allIds, ids);

    if (!bitIds.length) throw new (_noIdMatchWildcard().default)(ids);
    return bitIds;
  }

  return ids.map(id => consumer.getParsedId(id));
}

async function getRemoteBitIdsToRemove(ids) {
  if ((0, _hasWildcard().default)(ids)) {
    return getIdsFromRemoteByWildcards(ids);
  }

  return ids.map(id => _bitId().BitId.parse(id, true));
}

async function getIdsFromRemoteByWildcards(ids) {
  const remoteIds = await Promise.all( // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  ids.map(id => {
    if ((0, _hasWildcard().default)(id)) {
      return (0, _listScope().getRemoteBitIdsByWildcards)(id);
    }

    return _bitId().BitId.parse(id, true);
  }));

  _loader().default.start(_loaderMessages().BEFORE_REMOVE);

  return (0, _flatten2().default)(remoteIds);
}