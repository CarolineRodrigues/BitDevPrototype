"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.regexp.exec.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RemoteLaneId = exports.LocalLaneId = void 0;

function _tail2() {
  const data = _interopRequireDefault(require("ramda/src/tail"));

  _tail2 = function () {
    return data;
  };

  return data;
}

function _head2() {
  const data = _interopRequireDefault(require("ramda/src/head"));

  _head2 = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _generalError() {
  const data = _interopRequireDefault(require("../error/general-error"));

  _generalError = function () {
    return data;
  };

  return data;
}

class LaneId {
  constructor({
    name,
    scope
  }) {
    (0, _defineProperty2().default)(this, "name", void 0);
    (0, _defineProperty2().default)(this, "scope", void 0);
    this.name = name;
    this.scope = scope;
    Object.freeze(this);
  }

  hasSameName(id) {
    return this.name === id.name;
  }

  hasSameScope(id) {
    if (!id.scope && !this.scope) return true;
    return this.scope === id.scope;
  }

  isEqual(laneId) {
    return this.hasSameName(laneId) && this.hasSameScope(laneId);
  }

  isDefault() {
    return this.name === _constants().DEFAULT_LANE;
  }

  toString() {
    if (!this.scope) return this.name;
    return this.scope + _constants().LANE_REMOTE_DELIMITER + this.name;
  }

  static from(name, scope) {
    return new LaneId({
      scope,
      name
    });
  }

}

exports.default = LaneId;

class RemoteLaneId extends LaneId {
  constructor({
    name,
    scope
  }) {
    if (!scope) throw new TypeError('RemoteLaneId expects to get scope');
    super({
      name,
      scope
    });
  } // @ts-ignore


  set scope(scope) {
    this.scope = scope;
  }

  static from(name, scope) {
    return new RemoteLaneId({
      scope,
      name
    });
  }

  static parse(id) {
    if (!id.includes(_constants().LANE_REMOTE_DELIMITER)) {
      throw new (_generalError().default)(`invalid remote lane-id, ${id} is missing a delimiter "(${_constants().LANE_REMOTE_DELIMITER})"`);
    }

    const split = id.split(_constants().LANE_REMOTE_DELIMITER);
    return new RemoteLaneId({
      scope: (0, _head2().default)(split),
      name: (0, _tail2().default)(split).join(_constants().LANE_REMOTE_DELIMITER)
    });
  }

}

exports.RemoteLaneId = RemoteLaneId;

class LocalLaneId extends LaneId {
  constructor({
    name
  }) {
    super({
      name
    });
  }

  static from(name) {
    return new LocalLaneId({
      name
    });
  }

}

exports.LocalLaneId = LocalLaneId;