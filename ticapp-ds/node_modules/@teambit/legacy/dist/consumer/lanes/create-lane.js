"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createNewLane;

function _bitId() {
  const data = require("../../bit-id");

  _bitId = function () {
    return data;
  };

  return data;
}

function _generalError() {
  const data = _interopRequireDefault(require("../../error/general-error"));

  _generalError = function () {
    return data;
  };

  return data;
}

function _lane() {
  const data = _interopRequireDefault(require("../../scope/models/lane"));

  _lane = function () {
    return data;
  };

  return data;
}

function _workspaceLane() {
  const data = _interopRequireDefault(require("../bit-map/workspace-lane"));

  _workspaceLane = function () {
    return data;
  };

  return data;
}

async function createNewLane(consumer, laneName, laneComponents) {
  const lanes = await consumer.scope.listLanes();

  if (lanes.find(lane => lane.name === laneName)) {
    throw new (_generalError().default)(`lane "${laneName}" already exists, to switch to this lane, please use "bit switch" command`);
  }

  if (!isValidLaneName(laneName)) {
    throw new (_generalError().default)(`lane "${laneName}" has invalid characters. lane name can only contain alphanumeric, lowercase characters, and the following ["-", "_", "$", "!"]`);
  }

  const getDataToPopulateLaneObjectIfNeeded = async () => {
    if (laneComponents) return laneComponents; // when branching from one lane to another, copy components from the origin lane
    // when branching from main, no need to copy anything

    const currentLaneObject = await consumer.getCurrentLaneObject();
    return currentLaneObject ? currentLaneObject.components : [];
  };

  const getDataToPopulateWorkspaceLaneIfNeeded = () => {
    if (laneComponents) return new (_bitId().BitIds)(); // if laneComponent, this got created when importing a remote lane
    // when branching from one lane to another, copy components from the origin workspace-lane
    // when branching from main, no need to copy anything

    const currentWorkspaceLane = consumer.bitMap.workspaceLane;
    return currentWorkspaceLane ? currentWorkspaceLane.ids : new (_bitId().BitIds)();
  };

  const newLane = _lane().default.create(laneName);

  const dataToPopulate = await getDataToPopulateLaneObjectIfNeeded();
  newLane.setLaneComponents(dataToPopulate);
  await consumer.scope.lanes.saveLane(newLane);

  const workspaceConfig = _workspaceLane().default.load(laneName, consumer.scope.getPath());

  workspaceConfig.ids = getDataToPopulateWorkspaceLaneIfNeeded();
  await workspaceConfig.write();
  return newLane;
}

function isValidLaneName(val) {
  if (typeof val !== 'string') return false; // @todo: should we allow slash?

  return /^[$\-_!a-z0-9]+$/.test(val);
}