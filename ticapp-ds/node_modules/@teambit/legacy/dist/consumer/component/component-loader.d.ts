import { BitId, BitIds } from '../../bit-id';
import Component, { InvalidComponent } from '../component/consumer-component';
import Consumer from '../consumer';
import { ComponentFsCache } from './component-fs-cache';
declare type OnComponentLoadSubscriber = (component: Component) => Promise<Component>;
export default class ComponentLoader {
    private componentsCache;
    private componentsCacheForCapsule;
    _shouldCheckForClearingDependenciesCache: boolean;
    consumer: Consumer;
    cacheResolvedDependencies: Record<string, any>;
    cacheProjectAst: Record<string, any> | undefined;
    componentFsCache: ComponentFsCache;
    constructor(consumer: Consumer);
    static onComponentLoadSubscribers: OnComponentLoadSubscriber[];
    static registerOnComponentLoadSubscriber(func: OnComponentLoadSubscriber): void;
    clearComponentsCache(): void;
    clearOneComponentCache(id: BitId): void;
    invalidateDependenciesCacheIfNeeded(): Promise<void>;
    loadForCapsule(id: BitId): Promise<Component>;
    loadMany(ids: BitIds, throwOnFailure?: boolean): Promise<{
        components: Component[];
        invalidComponents: InvalidComponent[];
    }>;
    private loadOne;
    private addComponentIssues;
    private _handleOutOfSyncScenarios;
    private _throwPendingImportIfNeeded;
    private _getRemoteComponent;
    private _isAngularProject;
    static getInstance(consumer: Consumer): ComponentLoader;
}
export {};
