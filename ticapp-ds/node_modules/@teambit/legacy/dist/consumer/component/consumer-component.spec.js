"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

function _chai() {
  const data = require("chai");

  _chai = function () {
    return data;
  };

  return data;
}

function _withCompiler() {
  const data = _interopRequireDefault(require("../../../fixtures/consumer-components/with-compiler/with-compiler.json"));

  _withCompiler = function () {
    return data;
  };

  return data;
}

function _compilerExtension() {
  const data = _interopRequireDefault(require("../../legacy-extensions/compiler-extension"));

  _compilerExtension = function () {
    return data;
  };

  return data;
}

function _consumerComponent() {
  const data = _interopRequireDefault(require("./consumer-component"));

  _consumerComponent = function () {
    return data;
  };

  return data;
}

function _sources() {
  const data = require("./sources");

  _sources = function () {
    return data;
  };

  return data;
}

// @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
describe('ConsumerComponent', function () {
  this.timeout(0);
  describe('fromString()', () => {
    describe('component with compiler', () => {
      let component;
      before(async () => {
        component = await _consumerComponent().default.fromString(JSON.stringify(_withCompiler().default));
      });
      it('should not crash and return a ConsumerComponent Object', async () => {
        (0, _chai().expect)(component).to.be.instanceOf(_consumerComponent().default);
      });
      it('should convert the compiler object to a Compiler instance', () => {
        (0, _chai().expect)(component.compiler).to.be.instanceOf(_compilerExtension().default);
      });
    });
  });
  describe('docs', () => {
    const componentProps = {
      name: 'is-string',
      mainFile: 'is-string.js',
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      files: [new (_sources().SourceFile)({
        base: '.',
        path: 'is-string.js',
        contents: Buffer.from(''),
        test: false
      })]
    };
    it('should return an empty array when there is no docs', () => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      const component = new (_consumerComponent().default)(componentProps);
      (0, _chai().expect)(component.docs).to.deep.equal([]);
    });
  });
});