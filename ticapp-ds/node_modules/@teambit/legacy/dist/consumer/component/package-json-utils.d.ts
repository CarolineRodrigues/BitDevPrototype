import { BitId, BitIds } from '../../bit-id';
import { PathLinux, PathRelative } from '../../utils/path';
import BitMap from '../bit-map/bit-map';
import Component from '../component/consumer-component';
import Consumer from '../consumer';
import PackageJsonFile from './package-json-file';
import JSONFile from './sources/json-file';
/**
 * Add components as dependencies to root package.json
 */
export declare function addComponentsToRoot(consumer: Consumer, components: Component[]): Promise<void>;
export declare function addComponentsWithVersionToRoot(consumer: Consumer, components: Component[]): Promise<void>;
export declare function changeDependenciesToRelativeSyntax(consumer: Consumer, components: Component[], dependencies: Component[]): Promise<JSONFile[]>;
export declare function preparePackageJsonToWrite(bitMap: BitMap, component: Component, bitDir: string, override?: boolean, ignoreBitDependencies?: BitIds | boolean, excludeRegistryPrefix?: boolean, packageManager?: string, isIsolated?: boolean): {
    packageJson: PackageJsonFile;
    distPackageJson: PackageJsonFile | null | undefined;
};
export declare function updateAttribute(consumer: Consumer, componentDir: PathRelative, attributeName: string, attributeValue: string): Promise<void>;
/**
 * Adds workspace array to package.json - only if user wants to work with yarn workspaces
 */
export declare function addWorkspacesToPackageJson(consumer: Consumer, customImportPath: string | null | undefined): Promise<void>;
export declare function removeComponentsFromWorkspacesAndDependencies(consumer: Consumer, components: Component[], invalidComponents?: BitId[]): Promise<void>;
export declare function removeComponentsFromNodeModules(consumer: Consumer, components: Component[]): Promise<void[]>;
export declare function convertToValidPathForPackageManager(pathStr: PathLinux): string;
