"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.sort.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.exec.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SCHEMA_FIELD = exports.LANE_KEY = exports.CURRENT_BITMAP_SCHEMA = void 0;

function _prop2() {
  const data = _interopRequireDefault(require("ramda/src/prop"));

  _prop2 = function () {
    return data;
  };

  return data;
}

function _eqBy2() {
  const data = _interopRequireDefault(require("ramda/src/eqBy"));

  _eqBy2 = function () {
    return data;
  };

  return data;
}

function _unionWith2() {
  const data = _interopRequireDefault(require("ramda/src/unionWith"));

  _unionWith2 = function () {
    return data;
  };

  return data;
}

function _differenceWith2() {
  const data = _interopRequireDefault(require("ramda/src/differenceWith"));

  _differenceWith2 = function () {
    return data;
  };

  return data;
}

function _is2() {
  const data = _interopRequireDefault(require("ramda/src/is"));

  _is2 = function () {
    return data;
  };

  return data;
}

function _flatten2() {
  const data = _interopRequireDefault(require("ramda/src/flatten"));

  _flatten2 = function () {
    return data;
  };

  return data;
}

function _filter2() {
  const data = _interopRequireDefault(require("ramda/src/filter"));

  _filter2 = function () {
    return data;
  };

  return data;
}

function _isEmpty2() {
  const data = _interopRequireDefault(require("ramda/src/isEmpty"));

  _isEmpty2 = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _commentJson() {
  const data = _interopRequireDefault(require("comment-json"));

  _commentJson = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _lodash() {
  const data = require("lodash");

  _lodash = function () {
    return data;
  };

  return data;
}

function _bitError() {
  const data = require("@teambit/bit-error");

  _bitError = function () {
    return data;
  };

  return data;
}

function _bitId() {
  const data = require("../../bit-id");

  _bitId = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _showDoctorError() {
  const data = _interopRequireDefault(require("../../error/show-doctor-error"));

  _showDoctorError = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("../../utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _addComponents() {
  const data = require("../component-ops/add-components/add-components");

  _addComponents = function () {
    return data;
  };

  return data;
}

function _componentMap() {
  const data = _interopRequireDefault(require("./component-map"));

  _componentMap = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("./exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _workspaceLane() {
  const data = _interopRequireDefault(require("./workspace-lane"));

  _workspaceLane = function () {
    return data;
  };

  return data;
}

function _duplicateRootDir() {
  const data = require("./exceptions/duplicate-root-dir");

  _duplicateRootDir = function () {
    return data;
  };

  return data;
}

function _generalError() {
  const data = _interopRequireDefault(require("../../error/general-error"));

  _generalError = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

const LANE_KEY = '_bit_lane';
exports.LANE_KEY = LANE_KEY;
const CURRENT_BITMAP_SCHEMA = '14.9.0';
exports.CURRENT_BITMAP_SCHEMA = CURRENT_BITMAP_SCHEMA;
const SCHEMA_FIELD = '$schema-version';
/**
 * When working on lanes, a component version can be different than the main.
 * For example, when tagging 1.0.0 on main, then switching to a new lane and snapping.
 * The version saved in .bitmap file is the one of main (in this case 1.0.0).
 * The hash of the snap is saved on the 'workspace-lane' file.
 * These files are saved in .bit/workspace/lanes/<lane-name> directory, and they're not get
 * synched by Git.
 * Once a lane is exported to a remote scope, then .bitmap gets a new property
 * "lanes" array that includes the remote-lane-id and the version hash.
 * Still, the version on the ID doesn't get changed and it reflects the main version.
 * Since all operations on .bitmap are not aware of this new workspace-lane file and the "lanes" prop,
 * we do a manipulation when loading and when saving the .bitmap file.
 * When loading .bitmap file, it also loads the workspace-lane of the active lane if exists.
 * In case a bit-id has a different version on the workspace lane file, the version is changed
 * to the lane version and the old version is saved into a prop "defaultVersion".
 * This way, all methods that interact with .bitmap gets the correct version.
 * Once .bitmap is saved, the "version" is related by the "defaultVersion" if exists.
 */

exports.SCHEMA_FIELD = SCHEMA_FIELD;

class BitMap {
  // path => componentId
  // path => componentId
  // needed for out-of-sync where the id is changed during the process
  constructor(projectRoot, mapPath, schema, isLegacy, workspaceLane, // null if not checked out to a lane
  remoteLaneName) {
    this.projectRoot = projectRoot;
    this.mapPath = mapPath;
    this.schema = schema;
    this.isLegacy = isLegacy;
    this.workspaceLane = workspaceLane;
    this.remoteLaneName = remoteLaneName;
    (0, _defineProperty2().default)(this, "components", void 0);
    (0, _defineProperty2().default)(this, "hasChanged", void 0);
    (0, _defineProperty2().default)(this, "paths", void 0);
    (0, _defineProperty2().default)(this, "pathsLowerCase", void 0);
    (0, _defineProperty2().default)(this, "markAsChangedBinded", void 0);
    (0, _defineProperty2().default)(this, "_cacheIds", void 0);
    (0, _defineProperty2().default)(this, "allTrackDirs", void 0);
    (0, _defineProperty2().default)(this, "updatedIds", {});
    (0, _defineProperty2().default)(this, "_invalidateCache", () => {
      this.paths = {};
      this.pathsLowerCase = {};
      this._cacheIds = {};
      this.allTrackDirs = undefined;
    });
    this.components = [];
    this.hasChanged = false;
    this.paths = {};
    this.pathsLowerCase = {};
    this._cacheIds = {};
    this.markAsChangedBinded = this.markAsChanged.bind(this);
  }

  markAsChanged() {
    this.hasChanged = true;

    this._invalidateCache();
  }

  setComponent(bitId, componentMap) {
    if (!this.isLegacy) {
      // for Harmony, there is no different between AUTHORED and IMPORTED. and NESTED are not saved
      // in the .bitmap file.
      componentMap.origin = _constants().COMPONENT_ORIGINS.AUTHORED;
    }

    const id = bitId.toString();

    if (!bitId.hasVersion() && bitId.scope) {
      throw new (_showDoctorError().default)(`invalid bitmap id ${id}, a component must have a version when a scope-name is included`);
    }

    if (componentMap.origin !== _constants().COMPONENT_ORIGINS.NESTED) {
      // make sure there are no duplications (same name)
      const similarIds = this.findSimilarIds(bitId, true);

      if (similarIds.length) {
        throw new (_showDoctorError().default)(`your id ${id} is duplicated with ${similarIds.toString()}`);
      }
    }

    componentMap.id = bitId;
    this.components.push(componentMap);
    this.markAsChanged();
  }
  /**
   * in case the added component's root-dir is a parent-dir of other components
   * or other component's root-dir is a parent root-dir of this component, throw an error
   */


  throwForExistingParentDir({
    id,
    rootDir
  }) {
    if (this.isLegacy || !rootDir) {
      return;
    }

    const isParentDir = (parent, child) => {
      const relative = path().relative(parent, child);
      return relative && !relative.startsWith('..');
    };

    this.components.forEach(existingComponentMap => {
      if (!existingComponentMap.rootDir) return;

      if (isParentDir(existingComponentMap.rootDir, rootDir)) {
        throw new (_generalError().default)(`unable to add "${id.toString()}", its rootDir ${rootDir} is inside ${existingComponentMap.rootDir} which used by another component "${existingComponentMap.id.toString()}"`);
      }

      if (isParentDir(rootDir, existingComponentMap.rootDir)) {
        throw new (_generalError().default)(`unable to add "${id.toString()}", its rootDir ${rootDir} is used by another component ${existingComponentMap.id.toString()}`);
      }
    });
  }

  setComponentProp(id, propName, val) {
    const componentMap = this.getComponent(id, {
      ignoreScopeAndVersion: true
    });
    componentMap[propName] = val;
    this.markAsChanged();
    return componentMap;
  }

  isEmpty() {
    return (0, _isEmpty2().default)(this.components);
  } // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!


  removeComponentProp(id, propName) {
    const componentMap = this.getComponent(id, {
      ignoreScopeAndVersion: true
    });
    delete componentMap[propName];
    this.markAsChanged();
    return componentMap;
  }

  static async load(consumer) {
    const dirPath = consumer.getPath();
    const scopePath = consumer.scope.path;
    const isLegacy = consumer.isLegacy;
    const laneName = consumer.scope.lanes.getCurrentLaneName();
    const {
      currentLocation,
      defaultLocation
    } = BitMap.getBitMapLocation(dirPath);
    const mapFileContent = BitMap.loadRawSync(dirPath);
    const workspaceLane = laneName && laneName !== _constants().DEFAULT_LANE ? _workspaceLane().default.load(laneName, scopePath) : null;

    if (!mapFileContent || !currentLocation) {
      return new BitMap(dirPath, defaultLocation, CURRENT_BITMAP_SCHEMA, isLegacy, workspaceLane);
    }

    let componentsJson;

    try {
      componentsJson = _commentJson().default.parse(mapFileContent.toString('utf8'), undefined, true);
    } catch (e) {
      _logger().default.error(`invalid bitmap at ${currentLocation}`, e);

      throw new (_exceptions().InvalidBitMap)(currentLocation, e.message);
    }

    const schema = componentsJson[SCHEMA_FIELD] || componentsJson.version;
    const remoteLaneName = componentsJson[LANE_KEY];
    BitMap.removeNonComponentFields(componentsJson);
    const bitMap = new BitMap(dirPath, currentLocation, schema, isLegacy, workspaceLane, remoteLaneName);
    bitMap.loadComponents(componentsJson);
    await bitMap.loadFiles();
    return bitMap;
  }

  static removeNonComponentFields(componentsJson) {
    // Don't treat version like component
    componentsJson[SCHEMA_FIELD] ? delete componentsJson[SCHEMA_FIELD] : delete componentsJson.version;
    delete componentsJson[LANE_KEY];
  }

  async loadFiles() {
    if (this.isLegacy) return;
    const gitIgnore = (0, _addComponents().getGitIgnoreHarmony)(this.projectRoot);
    await Promise.all(this.components.map(async componentMap => {
      const rootDir = componentMap.rootDir;
      if (!rootDir) return;

      try {
        componentMap.files = await (0, _addComponents().getFilesByDir)(rootDir, this.projectRoot, gitIgnore);
        componentMap.recentlyTracked = true;
      } catch (err) {
        componentMap.files = [];
        componentMap.noFilesError = err;
      }
    }));
  }

  static loadRawSync(dirPath) {
    const {
      currentLocation
    } = BitMap.getBitMapLocation(dirPath);

    if (!currentLocation) {
      _logger().default.info(`bit.map: unable to find an existing ${_constants().BIT_MAP} file. Will create a new one if needed`);

      return undefined;
    }

    const mapFileContent = _fsExtra().default.readFileSync(currentLocation);

    return mapFileContent;
  }

  static getBitMapLocation(dirPath) {
    const defaultLocation = path().join(dirPath, _constants().BIT_MAP);
    const oldLocation = path().join(dirPath, _constants().OLD_BIT_MAP);

    const getCurrentLocation = () => {
      if (_fsExtra().default.existsSync(defaultLocation)) return defaultLocation;
      if (_fsExtra().default.existsSync(oldLocation)) return oldLocation;
      return undefined;
    };

    const currentLocation = getCurrentLocation();
    return {
      currentLocation,
      defaultLocation
    };
  }
  /**
   * if resetHard, delete the bitMap file.
   * Otherwise, try to load it and only if the file is corrupted then delete it.
   */


  static reset(dirPath, resetHard) {
    const bitMapPath = path().join(dirPath, _constants().BIT_MAP);

    const deleteBitMapFile = () => {
      _logger().default.info(`deleting the bitMap file at ${bitMapPath}`);

      _fsExtra().default.removeSync(bitMapPath);
    };

    if (resetHard) {
      deleteBitMapFile(); // @todo: delete workspace lanes as well? maybe they're already taken care of within scope.reset

      return;
    }

    try {
      const mapFileContent = BitMap.loadRawSync(dirPath);
      if (!mapFileContent) return;

      _commentJson().default.parse(mapFileContent.toString('utf8'), undefined, true);
    } catch (err) {
      deleteBitMapFile();
    }
  }

  resetToNewComponents() {
    this.components = this.components.map(component => new (_componentMap().default)({
      id: component.id.changeVersion(undefined).changeScope(undefined),
      mainFile: component.mainFile,
      rootDir: component.rootDir,
      exported: false,
      trackDir: component.trackDir,
      files: component.files,
      origin: _constants().COMPONENT_ORIGINS.AUTHORED,
      onLanesOnly: false
    }));
  }

  throwForDuplicateRootDirs(componentsJson) {
    const rootDirs = (0, _lodash().compact)(Object.keys(componentsJson).map(c => componentsJson[c].rootDir));

    if ((0, _lodash().uniq)(rootDirs).length === rootDirs.length) {
      return; // no duplications
    }

    Object.keys(componentsJson).forEach(componentId => {
      const rootDir = componentsJson[componentId].rootDir;
      if (!rootDir) return;
      const idsWithSameRootDir = Object.keys(componentsJson).filter(id => componentsJson[id].rootDir === rootDir);

      if (idsWithSameRootDir.length > 1) {
        throw new (_duplicateRootDir().DuplicateRootDir)(rootDir, idsWithSameRootDir);
      }
    });
  }

  loadComponents(componentsJson) {
    this.throwForDuplicateRootDirs(componentsJson);
    Object.keys(componentsJson).forEach(componentId => {
      const componentFromJson = componentsJson[componentId];

      if (!this.isLegacy) {
        componentFromJson.origin = _constants().COMPONENT_ORIGINS.AUTHORED;
      }

      const bitId = BitMap.getBitIdFromComponentJson(componentId, componentFromJson, this.isLegacy);

      if (bitId.hasScope() && !bitId.hasVersion() && !componentFromJson.lanes) {
        throw new (_bitError().BitError)(`.bitmap entry of "${componentId}" is invalid, it has a scope-name "${bitId.scope}", however, it does not have any version`);
      }

      componentFromJson.id = bitId;

      const componentMap = _componentMap().default.fromJson(componentFromJson);

      componentMap.updatePerLane(this.remoteLaneName, this.workspaceLane ? this.workspaceLane.ids : null);
      componentMap.setMarkAsChangedCb(this.markAsChangedBinded);
      this.components.push(componentMap);
    });
  }

  static getBitIdFromComponentJson(componentId, componentFromJson, isLegacy = false) {
    // on Harmony, to parse the id, the old format used "exported" prop, the current format
    // uses "scope" and "version" props.
    const newHarmonyFormat = ('scope' in componentFromJson);

    if (newHarmonyFormat) {
      const bitId = new (_bitId().BitId)({
        scope: componentFromJson.scope,
        name: componentId,
        version: componentFromJson.version
      }); // it needs to be parsed for 1) validation 2) adding "latest" to the version if needed.

      return _bitId().BitId.parse(bitId.toString(), bitId.hasScope());
    }

    const idHasScope = () => {
      if (componentFromJson.origin && componentFromJson.origin !== _constants().COMPONENT_ORIGINS.AUTHORED) return true;

      if ('exported' in componentFromJson) {
        if (typeof componentFromJson.exported !== 'boolean') {
          throw new (_bitError().BitError)(`fatal: .bitmap record of "${componentId}" is invalid, the exported property must be boolean, got "${typeof componentFromJson.exported}" instead.`);
        }

        return componentFromJson.exported;
      }

      if (isLegacy) {
        // backward compatibility
        return _bitId().BitId.parseObsolete(componentId).hasScope();
      } // on Harmony, if there is no "exported" we default to "true" as this is the most commonly
      // used. so it's better to have as little as possible of these props.


      componentFromJson.exported = true;
      return true;
    };

    return _bitId().BitId.parse(componentId, idHasScope());
  }

  getAllComponents(origin) {
    if (!origin) return this.components;

    const isOriginMatch = component => component.origin === origin; // $FlowFixMe we know origin is an array in that case


    const isOriginMatchArray = component => origin.includes(component.origin);

    const filter = Array.isArray(origin) ? isOriginMatchArray : isOriginMatch;
    return (0, _filter2().default)(filter, this.components);
  }
  /**
   * important! you probably want to use "getAllIdsAvailableOnLane".
   * this method returns ids that are not available on the current lane and will throw errors when
   * trying to load them.
   */


  getAllBitIdsFromAllLanes(origin) {
    const ids = componentMaps => _bitId().BitIds.fromArray(componentMaps.map(c => c.id));

    const getIdsOfOrigin = oneOrigin => {
      const cacheKey = oneOrigin || 'all'; // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

      if (this._cacheIds[cacheKey]) return this._cacheIds[cacheKey];
      const allComponents = this.components;
      const components = oneOrigin ? allComponents.filter(c => c.origin === oneOrigin) : allComponents;
      const componentIds = ids(components);
      this._cacheIds[cacheKey] = componentIds;
      return componentIds;
    };

    if (!origin) return getIdsOfOrigin();
    return _bitId().BitIds.fromArray((0, _flatten2().default)(origin.map(oneOrigin => getIdsOfOrigin(oneOrigin))));
  }

  getAllIdsAvailableOnLane(origin) {
    const ids = componentMaps => _bitId().BitIds.fromArray(componentMaps.map(c => c.id));

    const getIdsOfOrigin = oneOrigin => {
      const cacheKey = `lane-${oneOrigin}` || 'lane-all'; // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

      if (this._cacheIds[cacheKey]) return this._cacheIds[cacheKey];
      const allComponents = this.components.filter(c => c.isAvailableOnCurrentLane);
      const components = oneOrigin ? allComponents.filter(c => c.origin === oneOrigin) : allComponents;
      const componentIds = ids(components);
      this._cacheIds[cacheKey] = componentIds;
      return componentIds;
    };

    if (!origin) return getIdsOfOrigin();
    return _bitId().BitIds.fromArray((0, _flatten2().default)(origin.map(oneOrigin => getIdsOfOrigin(oneOrigin))));
  }
  /**
   * get existing bitmap bit-id by bit-id.
   * throw an exception if not found
   * @see also getBitIdIfExist
   */


  getBitId(bitId, {
    ignoreVersion = false,
    ignoreScopeAndVersion = false
  } = {}) {
    if (bitId.constructor.name !== _bitId().BitId.name) {
      throw new TypeError(`BitMap.getBitId expects bitId to be an instance of BitId, instead, got ${bitId}`);
    }

    const allIds = this.getAllBitIdsFromAllLanes();
    const exactMatch = allIds.search(bitId);
    if (exactMatch) return exactMatch;

    if (ignoreVersion) {
      const matchWithoutVersion = allIds.searchWithoutVersion(bitId);
      if (matchWithoutVersion) return matchWithoutVersion;
    }

    if (ignoreScopeAndVersion) {
      const matchWithoutScopeAndVersion = allIds.searchWithoutScopeAndVersion(bitId);
      if (matchWithoutScopeAndVersion) return matchWithoutScopeAndVersion;
    }

    if (this.updatedIds[bitId.toString()]) {
      return this.updatedIds[bitId.toString()].id;
    }

    throw new (_exceptions().MissingBitMapComponent)(bitId.toString());
  }
  /**
   * get existing bitmap bit-id by bit-id
   * don't throw an exception if not found
   * @see also getBitId
   */


  getBitIdIfExist(bitId, {
    ignoreVersion = false,
    ignoreScopeAndVersion = false
  } = {}) {
    try {
      const existingBitId = this.getBitId(bitId, {
        ignoreVersion,
        ignoreScopeAndVersion
      });
      return existingBitId;
    } catch (err) {
      if (err instanceof _exceptions().MissingBitMapComponent) return undefined;
      throw err;
    }
  }
  /**
   * get componentMap from bitmap by bit-id.
   * throw an exception if not found.
   * @see also getComponentIfExist
   */


  getComponent(bitId, {
    ignoreVersion = false,
    ignoreScopeAndVersion = false
  } = {}) {
    const existingBitId = this.getBitId(bitId, {
      ignoreVersion,
      ignoreScopeAndVersion
    });
    return this.components.find(c => c.id.isEqual(existingBitId));
  }
  /**
   * get componentMap from bitmap by bit-id
   * don't throw an exception if not found
   * @see also getComponent
   */


  getComponentIfExist(bitId, {
    ignoreVersion = false,
    ignoreScopeAndVersion = false
  } = {}) {
    try {
      const componentMap = this.getComponent(bitId, {
        ignoreVersion,
        ignoreScopeAndVersion
      });
      return componentMap;
    } catch (err) {
      if (err instanceof _exceptions().MissingBitMapComponent) return undefined;
      throw err;
    }
  }

  getNonNestedComponentIfExist(bitId) {
    const nonNestedIds = this.getAllBitIdsFromAllLanes([_constants().COMPONENT_ORIGINS.IMPORTED, _constants().COMPONENT_ORIGINS.AUTHORED]);
    const id = nonNestedIds.searchWithoutScopeAndVersion(bitId);
    if (!id) return undefined;
    return this.getComponent(id);
  }

  getComponentPreferNonNested(bitId) {
    return this.getNonNestedComponentIfExist(bitId) || this.getComponentIfExist(bitId, {
      ignoreVersion: true
    });
  }

  getAuthoredAndImportedBitIds() {
    return this.getAllIdsAvailableOnLane([_constants().COMPONENT_ORIGINS.AUTHORED, _constants().COMPONENT_ORIGINS.IMPORTED]);
  }

  getAuthoredAndImportedBitIdsOfDefaultLane() {
    const all = this.getAuthoredAndImportedBitIds();
    const filteredWithDefaultVersion = all.map(id => {
      const componentMap = this.getComponent(id);
      if (componentMap.onLanesOnly) return null;
      return componentMap.id.changeVersion(componentMap.defaultVersion || componentMap.id.version);
    }).filter(x => x);
    return _bitId().BitIds.fromArray(filteredWithDefaultVersion);
  }

  getAuthoredExportedComponents() {
    const authoredIds = this.getAllIdsAvailableOnLane([_constants().COMPONENT_ORIGINS.AUTHORED]);
    return authoredIds.filter(id => id.hasScope());
  }

  getAuthoredNonExportedComponents() {
    const authoredIds = this.getAllIdsAvailableOnLane([_constants().COMPONENT_ORIGINS.AUTHORED]);
    return authoredIds.filter(id => !id.hasScope());
  }

  _makePathRelativeToProjectRoot(pathToChange) {
    const absolutePath = path().resolve(pathToChange);
    return path().relative(this.projectRoot, absolutePath);
  }
  /**
   * find ids that have the same name but different version
   * if compareWithoutScope is false, the scope should be identical in addition to the name
   */


  findSimilarIds(id, compareWithoutScope = false) {
    const allIds = this.getAllBitIdsFromAllLanes([_constants().COMPONENT_ORIGINS.IMPORTED, _constants().COMPONENT_ORIGINS.AUTHORED]);
    const similarIds = allIds.filter(existingId => {
      const isSimilar = compareWithoutScope ? existingId.isEqualWithoutScopeAndVersion(id) : existingId.isEqualWithoutVersion(id);
      return isSimilar && !existingId.isEqual(id);
    });
    return _bitId().BitIds.fromArray(similarIds);
  }

  deleteOlderVersionsOfComponent(componentId) {
    const similarIds = this.findSimilarIds(componentId);
    similarIds.forEach(id => {
      const idStr = id.toString();

      _logger().default.debugAndAddBreadCrumb('BitMap.deleteOlderVersionsOfComponent', 'deleting an older version {idStr} of an existing component {componentId}', {
        idStr,
        componentId: componentId.toString()
      });

      this._removeFromComponentsArray(id);
    });
  }
  /**
   * --- Don't use this function when you have the ID parsed. Use this.getBitId() instead ---
   *
   * id entered by the user may or may not include scope-name
   * search for a similar id in the bitmap and return the full BitId
   */


  getExistingBitId(id, shouldThrow = true, searchWithoutScopeInProvidedId = false) {
    if (!(0, _is2().default)(String, id)) {
      throw new TypeError(`BitMap.getExistingBitId expects id to be a string, instead, got ${typeof id}`);
    }

    const idHasVersion = id.includes(_constants().VERSION_DELIMITER); // start with a more strict comparison. assume the id from the user has a scope name

    const componentWithScope = this.components.find(componentMap => {
      return idHasVersion ? componentMap.id.toString() === id : componentMap.id.toStringWithoutVersion() === id;
    });
    if (componentWithScope) return componentWithScope.id; // continue with searching without the scope name (in the bitmap)

    const idWithoutVersion = _bitId().BitId.getStringWithoutVersion(id);

    const componentWithoutScope = this.components.find(componentMap => {
      return idHasVersion ? componentMap.id.toStringWithoutScope() === id : componentMap.id.toStringWithoutScopeAndVersion() === idWithoutVersion;
    });
    if (componentWithoutScope) return componentWithoutScope.id;

    if (searchWithoutScopeInProvidedId) {
      // continue with searching without the scope name (in the provided id)
      const delimiterIndex = id.indexOf('/');

      if (delimiterIndex !== -1) {
        const idWithoutScope = _bitId().BitId.getScopeAndName(id).name;

        const matches = this.components.filter(componentMap => {
          return idHasVersion ? componentMap.id.toString() === idWithoutScope : componentMap.id.toStringWithoutVersion() === idWithoutScope;
        });

        if (matches && matches.length > 1) {
          throw new (_exceptions().MultipleMatches)(id);
        }

        if (matches && matches.length === 1) {
          return matches[0].id;
        }

        if (this.updatedIds[idWithoutScope]) {
          return this.updatedIds[idWithoutScope].id;
        }
      }
    }

    if (this.updatedIds[id]) {
      return this.updatedIds[id].id;
    }

    if (shouldThrow) {
      throw new (_exceptions().MissingBitMapComponent)(id);
    }

    return undefined;
  }
  /**
   * check if both arrays are equal according to their 'relativePath', regardless the order
   */


  _areFilesArraysEqual(filesA, filesB) {
    if (filesA.length !== filesB.length) return false;

    const cmp = (x, y) => x.relativePath === y.relativePath;

    const diff = (0, _differenceWith2().default)(cmp, filesA, filesB);
    if (!diff.length) return true;
    return false;
  }
  /**
   * add files from filesB that are not in filesA
   */


  mergeFilesArray(filesA, filesB) {
    return (0, _unionWith2().default)((0, _eqBy2().default)((0, _prop2().default)('relativePath')), filesA, filesB);
  }

  addComponent({
    componentId,
    files,
    defaultScope,
    mainFile,
    origin,
    rootDir,
    trackDir,
    originallySharedDir,
    wrapDir,
    onLanesOnly,
    config
  }) {
    const componentIdStr = componentId.toString();

    _logger().default.debug(`adding to bit.map ${componentIdStr}`);

    const getOrCreateComponentMap = () => {
      const ignoreVersion = !this.isLegacy; // legacy can have two components on .bitmap with different versions

      const componentMap = this.getComponentIfExist(componentId, {
        ignoreVersion
      });

      if (componentMap) {
        _logger().default.info(`bit.map: updating an exiting component ${componentMap.id.toString()}`);

        componentMap.files = files;

        if (componentId.hasVersion() && this.workspaceLane) {
          // happening during checkout for example or during switch to a remote lane
          // @todo: needs to decide, maybe the best place to sync the workspaceLane is before writing to the .bitmap
          // file. maybe in `toObject` method in this class.
          this.workspaceLane.addEntry(componentId); // this is to make sure the version of the lane is not written to the .bitmap file.
          // it is saved in the workspaceLane. but the .bitmap has always the "main" version.

          componentMap.defaultVersion = componentMap.defaultVersion || componentMap.id.version;
        }

        componentMap.id = componentId;
        return componentMap;
      }

      if (origin === _constants().COMPONENT_ORIGINS.IMPORTED || origin === _constants().COMPONENT_ORIGINS.AUTHORED) {
        // if there are older versions, the user is updating an existing component, delete old ones from bit.map
        this.deleteOlderVersionsOfComponent(componentId);
      } // @ts-ignore not easy to fix, we can't instantiate ComponentMap with mainFile because we don't have it yet


      const newComponentMap = new (_componentMap().default)({
        files,
        origin
      });
      newComponentMap.setMarkAsChangedCb(this.markAsChangedBinded);
      this.setComponent(componentId, newComponentMap);
      return newComponentMap;
    };

    const componentMap = getOrCreateComponentMap();
    componentMap.mainFile = mainFile;

    if (rootDir) {
      componentMap.rootDir = (0, _utils().pathNormalizeToLinux)(rootDir);
      this.throwForExistingParentDir(componentMap);
    }

    if (trackDir) {
      componentMap.trackDir = (0, _utils().pathNormalizeToLinux)(trackDir);
    }

    if (wrapDir) {
      componentMap.wrapDir = wrapDir;
    }

    if (onLanesOnly) {
      componentMap.onLanesOnly = onLanesOnly;
    }

    if (defaultScope) {
      componentMap.defaultScope = defaultScope;
    }

    if (config) {
      componentMap.config = config;
    }

    componentMap.removeTrackDirIfNeeded();

    if (originallySharedDir) {
      componentMap.originallySharedDir = originallySharedDir;
    }

    this.sortValidateAndMarkAsChanged(componentMap);
    return componentMap;
  }

  addFilesToComponent({
    componentId,
    files
  }) {
    const componentIdStr = componentId.toString();
    const componentMap = this.getComponentIfExist(componentId);

    if (!componentMap) {
      throw new (_showDoctorError().default)(`unable to add files to a non-exist component ${componentIdStr}`);
    }

    _logger().default.info(`bit.map: updating an exiting component ${componentIdStr}`);

    componentMap.files = files;
    this.sortValidateAndMarkAsChanged(componentMap);
    return componentMap;
  }

  reLoadAfterSwitchingLane(workspaceLane) {
    this.workspaceLane = workspaceLane;
    if (!workspaceLane) this.remoteLaneName = undefined;

    this._invalidateCache();

    this.components.forEach(componentMap => componentMap.updatePerLane(this.remoteLaneName, this.workspaceLane ? this.workspaceLane.ids : null));
  }

  sortValidateAndMarkAsChanged(componentMap) {
    componentMap.sort();
    componentMap.validate();
    this.markAsChanged();
  }

  _removeFromComponentsArray(componentId) {
    _logger().default.debug(`bit-map: _removeFromComponentsArray ${componentId.toString()}`);

    this.components = this.components.filter(componentMap => !componentMap.id.isEqual(componentId));
    this.markAsChanged();
  }

  removeComponent(bitId) {
    const bitmapComponent = this.getBitIdIfExist(bitId, {
      ignoreScopeAndVersion: true
    });
    if (bitmapComponent) this._removeFromComponentsArray(bitmapComponent);
    return bitmapComponent;
  }

  removeComponents(ids) {
    return ids.map(id => this.removeComponent(id));
  }

  isExistWithSameVersion(id) {
    return Boolean(id.hasVersion() && this.getComponentIfExist(id));
  }
  /**
   * needed after exporting or tagging a component.
   * We don't support export/tag of nested components, only authored or imported. For authored/imported components, could be
   * in the file-system only one instance with the same component-name. As a result, we can strip the
   * scope-name and the version, find the older version in bit.map and update the id with the new one.
   */


  updateComponentId(id, updateScopeOnly = false) {
    const newIdString = id.toString();
    const similarIds = this.findSimilarIds(id, true);

    if (!similarIds.length) {
      _logger().default.debug(`bit-map: no need to update ${newIdString}`);

      return id;
    }

    if (similarIds.length > 1) {
      throw new (_showDoctorError().default)(`Your ${_constants().BIT_MAP} file has more than one version of ${id.toStringWithoutScopeAndVersion()} and they
      are authored or imported. This scenario is not supported`);
    }

    const oldId = similarIds[0];
    const oldIdStr = oldId.toString();
    const newId = updateScopeOnly ? oldId.changeScope(id.scope) : id;

    if (newId.isEqual(oldId)) {
      _logger().default.debug(`bit-map: no need to update ${oldIdStr}`);

      return oldId;
    }

    _logger().default.debug(`BitMap: updating an older component ${oldIdStr} with a newer component ${newId.toString()}`);

    const componentMap = this.getComponent(oldId);

    if (componentMap.origin === _constants().COMPONENT_ORIGINS.NESTED) {
      throw new Error('updateComponentId should not manipulate Nested components');
    }

    if (this.workspaceLane && !updateScopeOnly) {
      // this code is executed when snapping/tagging and user is on a lane.
      // change the version only on the lane, not on .bitmap
      if (newId.hasVersion()) {
        this.workspaceLane.addEntry(newId);
      } else {
        // component was un-snapped and is back to "new".
        this.workspaceLane.removeEntry(oldId);
        componentMap.onLanesOnly = false;
      }

      componentMap.defaultVersion = componentMap.defaultVersion || oldId.version;
    }

    if (updateScopeOnly) {
      // in case it had defaultScope, no need for it anymore.
      delete componentMap.defaultScope;
    }

    this._removeFromComponentsArray(oldId);

    this.setComponent(newId, componentMap);
    this.markAsChanged();
    this.updatedIds[oldIdStr] = componentMap;
    return newId;
  }

  removeConfig(id) {
    const componentMap = this.getComponent(id);
    delete componentMap.config;
    this.markAsChanged();
  }

  updateLanesProperty(workspaceLane, remoteLaneId) {
    workspaceLane.ids.forEach(bitIdOnLane => {
      // we ignore version but we do require the scope to be the same because if the scope is
      // empty, the lane is going to populate the id itself, so no need to replicate it in the
      // lanes prop
      const componentMap = this.getComponentIfExist(bitIdOnLane, {
        ignoreVersion: true
      });
      if (!componentMap) return; // a user might export components that are not in .bitmap

      if (!componentMap.defaultVersion || componentMap.defaultVersion === componentMap.id.version) {
        // if no defaultVersion the current version (id.version) is the only version so no need
        // to save this version again in lanes prop.
        return;
      }

      componentMap.addLane(remoteLaneId, bitIdOnLane.version);
    });
    this.markAsChanged();
  }
  /**
   * Return a component id as listed in bit.map file
   * by a path exist in the files object
   *
   * @param {string} componentPath relative to consumer - as stored in bit.map files object
   * @returns {BitId} component id
   * @memberof BitMap
   */


  getComponentIdByPath(componentPath, caseSensitive = true) {
    this._populateAllPaths();

    return caseSensitive ? this.paths[componentPath] : this.pathsLowerCase[componentPath.toLowerCase()];
  }

  _populateAllPaths() {
    if ((0, _isEmpty2().default)(this.paths)) {
      this.components.forEach(component => {
        component.files.forEach(file => {
          const relativeToConsumer = component.rootDir ? (0, _utils().pathJoinLinux)(component.rootDir, file.relativePath) : file.relativePath;
          this.paths[relativeToConsumer] = component.id;
          this.pathsLowerCase[relativeToConsumer.toLowerCase()] = component.id;
        });
      });
    }
  }

  getAllTrackDirs() {
    if (!this.allTrackDirs) {
      this.allTrackDirs = {};
      this.components.forEach(component => {
        const trackDir = component.getTrackDir();
        if (!trackDir) return; // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

        this.allTrackDirs[trackDir] = component.id;
      });
    }

    return this.allTrackDirs;
  }

  updatePathLocation(from, to, existingPath) {
    const isPathDir = (0, _utils().isDir)(existingPath);
    const allChanges = [];
    this.components.forEach(componentMap => {
      const changes = isPathDir ? componentMap.updateDirLocation(from, to) : componentMap.updateFileLocation(from, to); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

      if (changes && changes.length) allChanges.push({
        id: componentMap.id.clone(),
        changes
      });
    });

    if ((0, _isEmpty2().default)(allChanges)) {
      const errorMsg = isPathDir ? `directory ${from} is not a tracked component` : `the file ${existingPath} is untracked`;
      throw new (_showDoctorError().default)(errorMsg);
    }

    this.markAsChanged();
    return allChanges;
  }

  setRemoteLane(remoteLane) {
    this.remoteLaneName = remoteLane;
    this.hasChanged = true;
  }
  /**
   * remove the id property before saving the components to the file as they are redundant with the keys
   */


  toObjects() {
    const components = {};
    this.components.forEach(componentMap => {
      const componentMapCloned = componentMap.clone();
      let idStr = componentMapCloned.id.toString();

      if (this.isLegacy) {
        if (componentMapCloned.origin === _constants().COMPONENT_ORIGINS.AUTHORED) {
          componentMapCloned.exported = componentMapCloned.id.hasScope();
        }
      } else {
        // no need for "exported" property as there are scope and version props
        // if not exist, we still need these properties so we know later to parse them correctly.
        componentMapCloned.scope = componentMapCloned.id.hasScope() ? componentMapCloned.id.scope : '';
        componentMapCloned.version = componentMapCloned.id.hasVersion() ? componentMapCloned.id.version : ''; // change back the id to the main id, so the local lanes data won't be saved in .bitmap

        if (componentMapCloned.defaultVersion) {
          componentMapCloned.version = componentMapCloned.defaultVersion;
        }

        idStr = componentMapCloned.id.name;
      } // @ts-ignore


      componentMapCloned === null || componentMapCloned === void 0 ? true : delete componentMapCloned.id;
      components[idStr] = componentMapCloned.toPlainObject(this.isLegacy);
    });
    return (0, _utils().sortObject)(components);
  }
  /**
   * do not call this function directly, let consumer.onDestroy() call it.
   * consumer.onDestroy() is being called (manually) at the end of the command process.
   * the risk of calling this method in other places is a parallel writing of this file, which
   * may result in a damaged file
   */


  async write(componentFsCache) {
    if (this.isLegacy) {
      await Promise.all(this.components.map(async c => {
        if (c.recentlyTracked) {
          await componentFsCache.setLastTrackTimestamp(c.id.toString(), Date.now());
        }
      }));
    }

    if (!this.hasChanged) return;

    _logger().default.debug('writing to bit.map');

    if (this.workspaceLane) await this.workspaceLane.write();
    await (0, _utils().outputFile)({
      filePath: this.mapPath,
      content: this.contentToString(),
      prefixMessage: _constants().BITMAP_PREFIX_MESSAGE
    });
    this.hasChanged = false;
  }

  contentToString() {
    return JSON.stringify(this.getContent(), null, 4);
  }

  getContent() {
    const bitMapContent = _objectSpread(_objectSpread({}, this.toObjects()), {}, {
      [SCHEMA_FIELD]: this.schema
    });

    if (this.remoteLaneName) {
      bitMapContent[LANE_KEY] = this.remoteLaneName;
    }

    return bitMapContent;
  }

}

exports.default = BitMap;