import { BitId } from '../../bit-id';
import { ComponentWithDependencies } from '../../scope';
import ComponentVersion from '../../scope/component-version';
import Repository from '../../scope/objects/repository';
import VersionDependencies from '../../scope/version-dependencies';
import { PathLinux, PathOsBased } from '../../utils/path';
import BitMap from '../bit-map/bit-map';
import Consumer from '../consumer';
export declare type ManipulateDirItem = {
    id: BitId;
    originallySharedDir?: PathLinux;
    wrapDir?: PathLinux;
};
/**
 * use this method when loading an existing component. don't use it during the import process
 */
export declare function getManipulateDirForExistingComponents(consumer: Consumer, componentVersion: ComponentVersion): Promise<ManipulateDirItem[]>;
/**
 * use this method while importing a component.
 * the data from bitMap is not enough because a component might be NESTED on bitmap but is now
 * imported.
 */
export declare function getManipulateDirWhenImportingComponents(bitMap: BitMap, versionsDependencies: VersionDependencies[], repository: Repository): Promise<ManipulateDirItem[]>;
export declare function getManipulateDirForComponentWithDependencies(componentWithDependencies: ComponentWithDependencies): ManipulateDirItem[];
export declare function revertDirManipulationForPath(pathStr: PathOsBased, originallySharedDir: PathLinux | undefined, wrapDir: PathLinux | undefined): PathLinux;
export declare function stripSharedDirFromPath(pathStr: PathOsBased, sharedDir: PathLinux | undefined): PathOsBased;
export declare function addSharedDirForPath(pathStr: string, originallySharedDir: PathLinux | undefined): PathLinux;
