import { Consumer } from '..';
import BitId from '../../bit-id/bit-id';
import BitIds from '../../bit-id/bit-ids';
import ComponentWithDependencies from '../../scope/component-dependencies';
import Component from '../component/consumer-component';
export declare class FlattenedDependencyLoader {
    private consumer;
    private ignoreIds;
    private loadComponentsFunc?;
    private cache;
    constructor(consumer: Consumer, ignoreIds?: BitIds, loadComponentsFunc?: ((ids: BitId[]) => Promise<Component[]>) | undefined);
    load(component: Component): Promise<ComponentWithDependencies>;
    loadManyDependencies(dependenciesIds: BitId[]): Promise<Component[]>;
    loadDependency(dependencyId: BitId): Promise<Component>;
    loadFlattenedRecursively(deps: Component[], visited?: string[]): Promise<Component[]>;
    loadFlattenedFromModel(deps: Component[]): Promise<Component[]>;
    loadFlattenedFromFs(components: Component[]): Promise<Component[]>;
}
