"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.regexp.constructor.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _glob() {
  const data = _interopRequireDefault(require("glob"));

  _glob = function () {
    return data;
  };

  return data;
}

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _bitId() {
  const data = require("../bit-id");

  _bitId = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("../scope/exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getLatestVersion(bitId, componentsDir) {
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  if (bitId.hasVersion()) return bitId.version;
  const regexRemoveLatestVersion = new RegExp(`${_constants().LATEST_BIT_VERSION}$`);
  const relativePathWithoutVersion = bitId.toFullPath().replace(regexRemoveLatestVersion, '');
  const pathWithoutVersion = path().join(componentsDir, relativePathWithoutVersion);

  const versionsDirs = _glob().default.sync('*', {
    cwd: pathWithoutVersion
  });

  if (!versionsDirs || !versionsDirs.length) {
    throw new (_exceptions().ComponentNotFound)(bitId.toString());
  } // @ts-ignore


  return Math.max(versionsDirs);
}

function componentResolver(componentId, mainFilePath, projectRoot = process.cwd()) {
  const bitId = _bitId().BitId.parse(componentId, true); // used for envs. components, all have a scope


  const componentsDir = path().join(projectRoot, _constants().BITS_DIRNAME);
  const version = getLatestVersion(bitId, componentsDir);
  const bitIdWithLatestVersion = bitId.changeVersion(version.toString());
  const componentPath = path().join(componentsDir, bitIdWithLatestVersion.toFullPath());

  _logger().default.debug(`resolving component, path: ${componentPath}`);

  if (mainFilePath) {
    return path().join(componentPath, mainFilePath);
  }

  return componentPath;
}

var _default = componentResolver;
exports.default = _default;