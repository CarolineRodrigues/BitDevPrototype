import { BitId, BitIds } from '../bit-id';
import BitMap from '../consumer/bit-map/bit-map';
import ComponentMap from '../consumer/bit-map/component-map';
import Component from '../consumer/component/consumer-component';
import DataToPersist from '../consumer/component/sources/data-to-persist';
import Consumer from '../consumer/consumer';
import ComponentWithDependencies from '../scope/component-dependencies';
import { LinksResult } from './node-modules-linker';
export declare function linkAllToNodeModules(consumer: Consumer, bitIds?: BitId[]): Promise<LinksResult[]>;
/**
 * Relevant for legacy components only (before Harmony).
 */
export declare function getLinksInDistToWrite(component: Component, componentMap: ComponentMap, consumer: Consumer | null | undefined, bitMap: BitMap, componentWithDependencies?: ComponentWithDependencies): Promise<DataToPersist>;
export declare function reLinkDependents(consumer: Consumer, components: Component[]): Promise<void>;
/**
 * Not needed for Harmony.
 *
 * needed for the following cases:
 * 1) user is importing a component directly which was a dependency before. (before: NESTED, now: IMPORTED).
 * 2) user used bit-move to move a dependency to another directory.
 * as a result of the cases above, the link from the dependent to the dependency is broken.
 * find the dependents components and re-link them
 */
export declare function getReLinkDependentsData(consumer: Consumer, components: Component[], linkedComponents: BitIds): Promise<DataToPersist>;
/**
 * link the components after import.
 * this process contains the following steps:
 * 1) writing link files to connect imported components to their dependencies
 * 2) writing index.js files (entry-point files) in the root directories of each one of the imported and dependencies components.
 * unless writePackageJson is true, because if package.json is written, its "main" attribute points to the entry-point.
 * 3) creating symlinks from components directories to node_modules
 * 4) in case a component was nested and now imported directly, re-link its dependents
 */
export declare function getAllComponentsLinks({ componentsWithDependencies, writtenComponents, writtenDependencies, consumer, bitMap, createNpmLinkFiles, }: {
    componentsWithDependencies: ComponentWithDependencies[];
    writtenComponents: Component[];
    writtenDependencies: Component[] | null | undefined;
    consumer: Consumer | null | undefined;
    bitMap: BitMap;
    createNpmLinkFiles: boolean;
}): Promise<DataToPersist>;
