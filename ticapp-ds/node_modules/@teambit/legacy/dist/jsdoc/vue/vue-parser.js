"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parse;

function _parser() {
  const data = _interopRequireDefault(require("@vuedoc/parser"));

  _parser = function () {
    return data;
  };

  return data;
}

function domain() {
  const data = _interopRequireWildcard(require("domain"));

  domain = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("../../utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function formatProperty(prop) {
  const {
    name,
    description,
    type,
    required
  } = prop;
  return {
    name,
    description,
    required,
    type,
    defaultValue: {
      value: prop.default === '__undefined__' ? undefined : prop.default,
      computed: false
    }
  };
}

function formatComputed(computed) {
  const {
    name,
    description
  } = computed;
  return {
    name,
    description,
    required: false,
    defaultValue: {
      value: null,
      computed: true
    }
  };
}

function formatProperties(props, computeds) {
  const regularProps = props ? props.map(formatProperty) : [];
  const computedProps = computeds ? computeds.map(formatComputed) : [];
  return regularProps.concat(computedProps);
}

function formatMethod(method) {
  const {
    name,
    description,
    params
  } = method;
  return {
    name,
    description,
    // Private method won't be in the raw vue docs results, so what ever got here is public
    access: 'public',
    args: params,
    returns: method.return
  };
}

function formatMethods(methods) {
  if (!methods) return [];
  return methods.map(formatMethod);
}

function fromVueDocs({
  name,
  description,
  props,
  methods,
  computed
}, filePath) {
  return {
    filePath: (0, _utils().pathNormalizeToLinux)(filePath),
    name,
    description,
    properties: formatProperties(props, computed),
    access: 'public',
    methods: formatMethods(methods)
  };
}

async function parse(data, filePath) {
  const options = {
    filecontent: data
  };
  return new Promise(resolve => {
    try {
      // Wrapping this call with a domain since the vue docs parser call process.nextTick directly
      // see (https://gitlab.com/vuedoc/parser/blob/master/lib/parser/Parser.js#L72) which
      // results in sometime throw an unhandled error outside the promise which make the main process hang.
      // read more about it here:
      // https://gitlab.com/vuedoc/parser/issues/56#note_219267637
      const parsingDomain = domain().create(); // eslint-disable-next-line @typescript-eslint/no-floating-promises

      parsingDomain.on('error', err => {
        _logger().default.debug(`failed parsing vue docs on path ${filePath} with unhandled error`, err); // never mind, ignore the doc of this source


        resolve([]);
      }).run(async () => {
        try {
          const vueDocs = await _parser().default.parse(options);
          const formattedDocs = fromVueDocs(vueDocs, filePath);
          resolve([formattedDocs]);
        } catch (e) {
          _logger().default.debug(`failed parsing vue docs on path ${filePath} with error`, e); // never mind, ignore the doc of this source


          resolve([]);
        }
      });
    } catch (e) {
      _logger().default.debug(`failed parsing vue docs on path ${filePath} with error`, e); // never mind, ignore the doc of this source


      resolve([]);
    }
  });
}