"use strict";

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = runAndUpdateCI;

function _serializeError() {
  const data = require("serialize-error");

  _serializeError = function () {
    return data;
  };

  return data;
}

function _scope() {
  const data = require("../../api/scope");

  _scope = function () {
    return data;
  };

  return data;
}

async function runAndUpdateCI({
  id,
  scopePath,
  verbose,
  directory,
  keep = false,
  noCache = false
}) {
  function addCIAttrsInTheModel({
    error,
    startTime
  }) {
    const endTime = Date.now().toString();
    const ciProps = {
      startTime,
      endTime,
      error: undefined
    };

    if (error) {
      const serializedError = (0, _serializeError().serializeError)(error);
      ciProps.error = serializedError;
      return (0, _scope().modifyCIProps)(id, ciProps, scopePath);
    }

    return (0, _scope().modifyCIProps)(id, ciProps, scopePath);
  }

  const startTime = Date.now().toString();

  try {
    // define options
    const save = true;
    const buildResults = await (0, _scope().buildInScope)({
      id,
      scopePath,
      save,
      verbose,
      directory,
      keep,
      noCache
    });
    const testResults = await (0, _scope().testInScope)({
      id,
      scopePath,
      save,
      verbose,
      directory,
      keep
    });
    const dists = buildResults ? buildResults.dists : null;
    await addCIAttrsInTheModel({
      startTime
    });
    return {
      specsResults: testResults,
      dists
    };
  } catch (e) {
    await addCIAttrsInTheModel({
      error: e,
      startTime
    });
    throw e;
  }
}