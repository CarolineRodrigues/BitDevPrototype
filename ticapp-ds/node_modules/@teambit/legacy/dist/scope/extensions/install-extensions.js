"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = installExtensions;
exports.isEnvironmentInstalled = isEnvironmentInstalled;

function _uniqBy2() {
  const data = _interopRequireDefault(require("ramda/src/uniqBy"));

  _uniqBy2 = function () {
    return data;
  };

  return data;
}

function _isNil2() {
  const data = _interopRequireDefault(require("ramda/src/isNil"));

  _isNil2 = function () {
    return data;
  };

  return data;
}

function _reject2() {
  const data = _interopRequireDefault(require("ramda/src/reject"));

  _reject2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));

  _pMapSeries = function () {
    return data;
  };

  return data;
}

function pathLib() {
  const data = _interopRequireWildcard(require("path"));

  pathLib = function () {
    return data;
  };

  return data;
}

function _() {
  const data = require("..");

  _ = function () {
    return data;
  };

  return data;
}

function _analytics() {
  const data = require("../../analytics/analytics");

  _analytics = function () {
    return data;
  };

  return data;
}

function _componentResolver() {
  const data = _interopRequireDefault(require("../../component-resolver"));

  _componentResolver = function () {
    return data;
  };

  return data;
}

function _environment() {
  const data = _interopRequireDefault(require("../../environment"));

  _environment = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("../exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _scopeRemotes() {
  const data = require("../scope-remotes");

  _scopeRemotes = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const removeNils = (0, _reject2().default)(_isNil2().default);

function installExtensions({
  ids,
  dependentId,
  scope,
  verbose,
  dontPrintEnvMsg
}) {
  _logger().default.debug(`scope.installEnvironment, ids: ${ids.map(id => id.componentId).join(', ')}`);

  _analytics().Analytics.addBreadCrumb('installEnvironment', `scope.installEnvironment, ids: ${_analytics().Analytics.hashData(ids)}`);

  const componentsDir = scope.getComponentsPath();
  const isolateOpts = {
    writeBitDependencies: false,
    installNpmPackages: true,
    writePackageJson: true,
    writeDists: true,
    writeConfig: false,
    installPeerDependencies: true,
    override: false,
    installProdPackagesOnly: true,
    verbose,
    silentPackageManagerResult: true
  };
  const idsWithoutNils = removeNils(ids);

  const predicate = id => id.componentId.toString(); // TODO: should be moved to BitId class


  const uniqIds = (0, _uniqBy2().default)(predicate)(idsWithoutNils);
  const nonExistingEnvsIds = uniqIds.filter(id => {
    return !isEnvironmentInstalled(scope, id.componentId);
  });

  if (!nonExistingEnvsIds.length) {
    _logger().default.debug('scope.installEnvironment, all environment were successfully loaded, nothing to install');

    _analytics().Analytics.addBreadCrumb('installEnvironment', 'scope.installEnvironment, all environment were successfully loaded, nothing to install');

    return Promise.resolve([]);
  }

  const importEnv = async id => {
    let concreteId = id.componentId;

    if (id.componentId.getVersion().latest) {
      const concreteIds = await (0, _scopeRemotes().fetchRemoteVersions)(scope, [id.componentId]);
      concreteId = concreteIds[0];
    }

    _logger().default.debug(`scope.installEnvironment.importEnv, id: ${concreteId.toString()}`);

    const dir = pathLib().join(componentsDir, _().Scope.getComponentRelativePath(concreteId));
    const env = new (_environment().default)(scope, dir); // Destroying environment to make sure there is no left over

    await env.destroyIfExist();
    await env.create();

    try {
      const isolatedComponent = await env.isolateComponent(concreteId, isolateOpts);

      if (!dontPrintEnvMsg) {
        // eslint-disable-next-line no-console
        _logger().default.console(_chalk().default.bold.green(`successfully installed the ${concreteId.toString()} ${id.type}`), 'debug');
      }

      return isolatedComponent;
    } catch (e) {
      if (e instanceof _exceptions().ComponentNotFound) {
        e.dependentId = dependentId ? dependentId.toString() : null;
      }

      throw e;
    }
  };

  return (0, _pMapSeries().default)(nonExistingEnvsIds, importEnv);
}
/**
 * sync method that loads the environment/(path to environment component)
 */


function isEnvironmentInstalled(scope, bitId) {
  _logger().default.debug(`scope.isEnvironmentInstalled, id: ${bitId.toString()}`);

  _analytics().Analytics.addBreadCrumb('isEnvironmentInstalled', `scope.isEnvironmentInstalled, id: ${_analytics().Analytics.hashData(bitId.toString())}`);

  if (!bitId) throw new Error('scope.isEnvironmentInstalled a required argument "bitId" is missing');

  const notFound = () => {
    _logger().default.debug(`Unable to find an env component ${bitId.toString()}`);

    _analytics().Analytics.addBreadCrumb('isEnvironmentInstalled', `Unable to find an env component ${_analytics().Analytics.hashData(bitId.toString())}`);

    return false;
  };

  let envPath;

  try {
    envPath = (0, _componentResolver().default)(bitId.toString(), null, scope.getPath());
  } catch (err) {
    return notFound();
  }

  if (!_environment().default.isEnvironmentInstalled(envPath)) return notFound();

  _logger().default.debug(`found an environment file at ${envPath}`);

  _analytics().Analytics.addBreadCrumb('isEnvironmentInstalled', `found an environment file at ${_analytics().Analytics.hashData(envPath)}`);

  return true;
}