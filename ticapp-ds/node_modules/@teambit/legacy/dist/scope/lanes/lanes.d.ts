import { Scope } from '..';
import { BitId } from '../../bit-id';
import LaneId, { LocalLaneId } from '../../lane-id/lane-id';
import { Lane } from '../models';
import { Repository } from '../objects';
import { ScopeJson, TrackLane } from '../scope-json';
export default class Lanes {
    objects: Repository;
    scopeJson: ScopeJson;
    constructor(objects: Repository, scopeJson: ScopeJson);
    listLanes(): Promise<Lane[]>;
    /** dont use it outside of Lanes. Use scope.loadLane instead */
    loadLane(id: LaneId): Promise<Lane | null>;
    saveLane(laneObject: Lane): Promise<void>;
    getCurrentLaneName(): string;
    isOnDefaultLane(): boolean;
    getCurrentLaneId(): LocalLaneId;
    getCurrentLaneObject(): Promise<Lane | null>;
    setCurrentLane(laneName: string): void;
    getLocalTrackedLaneByRemoteName(remoteLane: string, remoteScope: string): string | null;
    getRemoteTrackedDataByLocalLane(localLane: string): TrackLane | undefined;
    trackLane(trackLaneData: TrackLane): void;
    removeLanes(scope: Scope, lanes: string[], force: boolean): Promise<string[]>;
    getLanesData(scope: Scope, name?: string, mergeData?: boolean): Promise<LaneData[]>;
}
export declare type LaneData = {
    name: string;
    components: Array<{
        id: BitId;
        head: string;
    }>;
    remote: string | null;
    isMerged: boolean | null;
};
