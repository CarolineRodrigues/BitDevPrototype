import { Mutex } from 'async-mutex';
import { BitId } from '../../bit-id';
import { RemoteLaneId } from '../../lane-id/lane-id';
import { Lane, ModelComponent } from '../models';
import { LaneComponent } from '../models/lane';
import { Ref } from '../objects';
declare type Lanes = {
    [laneName: string]: LaneComponent[];
};
/**
 * each lane holds components and hashes, which are the heads of the remote
 */
export default class RemoteLanes {
    basePath: string;
    remotes: {
        [remoteName: string]: Lanes;
    };
    writeMutex: Mutex;
    constructor(scopePath: string);
    addEntry(remoteLaneId: RemoteLaneId, componentId: BitId, head?: Ref): Promise<void>;
    private pushToRemoteLane;
    addEntriesFromModelComponents(remoteLaneId: RemoteLaneId, components: ModelComponent[]): Promise<void>;
    getRef(remoteLaneId: RemoteLaneId, bitId: BitId): Promise<Ref | null>;
    getRemoteLane(remoteLaneId: RemoteLaneId): Promise<LaneComponent[]>;
    getRemoteBitIds(remoteLaneId: RemoteLaneId): Promise<BitId[]>;
    loadRemoteLane(remoteLaneId: RemoteLaneId): Promise<void>;
    getAllRemoteLaneIds(): Promise<RemoteLaneId[]>;
    syncWithLaneObject(remoteName: string, lane: Lane): Promise<void>;
    private composeRemoteLanePath;
    write(): Promise<void>;
    private writeRemoteLanes;
    private writeRemoteLaneFile;
}
export {};
