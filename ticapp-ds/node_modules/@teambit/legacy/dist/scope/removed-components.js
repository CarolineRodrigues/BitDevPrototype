"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _bitId() {
  const data = require("../bit-id");

  _bitId = function () {
    return data;
  };

  return data;
}

class RemovedObjects {
  constructor({
    removedComponentIds,
    missingComponents,
    dependentBits,
    removedFromLane,
    removedLanes
  }) {
    (0, _defineProperty2().default)(this, "removedComponentIds", void 0);
    (0, _defineProperty2().default)(this, "missingComponents", void 0);
    (0, _defineProperty2().default)(this, "dependentBits", void 0);
    (0, _defineProperty2().default)(this, "removedFromLane", void 0);
    (0, _defineProperty2().default)(this, "removedLanes", void 0);
    this.removedComponentIds = removedComponentIds || new (_bitId().BitIds)();
    this.missingComponents = missingComponents || new (_bitId().BitIds)();
    this.dependentBits = dependentBits || {};
    this.removedFromLane = removedFromLane || false;
    this.removedLanes = removedLanes || [];
  }

  serialize() {
    return {
      removedComponentIds: this.removedComponentIds.serialize(),
      missingComponents: this.missingComponents.serialize(),
      dependentBits: this.dependentBits,
      removedFromLane: this.removedFromLane,
      removedLanes: this.removedLanes,
      removedDependencies: [] // for forward compatibility

    };
  }

  static fromObjects(payload) {
    // this function being called from an ssh, so the ids must have a remote scope
    const missingComponents = new (_bitId().BitIds)(...payload.missingComponents.map(id => _bitId().BitId.parse(id, true)));
    const removedComponentIds = new (_bitId().BitIds)(...payload.removedComponentIds.map(id => _bitId().BitId.parse(id, true)));
    const dependentBits = Object.keys(payload.dependentBits).reduce((acc, current) => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      acc[current] = new (_bitId().BitIds)(...payload.dependentBits[current].map(id => new (_bitId().BitId)(id)));
      return acc;
    }, {});
    return new RemovedObjects({
      missingComponents,
      removedComponentIds,
      dependentBits,
      removedLanes: payload.removedLanes
    });
  }

}

exports.default = RemovedObjects;