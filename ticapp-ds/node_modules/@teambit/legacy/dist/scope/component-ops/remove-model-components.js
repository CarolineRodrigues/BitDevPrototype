"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.flat.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.unscopables.flat.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _isEmpty2() {
  const data = _interopRequireDefault(require("ramda/src/isEmpty"));

  _isEmpty2 = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));

  _pMapSeries = function () {
    return data;
  };

  return data;
}

function _bitId() {
  const data = require("../../bit-id");

  _bitId = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _models() {
  const data = require("../models");

  _models = function () {
    return data;
  };

  return data;
}

function _removedComponents() {
  const data = _interopRequireDefault(require("../removed-components"));

  _removedComponents = function () {
    return data;
  };

  return data;
}

/**
 * remove components from the model.
 *
 * previously, this class also removed dependencies from the scope, see https://github.com/teambit/bit/pull/5380 for
 * more details.
 */
class RemoveModelComponents {
  constructor(scope, bitIds, force, consumer) {
    (0, _defineProperty2().default)(this, "scope", void 0);
    (0, _defineProperty2().default)(this, "bitIds", void 0);
    (0, _defineProperty2().default)(this, "force", void 0);
    (0, _defineProperty2().default)(this, "consumer", void 0);
    (0, _defineProperty2().default)(this, "currentLane", null);
    this.scope = scope;
    this.bitIds = bitIds;
    this.force = force;
    this.consumer = consumer;
  }

  async setCurrentLane() {
    this.currentLane = await this.scope.lanes.getCurrentLaneObject();
  }

  async remove() {
    const {
      missingComponents,
      foundComponents
    } = await this.scope.filterFoundAndMissingComponents(this.bitIds);
    await this.setCurrentLane();
    const dependentBits = await this.scope.getDependentsBitIds(foundComponents);

    if ((0, _isEmpty2().default)(dependentBits) || this.force) {
      const removalData = await (0, _pMapSeries().default)(foundComponents, bitId => this.getRemoveSingleData(bitId));
      const compIds = new (_bitId().BitIds)(...removalData.map(x => x.compId));
      const refsToRemoveAll = removalData.map(removed => removed.refsToRemove).flat();

      if (this.currentLane) {
        await this.scope.objects.writeObjectsToTheFS([this.currentLane]);
      }

      await this.scope.objects.deleteObjectsFromFS(refsToRemoveAll);
      await this.scope.objects.deleteRecordsFromUnmergedComponents(compIds.map(id => id.name));
      const removedFromLane = Boolean(this.currentLane && foundComponents.length);
      return new (_removedComponents().default)({
        removedComponentIds: compIds,
        missingComponents,
        removedFromLane
      });
    } // some of the components have dependents, don't remove them


    return new (_removedComponents().default)({
      missingComponents,
      dependentBits
    });
  }

  async getRemoveSingleData(bitId) {
    _logger().default.debug(`scope.removeSingle ${bitId.toString()}`);

    const component = (await this.scope.getModelComponent(bitId)).toComponentVersion();
    const componentsRefs = await this.getDataForRemovingComponent(bitId);
    const version = Object.keys(component.component.versions).length <= 1 ? _constants().LATEST_BIT_VERSION : bitId.version;
    return {
      compId: bitId.changeVersion(version),
      refsToRemove: componentsRefs
    };
  }

  async getDataForRemovingComponent(id) {
    if (this.currentLane) {
      const result = this.currentLane.removeComponent(id);
      if (!result) throw new Error(`failed deleting ${id.toString()}, the component was not found on the lane`);
      return [];
    }

    const componentList = await this.scope.listIncludesSymlinks();
    const symlink = componentList.find(component => component instanceof _models().Symlink && id.isEqualWithoutScopeAndVersion(component.toBitId()));
    const refs = await this.scope.sources.getRefsForComponentRemoval(id);
    if (symlink) refs.push(symlink.hash());
    return refs;
  }

}

exports.default = RemoveModelComponents;