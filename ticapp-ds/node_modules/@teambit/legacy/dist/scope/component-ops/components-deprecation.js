"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deprecateMany = deprecateMany;
exports.deprecateRemote = deprecateRemote;
exports.undeprecateMany = undeprecateMany;
exports.undeprecateRemote = undeprecateRemote;

function _groupArray() {
  const data = _interopRequireDefault(require("group-array"));

  _groupArray = function () {
    return data;
  };

  return data;
}

function _enrichContextFromGlobal() {
  const data = _interopRequireDefault(require("../../hooks/utils/enrich-context-from-global"));

  _enrichContextFromGlobal = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

async function deprecateMany(scope, bitIds) {
  _logger().default.debug(`scope.deprecateMany, ids: ${bitIds.toString()}`);

  return _deprecationMany(scope, bitIds, _deprecateSingle);
}

async function undeprecateMany(scope, bitIds) {
  _logger().default.debug(`scope.undeprecateMany, ids: ${bitIds.toString()}`);

  return _deprecationMany(scope, bitIds, _undeprecateSingle);
}

async function deprecateRemote(remotes, scope, bitIds) {
  return _deprecationRemote(remotes, scope, bitIds, true);
}

async function undeprecateRemote(remotes, scope, bitIds) {
  return _deprecationRemote(remotes, scope, bitIds, false);
}

async function _deprecationMany(scope, ids, deprecationAction) {
  const {
    missingComponents,
    foundComponents
  } = await scope.filterFoundAndMissingComponents(ids);
  const modelComponentsP = foundComponents.map(bitId => deprecationAction(scope, bitId));
  const modelComponents = await Promise.all(modelComponentsP);
  await scope.objects.writeObjectsToTheFS(modelComponents);
  scope.objects.clearCache();
  const missingComponentsStrings = missingComponents.map(id => id.toStringWithoutVersion());
  const bitIds = modelComponents.map(comp => comp.id());
  return {
    bitIds,
    missingComponents: missingComponentsStrings
  };
}

async function _deprecationRemote(remotes, scope, bitIds, deprecate) {
  const groupedBitsByScope = (0, _groupArray().default)(bitIds, 'scope');
  const context = {};
  (0, _enrichContextFromGlobal().default)(context);
  const deprecateP = Object.keys(groupedBitsByScope).map(async scopeName => {
    const resolvedRemote = await remotes.resolve(scopeName, scope);
    const idsStr = groupedBitsByScope[scopeName].map(id => id.toStringWithoutVersion());
    const deprecateResult = deprecate ? await resolvedRemote.deprecateMany(idsStr, context) : await resolvedRemote.undeprecateMany(idsStr, context);
    return deprecateResult;
  }); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  return Promise.all(deprecateP);
}

async function _deprecateSingle(scope, bitId) {
  const component = await scope.getModelComponent(bitId);
  component.deprecated = true;
  return component;
}

async function _undeprecateSingle(scope, bitId) {
  const component = await scope.getModelComponent(bitId);
  component.deprecated = false;
  return component;
}