import { ReleaseType } from 'semver';
import { Scope } from '..';
import { BitId, BitIds } from '../../bit-id';
import Component from '../../consumer/component/consumer-component';
import Consumer from '../../consumer/consumer';
import { AutoTagResult } from './auto-tag';
import { LegacyOnTagResult } from '../scope';
import { BasicTagParams } from '../../api/consumer/lib/tag';
export declare type onTagIdTransformer = (id: BitId) => BitId | null;
declare type UpdateDependenciesOnTagFunc = (component: Component, idTransformer: onTagIdTransformer) => Component;
export declare function registerUpdateDependenciesOnTag(func: UpdateDependenciesOnTagFunc): void;
export default function tagModelComponent({ consumerComponents, ids, scope, message, editor, exactVersion, releaseType, preRelease, force, consumer, ignoreNewestVersion, skipTests, verbose, skipAutoTag, soft, build, persist, resolveUnmerged, isSnap, disableTagAndSnapPipelines, forceDeploy, incrementBy, }: {
    consumerComponents: Component[];
    ids: BitIds;
    scope: Scope;
    exactVersion?: string | null | undefined;
    releaseType?: ReleaseType;
    incrementBy?: number;
    consumer: Consumer;
    resolveUnmerged?: boolean;
    isSnap?: boolean;
} & BasicTagParams): Promise<{
    taggedComponents: Component[];
    autoTaggedResults: AutoTagResult[];
    publishedPackages: string[];
}>;
export declare function addFlattenedDependenciesToComponents(scope: Scope, components: Component[]): Promise<void>;
/**
 * @todo: currently, there is only one function registered to the OnTag, which is the builder.
 * we set the extensions data and artifacts we got from the builder to the consumer-components.
 * however, if there is more than one function registered to the OnTag, the data will be overridden
 * by the last called function. when/if this happen, some kind of merge need to be done between the
 * results.
 */
export declare function updateComponentsByTagResult(components: Component[], tagResult: LegacyOnTagResult[]): void;
export declare function getPublishedPackages(components: Component[]): string[];
export {};
