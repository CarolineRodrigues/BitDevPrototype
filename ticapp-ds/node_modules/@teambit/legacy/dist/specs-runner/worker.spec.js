"use strict";

function _chai() {
  const data = require("chai");

  _chai = function () {
    return data;
  };

  return data;
}

function _child_process() {
  const data = require("child_process");

  _child_process = function () {
    return data;
  };

  return data;
}

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('worker', () => {
  // TODO: fix this test, the worker now do a different process than before
  it.skip('should throw an error for a mismatch tester interface', done => {
    const child = (0, _child_process().fork)(path().join(__dirname, '..', '..', 'dist', 'specs-runner', 'worker.js'), {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      silent: false,
      env: {
        __impl__: '',
        __specs__: '',
        __tester__: path().join(__dirname, '../../', 'fixtures', 'invalid-tester.js'),
        __testerId__: 'myScope/my-component'
      }
    });
    process.on('exit', () => {
      child.kill('SIGKILL');
    });
    child.on('message', ({
      type,
      payload
    }) => {
      (0, _chai().expect)(type).to.equal('error');
      (0, _chai().expect)(payload).to.equal('"myScope/my-component" doesn\'t have a valid tester interface');
      done();
    });
  });
});