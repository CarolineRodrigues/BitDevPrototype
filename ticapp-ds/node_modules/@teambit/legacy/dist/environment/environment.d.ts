import { BitId } from '../bit-id';
import { Consumer } from '../consumer';
import { ComponentWithDependencies, Scope } from '../scope';
import { PathOsBased } from '../utils/path';
import { IsolateOptions } from './isolator';
export default class Environment {
    path: PathOsBased;
    scope: Scope;
    consumer?: Consumer;
    constructor(scope: Scope, dir: string | null | undefined);
    create(): Promise<void>;
    /**
     * import a component end to end. Including importing the dependencies and installing the npm
     * packages.
     *
     * @param {BitId | string} bitId - the component id to isolate
     * @param {IsolateOptions} opts
     * @return {Promise.<Component>}
     */
    isolateComponent(bitId: BitId | string, opts: IsolateOptions): Promise<ComponentWithDependencies>;
    /**
     * It helps to make sure an environment is installed. Otherwise, in case a user interrupts the environment
     * installation process, it won't be installed again.
     */
    static markEnvironmentAsInstalled(dir: any): Promise<string>;
    static isEnvironmentInstalled(dir: any): boolean;
    getPath(): string;
    destroy(): Promise<any>;
    destroyIfExist(): Promise<any>;
}
