/// <reference types="node" />
import { StdioOptions } from 'child_process';
import { InteractiveInputs } from '../interactive/utils/run-interactive-cmd';
import ScopesData from './e2e-scopes';
/**
 * to enable a feature for Helper instance, in the e2e-test file add `helper.command.setFeatures('your-feature');`
 * to enable a feature for a single command, add the feature to the runCmd, e.g. `runCmd(cmd, cwd, stdio, 'your-feature');`
 * if you set both, the runCmd wins.
 * more about feature-toggle head to feature-toggle.ts file.
 */
export default class CommandHelper {
    scopes: ScopesData;
    debugMode: boolean;
    bitBin: string;
    featuresToggle: string | string[] | undefined;
    constructor(scopes: ScopesData, debugMode: boolean);
    setFeatures(featuresToggle: string | string[]): void;
    resetFeatures(): void;
    runCmd(cmd: string, cwd?: string, stdio?: StdioOptions, overrideFeatures?: string, getStderrAsPartOfTheOutput?: boolean): string;
    _getFeatureToggleCmdPrefix(overrideFeatures?: string): string;
    listRemoteScope(raw?: boolean, options?: string): string;
    list(options?: string): string;
    listParsed(options?: string): Record<string, any>[];
    listLocalScope(options?: string): string;
    listLocalScopeParsed(options?: string): Record<string, any>[];
    listRemoteScopeParsed(options?: string): any;
    listScopeParsed(scope: string, options?: string): any;
    catScope(includeExtraData?: boolean, cwd?: string): any;
    catObject(hash: string, parse?: boolean): any;
    catComponent(id: string, cwd?: string, parse?: boolean): Record<string, any>;
    catLane(id: string, cwd?: string): Record<string, any>;
    addComponent(filePaths: string, options?: Record<string, any> | string, cwd?: string): string;
    sign(ids: string[], flags?: string, cwd?: string): string;
    artifacts(id?: string, flags?: string): string;
    updateDependencies(data: Record<string, any>, flags?: string, cwd?: string): string;
    getConfig(configName: string): string;
    delConfig(configName: string): string;
    setConfig(configName: string, configVal: string): string;
    setEnv(compId: string, envId: string): string;
    unsetEnv(compId: string): string;
    setAspect(pattern: string, aspectId: string, config?: Record<string, any>, flags?: string): string;
    unsetAspect(pattern: string, aspectId: string, flags?: string): string;
    untrackComponent(id?: string, all?: boolean, cwd?: string): string;
    removeComponent(id: string, flags?: string): string;
    deprecateComponent(id: string, flags?: string): string;
    undeprecateComponent(id: string, flags?: string): string;
    fork(sourceId: string, values?: string): string;
    rename(sourceId: string, targetId: string, flags?: string): string;
    use(aspectId: string, flags?: string): string;
    dependencies(values?: string): string;
    tagComponent(id: string, tagMsg?: string, options?: string): string;
    tagWithoutMessage(id: string, version?: string, options?: string): string;
    tagAllComponents(options?: string, version?: string, assertTagged?: boolean): string;
    tagAllWithoutBuild(options?: string): string;
    tagWithoutBuild(id?: string, options?: string): string;
    rewireAndTagAllComponents(options?: string, version?: string, assertTagged?: boolean): string;
    tagScope(version?: string, message?: string, options?: string): string;
    tagScopeWithoutBuild(version?: string, options?: string): string;
    softTag(options?: string): string;
    persistTag(options?: string): string;
    persistTagWithoutBuild(options?: string): string;
    snapComponent(id: string, tagMsg?: string, options?: string): string;
    snapComponentWithoutBuild(id: string, options?: string): string;
    snapAllComponents(options?: string, assertSnapped?: boolean): string;
    snapAllComponentsWithoutBuild(options?: string, assertSnapped?: boolean): string;
    createLane(laneName?: string): string;
    trackLane(localName: string, remoteScope: string, remoteName?: string): string;
    clearCache(): string;
    removeLane(laneName?: string, options?: string): string;
    removeRemoteLane(laneName?: string, options?: string): string;
    showLanes(options?: string): string;
    showOneLane(name: string): string;
    showOneLaneParsed(name: string): any;
    showLanesParsed(options?: string): any;
    showRemoteLanesParsed(options?: string): any;
    diffLane(args?: string, onScope?: boolean): string;
    getHead(id: string, cwd?: string): any;
    getHeadShort(id: string, cwd?: string): any;
    getHeadOfLane(laneName: string, componentName: string, cwd?: string): any;
    getArtifacts(id: string): any;
    untag(id: string, version?: string): string;
    untagAll(options?: string): string;
    untagSoft(id: string): string;
    exportComponent(id: string, scope?: string, assert?: boolean, flags?: string): string;
    exportLane(assert?: boolean): string;
    exportAllComponents(scope?: string): string;
    exportAllComponentsAndRewire(scope?: string): string;
    exportToDefaultAndRewire(): string;
    exportToCurrentScope(ids?: string): string;
    export(options?: string): string;
    resumeExport(exportId: string, remotes: string[]): string;
    ejectComponents(ids: string, flags?: string): string;
    ejectComponentsParsed(ids: string, flags?: string): any;
    importComponent(id: string, flags?: string): string;
    import(value?: string): string;
    fetchLane(id: string): string;
    fetchRemoteLane(id: string): string;
    fetchAllLanes(): string;
    importManyComponents(ids: string[]): string;
    importComponentWithOptions(id: string | undefined, options: Record<string, any>): string;
    importAllComponents(writeToFileSystem?: boolean): string;
    isolateComponent(id: string, flags: string): string;
    isolateComponentWithCapsule(id: string, capsuleDir: string): string;
    /**
     * returns the capsule dir in case there is --json flag
     */
    createCapsuleHarmony(id: string, options?: Record<string, any>): string;
    capsuleListParsed(): any;
    getCapsuleOfComponent(id: string): any;
    importExtension(id: string): string;
    build(id?: string, getStderrAsPartOfTheOutput?: boolean): string;
    buildComponentWithOptions(id: string | undefined, options: Record<string, any>, cwd?: string): string;
    test(flags?: string, getStderrAsPartOfTheOutput?: boolean): string;
    testComponent(id?: string, flags?: string): string;
    testAllWithJunit(): string;
    testComponentWithOptions(id: string | undefined, options: Record<string, any>, cwd?: string): string;
    status(): string;
    statusJson(cwd?: string): any;
    expectStatusToBeClean(exclude?: string[]): void;
    expectStatusToHaveIssue(issueName: string): void;
    expectStatusToNotHaveIssue(issueName: string): void;
    getAllIssuesFromStatus(): string[];
    expectStatusToNotHaveIssues(cwd?: string): void;
    statusComponentIsStaged(id: string): boolean;
    statusComponentIsModified(fullId: string): boolean;
    showComponent(id?: string): string;
    showComponentParsed(id?: string): any;
    showComponentParsedHarmony(id?: string): any;
    showAspectConfig(compId: string, aspectId: string): any;
    getComponentFiles(id: string): string[];
    showComponentWithOptions(id: string | undefined, options: Record<string, any>): string;
    checkoutVersion(version: string, ids: string, flags?: string, cwd?: string): string;
    checkout(values: string): string;
    switchLocalLane(lane: string, flags?: string): string;
    switchRemoteLane(lane: string, flags?: string, getAll?: boolean): string;
    mergeVersion(version: string, ids: string, flags?: string): string;
    merge(values: string): string;
    mergeLane(laneName: string, options?: string): string;
    mergeRemoteLane(laneName: string, remoteName?: string, options?: string): string;
    diff(id?: string | undefined): string | null | undefined;
    log(id: string, flags?: string): string;
    move(from: string, to: string): string;
    runTask(taskName: string): string;
    create(templateName: string, componentName: string, flags?: string): string;
    new(templateName: string, flags?: string, workspaceName?: string, cwd?: string): string;
    moveComponent(id: string, to: string): string;
    link(flags?: string): string;
    install(packages?: string, options?: Record<string, any>): string;
    update(flags?: string): string;
    uninstall(flags?: string): string;
    linkAndRewire(ids?: string): string;
    linkAndCompile(linkFlags?: string, compileId?: string, compileFlags?: Record<string, string>): string;
    packComponent(id: string, options: Record<string, any>, extract?: boolean): string;
    publish(id: string, flags?: string): string;
    ejectConf(id?: string, options?: Record<string, any>): string;
    compile(id?: string, options?: Record<string, any>): string;
    injectConf(id: string | undefined, options: Record<string, any> | null | undefined): string;
    doctor(options: Record<string, any>): string;
    doctorOne(diagnosisName: string, options: Record<string, any>, cwd?: string): string;
    doctorList(options: Record<string, any>): string;
    doctorJsonParsed(): any;
    parseOptions(options?: Record<string, any>): string;
    init(options?: string): string;
    runInteractiveCmd({ args, inputs, processOpts, opts, }: {
        args: string[];
        inputs: InteractiveInputs;
        processOpts: Record<string, any>;
        opts: {
            defaultIntervalBetweenInputs: number;
            verbose: boolean;
        };
    }): Promise<string>;
}
