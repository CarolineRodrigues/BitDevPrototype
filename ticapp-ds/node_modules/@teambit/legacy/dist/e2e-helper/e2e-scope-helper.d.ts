import { InteractiveInputs } from '../interactive/utils/run-interactive-cmd';
import CommandHelper from './e2e-command-helper';
import FsHelper from './e2e-fs-helper';
import NpmHelper from './e2e-npm-helper';
import ScopesData from './e2e-scopes';
export default class ScopeHelper {
    debugMode: boolean;
    scopes: ScopesData;
    e2eDir: string;
    command: CommandHelper;
    fs: FsHelper;
    npm: NpmHelper;
    cache?: Record<string, any>;
    keepEnvs: boolean;
    clonedScopes: string[];
    packageManager: string;
    constructor(debugMode: boolean, scopes: ScopesData, commandHelper: CommandHelper, fsHelper: FsHelper, npmHelper: NpmHelper);
    clean(): void;
    destroy(): void;
    cleanLocalScope(): void;
    usePackageManager(packageManager: string): void;
    reInitLocalScope(): void;
    reInitLocalScopeHarmony(opts?: {
        registry?: string;
        initGit?: boolean;
        yarnRCConfig?: any;
        npmrcConfig?: any;
    }): void;
    private _writeYarnRC;
    private _writeNpmrc;
    newLocalScopeHarmony(templateName: string, flags?: string): void;
    initHarmonyWorkspace(): void;
    initLocalScope(): string;
    initWorkspace(workspacePath?: string): string;
    initWorkspaceAndRemoteScope(workspacePath?: string): void;
    initInteractive(inputs: InteractiveInputs): Promise<string>;
    initLocalScopeWithOptions(options: Record<string, any>): string;
    setNewLocalAndRemoteScopes(): void;
    setNewLocalAndRemoteScopesHarmony(opts?: {
        yarnRCConfig?: any;
    }): void;
    initNewLocalScope(deleteCurrentScope?: boolean): string;
    addRemoteScope(remoteScopePath?: string, localScopePath?: string, isGlobal?: boolean): string;
    addRemoteHttpScope(port?: string): string;
    removeRemoteScope(remoteScope?: string, isGlobal?: boolean, localScopePath?: string): string;
    addRemoteEnvironment(isGlobal?: boolean): string;
    addGlobalRemoteScope(): string;
    removeRemoteEnvironment(isGlobal?: boolean): string;
    reInitRemoteScope(scopePath?: string): string;
    /**
     * useful when publishing to a local npm registry so then multiple tests in the same file
     * won't collide in the @ci registry
     */
    setRemoteScopeAsDifferentDir(): void;
    reInitEnvsScope(): string;
    getNewBareScope(scopeNameSuffix?: string, addOwnerPrefix?: boolean): {
        scopeName: string;
        scopePath: string;
        scopeWithoutOwner: string;
    };
    getNewBareScopeWithSpecificName(scopeName: string): string;
    /**
     * Sometimes many tests need to do the exact same steps to init the local-scope, such as importing compiler/tester.
     * To make it faster, use this method before all tests, and then use getClonedLocalScope method to restore from the
     * cloned scope.
     */
    cloneLocalScope(dereferenceSymlinks?: boolean): string;
    getClonedLocalScope(clonedScopePath: string, deleteCurrentScope?: boolean): void;
    cloneRemoteScope(): string;
    cloneScope(scopePath: string): string;
    getClonedScope(clonedScopePath: string, scopePath: string): void;
    getClonedRemoteScope(clonedScopePath: string): void;
    switchFromLegacyToHarmony(): void;
    linkCoreAspects(): void;
}
