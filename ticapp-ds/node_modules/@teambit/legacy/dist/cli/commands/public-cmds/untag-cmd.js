"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../api/consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _generalError() {
  const data = _interopRequireDefault(require("../../../error/general-error"));

  _generalError = function () {
    return data;
  };

  return data;
}

class Untag {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'untag [id] [version]');
    (0, _defineProperty2().default)(this, "shortDescription", 'revert versions tagged for component(s)');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "description", `revert version(s) tagged for component(s)
  https://${_constants().BASE_DOCS_DOMAIN}/components/tags#undoing-a-tag
  ${(0, _constants().WILDCARD_HELP)('untag')}`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['a', 'all', 'revert tag for all tagged components'], ['', 'soft', 'harmony - revert only soft-tags (components tagged with --soft flag)'], ['f', 'force', 'revert the tag even if used as a dependency. WARNING: components that depend on this tag will corrupt']]);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
  }

  action([id, version], {
    all = false,
    force = false,
    soft = false
  }) {
    if (!id && !all) {
      throw new (_generalError().default)('please specify a component ID or use --all flag');
    }

    if (all) {
      version = id;
      return (0, _consumer().unTagAction)(version, force, soft);
    }

    return (0, _consumer().unTagAction)(version, force, soft, id);
  }

  report({
    results,
    isSoftUntag
  }) {
    const titleSuffix = isSoftUntag ? 'soft-untagged (are not candidate for tagging anymore)' : 'untagged';

    const title = _chalk().default.green(`${results.length} component(s) were ${titleSuffix}:\n`);

    const components = results.map(result => {
      return `${_chalk().default.cyan(result.id.toStringWithoutVersion())}. version(s): ${result.versions.join(', ')}`;
    });
    return title + components.join('\n');
  }

}

exports.default = Untag;