"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _prop2() {
  const data = _interopRequireDefault(require("ramda/src/prop"));

  _prop2 = function () {
    return data;
  };

  return data;
}

function _isEmpty2() {
  const data = _interopRequireDefault(require("ramda/src/isEmpty"));

  _isEmpty2 = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../api/consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _chalkBox() {
  const data = require("../../chalk-box");

  _chalkBox = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

class Fetch {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'fetch [ids...]');
    (0, _defineProperty2().default)(this, "shortDescription", `fetch remote objects and store locally`);
    (0, _defineProperty2().default)(this, "description", `fetch remote objects and store locally.
for lanes, use "/" as a separator between the remote and the lane name, e.g. teambit.ui/fix-button`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "private", true);
    (0, _defineProperty2().default)(this, "opts", [['l', 'lanes', 'EXPERIMENTAL. fetch component objects from lanes. note, it does not save the remote lanes objects locally, only the refs'], ['c', 'components', 'fetch components'], ['j', 'json', 'return the output as JSON'], ['', 'from-original-scopes', 'fetch indirect dependencies from their original scope as opposed to from their dependents']]);
    (0, _defineProperty2().default)(this, "loader", true);
  }

  action([ids = []], {
    lanes = false,
    components = false,
    json = false,
    fromOriginalScope = false
  }) {
    return (0, _consumer().fetch)(ids, lanes, components, fromOriginalScope).then(results => _objectSpread(_objectSpread({}, results), {}, {
      json
    }));
  }

  report({
    dependencies,
    importDetails,
    json
  }) {
    if (json) {
      return JSON.stringify({
        importDetails
      }, null, 4);
    }

    if (dependencies && !(0, _isEmpty2().default)(dependencies)) {
      const components = dependencies.map((0, _prop2().default)('component'));
      const title = components.length === 1 ? 'successfully fetched one component' : `successfully fetched ${components.length} components`;
      const componentDependencies = components.map(component => {
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const details = importDetails.find(c => c.id === component.id.toStringWithoutVersion()); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

        if (!details) throw new Error(`missing details of component ${component.id.toString()}`); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

        return (0, _chalkBox().formatPlainComponentItemWithVersions)(component, details);
      });
      const componentDependenciesOutput = [_chalk().default.green(title)].concat(componentDependencies).join('\n');
      return componentDependenciesOutput;
    }

    return _chalk().default.yellow('nothing to import');
  }

}

exports.default = Fetch;