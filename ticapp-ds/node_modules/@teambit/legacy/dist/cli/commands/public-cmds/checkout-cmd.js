"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../api/consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _mergeVersion() {
  const data = require("../../../consumer/versions-ops/merge-version");

  _mergeVersion = function () {
    return data;
  };

  return data;
}

class Checkout {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'checkout [values...]');
    (0, _defineProperty2().default)(this, "shortDescription", 'switch between component versions');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "description", `switch between component versions or remove local changes
  \`bit checkout <version> [ids...]\` => checkout the specified ids (or all components when --all is used) to the specified version
  \`bit checkout latest [ids...]\` => checkout the specified ids (or all components when --all is used) to their latest versions
  \`bit checkout [ids...] --reset\` => remove local modifications from the specified ids (or all components when --all is used)
  ${(0, _constants().WILDCARD_HELP)('checkout 0.0.1')}`);
    (0, _defineProperty2().default)(this, "alias", 'U');
    (0, _defineProperty2().default)(this, "opts", [['i', 'interactive-merge', 'when a component is modified and the merge process found conflicts, display options to resolve them'], ['o', 'ours', 'in case of a conflict, override the used version with the current modification'], ['t', 'theirs', 'in case of a conflict, override the current modification with the specified version'], ['m', 'manual', 'in case of a conflict, leave the files with a conflict state to resolve them manually later'], ['r', 'reset', 'remove local changes'], ['a', 'all', 'all components'], ['v', 'verbose', 'showing verbose output for inspection'], ['', 'skip-npm-install', 'DEPRECATED. use "--skip-dependency-installation" instead'], ['', 'skip-dependency-installation', 'do not install packages of the imported components'], ['', 'ignore-package-json', 'do not generate package.json for the imported component(s). (it automatically enables skip-npm-install and save-dependencies-as-components flags)'], ['', 'conf [path]', 'write the configuration file (bit.json) and the envs configuration files (use --conf without path to write to the default dir)'], ['', 'ignore-dist', 'do not write dist files (when exist)']]);
    (0, _defineProperty2().default)(this, "loader", true);
  }

  action([values = []], {
    interactiveMerge = false,
    ours = false,
    theirs = false,
    manual = false,
    reset = false,
    all = false,
    verbose = false,
    skipNpmInstall = false,
    skipDependencyInstallation = false,
    ignorePackageJson = false,
    conf,
    ignoreDist = false
  }) {
    if (skipNpmInstall) {
      // eslint-disable-next-line no-console
      console.log(_chalk().default.yellow(`"--skip-npm-install" has been deprecated, please use "--skip-dependency-installation" instead`));
      skipDependencyInstallation = true;
    }

    const checkoutProps = {
      promptMergeOptions: interactiveMerge,
      mergeStrategy: (0, _mergeVersion().getMergeStrategy)(ours, theirs, manual),
      reset,
      all,
      verbose,
      isLane: false,
      skipNpmInstall: skipDependencyInstallation,
      ignoreDist,
      ignorePackageJson,
      writeConfig: !!conf
    };
    return (0, _consumer().checkout)(values, checkoutProps);
  }

  report({
    components,
    version,
    failedComponents
  }, _, {
    verbose,
    all
  }) {
    const isLatest = Boolean(version && version === _constants().LATEST);
    const isReset = !version;

    const getFailureOutput = () => {
      // components that failed for no legitimate reason. e.g. merge-conflict.
      const realFailedComponents = failedComponents === null || failedComponents === void 0 ? void 0 : failedComponents.filter(f => !f.unchangedLegitimately);
      if (!realFailedComponents || !realFailedComponents.length) return '';
      const title = 'the checkout has been canceled on the following component(s)';
      const body = realFailedComponents.map(failedComponent => `${_chalk().default.bold(failedComponent.id.toString())} - ${_chalk().default.red(failedComponent.failureMessage)}`).join('\n');
      return `${title}\n${body}\n\n`;
    };

    const getNeutralOutput = () => {
      // components that weren't checked out for legitimate reasons, e.g. up-to-date.
      const neutralComponents = (failedComponents || []).filter(f => f.unchangedLegitimately);
      if (!neutralComponents.length) return '';

      if (!verbose && all) {
        return _chalk().default.green(`checkout was not needed for ${_chalk().default.bold(neutralComponents.length.toString())} components (use --verbose to get more details)\n`);
      }

      const title = 'the checkout was not needed on the following component(s)';
      const body = neutralComponents.map(failedComponent => `${_chalk().default.bold(failedComponent.id.toString())} - ${failedComponent.failureMessage}`).join('\n');
      return `${title}\n${body}\n\n`;
    };

    const getSuccessfulOutput = () => {
      if (!components || !components.length) return '';

      if (components.length === 1) {
        const component = components[0];
        const componentName = isReset ? component.id.toString() : component.id.toStringWithoutVersion();
        if (isReset) return `successfully reset ${_chalk().default.bold(componentName)}\n`;
        const title = `successfully switched ${_chalk().default.bold(componentName)} to version ${_chalk().default.bold( // $FlowFixMe version is defined when !isReset
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        isLatest ? component.id.version : version)}\n`;
        return `${title} ${(0, _mergeVersion().applyVersionReport)(components, false)}`;
      }

      if (isReset) {
        const title = 'successfully reset the following components\n\n';
        const body = components.map(component => _chalk().default.bold(component.id.toString())).join('\n');
        return title + body;
      } // $FlowFixMe version is defined when !isReset
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!


      const versionOutput = isLatest ? 'their latest version' : `version ${_chalk().default.bold(version)}`;
      const title = `successfully switched the following components to ${versionOutput}\n\n`;
      const showVersion = isLatest || isReset;
      const componentsStr = (0, _mergeVersion().applyVersionReport)(components, true, showVersion);
      return title + componentsStr;
    };

    return getFailureOutput() + getNeutralOutput() + getSuccessfulOutput();
  }

}

exports.default = Checkout;