"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _dependencies() {
  const data = require("../../../api/consumer/lib/dependencies");

  _dependencies = function () {
    return data;
  };

  return data;
}

function _componentTemplate() {
  const data = require("../../templates/component-template");

  _componentTemplate = function () {
    return data;
  };

  return data;
}

class Dependencies {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'dependencies <id>');
    (0, _defineProperty2().default)(this, "group", 'info');
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. show dependencies (direct and indirect) of the given component');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['d', 'debug', 'show the immediate dependencies and how their version was determined']]);
  }

  action([id], {
    debug = false
  }) {
    return (0, _dependencies().dependencies)(id, debug);
  }

  report(results) {
    // @ts-ignore
    if (!results.id) {
      // it's DependenciesResultsDebug
      return this.debugReport(results);
    }

    return this.nonDebugReport(results);
  }

  debugReport(results) {
    return JSON.stringify(results, undefined, 4);
  }

  nonDebugReport(results) {
    if (!results.scopeDependencies.length && !results.workspaceDependencies.length) {
      return `no dependents found for ${results.id.toString()}.
try running "bit cat-component ${results.id.toStringWithoutVersion()}" to see whether the component/version exists locally`;
    }

    const scopeTable = (0, _componentTemplate().generateDependenciesInfoTable)(results.scopeDependencies, results.id);
    const workspaceTable = (0, _componentTemplate().generateDependenciesInfoTable)(results.workspaceDependencies, results.id);
    return `${_chalk().default.bold('Dependents originated from workspace')}
${workspaceTable || '<none>'}

${_chalk().default.bold('Dependents originated from scope')}
${scopeTable || '<none>'}`;
  }

}

exports.default = Dependencies;