"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _values2() {
  const data = _interopRequireDefault(require("ramda/src/values"));

  _values2 = function () {
    return data;
  };

  return data;
}

function _keys2() {
  const data = _interopRequireDefault(require("ramda/src/keys"));

  _keys2 = function () {
    return data;
  };

  return data;
}

function _uniq2() {
  const data = _interopRequireDefault(require("ramda/src/uniq"));

  _uniq2 = function () {
    return data;
  };

  return data;
}

function _flatten2() {
  const data = _interopRequireDefault(require("ramda/src/flatten"));

  _flatten2 = function () {
    return data;
  };

  return data;
}

function _prop2() {
  const data = _interopRequireDefault(require("ramda/src/prop"));

  _prop2 = function () {
    return data;
  };

  return data;
}

function _isEmpty2() {
  const data = _interopRequireDefault(require("ramda/src/isEmpty"));

  _isEmpty2 = function () {
    return data;
  };

  return data;
}

function _is2() {
  const data = _interopRequireDefault(require("ramda/src/is"));

  _is2 = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../api/consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _mergeVersion() {
  const data = require("../../../consumer/versions-ops/merge-version/merge-version");

  _mergeVersion = function () {
    return data;
  };

  return data;
}

function _generalError() {
  const data = _interopRequireDefault(require("../../../error/general-error"));

  _generalError = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("../../../utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _chalkBox() {
  const data = require("../../chalk-box");

  _chalkBox = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

class Import {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'import [ids...]');
    (0, _defineProperty2().default)(this, "shortDescription", 'import components into your current working area');
    (0, _defineProperty2().default)(this, "group", 'collaborate');
    (0, _defineProperty2().default)(this, "description", `import components into your current workspace.
  https://${_constants().BASE_DOCS_DOMAIN}/components/importing-components
  ${(0, _constants().WILDCARD_HELP)('import')}`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['t', 'tester', 'import a tester environment component'], ['c', 'compiler', 'import a compiler environment component'], ['e', 'environment', 'install development environment dependencies (compiler and tester)'], ['p', 'path <path>', 'import components into a specific directory'], ['o', 'objects', "import components objects only, don't write the components to the file system. This is a default behavior for import with no id"], ['d', 'display-dependencies', 'display the imported dependencies'], ['O', 'override', 'override local changes'], ['v', 'verbose', 'showing verbose output for inspection'], ['j', 'json', 'return the output as JSON'], ['', 'ignore-dist', "skip writing the component's build files during import"], ['', 'conf', 'write the configuration file (component.json) of the component (harmony components only)'], ['', 'skip-npm-install', 'do not install packages of the imported components. (it automatically enables save-dependencies-as-components flag)'], ['', 'ignore-package-json', 'do not generate package.json for the imported component(s). (it automatically enables skip-npm-install and save-dependencies-as-components flags)'], ['m', 'merge [strategy]', 'merge local changes with the imported version. strategy should be "theirs", "ours" or "manual"'], ['', 'dependencies', 'EXPERIMENTAL. import all dependencies and write them to the workspace'], ['', 'dependents', 'EXPERIMENTAL. import component dependents to allow auto-tag updating them upon tag'], ['', 'skip-lane', 'EXPERIMENTAL. when checked out to a lane, do not import the component into the lane, save it on main'], ['', 'all-history', 'relevant for fetching all components objects. avoid optimizations, fetch all history versions, always']]);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "remoteOp", true);
  }

  action([ids = []], {
    tester = false,
    compiler = false,
    path,
    objects = false,
    displayDependencies = false,
    environment = false,
    override = false,
    verbose = false,
    json = false,
    ignoreDist = false,
    conf,
    skipNpmInstall = false,
    ignorePackageJson = false,
    merge,
    skipLane = false,
    dependencies = false,
    dependents = false,
    allHistory = false
  }, packageManagerArgs) {
    if (tester && compiler) {
      throw new (_generalError().default)('you cant use tester and compiler flags combined');
    }

    if (objects && merge) {
      throw new (_generalError().default)('you cant use --objects and --merge flags combined');
    }

    if (override && merge) {
      throw new (_generalError().default)('you cant use --override and --merge flags combined');
    }

    let mergeStrategy;

    if (merge && (0, _is2().default)(String, merge)) {
      const options = Object.keys(_mergeVersion().MergeOptions);

      if (!options.includes(merge)) {
        throw new (_generalError().default)(`merge must be one of the following: ${options.join(', ')}`);
      }

      mergeStrategy = merge;
    }

    const environmentOptions = {
      tester,
      compiler
    };
    const importOptions = {
      ids,
      verbose,
      merge: !!merge,
      mergeStrategy,
      writeToPath: path,
      objectsOnly: objects,
      withEnvironments: environment,
      override,
      writeDists: !ignoreDist,
      writeConfig: !!conf,
      installNpmPackages: !skipNpmInstall,
      writePackageJson: !ignorePackageJson,
      skipLane,
      importDependenciesDirectly: dependencies,
      importDependents: dependents,
      allHistory
    };
    return (0, _consumer().importAction)(importOptions, packageManagerArgs, environmentOptions).then(importResults => _objectSpread({
      displayDependencies,
      json
    }, importResults));
  }

  report({
    dependencies,
    envComponents,
    importDetails,
    warnings,
    displayDependencies,
    json
  }) {
    if (json) {
      return JSON.stringify({
        importDetails,
        warnings
      }, null, 4);
    }

    let dependenciesOutput;
    let envComponentsOutput;

    if (dependencies && !(0, _isEmpty2().default)(dependencies)) {
      const components = dependencies.map((0, _prop2().default)('component'));
      const peerDependencies = (0, _flatten2().default)(dependencies.map((0, _prop2().default)('dependencies')), dependencies.map((0, _prop2().default)('devDependencies')));
      const title = components.length === 1 ? 'successfully imported one component' : `successfully imported ${components.length} components`;
      const componentDependencies = components.map(component => {
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const details = importDetails.find(c => c.id === component.id.toStringWithoutVersion()); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

        if (!details) throw new Error(`missing details of component ${component.id.toString()}`); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

        return (0, _chalkBox().formatPlainComponentItemWithVersions)(component, details);
      });
      const componentDependenciesOutput = [_chalk().default.green(title)].concat(componentDependencies).join('\n');
      const peerDependenciesOutput = peerDependencies && !(0, _isEmpty2().default)(peerDependencies) && displayDependencies ? (0, _utils().immutableUnshift)((0, _uniq2().default)(peerDependencies.map(_chalkBox().formatPlainComponentItem)), _chalk().default.green(`\n\nsuccessfully imported ${components.length} component dependencies`)).join('\n') : '';
      dependenciesOutput = componentDependenciesOutput + peerDependenciesOutput;
    }

    if (envComponents && !(0, _isEmpty2().default)(envComponents)) {
      envComponentsOutput = (0, _utils().immutableUnshift)( // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      envComponents.map(envDependency => (0, _chalkBox().formatPlainComponentItem)(envDependency.component)), _chalk().default.green('the following component environments were installed')).join('\n');
    }

    const getImportOutput = () => {
      if (dependenciesOutput && !envComponentsOutput) return dependenciesOutput;
      if (!dependenciesOutput && envComponentsOutput) return envComponentsOutput;

      if (dependenciesOutput && envComponentsOutput) {
        return `${dependenciesOutput}\n\n${envComponentsOutput}`;
      }

      return _chalk().default.yellow('nothing to import');
    };

    const logObject = obj => `> ${(0, _keys2().default)(obj)[0]}: ${(0, _values2().default)(obj)[0]}`;

    const getWarningOutput = () => {
      if (!warnings) return '';
      let output = '\n';

      if (!(0, _isEmpty2().default)(warnings.notInBoth)) {
        output += _chalk().default.red.underline('\nerror - missing the following package dependencies. please install and add to package.json.\n');
        output += _chalk().default.red(`${warnings.notInBoth.map(logObject).join('\n')}\n`);
      }

      if (!(0, _isEmpty2().default)(warnings.notInPackageJson)) {
        output += _chalk().default.yellow.underline('\nwarning - add the following packages to package.json\n');
        output += _chalk().default.yellow(`${warnings.notInPackageJson.map(logObject).join('\n')}\n`);
      }

      if (!(0, _isEmpty2().default)(warnings.notInNodeModules)) {
        output += _chalk().default.yellow.underline('\nwarning - following packages are not installed. please install them.\n');
        output += _chalk().default.yellow(`${warnings.notInNodeModules.map(logObject).join('\n')}\n`);
      }

      return output === '\n' ? '' : output;
    };

    return getImportOutput() + getWarningOutput();
  }

}

exports.default = Import;