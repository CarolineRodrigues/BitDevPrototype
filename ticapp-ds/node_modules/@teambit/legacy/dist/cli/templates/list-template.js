"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _semver() {
  const data = _interopRequireDefault(require("semver"));

  _semver = function () {
    return data;
  };

  return data;
}

function _cliTable() {
  const data = _interopRequireDefault(require("cli-table"));

  _cliTable = function () {
    return data;
  };

  return data;
}

var _default = (listScopeResults, json, showRemoteVersion) => {
  function tabulateComponent(listScopeResult) {
    const id = listScopeResult.id.toStringWithoutVersion();
    let version = listScopeResult.id.version || '<new>';

    if (!json && showRemoteVersion) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const color = listScopeResult.remoteVersion && _semver().default.gt(listScopeResult.remoteVersion, version) ? 'red' : null; // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

      version = color ? _chalk().default[color](version) : version;
    }

    const data = {
      id: _chalk().default.white(`${id}${listScopeResult.deprecated ? ' [Deprecated]' : ''}`),
      localVersion: version,
      currentVersion: listScopeResult.currentlyUsedVersion || 'N/A'
    };

    if (showRemoteVersion) {
      let remoteVersion = listScopeResult.remoteVersion || 'N/A';
      const color = // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      listScopeResult.remoteVersion && _semver().default.gt(listScopeResult.id.version, listScopeResult.remoteVersion) ? 'red' : null;
      remoteVersion = color ? _chalk().default[color](remoteVersion) : remoteVersion;
      data.remoteVersion = remoteVersion;
    }

    return data;
  }

  function toJsonComponent(listScopeResult) {
    const id = listScopeResult.id.toStringWithoutVersion();
    const version = listScopeResult.id.version;
    const data = {
      id,
      localVersion: version || '<new>',
      deprecated: listScopeResult.deprecated,
      currentVersion: listScopeResult.currentlyUsedVersion || 'N/A',
      remoteVersion: listScopeResult.remoteVersion || 'N/A'
    };
    return data;
  }

  if (json) {
    const jsonResults = listScopeResults.map(toJsonComponent);
    return JSON.stringify(jsonResults, null, 2);
  }

  const rows = listScopeResults.map(tabulateComponent);
  const head = ['component ID', 'latest in scope', 'used in workspace'];

  if (showRemoteVersion) {
    head.push('latest in remote scope');
  }

  const table = new (_cliTable().default)({
    head,
    style: {
      head: ['cyan']
    }
  });
  rows.map(row => table.push(Object.values(row)));
  return table.toString();
};

exports.default = _default;