{"version":3,"sources":["pubsub.ui.runtime.ts"],"names":["PubsubUI","EventEmitter2","topic","callback","events","on","unSub","off","event","propagate","emitEvent","pubToChild","iframe","connection","methods","pub","promise","then","childConnection","childApi","catch","err","console","error","destroy","emit","provider","uiUI","pubsubUI","reactContext","connect","connectToIframe","registerRenderHooks","UIRuntime","UIAspect","PubsubAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAWO,MAAMA,QAAN,CAAe;AAAA;AAAA;AAAA,oDAEH,KAAIC,6BAAJ,GAFG;AAAA,iDAOP,CAACC,KAAD,EAAgBC,QAAhB,KAAuC;AAClD,YAAMC,MAAM,GAAG,KAAKA,MAApB;AACAA,MAAAA,MAAM,CAACC,EAAP,CAAUH,KAAV,EAAiBC,QAAjB;;AAEA,YAAMG,KAAK,GAAG,MAAM;AAClBF,QAAAA,MAAM,CAACG,GAAP,CAAWL,KAAX,EAAkBC,QAAlB;AACD,OAFD;;AAIA,aAAOG,KAAP;AACD,KAhBmB;AAAA,iDAqBP,CAACJ,KAAD,EAAgBM,KAAhB,EAA0C;AAAEC,MAAAA;AAAF,QAA4B,EAAtE,KAA6E;AACxF,WAAKC,SAAL,CAAeR,KAAf,EAAsBM,KAAtB,EADwF,CAGxF;;AACA,UAAIC,SAAJ,EAAe;AACb,aAAKE,UAAL,CAAgBT,KAAhB,EAAuBM,KAAvB;AACD;AACF,KA5BmB;AAAA,6DA8BOI,MAAD,IAA+B;AACvD,YAAMC,UAAU,GAAG,8BAA6B;AAC9CD,QAAAA,MAD8C;AAE9CE,QAAAA,OAAO,EAAE;AACPC,UAAAA,GAAG,EAAE,KAAKL;AADH;AAFqC,OAA7B,CAAnB;AAOAG,MAAAA,UAAU,CAACG,OAAX,CACGC,IADH,CACSC,eAAD,IAAsB,KAAKC,QAAL,GAAgBD,eAD9C,EAEGE,KAFH,CAEUC,GAAD,IAAS;AACd;AACAC,QAAAA,OAAO,CAACC,KAAR,CAAc,aAAd,EAA6B,oCAA7B,EAAmEF,GAAnE;AACD,OALH;;AAOA,YAAMG,OAAO,GAAG,MAAM;AACpBX,QAAAA,UAAU,IAAIA,UAAU,CAACW,OAAX,EAAd;AACD,OAFD;;AAGA,aAAOA,OAAP;AACD,KAjDmB;AAAA,uDAsDA,CAACtB,KAAD,EAAgBM,KAAhB,KAA6C;AAC/D,WAAKJ,MAAL,CAAYqB,IAAZ,CAAiBvB,KAAjB,EAAwBM,KAAxB;AACD,KAxDmB;AAAA,wDA6DC,CAACN,KAAD,EAAgBM,KAAhB,KAA6C;AAAA;;AAChE,+BAAO,KAAKW,QAAZ,mDAAO,eAAeJ,GAAf,CAAmBb,KAAnB,EAA0BM,KAA1B,CAAP;AACD,KA/DmB;AAAA;;AAoEC,eAARkB,QAAQ,CAAC,CAACC,IAAD,CAAD,EAAiB;AACpC,UAAMC,QAAQ,GAAG,IAAI5B,QAAJ,EAAjB;AAEA,UAAM6B,YAAY,GAAG,qCAAe;AAClCC,MAAAA,OAAO,EAAEF,QAAQ,CAACG;AADgB,KAAf,CAArB;AAIAJ,IAAAA,IAAI,CAACK,mBAAL,CAAyB;AAAEH,MAAAA;AAAF,KAAzB;AAEA,WAAOD,QAAP;AACD;;AA9EmB;;;gCAAT5B,Q,aAiEMiC,e;gCAjENjC,Q,kBAkEW,CAACkC,cAAD,C;;AAexBC,uBAAaC,UAAb,CAAwBpC,QAAxB","sourcesContent":["import { UIRuntime, UIAspect, UiUI } from '@teambit/ui';\nimport { EventEmitter2 } from 'eventemitter2';\nimport { connectToChild } from 'penpal';\nimport type { AsyncMethodReturns } from 'penpal/lib/types';\nimport { BitBaseEvent } from './bit-base-event';\nimport { PubsubAspect } from './pubsub.aspect';\nimport { createProvider } from './pubsub-context';\nimport { Callback } from './types';\n\ntype PubOptions = {\n  /** forward the event to adjacent windows (including the preview iframe)  */\n  propagate?: boolean;\n};\n\ntype ChildMethods = {\n  pub: (topic: string, event: BitBaseEvent<any>) => any;\n};\nexport class PubsubUI {\n  private childApi?: AsyncMethodReturns<ChildMethods>;\n  private events = new EventEmitter2();\n\n  /**\n   * subscribe to events\n   */\n  public sub = (topic: string, callback: Callback) => {\n    const events = this.events;\n    events.on(topic, callback);\n\n    const unSub = () => {\n      events.off(topic, callback);\n    };\n\n    return unSub;\n  };\n\n  /**\n   * publish event to all subscribers, including nested iframes.\n   */\n  public pub = (topic: string, event: BitBaseEvent<any>, { propagate }: PubOptions = {}) => {\n    this.emitEvent(topic, event);\n\n    // opt-in to forward to iframe, as we would not want 'private' messages automatically passing to iframe\n    if (propagate) {\n      this.pubToChild(topic, event);\n    }\n  };\n\n  private connectToIframe = (iframe: HTMLIFrameElement) => {\n    const connection = connectToChild<ChildMethods>({\n      iframe,\n      methods: {\n        pub: this.emitEvent,\n      },\n    });\n\n    connection.promise\n      .then((childConnection) => (this.childApi = childConnection))\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error('[Pubsub.ui]', 'failed connecting to child iframe:', err);\n      });\n\n    const destroy = () => {\n      connection && connection.destroy();\n    };\n    return destroy;\n  };\n\n  /**\n   * publish event to all subscribers in this window\n   */\n  private emitEvent = (topic: string, event: BitBaseEvent<any>) => {\n    this.events.emit(topic, event);\n  };\n\n  /**\n   * publish event to nested iframes\n   */\n  private pubToChild = (topic: string, event: BitBaseEvent<any>) => {\n    return this.childApi?.pub(topic, event);\n  };\n\n  static runtime = UIRuntime;\n  static dependencies = [UIAspect];\n\n  static async provider([uiUI]: [UiUI]) {\n    const pubsubUI = new PubsubUI();\n\n    const reactContext = createProvider({\n      connect: pubsubUI.connectToIframe,\n    });\n\n    uiUI.registerRenderHooks({ reactContext });\n\n    return pubsubUI;\n  }\n}\n\nPubsubAspect.addRuntime(PubsubUI);\n"]}