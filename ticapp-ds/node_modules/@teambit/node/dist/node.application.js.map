{"version":3,"sources":["node.application.ts"],"names":["NodeApp","constructor","name","entry","portRange","nodeEnv","logger","deploy","run","child","error","stdout","on","data","console","toString","build","base","distDir","getCompiler"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOO,MAAMA,OAAN,CAAqC;AAC1CC,EAAAA,WAAW,CACAC,IADA,EAEAC,KAFA,EAGAC,SAHA,EAIAC,OAJA,EAKAC,MALA,EAMAC,MANA,EAOT;AAAA,SANSL,IAMT,GANSA,IAMT;AAAA,SALSC,KAKT,GALSA,KAKT;AAAA,SAJSC,SAIT,GAJSA,SAIT;AAAA,SAHSC,OAGT,GAHSA,OAGT;AAAA,SAFSC,MAET,GAFSA,MAET;AAAA,SADSC,MACT,GADSA,MACT;AAAA,6DAEgB,MAFhB;AAAE;;AAIK,QAAHC,GAAG,GAAkB;AAAA;;AACzB,UAAMF,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMG,KAAK,GAAG,+BAAS,MAAT,EAAiB,CAAC,KAAKN,KAAN,CAAjB,EAAgCO,KAAD,IAAW;AACtD,UAAIA,KAAJ,EAAW;AACT,cAAMA,KAAN;AACD;AACF,KAJa,CAAd;AAKA,qBAAAD,KAAK,CAACE,MAAN,gEAAcC,EAAd,CAAiB,MAAjB,EAAyB,UAAUC,IAAV,EAAgB;AACvCP,MAAAA,MAAM,CAACQ,OAAP,CAAeD,IAAI,CAACE,QAAL,EAAf;AACD,KAFD;AAGD;;AAEU,QAALC,KAAK,GAA2B;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAW,mBAAM,KAAKd,KAAX,CAAjB;AACA,UAAM;AAAEe,MAAAA;AAAF,QAAc,KAAKb,OAAL,CAAac,WAAb,EAApB;AACA,UAAMhB,KAAK,GAAG,kBAAKe,OAAL,EAAcD,IAAd,CAAd;AACA,WAAO;AAAEd,MAAAA;AAAF,KAAP;AACD;;AA7ByC","sourcesContent":["import { execFile } from 'child_process';\nimport { parse, join } from 'path';\nimport { Logger } from '@teambit/logger';\nimport { ReactEnv } from '@teambit/react';\nimport { Application, DeployFn } from '@teambit/application';\nimport { NodeEnv } from './node.env';\nimport { DeployContext } from './node-app-options';\n\nexport class NodeApp implements Application {\n  constructor(\n    readonly name: string,\n    readonly entry: string,\n    readonly portRange: number[],\n    readonly nodeEnv: NodeEnv & ReactEnv,\n    readonly logger: Logger,\n    readonly deploy?: DeployFn\n  ) {}\n\n  applicationType = 'node';\n\n  async run(): Promise<void> {\n    const logger = this.logger;\n    const child = execFile('node', [this.entry], (error) => {\n      if (error) {\n        throw error;\n      }\n    });\n    child.stdout?.on('data', function (data) {\n      logger.console(data.toString());\n    });\n  }\n\n  async build(): Promise<DeployContext> {\n    const { base } = parse(this.entry);\n    const { distDir } = this.nodeEnv.getCompiler();\n    const entry = join(distDir, base);\n    return { entry };\n  }\n}\n"]}