{"version":3,"sources":["worker.main.runtime.ts"],"names":["WorkerMain","constructor","workerSlot","componentAspect","pkg","workerNameSlot","listWorkers","values","declareWorker","name","path","register","maybeAspectId","toArray","find","workerName","Error","scriptPath","systemWorker","HarmonyWorker","resolveWorkerScript","aspectId","host","getHost","id","resolveComponentId","component","get","packageName","getPackageName","require","resolve","getWorker","provider","config","MainRuntime","Slot","withType","ComponentAspect","PkgAspect","WorkerAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMO,MAAMA,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CACDC,UADC,EAEDC,eAFC,EAGDC,GAHC,EAIDC,cAJC,EAKT;AAAA,SAJQH,UAIR,GAJQA,UAIR;AAAA,SAHQC,eAGR,GAHQA,eAGR;AAAA,SAFQC,GAER,GAFQA,GAER;AAAA,SADQC,cACR,GADQA,cACR;AAAE;;AAIJC,EAAAA,WAAW,GAAyB;AAClC,WAAO,KAAKJ,UAAL,CAAgBK,MAAhB,EAAP;AACD;AAED;AACF;AACA;;;AACqB,QAAbC,aAAa,CAAIC,IAAJ,EAAkBC,IAAlB,EAA2D;AAC5E,SAAKL,cAAL,CAAoBM,QAApB,CAA6BF,IAA7B;AAEA,UAAMG,aAAa,GAAG,KAAKP,cAAL,CAAoBQ,OAApB,GAA8BC,IAA9B,CAAmC,CAAC,GAAGC,UAAH,CAAD,KAAoB;AAC3E,aAAOA,UAAU,KAAKN,IAAtB;AACD,KAFqB,CAAtB;AAIA,QAAI,CAACG,aAAL,EAAoB,MAAM,IAAII,KAAJ,CAAW,6BAA4BP,IAAK,EAA5C,CAAN,CAPwD,CAQ5E;;AACA,UAAMQ,UAAU,GAAGP,IAAnB;AACA,UAAMQ,YAAY,GAAG,KAAIC,8BAAJ,EAAqBV,IAArB,EAA2BQ,UAA3B,CAArB;AACA,SAAKf,UAAL,CAAgBS,QAAhB,CAAyBO,YAAzB;AAEA,WAAOA,YAAP;AACD;;AAEgC,QAAnBE,mBAAmB,CAACX,IAAD,EAAeY,QAAf,EAAkD;AACjF,UAAMC,IAAI,GAAG,KAAKnB,eAAL,CAAqBoB,OAArB,EAAb;AACA,UAAMC,EAAE,GAAG,MAAMF,IAAI,CAACG,kBAAL,CAAwBJ,QAAxB,CAAjB;AACA,UAAMK,SAAS,GAAG,MAAMJ,IAAI,CAACK,GAAL,CAASH,EAAT,CAAxB;AACA,QAAI,CAACE,SAAL,EAAgB,MAAM,IAAIV,KAAJ,CAAW,uDAAsDK,QAAS,EAA1E,CAAN;AAChB,UAAMO,WAAW,GAAG,KAAKxB,GAAL,CAASyB,cAAT,CAAwBH,SAAxB,CAApB,CALiF,CAMjF;AACA;;AACA,WAAOI,OAAO,CAACC,OAAR,CAAgB,kBAAKH,WAAL,EAAkB,MAAlB,EAA2B,GAAEnB,IAAK,YAAlC,CAAhB,CAAP;AACD;;AAEDuB,EAAAA,SAAS,CAAIR,EAAJ,EAAkC;AACzC,WAAO,KAAKtB,UAAL,CAAgByB,GAAhB,CAAoBH,EAApB,CAAP;AACD;;AAMoB,eAARS,QAAQ,CACnB,CAAC9B,eAAD,EAAkBC,GAAlB,CADmB,EAEnB8B,MAFmB,EAGnB,CAAChC,UAAD,EAAaG,cAAb,CAHmB,EAInB;AACA,WAAO,IAAIL,UAAJ,CAAeE,UAAf,EAA2BC,eAA3B,EAA4CC,GAA5C,EAAiDC,cAAjD,CAAP;AACD;;AA1DqB;;;gCAAXL,U,aAQMmC,kB;gCARNnC,U,WAgDI,CAACoC,gBAAKC,QAAL,EAAD,EAA0CD,gBAAKC,QAAL,EAA1C,C;gCAhDJrC,U,kBAkDW,CAACsC,4BAAD,EAAkBC,gBAAlB,C;;AAWxBC,uBAAaC,UAAb,CAAwBzC,UAAxB","sourcesContent":["import { join } from 'path';\nimport { MainRuntime } from '@teambit/cli';\nimport { ComponentAspect, ComponentMain } from '@teambit/component';\nimport { PkgAspect, PkgMain } from '@teambit/pkg';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { WorkerAspect } from './worker.aspect';\nimport { HarmonyWorker } from './harmony-worker';\n\nexport type WorkerSlot = SlotRegistry<HarmonyWorker<unknown>>;\n\nexport type WorkerNameSlot = SlotRegistry<string>;\n\nexport class WorkerMain {\n  constructor(\n    private workerSlot: WorkerSlot,\n    private componentAspect: ComponentMain,\n    private pkg: PkgMain,\n    private workerNameSlot: WorkerNameSlot\n  ) {}\n\n  static runtime = MainRuntime;\n\n  listWorkers(): HarmonyWorker<any>[] {\n    return this.workerSlot.values();\n  }\n\n  /**\n   * create a new worker.\n   */\n  async declareWorker<T>(name: string, path: string): Promise<HarmonyWorker<T>> {\n    this.workerNameSlot.register(name);\n\n    const maybeAspectId = this.workerNameSlot.toArray().find(([, workerName]) => {\n      return workerName === name;\n    });\n\n    if (!maybeAspectId) throw new Error(`could not create a worker ${name}`);\n    // const scriptPath = path || await this.resolveWorkerScript(name, aspectId);\n    const scriptPath = path;\n    const systemWorker = new HarmonyWorker<T>(name, scriptPath);\n    this.workerSlot.register(systemWorker);\n\n    return systemWorker;\n  }\n\n  private async resolveWorkerScript(name: string, aspectId: string): Promise<string> {\n    const host = this.componentAspect.getHost();\n    const id = await host.resolveComponentId(aspectId);\n    const component = await host.get(id);\n    if (!component) throw new Error(`[worker] could not resolve component for aspect ID: ${aspectId}`);\n    const packageName = this.pkg.getPackageName(component);\n    // const workerFile = component.state.filesystem.files.find((file) => file.relative.includes(`${name}.worker`));\n    // if (!workerFile) throw new Error(`[worker] aspect declaring a worker must contain a ${name}.worker. file`);\n    return require.resolve(join(packageName, 'dist', `${name}.worker.js`));\n  }\n\n  getWorker<T>(id: string): HarmonyWorker<T> {\n    return this.workerSlot.get(id) as HarmonyWorker<T>;\n  }\n\n  static slots = [Slot.withType<HarmonyWorker<unknown>>(), Slot.withType<string>()];\n\n  static dependencies = [ComponentAspect, PkgAspect];\n\n  static async provider(\n    [componentAspect, pkg]: [ComponentMain, PkgMain],\n    config,\n    [workerSlot, workerNameSlot]: [WorkerSlot, WorkerNameSlot]\n  ) {\n    return new WorkerMain(workerSlot, componentAspect, pkg, workerNameSlot);\n  }\n}\n\nWorkerAspect.addRuntime(WorkerMain);\n"]}