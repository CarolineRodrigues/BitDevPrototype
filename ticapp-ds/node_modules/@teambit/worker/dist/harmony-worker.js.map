{"version":3,"sources":["harmony-worker.ts"],"names":["HarmonyWorker","constructor","name","workerPath","stdout","worker","stderr","stdin","getOptions","targetOptions","defaultOptions","Object","assign","initiate","options","Worker","remoteWorker","get","terminate"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAHA;AA0BO,MAAMA,aAAN,CAAuB;AAC5BC,EAAAA,WAAW,CAAUC,IAAV,EAAiCC,UAAjC,EAAqD;AAAA,SAA3CD,IAA2C,GAA3CA,IAA2C;AAAA,SAApBC,UAAoB,GAApBA,UAAoB;AAAA;AAAA;AAAE;;AAMxD,MAANC,MAAM,GAAG;AAAA;;AACX,2BAAO,KAAKC,MAAZ,iDAAO,aAAaD,MAApB;AACD;;AAES,MAANE,MAAM,GAAG;AAAA;;AACX,4BAAO,KAAKD,MAAZ,kDAAO,cAAaC,MAApB;AACD;;AAEQ,MAALC,KAAK,GAAG;AAAA;;AACV,4BAAO,KAAKF,MAAZ,kDAAO,cAAaE,KAApB;AACD;;AAEOC,EAAAA,UAAU,CAACC,aAAD,EAAsC;AACtD,UAAMC,cAAc,GAAG;AACrBN,MAAAA,MAAM,EAAE,IADa;AAErBE,MAAAA,MAAM,EAAE,IAFa;AAGrBC,MAAAA,KAAK,EAAE;AAHc,KAAvB;AAMA,WAAOI,MAAM,CAACC,MAAP,CAAcF,cAAd,EAA8BD,aAA9B,CAAP;AACD;;AAEDI,EAAAA,QAAQ,CAACC,OAAD,EAA2C;AACjD,UAAMT,MAAM,GAAG,KAAIU,wBAAJ,EAAW,KAAKZ,UAAhB,EAA4B,KAAKK,UAAL,CAAgBM,OAAhB,CAA5B,CAAf;AACA,SAAKT,MAAL,GAAcA,MAAd;AACA,UAAMW,YAAY,GAAG,qBAAQ,6BAAaX,MAAb,CAAR,CAArB;AACA,SAAKW,YAAL,GAAoBA,YAApB;AACA,WAAOA,YAAP;AACD;;AAEDC,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKD,YAAZ;AACD;;AAEc,QAATE,SAAS,GAAG;AAChB,QAAI,CAAC,KAAKb,MAAV,EAAkB;AAClB,UAAM,KAAKA,MAAL,CAAYa,SAAZ,EAAN;AACD;;AA5C2B","sourcesContent":["// eslint-disable-next-line import/no-unresolved\nimport { Worker } from 'worker_threads';\nimport { wrap, Remote } from 'comlink';\nimport nodeEndpoint from './node-endpoint';\n\nexport type InitOptions = {\n  /**\n   * Determines whether stdout should be piped into the parent process.\n   * If this is set to true, then worker.stdout is NOT automatically piped through to process.stdout in the parent.\n   */\n  stdout: boolean;\n\n  /**\n   * Determines whether stderr should be piped into the parent process.\n   * If this is set to true, then worker.stderr is NOT automatically piped through to process.stderr in the parent.\n   */\n  stderr: boolean;\n\n  /**\n   * Determines whether stdin should be piped into the parent process.\n   * If this is set to true, then worker.stdin provides a writable stream whose contents appear as process.stdin inside\n   * the Worker. By default, no data is provided.\n   */\n  stdin: boolean;\n};\n\nexport class HarmonyWorker<T> {\n  constructor(readonly name: string, readonly workerPath: string) {}\n\n  private remoteWorker: undefined | Remote<T>;\n\n  private worker: Worker | undefined;\n\n  get stdout() {\n    return this.worker?.stdout;\n  }\n\n  get stderr() {\n    return this.worker?.stderr;\n  }\n\n  get stdin() {\n    return this.worker?.stdin;\n  }\n\n  private getOptions(targetOptions: Partial<InitOptions>) {\n    const defaultOptions = {\n      stdout: true,\n      stderr: true,\n      stdin: true,\n    };\n\n    return Object.assign(defaultOptions, targetOptions);\n  }\n\n  initiate(options: Partial<InitOptions>): Remote<T> {\n    const worker = new Worker(this.workerPath, this.getOptions(options));\n    this.worker = worker;\n    const remoteWorker = wrap<T>(nodeEndpoint(worker));\n    this.remoteWorker = remoteWorker;\n    return remoteWorker;\n  }\n\n  get() {\n    return this.remoteWorker;\n  }\n\n  async terminate() {\n    if (!this.worker) return;\n    await this.worker.terminate();\n  }\n}\n"]}