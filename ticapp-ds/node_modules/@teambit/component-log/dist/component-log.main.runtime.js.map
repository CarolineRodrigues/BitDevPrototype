{"version":3,"sources":["component-log.main.runtime.ts"],"names":["ComponentLogMain","constructor","workspace","getLogs","id","isRemote","shortHash","consumer","bitId","BitId","parse","remote","scope","log","ConsumerNotFound","componentId","resolveComponentId","logs","forEach","date","Date","parseInt","toLocaleString","undefined","getLogsWithParents","graph","sorted","toposort","map","node","stringifyLogInfoOneLine","attr","logInfo","parents","length","join","chalk","yellow","hash","username","message","provider","cli","community","componentLog","register","LogCmd","getDocsDomain","CLIAspect","WorkspaceAspect","CommunityAspect","MainRuntime","ComponentLogAspect","addRuntime"],"mappings":"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","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { CommunityAspect } from '@teambit/community';\nimport type { CommunityMain } from '@teambit/community';\n\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport chalk from 'chalk';\nimport getRemoteByName from '@teambit/legacy/dist/remotes/get-remote-by-name';\nimport { ComponentLogAspect } from './component-log.aspect';\nimport LogCmd from './log-cmd';\nimport { buildSnapGraph } from './snap-graph';\n\nexport class ComponentLogMain {\n  constructor(private workspace: Workspace | undefined) {}\n\n  async getLogs(id: string, isRemote: boolean, shortHash = false) {\n    if (isRemote) {\n      const consumer = this.workspace?.consumer;\n      const bitId: BitId = BitId.parse(id, true);\n      const remote = await getRemoteByName(bitId.scope as string, consumer);\n      return remote.log(bitId);\n    }\n    if (!this.workspace) throw new ConsumerNotFound();\n    const componentId = await this.workspace.resolveComponentId(id);\n    const logs = await this.workspace.scope.getLogs(componentId, shortHash);\n    logs.forEach((log) => {\n      log.date = log.date ? new Date(parseInt(log.date)).toLocaleString() : undefined;\n    });\n    return logs;\n  }\n\n  async getLogsWithParents(id: string) {\n    const logs = await this.getLogs(id, false, true);\n    const graph = buildSnapGraph(logs);\n    const sorted = graph.toposort();\n    return sorted.map((node) => this.stringifyLogInfoOneLine(node.attr));\n  }\n\n  private stringifyLogInfoOneLine(logInfo: ComponentLogInfo) {\n    const parents = logInfo.parents.length ? `Parent(s): ${logInfo.parents.join(', ')}` : '<N/A>';\n    return `${chalk.yellow(logInfo.hash)} ${logInfo.username || ''} ${logInfo.date || ''} ${\n      logInfo.message\n    }, ${parents}`;\n  }\n\n  static slots = [];\n  static dependencies = [CLIAspect, WorkspaceAspect, CommunityAspect];\n  static runtime = MainRuntime;\n  static async provider([cli, workspace, community]: [CLIMain, Workspace, CommunityMain]) {\n    const componentLog = new ComponentLogMain(workspace);\n    cli.register(new LogCmd(componentLog, community.getDocsDomain()));\n    return componentLog;\n  }\n}\n\nComponentLogAspect.addRuntime(ComponentLogMain);\n\nexport type ComponentLogInfo = {\n  hash: string;\n  message: string;\n  onLane?: boolean;\n  parents: string[];\n  username?: string;\n  email?: string;\n  date?: string;\n  tag?: string;\n};\n"]}