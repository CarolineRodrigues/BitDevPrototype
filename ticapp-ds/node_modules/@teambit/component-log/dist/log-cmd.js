"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalkBox() {
  const data = require("@teambit/legacy/dist/cli/chalk-box");

  _chalkBox = function () {
    return data;
  };

  return data;
}

class LogCmd {
  // should support log against remote
  constructor(componentLog, docsDomain) {
    this.componentLog = componentLog;
    (0, _defineProperty2().default)(this, "name", 'log <id>');
    (0, _defineProperty2().default)(this, "shortDescription", 'show components(s) version history');
    (0, _defineProperty2().default)(this, "description", void 0);
    (0, _defineProperty2().default)(this, "group", 'info');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", [['r', 'remote', 'show log of a remote component'], ['', 'parents', 'EXPERIMENTAL. show parents and lanes data']]);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "remoteOp", true);
    (0, _defineProperty2().default)(this, "skipWorkspace", true);
    this.description = `show components(s) tag history.\n  https://${docsDomain}/reference/cli-reference#log`;
  }

  async report([id], {
    remote = false,
    parents = false
  }) {
    if (parents) {
      const logs = await this.componentLog.getLogsWithParents(id);
      return logs.join('\n');
    }

    const logs = await this.componentLog.getLogs(id, remote);
    return logs.reverse().map(_chalkBox().paintLog).join('\n');
  }

}

exports.default = LogCmd;

//# sourceMappingURL=log-cmd.js.map