import ts, { Node } from 'typescript';
import { SchemaExtractor } from '@teambit/schema';
import { SchemaNode, SemanticSchema } from '@teambit/semantics.entities.semantic-schema';
import { Component } from '@teambit/component';
import { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';
import { TypescriptMain, SchemaTransformerSlot } from './typescript.main.runtime';
import { SchemaExtractorContext } from './schema-extractor-context';
export declare class TypeScriptExtractor implements SchemaExtractor {
    private tsconfig;
    private schemaTransformerSlot;
    private tsMain;
    private rootPath;
    constructor(tsconfig: any, schemaTransformerSlot: SchemaTransformerSlot, tsMain: TypescriptMain, rootPath: string);
    parseSourceFile(file: AbstractVinyl): ts.SourceFile;
    /**
     * extract a component schema.
     */
    extract(component: Component): Promise<SemanticSchema>;
    computeExportedIdentifiers(node: Node, context: SchemaExtractorContext): Promise<import("./export-identifier").ExportIdentifier[]>;
    private createContext;
    private tsserver;
    private getTsServer;
    computeSchema(node: Node, context: SchemaExtractorContext): Promise<SchemaNode | undefined>;
    /**
     * select the correct transformer for a node.
     */
    private getTransformer;
}
