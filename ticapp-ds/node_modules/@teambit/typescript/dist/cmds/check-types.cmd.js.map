{"version":3,"sources":["check-types.cmd.ts"],"names":["CheckTypesCmd","constructor","typescript","workspace","logger","report","userPattern","all","strict","ConsumerNotFound","components","getComponentsByUserInput","setStatusLine","length","files","getSupportedFilesForTsserver","initTsserverClientFromWorkspace","printTypeErrors","tsserver","getTsserverClient","Error","start","Date","now","getDiagnostic","end","msg","killTsServer","lastDiagnostics","code","data","chalk","red","green"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,MAAMA,aAAN,CAAuC;AAU5CC,EAAAA,WAAW,CAASC,UAAT,EAA6CC,SAA7C,EAA2EC,MAA3E,EAA2F;AAAA,SAAlFF,UAAkF,GAAlFA,UAAkF;AAAA,SAA9CC,SAA8C,GAA9CA,SAA8C;AAAA,SAAhBC,MAAgB,GAAhBA,MAAgB;AAAA,kDAT/F,uBAS+F;AAAA,yDARxF,wBAQwF;AAAA,mDAP9F,EAO8F;AAAA,mDAN9F,aAM8F;AAAA,qDAL5F,CACR,CAAC,GAAD,EAAM,KAAN,EAAa,2DAAb,CADQ,EAER,CAAC,EAAD,EAAK,QAAL,EAAe,wCAAf,CAFQ,CAK4F;AAAE;;AAE5F,QAANC,MAAM,CAAC,CAACC,WAAD,CAAD,EAA0B;AAAEC,IAAAA,GAAG,GAAG,KAAR;AAAeC,IAAAA,MAAM,GAAG;AAAxB,GAA1B,EAA8F;AACxG,QAAI,CAAC,KAAKL,SAAV,EAAqB,MAAM,KAAIM,8BAAJ,GAAN;AACrB,UAAMC,UAAU,GAAG,MAAM,KAAKP,SAAL,CAAeQ,wBAAf,CAAwCJ,GAAxC,EAA6CD,WAA7C,CAAzB;AACA,SAAKF,MAAL,CAAYQ,aAAZ,CAA2B,sBAAqBF,UAAU,CAACG,MAAO,aAAlE;AACA,UAAMC,KAAK,GAAG,KAAKZ,UAAL,CAAgBa,4BAAhB,CAA6CL,UAA7C,CAAd;AACA,UAAM,KAAKR,UAAL,CAAgBc,+BAAhB,CAAgD;AAAEC,MAAAA,eAAe,EAAE;AAAnB,KAAhD,EAA2EH,KAA3E,CAAN;AACA,UAAMI,QAAQ,GAAG,KAAKhB,UAAL,CAAgBiB,iBAAhB,EAAjB;AACA,QAAI,CAACD,QAAL,EAAe,MAAM,IAAIE,KAAJ,CAAW,0BAAX,CAAN;AACf,UAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;AACA,UAAML,QAAQ,CAACM,aAAT,CAAuBV,KAAvB,CAAN;AACA,UAAMW,GAAG,GAAGH,IAAI,CAACC,GAAL,KAAaF,KAAzB;AACA,UAAMK,GAAG,GAAI,4BAA2BD,GAAG,GAAG,IAAK,OAAnD;AACAP,IAAAA,QAAQ,CAACS,YAAT;;AACA,QAAIT,QAAQ,CAACU,eAAT,CAAyBf,MAA7B,EAAqC;AACnC,aAAO;AACLgB,QAAAA,IAAI,EAAErB,MAAM,GAAG,CAAH,GAAO,CADd;AAELsB,QAAAA,IAAI,EAAEC,iBAAMC,GAAN,CAAW,GAAEN,GAAI,qBAAoBR,QAAQ,CAACU,eAAT,CAAyBf,MAAO,SAArE;AAFD,OAAP;AAID;;AACD,WAAO;AACLgB,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,IAAI,EAAEC,iBAAME,KAAN,CAAa,GAAEP,GAAI,yBAAnB;AAFD,KAAP;AAID;;AAnC2C","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { Logger } from '@teambit/logger';\nimport { Workspace } from '@teambit/workspace';\nimport chalk from 'chalk';\nimport { TypescriptMain } from '../typescript.main.runtime';\n\nexport class CheckTypesCmd implements Command {\n  name = 'check-types [pattern]';\n  description = 'check typescript types';\n  alias = '';\n  group = 'development';\n  options = [\n    ['a', 'all', 'check-types for all components, not only modified and new'],\n    ['', 'strict', 'in case issues found, exit with code 1'],\n  ] as CommandOptions;\n\n  constructor(private typescript: TypescriptMain, private workspace: Workspace, private logger: Logger) {}\n\n  async report([userPattern]: [string], { all = false, strict = false }: { all: boolean; strict: boolean }) {\n    if (!this.workspace) throw new ConsumerNotFound();\n    const components = await this.workspace.getComponentsByUserInput(all, userPattern);\n    this.logger.setStatusLine(`checking types for ${components.length} components`);\n    const files = this.typescript.getSupportedFilesForTsserver(components);\n    await this.typescript.initTsserverClientFromWorkspace({ printTypeErrors: true }, files);\n    const tsserver = this.typescript.getTsserverClient();\n    if (!tsserver) throw new Error(`unable to start tsserver`);\n    const start = Date.now();\n    await tsserver.getDiagnostic(files);\n    const end = Date.now() - start;\n    const msg = `completed type checking (${end / 1000} sec)`;\n    tsserver.killTsServer();\n    if (tsserver.lastDiagnostics.length) {\n      return {\n        code: strict ? 1 : 0,\n        data: chalk.red(`${msg}. found errors in ${tsserver.lastDiagnostics.length} files.`),\n      };\n    }\n    return {\n      code: 0,\n      data: chalk.green(`${msg}. no errors were found.`),\n    };\n  }\n}\n"]}