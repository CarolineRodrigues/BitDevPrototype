{"version":3,"sources":["typescript.extractor.ts"],"names":["TypeScriptExtractor","constructor","tsconfig","schemaTransformerSlot","tsMain","rootPath","undefined","parseSourceFile","file","ts","createSourceFile","path","contents","toString","ScriptTarget","Latest","compilerOptions","extract","component","tsserver","getTsServer","mainFile","mainAst","context","createContext","exportNames","computeExportedIdentifiers","setExports","ExportList","computeSchema","SemanticSchema","from","node","transformer","getTransformer","getIdentifiers","TransformerNotFound","SchemaExtractorContext","getTsserverClient","initTsserverClient","transform","transformers","values","find","singleTransformer","predicate"],"mappings":"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","sourcesContent":["import ts, { Node } from 'typescript';\nimport { SchemaExtractor } from '@teambit/schema';\nimport { TsserverClient } from '@teambit/ts-server';\nimport { SchemaNode, SemanticSchema } from '@teambit/semantics.entities.semantic-schema';\nimport { Component } from '@teambit/component';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { flatten } from 'lodash';\nimport { TypescriptMain, SchemaTransformerSlot } from './typescript.main.runtime';\nimport { TransformerNotFound } from './exceptions';\nimport { SchemaExtractorContext } from './schema-extractor-context';\nimport { ExportList } from './export-list';\n\nexport class TypeScriptExtractor implements SchemaExtractor {\n  constructor(\n    private tsconfig: any,\n    private schemaTransformerSlot: SchemaTransformerSlot,\n    private tsMain: TypescriptMain,\n    private rootPath: string\n  ) {}\n\n  parseSourceFile(file: AbstractVinyl) {\n    return ts.createSourceFile(\n      file.path,\n      file.contents.toString('utf8'),\n      ts.ScriptTarget.Latest,\n      true,\n      this.tsconfig.compilerOptions\n    );\n  }\n\n  /**\n   * extract a component schema.\n   */\n  async extract(component: Component) {\n    const tsserver = await this.getTsServer();\n    const mainFile = component.mainFile;\n    const mainAst = this.parseSourceFile(mainFile);\n    const context = this.createContext(tsserver, component);\n    const exportNames = await this.computeExportedIdentifiers(mainAst, context);\n    context.setExports(new ExportList(exportNames));\n    await this.computeSchema(mainAst, context); // TODO: create the schema\n\n    return SemanticSchema.from({});\n  }\n\n  async computeExportedIdentifiers(node: Node, context: SchemaExtractorContext) {\n    const transformer = this.getTransformer(node, context.component);\n    if (!transformer || !transformer.getIdentifiers) throw new TransformerNotFound(node, context.component);\n    return transformer.getIdentifiers(node, context);\n  }\n\n  private createContext(tsserver: TsserverClient, component: Component): SchemaExtractorContext {\n    return new SchemaExtractorContext(tsserver, component, this);\n  }\n\n  private tsserver: TsserverClient | undefined = undefined;\n\n  private async getTsServer() {\n    if (!this.tsserver) {\n      const tsserver = this.tsMain.getTsserverClient();\n      if (tsserver) {\n        this.tsserver = tsserver;\n        return tsserver;\n      }\n\n      this.tsserver = await this.tsMain.initTsserverClient(this.rootPath);\n      return this.tsserver;\n    }\n\n    return this.tsserver;\n  }\n\n  async computeSchema(node: Node, context: SchemaExtractorContext): Promise<SchemaNode | undefined> {\n    const transformer = this.getTransformer(node, context.component);\n    if (!transformer) return undefined;\n    return transformer.transform(node, context);\n  }\n\n  /**\n   * select the correct transformer for a node.\n   */\n  private getTransformer(node: Node, component: Component) {\n    const transformers = flatten(this.schemaTransformerSlot.values());\n    const transformer = transformers.find((singleTransformer) => singleTransformer.predicate(node));\n\n    if (!transformer) throw new TransformerNotFound(node, component);\n\n    return transformer;\n  }\n}\n"]}