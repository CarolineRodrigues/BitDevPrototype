{"version":3,"sources":["typescript.compiler.ts"],"names":["TypescriptCompiler","constructor","id","logger","options","tsModule","distDir","distGlobPatterns","shouldCopyNonSupportedFiles","artifactName","tsconfig","compilerOptions","outDir","displayConfig","stringifyTsconfig","transpileFile","fileContent","isFileSupported","filePath","compilerOptionsFromTsconfig","convertCompilerOptionsFromJson","errors","length","formattedErrors","formatDiagnosticsWithColorAndContext","getFormatDiagnosticsHost","Error","sourceRoot","componentDir","rootDir","result","transpileModule","fileName","reportDiagnostics","diagnostics","formatHost","error","outputPath","replaceFileExtToJs","outputFiles","outputText","sourceMapText","push","preBuild","context","capsules","capsuleNetwork","seedersCapsules","capsuleDirs","map","capsule","path","writeTsConfig","writeTypes","writeNpmIgnore","build","componentsResults","runTscBuild","artifacts","getArtifactDefinition","postBuild","Promise","all","packageJson","PackageJsonFile","loadFromCapsuleSync","packageJsonObject","types","write","generatedBy","name","globPatterns","getDistPathBySrcPath","srcPath","fileWithJSExtIfNeeded","join","isJsAndCompile","compileJs","endsWith","isJsxAndCompile","compileJsx","network","capsulesRootDir","graphCapsules","getAllCapsuleDirs","getCanonicalFileName","p","getCurrentDirectory","getNewLine","sys","newLine","currentComponentResult","reportDiagnostic","diagnostic","errorStr","process","stdout","isTTY","formatDiagnostic","file","BitError","consoleFailure","component","reportSolutionBuilderStatus","diag","msg","messageText","debug","errorCounter","errorCount","info","host","createSolutionBuilderHost","undefined","writeProjectReferencesTsConfig","solutionBuilder","createSolutionBuilder","verbose","nextProject","longProcessLogger","createLongProcessLogger","getNextInvalidatedProject","capsulePath","project","replace","currentComponentId","getIdByPathInCapsule","logProgress","toString","getCapsule","startTime","Date","now","done","endTime","end","dirs","typePath","contents","fs","readFile","filename","basename","dir","pathExists","outputFile","NPM_IGNORE_FILE","npmIgnorePath","npmIgnoreEntriesStr","appendFile","projects","files","references","tsconfigStr","writeFile","JSON","stringify","fileExtension","extname","RegExp","version"],"mappings":"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","sourcesContent":["import { BuildContext, BuiltTaskResult, ComponentResult } from '@teambit/builder';\nimport { Compiler, TranspileFileParams, TranspileFileOutput } from '@teambit/compiler';\nimport { Network } from '@teambit/isolator';\nimport { Logger } from '@teambit/logger';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport ts from 'typescript';\nimport { BitError } from '@teambit/bit-error';\nimport PackageJsonFile from '@teambit/legacy/dist/consumer/component/package-json-file';\nimport { TypeScriptCompilerOptions } from './compiler-options';\n\nexport class TypescriptCompiler implements Compiler {\n  distDir: string;\n  distGlobPatterns: string[];\n  shouldCopyNonSupportedFiles: boolean;\n  artifactName: string;\n  constructor(\n    readonly id: string,\n    private logger: Logger,\n    private options: TypeScriptCompilerOptions,\n    private tsModule: typeof ts\n  ) {\n    this.distDir = options.distDir || 'dist';\n    this.distGlobPatterns = options.distGlobPatterns || [`${this.distDir}/**`, `!${this.distDir}/tsconfig.tsbuildinfo`];\n    this.shouldCopyNonSupportedFiles =\n      typeof options.shouldCopyNonSupportedFiles === 'boolean' ? options.shouldCopyNonSupportedFiles : true;\n    this.artifactName = options.artifactName || 'dist';\n    this.options.tsconfig ||= {};\n    this.options.tsconfig.compilerOptions ||= {};\n    // mutate the outDir, otherwise, on capsules, the dists might be written to a different directory and make confusion\n    this.options.tsconfig.compilerOptions.outDir = this.distDir;\n  }\n\n  displayName = 'TypeScript';\n  deleteDistDir = false;\n\n  displayConfig() {\n    return this.stringifyTsconfig(this.options.tsconfig);\n  }\n\n  /**\n   * compile one file on the workspace\n   */\n  transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput {\n    if (!this.isFileSupported(options.filePath)) {\n      return null; // file is not supported\n    }\n    const compilerOptionsFromTsconfig = this.tsModule.convertCompilerOptionsFromJson(\n      this.options.tsconfig.compilerOptions,\n      '.'\n    );\n    if (compilerOptionsFromTsconfig.errors.length) {\n      // :TODO @david replace to a more concrete error type and put in 'exceptions' directory here.\n      const formattedErrors = this.tsModule.formatDiagnosticsWithColorAndContext(\n        compilerOptionsFromTsconfig.errors,\n        this.getFormatDiagnosticsHost()\n      );\n      throw new Error(`failed parsing the tsconfig.json.\\n${formattedErrors}`);\n    }\n\n    const compilerOptions = compilerOptionsFromTsconfig.options;\n    compilerOptions.sourceRoot = options.componentDir;\n    compilerOptions.rootDir = '.';\n    const result = this.tsModule.transpileModule(fileContent, {\n      compilerOptions,\n      fileName: options.filePath,\n      reportDiagnostics: true,\n    });\n\n    if (result.diagnostics && result.diagnostics.length) {\n      const formatHost = this.getFormatDiagnosticsHost();\n      const error = this.tsModule.formatDiagnosticsWithColorAndContext(result.diagnostics, formatHost);\n\n      // :TODO @david please replace to a more concrete error type and put in 'exceptions' directory here.\n      throw new Error(error);\n    }\n\n    const outputPath = this.replaceFileExtToJs(options.filePath);\n    const outputFiles = [{ outputText: result.outputText, outputPath }];\n    if (result.sourceMapText) {\n      outputFiles.push({\n        outputText: result.sourceMapText,\n        outputPath: `${outputPath}.map`,\n      });\n    }\n    return outputFiles;\n  }\n\n  async preBuild(context: BuildContext) {\n    const capsules = context.capsuleNetwork.seedersCapsules;\n    const capsuleDirs = capsules.map((capsule) => capsule.path);\n    await this.writeTsConfig(capsuleDirs);\n    await this.writeTypes(capsuleDirs);\n    await this.writeNpmIgnore(capsuleDirs);\n  }\n\n  /**\n   * compile multiple components on the capsules\n   */\n  async build(context: BuildContext): Promise<BuiltTaskResult> {\n    const componentsResults = await this.runTscBuild(context.capsuleNetwork);\n\n    return {\n      artifacts: this.getArtifactDefinition(),\n      componentsResults,\n    };\n  }\n\n  async postBuild(context: BuildContext) {\n    await Promise.all(\n      context.capsuleNetwork.seedersCapsules.map(async (capsule) => {\n        const packageJson = PackageJsonFile.loadFromCapsuleSync(capsule.path);\n        // the types['index.ts'] is needed only during the build to avoid errors when tsc finds the\n        // same type once in the d.ts and once in the ts file.\n        if (packageJson.packageJsonObject.types) {\n          delete packageJson.packageJsonObject.types;\n          await packageJson.write();\n        }\n      })\n    );\n  }\n\n  getArtifactDefinition() {\n    return [\n      {\n        generatedBy: this.id,\n        name: this.artifactName,\n        globPatterns: this.distGlobPatterns,\n      },\n    ];\n  }\n\n  /**\n   * given a source file, return its parallel in the dists. e.g. index.ts => dist/index.js\n   */\n  getDistPathBySrcPath(srcPath: string) {\n    const fileWithJSExtIfNeeded = this.replaceFileExtToJs(srcPath);\n    return path.join(this.distDir, fileWithJSExtIfNeeded);\n  }\n\n  /**\n   * whether typescript is able to compile the given path\n   */\n  isFileSupported(filePath: string): boolean {\n    const isJsAndCompile = !!this.options.compileJs && filePath.endsWith('.js');\n    const isJsxAndCompile = !!this.options.compileJsx && filePath.endsWith('.jsx');\n    return (\n      (filePath.endsWith('.ts') || filePath.endsWith('.tsx') || isJsAndCompile || isJsxAndCompile) &&\n      !filePath.endsWith('.d.ts')\n    );\n  }\n\n  /**\n   * we have two options here:\n   * 1. pass all capsules-dir at the second parameter of createSolutionBuilder and then no\n   * need to write the main tsconfig.json with all the references.\n   * 2. write main tsconfig.json and pass the capsules root-dir.\n   * we went with option #2 because it'll be easier for users to go to the capsule-root and run\n   * `tsc --build` to debug issues.\n   */\n  private async runTscBuild(network: Network): Promise<ComponentResult[]> {\n    const rootDir = network.capsulesRootDir;\n    const capsules = network.graphCapsules;\n    const capsuleDirs = capsules.getAllCapsuleDirs();\n    const formatHost = {\n      getCanonicalFileName: (p) => p,\n      getCurrentDirectory: () => '', // it helps to get the files with absolute paths\n      getNewLine: () => this.tsModule.sys.newLine,\n    };\n    const componentsResults: ComponentResult[] = [];\n    let currentComponentResult: Partial<ComponentResult> = { errors: [] };\n    const reportDiagnostic = (diagnostic: ts.Diagnostic) => {\n      const errorStr = process.stdout.isTTY\n        ? this.tsModule.formatDiagnosticsWithColorAndContext([diagnostic], formatHost)\n        : this.tsModule.formatDiagnostic(diagnostic, formatHost);\n      if (!diagnostic.file) {\n        // the error is general and not related to a specific file. e.g. tsconfig is missing.\n        throw new BitError(errorStr);\n      }\n      this.logger.consoleFailure(errorStr);\n      if (!currentComponentResult.component || !currentComponentResult.errors) {\n        throw new Error(`currentComponentResult is not defined yet for ${diagnostic.file}`);\n      }\n      currentComponentResult.errors.push(errorStr);\n    };\n    // this only works when `verbose` is `true` in the `ts.createSolutionBuilder` function.\n    const reportSolutionBuilderStatus = (diag: ts.Diagnostic) => {\n      const msg = diag.messageText as string;\n      this.logger.debug(msg);\n    };\n    const errorCounter = (errorCount: number) => {\n      this.logger.info(`total error found: ${errorCount}`);\n    };\n    const host = this.tsModule.createSolutionBuilderHost(\n      undefined,\n      undefined,\n      reportDiagnostic,\n      reportSolutionBuilderStatus,\n      errorCounter\n    );\n    await this.writeProjectReferencesTsConfig(rootDir, capsuleDirs);\n    const solutionBuilder = this.tsModule.createSolutionBuilder(host, [rootDir], { verbose: true });\n    let nextProject;\n    const longProcessLogger = this.logger.createLongProcessLogger('compile typescript components', capsules.length);\n    // eslint-disable-next-line no-cond-assign\n    while ((nextProject = solutionBuilder.getNextInvalidatedProject())) {\n      // regex to make sure it will work correctly for both linux and windows\n      // it replaces both /tsconfig.json and \\tsocnfig.json\n      const capsulePath = nextProject.project.replace(/[/\\\\]tsconfig.json/, '');\n      const currentComponentId = capsules.getIdByPathInCapsule(capsulePath);\n      if (!currentComponentId) throw new Error(`unable to find component for ${capsulePath}`);\n      longProcessLogger.logProgress(currentComponentId.toString());\n      const capsule = capsules.getCapsule(currentComponentId);\n      if (!capsule) throw new Error(`unable to find capsule for ${currentComponentId.toString()}`);\n      currentComponentResult.component = capsule.component;\n      currentComponentResult.startTime = Date.now();\n      nextProject.done();\n      currentComponentResult.endTime = Date.now();\n      componentsResults.push({ ...currentComponentResult } as ComponentResult);\n      currentComponentResult = { errors: [] };\n    }\n    longProcessLogger.end();\n\n    return componentsResults;\n  }\n\n  private getFormatDiagnosticsHost(): ts.FormatDiagnosticsHost {\n    return {\n      getCanonicalFileName: (p) => p,\n      getCurrentDirectory: this.tsModule.sys.getCurrentDirectory,\n      getNewLine: () => this.tsModule.sys.newLine,\n    };\n  }\n\n  private async writeTypes(dirs: string[]) {\n    await Promise.all(\n      this.options.types.map(async (typePath) => {\n        const contents = await fs.readFile(typePath, 'utf8');\n        const filename = path.basename(typePath);\n\n        await Promise.all(\n          dirs.map(async (dir) => {\n            const filePath = path.join(dir, 'types', filename);\n            if (!(await fs.pathExists(filePath))) {\n              await fs.outputFile(filePath, contents);\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * when using project-references, typescript adds a file \"tsconfig.tsbuildinfo\" which is not\n   * needed for the package.\n   */\n  private async writeNpmIgnore(dirs: string[]) {\n    const NPM_IGNORE_FILE = '.npmignore';\n    await Promise.all(\n      dirs.map(async (dir) => {\n        const npmIgnorePath = path.join(dir, NPM_IGNORE_FILE);\n        const npmIgnoreEntriesStr = `\\n${this.distDir}/tsconfig.tsbuildinfo\\n`;\n        await fs.appendFile(npmIgnorePath, npmIgnoreEntriesStr);\n      })\n    );\n  }\n\n  private async writeProjectReferencesTsConfig(rootDir: string, projects: string[]) {\n    const files = [];\n    const references = projects.map((project) => ({ path: project }));\n    const tsconfig = { files, references };\n    const tsconfigStr = this.stringifyTsconfig(tsconfig);\n    await fs.writeFile(path.join(rootDir, 'tsconfig.json'), tsconfigStr);\n  }\n\n  private async writeTsConfig(dirs: string[]) {\n    const tsconfigStr = this.stringifyTsconfig(this.options.tsconfig);\n    await Promise.all(dirs.map((dir) => fs.writeFile(path.join(dir, 'tsconfig.json'), tsconfigStr)));\n  }\n\n  private stringifyTsconfig(tsconfig) {\n    return JSON.stringify(tsconfig, undefined, 2);\n  }\n\n  private replaceFileExtToJs(filePath: string): string {\n    if (!this.isFileSupported(filePath)) return filePath;\n    const fileExtension = path.extname(filePath);\n    return filePath.replace(new RegExp(`${fileExtension}$`), '.js'); // makes sure it's the last occurrence\n  }\n\n  version() {\n    return this.tsModule.version;\n  }\n}\n"]}