{"version":3,"sources":["export-declaration.ts"],"names":["ExportDeclaration","predicate","node","kind","SyntaxKind","getIdentifiers","exportDec","context","exportClause","ts","NamedExports","elements","map","elm","ExportIdentifier","name","getText","getSourceFile","fileName","NamespaceExport","moduleSpecifier","getFileExports","transform","exports","Promise","all","element","visitDefinition"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEO,MAAMA,iBAAN,CAAqD;AAC1DC,EAAAA,SAAS,CAACC,IAAD,EAAa;AACpB,WAAOA,IAAI,CAACC,IAAL,KAAcC,yBAAWJ,iBAAhC;AACD;;AAEmB,QAAdK,cAAc,CAACC,SAAD,EAAmCC,OAAnC,EAAoE;AAAA;;AACtF,QAAI,0BAAAD,SAAS,CAACE,YAAV,gFAAwBL,IAAxB,MAAiCM,sBAAGL,UAAH,CAAcM,YAAnD,EAAiE;AAC/DJ,MAAAA,SAAS,CAACE,YAAV;AACA,aAAOF,SAAS,CAACE,YAAV,CAAuBG,QAAvB,CAAgCC,GAAhC,CAAqCC,GAAD,IAAS;AAClD,eAAO,KAAIC,oCAAJ,EAAqBD,GAAG,CAACE,IAAJ,CAASC,OAAT,EAArB,EAAyCH,GAAG,CAACI,aAAJ,GAAoBC,QAA7D,CAAP;AACD,OAFM,CAAP;AAGD;;AAED,QAAI,2BAAAZ,SAAS,CAACE,YAAV,kFAAwBL,IAAxB,MAAiCM,sBAAGL,UAAH,CAAce,eAAnD,EAAoE;AAClE,aAAO,CAAC,KAAIL,oCAAJ,EAAqBR,SAAS,CAACE,YAAV,CAAuBO,IAAvB,CAA4BC,OAA5B,EAArB,EAA4DV,SAAS,CAACW,aAAV,GAA0BC,QAAtF,CAAD,CAAP;AACD;;AAED,QAAIZ,SAAS,CAACc,eAAd,EAA+B;AAC7B,aAAOb,OAAO,CAACc,cAAR,CAAuBf,SAAvB,CAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAEc,QAATgB,SAAS,CAACpB,IAAD,EAAaK,OAAb,EAA8C;AAC3D,UAAMD,SAAS,GAAGJ,IAAlB,CAD2D,CAE3D;;AACA,UAAMM,YAAY,GAAGF,SAAS,CAACE,YAA/B;;AACA,QAAI,CAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEL,IAAd,MAAuBC,yBAAWM,YAAtC,EAAoD;AAClDF,MAAAA,YAAY,CADsC,CAElD;;AACA,YAAMe,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CACpBjB,YAAY,CAACG,QAAb,CAAsBC,GAAtB,CAA0B,MAAOc,OAAP,IAAmB;AAC3C;AACA,cAAMnB,OAAO,CAACoB,eAAR,CAAwBD,OAAO,CAACX,IAAhC,CAAN;AACA,eAAOW,OAAO,CAACX,IAAf;AACD,OAJD,CADoB,CAAtB;AAQA,aAAO,EAAP,CAXkD,CAYlD;AACA;AACA;AACD;;AAED,WAAO,EAAP;AACD;;AA9CyD","sourcesContent":["import ts, { Node, SyntaxKind, ExportDeclaration as ExportDeclarationNode, NamedExports } from 'typescript';\nimport { SchemaExtractorContext } from '../schema-extractor-context';\nimport { SchemaTransformer } from '../schema-transformer';\nimport { ExportIdentifier } from '../export-identifier';\n\nexport class ExportDeclaration implements SchemaTransformer {\n  predicate(node: Node) {\n    return node.kind === SyntaxKind.ExportDeclaration;\n  }\n\n  async getIdentifiers(exportDec: ExportDeclarationNode, context: SchemaExtractorContext) {\n    if (exportDec.exportClause?.kind === ts.SyntaxKind.NamedExports) {\n      exportDec.exportClause as NamedExports;\n      return exportDec.exportClause.elements.map((elm) => {\n        return new ExportIdentifier(elm.name.getText(), elm.getSourceFile().fileName);\n      });\n    }\n\n    if (exportDec.exportClause?.kind === ts.SyntaxKind.NamespaceExport) {\n      return [new ExportIdentifier(exportDec.exportClause.name.getText(), exportDec.getSourceFile().fileName)];\n    }\n\n    if (exportDec.moduleSpecifier) {\n      return context.getFileExports(exportDec);\n    }\n\n    return [];\n  }\n\n  async transform(node: Node, context: SchemaExtractorContext) {\n    const exportDec = node as ExportDeclarationNode;\n    // sourceFile.sear\n    const exportClause = exportDec.exportClause;\n    if (exportClause?.kind === SyntaxKind.NamedExports) {\n      exportClause as NamedExports;\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const exports = await Promise.all(\n        exportClause.elements.map(async (element) => {\n          // const sig = await context.visitDefinition(element.name);\n          await context.visitDefinition(element.name);\n          return element.name;\n        })\n      );\n\n      return [];\n      // return exports.map((identifier) => {\n      //   // const type = context.resolveType(identifier);\n      // });\n    }\n\n    return {};\n  }\n}\n"]}