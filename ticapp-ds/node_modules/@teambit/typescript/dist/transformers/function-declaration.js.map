{"version":3,"sources":["function-declaration.ts"],"names":["FunctionDeclaration","predicate","node","kind","ts","SyntaxKind","getIdentifiers","funcDec","ExportIdentifier","getName","getSourceFile","fileName","name","getText","getArgs","context","Promise","all","parameters","map","param","type","resolveType","parseReturnValue","displayString","array","split","length","trim","transform","info","getQuickInfo","displaySig","body","returnTypeStr","args","returnType","FunctionSchema"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,mBAAN,CAAuD;AAC5DC,EAAAA,SAAS,CAACC,IAAD,EAAa;AACpB,WAAOA,IAAI,CAACC,IAAL,KAAcC,sBAAGC,UAAH,CAAcL,mBAAnC;AACD,GAH2D,CAK5D;;;AACoB,QAAdM,cAAc,CAACC,OAAD,EAAmC;AACrD,WAAO,CAAC,KAAIC,oCAAJ,EAAqB,KAAKC,OAAL,CAAaF,OAAb,CAArB,EAA4CA,OAAO,CAACG,aAAR,GAAwBC,QAApE,CAAD,CAAP;AACD;;AAEOF,EAAAA,OAAO,CAACF,OAAD,EAAmC;AAAA;;AAChD,WAAO,kBAAAA,OAAO,CAACK,IAAR,gEAAcC,OAAd,OAA2B,EAAlC;AACD;;AAEoB,QAAPC,OAAO,CAACP,OAAD,EAAmCQ,OAAnC,EAAoE;AACvF,WAAOC,OAAO,CAACC,GAAR,CACLV,OAAO,CAACW,UAAR,CAAmBC,GAAnB,CAAuB,MAAOC,KAAP,IAAiB;AACtC,YAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,aAAO;AACLT,QAAAA,IAAI,EAAEQ,KAAK,CAACR,IAAN,CAAWC,OAAX,EADD;AAEL;AACAQ,QAAAA,IAAI,EAAE,MAAMN,OAAO,CAACO,WAAR,CAAoBD,IAApB,EAA2B,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAER,OAAN,OAAmB,KAA9C;AAHP,OAAP;AAKD,KAPD,CADK,CAAP;AAUD;;AAEOU,EAAAA,gBAAgB,CAACC,aAAD,EAAyB;AAC/C,QAAI,CAACA,aAAL,EAAoB,OAAO,EAAP;AACpB,UAAMC,KAAK,GAAGD,aAAa,CAACE,KAAd,CAAoB,GAApB,CAAd;AACA,WAAOD,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAL,CAAwBC,IAAxB,EAAP;AACD;;AAEc,QAATC,SAAS,CAAC3B,IAAD,EAAaa,OAAb,EAAmE;AAAA;;AAChF,UAAMR,OAAO,GAAGL,IAAhB;AACA,UAAMU,IAAI,GAAG,KAAKH,OAAL,CAAaF,OAAb,CAAb,CAFgF,CAGhF;;AACA,UAAMuB,IAAI,GAAG,MAAMf,OAAO,CAACgB,YAAR,CAAqBxB,OAAO,CAACK,IAA7B,CAAnB;AACA,UAAMoB,UAAU,GAAGF,IAAH,aAAGA,IAAH,qCAAGA,IAAI,CAAEG,IAAT,+CAAG,WAAYT,aAA/B;AACA,UAAMU,aAAa,GAAG,KAAKX,gBAAL,CAAsBS,UAAtB,CAAtB,CANgF,CAOhF;;AACA,UAAMG,IAAI,GAAG,MAAM,KAAKrB,OAAL,CAAaP,OAAb,EAAsBQ,OAAtB,CAAnB,CARgF,CAShF;;AACA,UAAMqB,UAAU,GAAG,MAAMrB,OAAO,CAACO,WAAR,CAAoBf,OAAO,CAACK,IAA5B,EAAmCsB,aAAnC,CAAzB;AAEA,WAAO,KAAIG,mCAAJ,EAAmBzB,IAAI,IAAI,EAA3B,EAA+B,EAA/B,EAAmCwB,UAAnC,CAAP;AACD;;AA9C2D","sourcesContent":["import { SchemaNode, FunctionSchema } from '@teambit/semantics.entities.semantic-schema';\nimport ts, { Node, FunctionDeclaration as FunctionDeclarationNode } from 'typescript';\nimport { SchemaExtractorContext } from '../schema-extractor-context';\nimport { SchemaTransformer } from '../schema-transformer';\nimport { ExportIdentifier } from '../export-identifier';\n\nexport class FunctionDeclaration implements SchemaTransformer {\n  predicate(node: Node) {\n    return node.kind === ts.SyntaxKind.FunctionDeclaration;\n  }\n\n  // need to check for anonymous functions assigned for vars, const and let.\n  async getIdentifiers(funcDec: FunctionDeclarationNode) {\n    return [new ExportIdentifier(this.getName(funcDec), funcDec.getSourceFile().fileName)];\n  }\n\n  private getName(funcDec: FunctionDeclarationNode) {\n    return funcDec.name?.getText() || '';\n  }\n\n  private async getArgs(funcDec: FunctionDeclarationNode, context: SchemaExtractorContext) {\n    return Promise.all(\n      funcDec.parameters.map(async (param) => {\n        const type = param.type;\n        return {\n          name: param.name.getText(),\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          type: await context.resolveType(type!, type?.getText() || 'any'),\n        };\n      })\n    );\n  }\n\n  private parseReturnValue(displayString?: string) {\n    if (!displayString) return '';\n    const array = displayString.split(':');\n    return array[array.length - 1].trim();\n  }\n\n  async transform(node: Node, context: SchemaExtractorContext): Promise<SchemaNode> {\n    const funcDec = node as FunctionDeclarationNode;\n    const name = this.getName(funcDec);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const info = await context.getQuickInfo(funcDec.name!);\n    const displaySig = info?.body?.displayString;\n    const returnTypeStr = this.parseReturnValue(displaySig);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const args = await this.getArgs(funcDec, context);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const returnType = await context.resolveType(funcDec.name!, returnTypeStr);\n\n    return new FunctionSchema(name || '', [], returnType);\n  }\n}\n"]}