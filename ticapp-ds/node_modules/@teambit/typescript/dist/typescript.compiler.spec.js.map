{"version":3,"sources":["typescript.compiler.spec.ts"],"names":["defaultOpts","tsconfig","types","describe","it","tsCompiler","getTsCompiler","getDistPathBySrcPath","to","equal","path","join","isFileSupported","be","true","false","compileJsx","compileJs","opts","finalOpts","Object","assign","TypescriptCompiler","TypescriptAspect","id","Logger","ts"],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAGA,MAAMA,WAAW,GAAG;AAClBC,EAAAA,QAAQ,EAAE,EADQ;AAElBC,EAAAA,KAAK,EAAE;AAFW,CAApB;AAKAC,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnCA,EAAAA,QAAQ,CAAC,sBAAD,EAAyB,MAAM;AACrCC,IAAAA,EAAE,CAAC,gEAAD,EAAmE,MAAM;AACzE,YAAMC,UAAU,GAAGC,aAAa,EAAhC;AACA,0BAAOD,UAAU,CAACE,oBAAX,CAAgC,UAAhC,CAAP,EAAoDC,EAApD,CAAuDC,KAAvD,CAA6DC,gBAAKC,IAAL,CAAU,MAAV,EAAkB,UAAlB,CAA7D;AACA,0BAAON,UAAU,CAACE,oBAAX,CAAgC,WAAhC,CAAP,EAAqDC,EAArD,CAAwDC,KAAxD,CAA8DC,gBAAKC,IAAL,CAAU,MAAV,EAAkB,UAAlB,CAA9D;AACD,KAJC,CAAF;AAKAP,IAAAA,EAAE,CAAC,+DAAD,EAAkE,MAAM;AACxE,YAAMC,UAAU,GAAGC,aAAa,EAAhC;AACA,0BAAOD,UAAU,CAACE,oBAAX,CAAgC,WAAhC,CAAP,EAAqDC,EAArD,CAAwDC,KAAxD,CAA8DC,gBAAKC,IAAL,CAAU,MAAV,EAAkB,WAAlB,CAA9D;AACA,0BAAON,UAAU,CAACE,oBAAX,CAAgC,YAAhC,CAAP,EAAsDC,EAAtD,CAAyDC,KAAzD,CAA+DC,gBAAKC,IAAL,CAAU,MAAV,EAAkB,YAAlB,CAA/D;AACD,KAJC,CAAF;AAKD,GAXO,CAAR;AAYAR,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCC,IAAAA,EAAE,CAAC,0BAAD,EAA6B,MAAM;AACnC,YAAMC,UAAU,GAAGC,aAAa,EAAhC;AACA,0BAAOD,UAAU,CAACO,eAAX,CAA2B,UAA3B,CAAP,EAA+CJ,EAA/C,CAAkDK,EAAlD,CAAqDC,IAArD;AACD,KAHC,CAAF;AAIAV,IAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpC,YAAMC,UAAU,GAAGC,aAAa,EAAhC;AACA,0BAAOD,UAAU,CAACO,eAAX,CAA2B,WAA3B,CAAP,EAAgDJ,EAAhD,CAAmDK,EAAnD,CAAsDC,IAAtD;AACD,KAHC,CAAF;AAIAV,IAAAA,EAAE,CAAC,0CAAD,EAA6C,MAAM;AACnD,YAAMC,UAAU,GAAGC,aAAa,EAAhC;AACA,0BAAOD,UAAU,CAACO,eAAX,CAA2B,WAA3B,CAAP,EAAgDJ,EAAhD,CAAmDK,EAAnD,CAAsDE,KAAtD;AACD,KAHC,CAAF;AAIAX,IAAAA,EAAE,CAAC,yCAAD,EAA4C,MAAM;AAClD,YAAMC,UAAU,GAAGC,aAAa,EAAhC;AACA,0BAAOD,UAAU,CAACO,eAAX,CAA2B,UAA3B,CAAP,EAA+CJ,EAA/C,CAAkDK,EAAlD,CAAqDE,KAArD;AACD,KAHC,CAAF;AAIAX,IAAAA,EAAE,CAAC,mDAAD,EAAsD,MAAM;AAC5D,YAAMC,UAAU,GAAGC,aAAa;AAAGU,QAAAA,UAAU,EAAE;AAAf,SAAwBhB,WAAxB,EAAhC;AACA,0BAAOK,UAAU,CAACO,eAAX,CAA2B,WAA3B,CAAP,EAAgDJ,EAAhD,CAAmDK,EAAnD,CAAsDC,IAAtD;AACD,KAHC,CAAF;AAIAV,IAAAA,EAAE,CAAC,iDAAD,EAAoD,MAAM;AAC1D,YAAMC,UAAU,GAAGC,aAAa;AAAGW,QAAAA,SAAS,EAAE;AAAd,SAAuBjB,WAAvB,EAAhC;AACA,0BAAOK,UAAU,CAACO,eAAX,CAA2B,UAA3B,CAAP,EAA+CJ,EAA/C,CAAkDK,EAAlD,CAAqDC,IAArD;AACD,KAHC,CAAF;AAIAV,IAAAA,EAAE,CAAC,gCAAD,EAAmC,MAAM;AACzC,YAAMC,UAAU,GAAGC,aAAa,EAAhC;AACA,0BAAOD,UAAU,CAACO,eAAX,CAA2B,YAA3B,CAAP,EAAiDJ,EAAjD,CAAoDK,EAApD,CAAuDE,KAAvD;AACD,KAHC,CAAF;AAID,GA7BO,CAAR;AA8BD,CA3CO,CAAR;;AA6CA,SAAST,aAAT,CAAuBY,IAAsC,GAAGlB,WAAhE,EAA6E;AAC3E,QAAMmB,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,WAAlB,EAA+BkB,IAA/B,CAAlB;AACA,SAAO,KAAII,iCAAJ,EAAuBC,gCAAiBC,EAAxC,EAA4C,KAAIC,gBAAJ,EAAW,MAAX,CAA5C,EAAgEN,SAAhE,EAA2EO,qBAA3E,CAAP;AACD","sourcesContent":["import { Logger } from '@teambit/logger';\nimport ts from 'typescript';\nimport { expect } from 'chai';\nimport path from 'path';\nimport { TypescriptAspect } from './typescript.aspect';\n\nimport { TypescriptCompiler } from './typescript.compiler';\nimport type { TsCompilerOptionsWithoutTsConfig } from './compiler-options';\n\nconst defaultOpts = {\n  tsconfig: {},\n  types: [],\n};\n\ndescribe('TypescriptCompiler', () => {\n  describe('getDistPathBySrcPath', () => {\n    it('should replace the extension with .js and prepend the dist dir', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.getDistPathBySrcPath('index.ts')).to.equal(path.join('dist', 'index.js'));\n      expect(tsCompiler.getDistPathBySrcPath('index.tsx')).to.equal(path.join('dist', 'index.js'));\n    });\n    it('should not replace the extension if the file is not supported', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.getDistPathBySrcPath('style.css')).to.equal(path.join('dist', 'style.css'));\n      expect(tsCompiler.getDistPathBySrcPath('index.d.ts')).to.equal(path.join('dist', 'index.d.ts'));\n    });\n  });\n  describe('isFileSupported', () => {\n    it('should support .ts files', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.ts')).to.be.true;\n    });\n    it('should support .tsx files', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.tsx')).to.be.true;\n    });\n    it('should not support .jsx files by default', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.jsx')).to.be.false;\n    });\n    it('should not support .js files by default', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.js')).to.be.false;\n    });\n    it('should support .jsx files when passing compileJsx', () => {\n      const tsCompiler = getTsCompiler({ compileJsx: true, ...defaultOpts });\n      expect(tsCompiler.isFileSupported('index.jsx')).to.be.true;\n    });\n    it('should support .js files when passing compileJs', () => {\n      const tsCompiler = getTsCompiler({ compileJs: true, ...defaultOpts });\n      expect(tsCompiler.isFileSupported('index.js')).to.be.true;\n    });\n    it('should not support .d.ts files', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.d.ts')).to.be.false;\n    });\n  });\n});\n\nfunction getTsCompiler(opts: TsCompilerOptionsWithoutTsConfig = defaultOpts) {\n  const finalOpts = Object.assign({}, defaultOpts, opts);\n  return new TypescriptCompiler(TypescriptAspect.id, new Logger('test'), finalOpts, ts);\n}\n"]}