{"version":3,"sources":["typescript.main.runtime.ts"],"names":["TypescriptMain","constructor","logger","schemaTransformerSlot","workspace","createCompiler","options","transformers","tsModule","ts","configMutator","TypescriptConfigMutator","transformerContext","afterMutation","runTransformersWithContext","clone","TypescriptCompiler","TypescriptAspect","id","raw","getTsserverClient","tsServer","initTsserverClient","projectPath","files","TsserverClient","init","initTsserverClientFromWorkspace","Error","path","createSchemaExtractor","tsconfig","TypeScriptExtractor","getPackageJsonProps","main","types","getSupportedFilesForTsserver","components","map","c","filesystem","flat","f","filter","endsWith","onPreWatch","watchOpts","spawnTSServer","verbose","checkTypes","printTypeErrors","Boolean","onComponentChange","component","results","file","onFileChange","provider","schema","loggerExt","aspectLoader","cli","config","registerParser","TypeScriptParser","createLogger","registerPlugins","SchemaTransformerPlugin","tsMain","register","ExportDeclaration","FunctionDeclaration","VariableStatementTransformer","SourceFileTransformer","TypeAliasTransformer","registerOnPreWatch","bind","registerOnComponentChange","registerOnComponentAdd","checkTypesCmd","CheckTypesCmd","MainRuntime","SchemaAspect","LoggerAspect","AspectLoaderAspect","WorkspaceAspect","CLIAspect","Slot","withType","addRuntime","context","Array","isArray","newConfig","reduce","acc","transformer"],"mappings":"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","sourcesContent":["import ts from 'typescript';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Compiler } from '@teambit/compiler';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { SchemaAspect, SchemaExtractor, SchemaMain } from '@teambit/schema';\nimport { PackageJsonProps } from '@teambit/pkg';\nimport { TypescriptConfigMutator } from '@teambit/typescript.modules.ts-config-mutator';\nimport { WorkspaceAspect } from '@teambit/workspace';\nimport type { WatchOptions, Workspace } from '@teambit/workspace';\nimport pMapSeries from 'p-map-series';\nimport { TsserverClient, TsserverClientOpts } from '@teambit/ts-server';\nimport AspectLoaderAspect, { AspectLoaderMain } from '@teambit/aspect-loader';\nimport type { Component } from '@teambit/component';\nimport { TypeScriptExtractor } from './typescript.extractor';\nimport { TypeScriptCompilerOptions } from './compiler-options';\nimport { TypescriptAspect } from './typescript.aspect';\nimport { TypescriptCompiler } from './typescript.compiler';\nimport { TypeScriptParser } from './typescript.parser';\nimport { SchemaTransformer } from './schema-transformer';\nimport { SchemaTransformerPlugin } from './schema-transformer.plugin';\nimport {\n  ExportDeclaration,\n  TypeAliasTransformer,\n  FunctionDeclaration,\n  VariableStatementTransformer,\n  SourceFileTransformer,\n} from './transformers';\nimport { CheckTypesCmd } from './cmds/check-types.cmd';\n\nexport type TsMode = 'build' | 'dev';\n\nexport type SchemaTransformerSlot = SlotRegistry<SchemaTransformer[]>;\n\nexport type TsConfigTransformContext = {\n  // mode: TsMode;\n};\n\nexport type TsConfigTransformer = (\n  config: TypescriptConfigMutator,\n  context: TsConfigTransformContext\n) => TypescriptConfigMutator;\n\nexport class TypescriptMain {\n  constructor(\n    private logger: Logger,\n    private schemaTransformerSlot: SchemaTransformerSlot,\n    private workspace: Workspace\n  ) {}\n\n  private tsServer: TsserverClient;\n  /**\n   * create a new compiler.\n   */\n  createCompiler(\n    options: TypeScriptCompilerOptions,\n    transformers: TsConfigTransformer[] = [],\n    tsModule = ts\n  ): Compiler {\n    const configMutator = new TypescriptConfigMutator(options);\n    const transformerContext: TsConfigTransformContext = {};\n    const afterMutation = runTransformersWithContext(configMutator.clone(), transformers, transformerContext);\n    return new TypescriptCompiler(TypescriptAspect.id, this.logger, afterMutation.raw, tsModule);\n  }\n\n  /**\n   * get TsserverClient instance if initiated already, otherwise, return undefined.\n   */\n  getTsserverClient(): TsserverClient | undefined {\n    return this.tsServer;\n  }\n\n  /**\n   * starts a tsserver process to communicate with its API.\n   * @param projectPath absolute path of the project root directory\n   * @param options TsserverClientOpts\n   * @param files optionally, if check-types is enabled, provide files to open and type check.\n   * @returns TsserverClient\n   */\n  async initTsserverClient(\n    projectPath: string,\n    options: TsserverClientOpts = {},\n    files: string[] = []\n  ): Promise<TsserverClient> {\n    this.tsServer = new TsserverClient(projectPath, this.logger, options, files);\n    this.tsServer.init();\n    return this.tsServer;\n  }\n\n  /**\n   * starts a tsserver process to communicate with its API. use only when running on the workspace.\n   * @param options TsserverClientOpts\n   * @param files optionally, if check-types is enabled, provide files to open and type check.\n   * @returns TsserverClient\n   */\n  async initTsserverClientFromWorkspace(\n    options: TsserverClientOpts = {},\n    files: string[] = []\n  ): Promise<TsserverClient> {\n    if (!this.workspace) {\n      throw new Error(`initTsserverClientFromWorkspace: workspace was not found`);\n    }\n    return this.initTsserverClient(this.workspace.path, options, files);\n  }\n\n  /**\n   * create an instance of a typescript semantic schema extractor.\n   */\n  createSchemaExtractor(tsconfig: any, path?: string): SchemaExtractor {\n    return new TypeScriptExtractor(tsconfig, this.schemaTransformerSlot, this, path || this.workspace.path);\n  }\n\n  /**\n   * add the default package json properties to the component\n   * :TODO @gilad why do we need this DSL? can't I just get the args here.\n   */\n  getPackageJsonProps(): PackageJsonProps {\n    return {\n      main: 'dist/{main}.js',\n      types: '{main}.ts',\n    };\n  }\n\n  public getSupportedFilesForTsserver(components: Component[]): string[] {\n    const files = components\n      .map((c) => c.filesystem.files)\n      .flat()\n      .map((f) => f.path);\n    return files.filter((f) => f.endsWith('.ts') || f.endsWith('.tsx'));\n  }\n\n  private async onPreWatch(components: Component[], watchOpts: WatchOptions) {\n    const workspace = this.workspace;\n    if (!workspace || !watchOpts.spawnTSServer) {\n      return;\n    }\n    const { verbose, checkTypes } = watchOpts;\n    const files = checkTypes ? this.getSupportedFilesForTsserver(components) : [];\n    const printTypeErrors = Boolean(checkTypes);\n    await this.initTsserverClientFromWorkspace({ verbose, checkTypes, printTypeErrors }, files);\n  }\n\n  private async onComponentChange(component: Component, files: string[]) {\n    if (!this.tsServer) {\n      return {\n        results: 'N/A',\n      };\n    }\n    await pMapSeries(files, (file) => this.tsServer.onFileChange(file));\n    return {\n      results: 'succeed',\n    };\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [SchemaAspect, LoggerAspect, AspectLoaderAspect, WorkspaceAspect, CLIAspect];\n  static slots = [Slot.withType<SchemaTransformer[]>()];\n\n  static async provider(\n    [schema, loggerExt, aspectLoader, workspace, cli]: [SchemaMain, LoggerMain, AspectLoaderMain, Workspace, CLIMain],\n    config,\n    [schemaTransformerSlot]: [SchemaTransformerSlot]\n  ) {\n    schema.registerParser(new TypeScriptParser());\n    const logger = loggerExt.createLogger(TypescriptAspect.id);\n    aspectLoader.registerPlugins([new SchemaTransformerPlugin(schemaTransformerSlot)]);\n    const tsMain = new TypescriptMain(logger, schemaTransformerSlot, workspace);\n    schemaTransformerSlot.register([\n      new ExportDeclaration(),\n      new FunctionDeclaration(),\n      new VariableStatementTransformer(),\n      new SourceFileTransformer(),\n      new TypeAliasTransformer(),\n    ]);\n\n    if (workspace) {\n      workspace.registerOnPreWatch(tsMain.onPreWatch.bind(this));\n      workspace.registerOnComponentChange(tsMain.onComponentChange.bind(this));\n      workspace.registerOnComponentAdd(tsMain.onComponentChange.bind(this));\n    }\n\n    const checkTypesCmd = new CheckTypesCmd(tsMain, workspace, logger);\n    cli.register(checkTypesCmd);\n\n    return tsMain;\n  }\n}\n\nTypescriptAspect.addRuntime(TypescriptMain);\n\nexport function runTransformersWithContext(\n  config: TypescriptConfigMutator,\n  transformers: TsConfigTransformer[] = [],\n  context: TsConfigTransformContext\n): TypescriptConfigMutator {\n  if (!Array.isArray(transformers)) return config;\n  const newConfig = transformers.reduce((acc, transformer) => {\n    return transformer(acc, context);\n  }, config);\n  return newConfig;\n}\n"]}