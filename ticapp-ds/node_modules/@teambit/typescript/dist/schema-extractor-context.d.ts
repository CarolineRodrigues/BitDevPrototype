import { TsserverClient } from '@teambit/ts-server';
import ts, { ExportDeclaration, Node } from 'typescript';
import type { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';
import { Component } from '@teambit/component';
import { TypeRefSchema, SchemaNode } from '@teambit/semantics.entities.semantic-schema';
import { TypeScriptExtractor } from './typescript.extractor';
import { ExportList } from './export-list';
export declare class SchemaExtractorContext {
    readonly tsserver: TsserverClient;
    readonly component: Component;
    readonly extractor: TypeScriptExtractor;
    constructor(tsserver: TsserverClient, component: Component, extractor: TypeScriptExtractor);
    computeSchema(node: Node): Promise<SchemaNode | undefined>;
    getLocation(node: Node, targetSourceFile?: ts.SourceFile): {
        line: number;
        character: number;
    };
    getSignature(node: Node): Promise<import("typescript/lib/protocol").SignatureHelpResponse | undefined>;
    getPosition(sourceFile: ts.SourceFile, line: number, offset: number): number;
    getPath(node: Node): string;
    createRef(): {};
    getQuickInfo(node: Node): Promise<import("typescript/lib/protocol").QuickInfoResponse | undefined>;
    typeDefinition(node: Node): Promise<import("typescript/lib/protocol").TypeDefinitionResponse | undefined>;
    visitTypeDefinition(): void;
    private findFileInComponent;
    /**
     * return the file if part of the component.
     * otherwise, a reference to the target package and the type name.
     */
    private getSourceFile;
    definition(node: Node): Promise<Node | undefined>;
    visitDefinition(node: Node): Promise<SchemaNode | undefined>;
    visit(node: Node): Promise<SchemaNode | undefined>;
    references(): void;
    isExported(): void;
    isFromComponent(): void;
    getFileExports(exportDec: ExportDeclaration): Promise<import("./export-identifier").ExportIdentifier[]>;
    _exports: ExportList | undefined;
    setExports(exports: ExportList): this;
    getExportedIdentifiers(node: Node): Promise<import("./export-identifier").ExportIdentifier[]>;
    private isNative;
    jump(file: AbstractVinyl, start: any): Promise<SchemaNode | undefined>;
    resolveType(node: Node, typeStr: string, type?: boolean): Promise<TypeRefSchema>;
}
