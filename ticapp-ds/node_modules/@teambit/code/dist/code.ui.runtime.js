"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeUI = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _component() {
  const data = require("@teambit/component");

  _component = function () {
    return data;
  };

  return data;
}

function _ui() {
  const data = require("@teambit/ui");

  _ui = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _harmony() {
  const data = require("@teambit/harmony");

  _harmony = function () {
    return data;
  };

  return data;
}

function _baseUiConstants() {
  const data = require("@teambit/base-ui.constants.storage");

  _baseUiConstants = function () {
    return data;
  };

  return data;
}

function _codeUi() {
  const data = require("@teambit/code.ui.code-tab-page");

  _codeUi = function () {
    return data;
  };

  return data;
}

function _code() {
  const data = require("./code.aspect");

  _code = function () {
    return data;
  };

  return data;
}

function _code2() {
  const data = require("./code.section");

  _code2 = function () {
    return data;
  };

  return data;
}

const isTsx = /\.tsx$/;

/**
 * Component code tab aspect. Presents the code tab page and allows to control the code tab and register specific icons for each file type.
 *  @example CodeUI.registerEnvFileIcon([(fileName) => (/your-regexp/.test(fileName) ? 'your.icon.url' : undefined)])
 */
class CodeUI {
  constructor(
  /**
   * register an icon for a specific file type. pass icon and a match method/regexp
   */
  fileIconSlot) {
    this.fileIconSlot = fileIconSlot;
    (0, _defineProperty2().default)(this, "getCodePage", () => {
      return /*#__PURE__*/_react().default.createElement(_codeUi().CodePage, {
        fileIconSlot: this.fileIconSlot
      });
    });
  }

  registerEnvFileIcon(icons) {
    var _this$fileIconSlot;

    (_this$fileIconSlot = this.fileIconSlot) === null || _this$fileIconSlot === void 0 ? void 0 : _this$fileIconSlot.register(icons);
    return this;
  }

  static async provider([component], config, [fileIconSlot]) {
    const ui = new CodeUI(fileIconSlot);
    const section = new (_code2().CodeSection)(ui); // overrides the default tsx react icon with the typescript icon

    ui.registerEnvFileIcon([fileName => isTsx.test(fileName) ? `${_baseUiConstants().staticStorageUrl}/file-icons/file_type_typescript.svg` : undefined]);
    component.registerRoute(section.route);
    component.registerWidget(section.navigationLink, section.order);
    return ui;
  }

}

exports.CodeUI = CodeUI;
(0, _defineProperty2().default)(CodeUI, "dependencies", [_component().ComponentAspect]);
(0, _defineProperty2().default)(CodeUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(CodeUI, "slots", [_harmony().Slot.withType()]);

_code().CodeAspect.addRuntime(CodeUI);

//# sourceMappingURL=code.ui.runtime.js.map