"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lanesSchema = lanesSchema;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _graphqlTag() {
  const data = _interopRequireDefault(require("graphql-tag"));

  _graphqlTag = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function lanesSchema(lanesMain) {
  return {
    typeDefs: (0, _graphqlTag().default)`
      type CompLaneData {
        id: ComponentID!
        head: String!
      }

      type LanesData {
        name: String!
        components: [CompLaneData]
        isMerged: Boolean
        remote: String
      }

      type FileDiff {
        filePath: String!
        diffOutput: String
      }

      type FieldsDiff {
        fieldName: String!
        diffOutput: String
      }

      type DiffResults {
        id: String
        hasDiff: Boolean
        filesDiff: [FileDiff]
        fieldsDiff: [FieldsDiff]
      }

      type GetDiffResult {
        newComps: [String]
        compsWithNoChanges: [String]
        toLaneName: String
        compsWithDiff: [DiffResults]
      }

      input DiffOptions {
        color: Boolean
      }

      type Lanes {
        getLanes: [LanesData]
        getLaneByName(name: String): LanesData
        getCurrentLaneName: String
        getDiff(values: [String], options: DiffOptions): GetDiffResult
      }

      type Query {
        lanes: Lanes
      }
    `,
    resolvers: {
      Lanes: {
        getLanes: async lanes => {
          const lanesResults = await lanes.getLanes({});
          return lanesResults.map(lane => ({
            name: lane.name,
            components: lane.components.map(component => _objectSpread(_objectSpread({}, component), {}, {
              /**
               * make sure the BitId has the version mapped,
               * otherwise graphql will cache the lane component response across different lanes with the same component id
               */
              id: _objectSpread(_objectSpread({}, component.id), {}, {
                version: component.head
              })
            })),
            isMerged: Boolean(lane.isMerged),
            remote: lane.remote
          }));
        },
        getLaneByName: async (lanes, {
          name
        }) => {
          const lanesResults = await lanes.getLanes({
            name
          });
          const laneResult = lanesResults[0];
          return {
            name: laneResult.name,
            components: laneResult.components,
            isMerged: Boolean(laneResult.isMerged)
          };
        },
        getCurrentLaneName: lanes => {
          return lanes.getCurrentLane();
        },
        getDiff: async (lanes, {
          values,
          options
        }) => {
          const getDiffResults = await lanes.getDiff(values, options);
          return _objectSpread(_objectSpread({}, getDiffResults), {}, {
            compsWithDiff: getDiffResults.compsWithDiff.map(item => _objectSpread(_objectSpread({}, item), {}, {
              id: item.id.toString()
            }))
          });
        }
      },
      Query: {
        lanes: () => lanesMain
      }
    }
  };
}

//# sourceMappingURL=lanes.graphql.js.map