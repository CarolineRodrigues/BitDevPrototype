import { CLIMain } from '@teambit/cli';
import { ScopeMain } from '@teambit/scope';
import { GraphqlMain } from '@teambit/graphql';
import { Workspace } from '@teambit/workspace';
import { LaneData } from '@teambit/legacy/dist/scope/lanes/lanes';
import { DiffOptions } from '@teambit/legacy/dist/consumer/component-ops/components-diff';
import { MergeStrategy, ApplyVersionResults } from '@teambit/legacy/dist/consumer/versions-ops/merge-version';
import { TrackLane } from '@teambit/legacy/dist/scope/scope-json';
import type { CommunityMain } from '@teambit/community';
import { MergingMain } from '@teambit/merging';
export declare type LaneResults = {
    lanes: LaneData[];
    currentLane?: string | null;
};
export declare type MergeLaneOptions = {
    remoteName: string | null;
    mergeStrategy: MergeStrategy;
    noSnap: boolean;
    snapMessage: string;
    existingOnWorkspaceOnly: boolean;
    build: boolean;
};
export declare type CreateLaneOptions = {
    remoteScope?: string;
    remoteName?: string;
};
export declare class LanesMain {
    private workspace;
    private scope;
    private merging;
    constructor(workspace: Workspace | undefined, scope: ScopeMain, merging: MergingMain);
    getLanes({ name, remote, merged, showDefaultLane, notMerged, }: {
        name?: string;
        remote?: string;
        merged?: boolean;
        showDefaultLane?: boolean;
        notMerged?: boolean;
    }): Promise<LaneData[]>;
    getCurrentLane(): string | null;
    createLane(name: string, { remoteScope, remoteName }?: CreateLaneOptions): Promise<TrackLane>;
    trackLane(localName: string, remoteScope: string, remoteName?: string): Promise<{
        beforeTrackData?: TrackLane;
        afterTrackData: TrackLane;
    }>;
    removeLanes(laneNames: string[], { remote, force }: {
        remote: boolean;
        force: boolean;
    }): Promise<string[]>;
    mergeLane(laneName: string, options: MergeLaneOptions): Promise<ApplyVersionResults>;
    /**
     * the values array may include zero to two values and will be processed as following:
     * [] => diff between the current lane and default lane. (only inside workspace).
     * [to] => diff between the current lane (or default-lane when in scope) and "to" lane.
     * [from, to] => diff between "from" lane and "to" lane.
     */
    getDiff(values: string[], diffOptions?: DiffOptions): Promise<{
        newComps: string[];
        compsWithDiff: import("@teambit/legacy/dist/consumer/component-ops/components-diff").DiffResults[];
        compsWithNoChanges: string[];
        toLaneName: string;
    }>;
    private getLaneDataOfDefaultLane;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([cli, scope, workspace, graphql, community, merging]: [
        CLIMain,
        ScopeMain,
        Workspace,
        GraphqlMain,
        CommunityMain,
        MergingMain
    ]): Promise<LanesMain>;
}
export default LanesMain;
