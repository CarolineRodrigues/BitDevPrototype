{"version":3,"sources":["lanes.graphql.ts"],"names":["lanesSchema","lanesMain","typeDefs","resolvers","Lanes","getLanes","lanes","lanesResults","map","lane","name","components","component","id","version","head","isMerged","Boolean","remote","getLaneByName","laneResult","getCurrentLaneName","getCurrentLane","getDiff","values","options","getDiffResults","compsWithDiff","item","toString","Query"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAGO,SAASA,WAAT,CAAqBC,SAArB,EAAmD;AACxD,SAAO;AACLC,IAAAA,QAAQ,EAAE,0BAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApDS;AAqDLC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,MAAOC,KAAP,IAA4B;AACpC,gBAAMC,YAAY,GAAG,MAAMD,KAAK,CAACD,QAAN,CAAe,EAAf,CAA3B;AACA,iBAAOE,YAAY,CAACC,GAAb,CAAkBC,IAAD,KAAW;AACjCC,YAAAA,IAAI,EAAED,IAAI,CAACC,IADsB;AAEjCC,YAAAA,UAAU,EAAEF,IAAI,CAACE,UAAL,CAAgBH,GAAhB,CAAqBI,SAAD,oCAC3BA,SAD2B;AAE9B;AACd;AACA;AACA;AACcC,cAAAA,EAAE,kCAAOD,SAAS,CAACC,EAAjB;AAAqBC,gBAAAA,OAAO,EAAEF,SAAS,CAACG;AAAxC;AAN4B,cAApB,CAFqB;AAUjCC,YAAAA,QAAQ,EAAEC,OAAO,CAACR,IAAI,CAACO,QAAN,CAVgB;AAWjCE,YAAAA,MAAM,EAAET,IAAI,CAACS;AAXoB,WAAX,CAAjB,CAAP;AAaD,SAhBI;AAiBLC,QAAAA,aAAa,EAAE,OAAOb,KAAP,EAAyB;AAAEI,UAAAA;AAAF,SAAzB,KAAwD;AACrE,gBAAMH,YAAY,GAAG,MAAMD,KAAK,CAACD,QAAN,CAAe;AAAEK,YAAAA;AAAF,WAAf,CAA3B;AACA,gBAAMU,UAAU,GAAGb,YAAY,CAAC,CAAD,CAA/B;AACA,iBAAO;AACLG,YAAAA,IAAI,EAAEU,UAAU,CAACV,IADZ;AAELC,YAAAA,UAAU,EAAES,UAAU,CAACT,UAFlB;AAGLK,YAAAA,QAAQ,EAAEC,OAAO,CAACG,UAAU,CAACJ,QAAZ;AAHZ,WAAP;AAKD,SAzBI;AA0BLK,QAAAA,kBAAkB,EAAGf,KAAD,IAAsB;AACxC,iBAAOA,KAAK,CAACgB,cAAN,EAAP;AACD,SA5BI;AA6BLC,QAAAA,OAAO,EAAE,OAAOjB,KAAP,EAAyB;AAAEkB,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SAAzB,KAAqG;AAC5G,gBAAMC,cAAc,GAAG,MAAMpB,KAAK,CAACiB,OAAN,CAAcC,MAAd,EAAsBC,OAAtB,CAA7B;AACA,iDACKC,cADL;AAEEC,YAAAA,aAAa,EAAED,cAAc,CAACC,aAAf,CAA6BnB,GAA7B,CAAkCoB,IAAD,oCAAgBA,IAAhB;AAAsBf,cAAAA,EAAE,EAAEe,IAAI,CAACf,EAAL,CAAQgB,QAAR;AAA1B,cAAjC;AAFjB;AAID;AAnCI,OADE;AAsCTC,MAAAA,KAAK,EAAE;AACLxB,QAAAA,KAAK,EAAE,MAAML;AADR;AAtCE;AArDN,GAAP;AAgGD","sourcesContent":["import { Schema } from '@teambit/graphql';\nimport gql from 'graphql-tag';\nimport { LanesMain } from './lanes.main.runtime';\n\nexport function lanesSchema(lanesMain: LanesMain): Schema {\n  return {\n    typeDefs: gql`\n      type CompLaneData {\n        id: ComponentID!\n        head: String!\n      }\n\n      type LanesData {\n        name: String!\n        components: [CompLaneData]\n        isMerged: Boolean\n        remote: String\n      }\n\n      type FileDiff {\n        filePath: String!\n        diffOutput: String\n      }\n\n      type FieldsDiff {\n        fieldName: String!\n        diffOutput: String\n      }\n\n      type DiffResults {\n        id: String\n        hasDiff: Boolean\n        filesDiff: [FileDiff]\n        fieldsDiff: [FieldsDiff]\n      }\n\n      type GetDiffResult {\n        newComps: [String]\n        compsWithNoChanges: [String]\n        toLaneName: String\n        compsWithDiff: [DiffResults]\n      }\n\n      input DiffOptions {\n        color: Boolean\n      }\n\n      type Lanes {\n        getLanes: [LanesData]\n        getLaneByName(name: String): LanesData\n        getCurrentLaneName: String\n        getDiff(values: [String], options: DiffOptions): GetDiffResult\n      }\n\n      type Query {\n        lanes: Lanes\n      }\n    `,\n    resolvers: {\n      Lanes: {\n        getLanes: async (lanes: LanesMain) => {\n          const lanesResults = await lanes.getLanes({});\n          return lanesResults.map((lane) => ({\n            name: lane.name,\n            components: lane.components.map((component) => ({\n              ...component,\n              /**\n               * make sure the BitId has the version mapped,\n               * otherwise graphql will cache the lane component response across different lanes with the same component id\n               */\n              id: { ...component.id, version: component.head },\n            })),\n            isMerged: Boolean(lane.isMerged),\n            remote: lane.remote,\n          }));\n        },\n        getLaneByName: async (lanes: LanesMain, { name }: { name: string }) => {\n          const lanesResults = await lanes.getLanes({ name });\n          const laneResult = lanesResults[0];\n          return {\n            name: laneResult.name,\n            components: laneResult.components,\n            isMerged: Boolean(laneResult.isMerged),\n          };\n        },\n        getCurrentLaneName: (lanes: LanesMain) => {\n          return lanes.getCurrentLane();\n        },\n        getDiff: async (lanes: LanesMain, { values, options }: { values: string[]; options: { color?: boolean } }) => {\n          const getDiffResults = await lanes.getDiff(values, options);\n          return {\n            ...getDiffResults,\n            compsWithDiff: getDiffResults.compsWithDiff.map((item) => ({ ...item, id: item.id.toString() })),\n          };\n        },\n      },\n      Query: {\n        lanes: () => lanesMain,\n      },\n    },\n  };\n}\n"]}