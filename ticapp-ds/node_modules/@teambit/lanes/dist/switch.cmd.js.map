{"version":3,"sources":["switch.cmd.ts"],"names":["SwitchCmd","report","lane","as","merge","getAll","verbose","json","mergeStrategy","R","is","String","options","Object","keys","MergeOptions","includes","BitError","join","switchProps","laneName","existingOnWorkspaceOnly","newLaneName","checkoutProps","skipNpmInstall","ignorePackageJson","ignoreDist","isLane","promptMergeOptions","writeConfig","reset","all","components","failedComponents","JSON","stringify","getFailureOutput","length","title","body","map","failedComponent","chalk","bold","id","toString","red","failureMessage","getSuccessfulOutput","laneSwitched","green","component","componentName","toStringWithoutVersion","version","componentsStr","failedOutput","successOutput"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,SAAN,CAAmC;AAAA;AAAA,kDACjC,eADiC;AAAA,yDAEzB,8BAFyB;AAAA,qDAG9B,IAH8B;AAAA,mDAIhC,EAJgC;AAAA,qDAK9B,CACR,CACE,GADF,EAEE,SAFF,EAGE,uGAHF,CADQ,EAMR,CACE,GADF,EAEE,kBAFF,EAGE,mGAHF,CANQ,EAWR,CAAC,GAAD,EAAM,SAAN,EAAiB,mFAAjB,CAXQ,EAYR,CAAC,GAAD,EAAM,SAAN,EAAiB,uCAAjB,CAZQ,EAaR,CAAC,GAAD,EAAM,MAAN,EAAc,2BAAd,CAbQ,CAL8B;AAAA,oDAoB/B,IApB+B;AAAA;;AAsB5B,QAANC,MAAM,CACV,CAACC,IAAD,CADU,EAEV;AACEC,IAAAA,EADF;AAEEC,IAAAA,KAFF;AAGEC,IAAAA,MAAM,GAAG,KAHX;AAIEC,IAAAA,OAAO,GAAG,KAJZ;AAKEC,IAAAA,IAAI,GAAG;AALT,GAFU,EAgBV;AACA,QAAIC,aAAJ;;AACA,QAAIJ,KAAK,IAAIK,iBAAEC,EAAF,CAAKC,MAAL,EAAaP,KAAb,CAAb,EAAkC;AAChC,YAAMQ,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYC,4BAAZ,CAAhB;;AACA,UAAI,CAACH,OAAO,CAACI,QAAR,CAAiBZ,KAAjB,CAAL,EAA8B;AAC5B,cAAM,KAAIa,oBAAJ,EAAc,uCAAsCL,OAAO,CAACM,IAAR,CAAa,IAAb,CAAmB,EAAvE,CAAN;AACD;;AACDV,MAAAA,aAAa,GAAGJ,KAAhB;AACD;;AAED,UAAMe,WAAwB,GAAG;AAC/BC,MAAAA,QAAQ,EAAElB,IADqB;AAE/BmB,MAAAA,uBAAuB,EAAE,CAAChB,MAFK;AAG/BiB,MAAAA,WAAW,EAAEnB;AAHkB,KAAjC;AAKA,UAAMoB,aAA4B,GAAG;AACnCf,MAAAA,aADmC;AAEnCF,MAAAA,OAFmC;AAGnCkB,MAAAA,cAAc,EAAE,KAHmB;AAGZ;AACvBC,MAAAA,iBAAiB,EAAE,IAJgB;AAIV;AACzBC,MAAAA,UAAU,EAAE,IALuB;AAKjB;AAClBC,MAAAA,MAAM,EAAE,IAN2B;AAOnCC,MAAAA,kBAAkB,EAAE,KAPe;AAQnCC,MAAAA,WAAW,EAAE,KARsB;AASnCC,MAAAA,KAAK,EAAE,KAT4B;AAUnCC,MAAAA,GAAG,EAAE;AAV8B,KAArC;AAYA,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAAmC,MAAM,8BAAad,WAAb,EAA0BI,aAA1B,CAA/C;;AACA,QAAIhB,IAAJ,EAAU;AACR,aAAO2B,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA,UAAF;AAAcC,QAAAA;AAAd,OAAf,EAAiD,IAAjD,EAAuD,CAAvD,CAAP;AACD;;AACD,UAAMG,gBAAgB,GAAG,MAAM;AAC7B,UAAI,CAACH,gBAAD,IAAqB,CAACA,gBAAgB,CAACI,MAA3C,EAAmD,OAAO,EAAP;AACnD,YAAMC,KAAK,GAAG,4DAAd;AACA,YAAMC,IAAI,GAAGN,gBAAgB,CAC1BO,GADU,CAERC,eAAD,IACG,GAAEC,iBAAMC,IAAN,CAAWF,eAAe,CAACG,EAAhB,CAAmBC,QAAnB,EAAX,CAA0C,MAAKH,iBAAMI,GAAN,CAAUL,eAAe,CAACM,cAA1B,CAA0C,EAHrF,EAKV7B,IALU,CAKL,IALK,CAAb;AAMA,aAAQ,GAAEoB,KAAM,KAAIC,IAAK,MAAzB;AACD,KAVD;;AAWA,UAAMS,mBAAmB,GAAG,MAAM;AAChC,YAAMC,YAAY,GAAGP,iBAAMQ,KAAN,CAAa,uBAAsBR,iBAAMC,IAAN,CAAWzC,IAAX,CAAiB,sBAApD,CAArB;;AACA,UAAI,CAAC8B,UAAD,IAAe,CAACA,UAAU,CAACK,MAA/B,EAAuC,OAAQ,iCAAgCY,YAAa,EAArD;;AACvC,UAAIjB,UAAU,CAACK,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAMc,SAAS,GAAGnB,UAAU,CAAC,CAAD,CAA5B;AACA,cAAMoB,aAAa,GAAGD,SAAS,CAACP,EAAV,CAAaS,sBAAb,EAAtB;AACA,cAAMf,KAAK,GAAI,yBAAwBI,iBAAMC,IAAN,CAAWS,aAAX,CAA0B,eAAcV,iBAAMC,IAAN,CAC7EQ,SAAS,CAACP,EAAV,CAAaU,OADgE,CAE7E,IAFF;AAGA,eAAQ,GAAEhB,KAAM,IAAG,wCAAmBN,UAAnB,EAA+B,KAA/B,CAAsC,GAAEiB,YAAa,EAAxE;AACD;;AACD,YAAMX,KAAK,GAAI,oEAAmEpC,IAAK,MAAvF;AACA,YAAMqD,aAAa,GAAG,wCAAmBvB,UAAnB,EAA+B,IAA/B,EAAqC,KAArC,CAAtB;AACA,aAAOM,KAAK,GAAGiB,aAAR,GAAwBN,YAA/B;AACD,KAdD;;AAeA,UAAMO,YAAY,GAAGpB,gBAAgB,EAArC;AACA,UAAMqB,aAAa,GAAGT,mBAAmB,EAAzC;AACA,WAAOQ,YAAY,GAAGC,aAAtB;AACD;;AAlGuC","sourcesContent":["import chalk from 'chalk';\nimport R from 'ramda';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { switchAction } from '@teambit/legacy/dist/api/consumer';\nimport { SwitchProps } from '@teambit/legacy/dist/consumer/lanes/switch-lanes';\nimport { CheckoutProps } from '@teambit/legacy/dist/consumer/versions-ops/checkout-version';\nimport {\n  MergeOptions,\n  MergeStrategy,\n  applyVersionReport,\n} from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport { BitError } from '@teambit/bit-error';\n\nexport class SwitchCmd implements Command {\n  name = 'switch <lane>';\n  description = `switch to the specified lane`;\n  private = true;\n  alias = '';\n  options = [\n    [\n      'n',\n      'as <as>',\n      'relevant when the specified lane is a remote late. name a local lane differently than the remote lane',\n    ],\n    [\n      'm',\n      'merge [strategy]',\n      'merge local changes with the checked out version. strategy should be \"theirs\", \"ours\" or \"manual\"',\n    ],\n    ['a', 'get-all', 'checkout all components in a lane include ones that do not exist in the workspace'],\n    ['v', 'verbose', 'showing verbose output for inspection'],\n    ['j', 'json', 'return the output as JSON'],\n  ] as CommandOptions;\n  loader = true;\n\n  async report(\n    [lane]: [string],\n    {\n      as,\n      merge,\n      getAll = false,\n      verbose = false,\n      json = false,\n    }: {\n      as?: string;\n      merge?: MergeStrategy;\n      getAll?: boolean;\n      verbose?: boolean;\n      override?: boolean;\n      json?: boolean;\n    }\n  ) {\n    let mergeStrategy;\n    if (merge && R.is(String, merge)) {\n      const options = Object.keys(MergeOptions);\n      if (!options.includes(merge)) {\n        throw new BitError(`merge must be one of the following: ${options.join(', ')}`);\n      }\n      mergeStrategy = merge;\n    }\n\n    const switchProps: SwitchProps = {\n      laneName: lane,\n      existingOnWorkspaceOnly: !getAll,\n      newLaneName: as,\n    };\n    const checkoutProps: CheckoutProps = {\n      mergeStrategy,\n      verbose,\n      skipNpmInstall: false, // not relevant in Harmony\n      ignorePackageJson: true, // not relevant in Harmony\n      ignoreDist: true, // not relevant in Harmony\n      isLane: true,\n      promptMergeOptions: false,\n      writeConfig: false,\n      reset: false,\n      all: false,\n    };\n    const { components, failedComponents } = await switchAction(switchProps, checkoutProps);\n    if (json) {\n      return JSON.stringify({ components, failedComponents }, null, 4);\n    }\n    const getFailureOutput = () => {\n      if (!failedComponents || !failedComponents.length) return '';\n      const title = 'the switch has been canceled on the following component(s)';\n      const body = failedComponents\n        .map(\n          (failedComponent) =>\n            `${chalk.bold(failedComponent.id.toString())} - ${chalk.red(failedComponent.failureMessage)}`\n        )\n        .join('\\n');\n      return `${title}\\n${body}\\n\\n`;\n    };\n    const getSuccessfulOutput = () => {\n      const laneSwitched = chalk.green(`\\nsuccessfully set \"${chalk.bold(lane)}\" as the active lane`);\n      if (!components || !components.length) return `No component had been changed.${laneSwitched}`;\n      if (components.length === 1) {\n        const component = components[0];\n        const componentName = component.id.toStringWithoutVersion();\n        const title = `successfully switched ${chalk.bold(componentName)} to version ${chalk.bold(\n          component.id.version as string\n        )}\\n`;\n        return `${title} ${applyVersionReport(components, false)}${laneSwitched}`;\n      }\n      const title = `successfully switched the following components to the version of ${lane}\\n\\n`;\n      const componentsStr = applyVersionReport(components, true, false);\n      return title + componentsStr + laneSwitched;\n    };\n    const failedOutput = getFailureOutput();\n    const successOutput = getSuccessfulOutput();\n    return failedOutput + successOutput;\n  }\n}\n"]}