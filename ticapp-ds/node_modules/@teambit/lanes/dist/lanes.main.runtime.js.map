{"version":3,"sources":["lanes.main.runtime.ts"],"names":["LanesMain","constructor","workspace","scope","merging","getLanes","name","remote","merged","showDefaultLane","notMerged","showMergeData","Boolean","consumer","remoteObj","lanes","listLanes","legacyScope","getLanesData","defaultLane","getLaneDataOfDefaultLane","push","getCurrentLane","getCurrentLaneName","createLane","remoteScope","remoteName","BitError","setCurrentLane","trackLaneData","localLane","remoteLane","defaultScope","trackLane","onDestroy","localName","lane","loadLane","LaneId","from","beforeTrackData","getRemoteTrackedDataByLocalLane","beforeTrackDataCloned","undefined","afterTrackData","removeLanes","laneNames","force","results","laneResults","mergeLane","laneName","options","mergeResults","getDiff","values","diffOptions","laneDiffGenerator","LaneDiffGenerator","generate","bitIds","bitMap","getAuthoredAndImportedBitIdsOfDefaultLane","DEFAULT_LANE","components","map","bitId","id","head","version","isMerged","provider","cli","graphql","community","lanesMain","isLegacy","switchCmd","SwitchCmd","laneCmd","LaneCmd","getDocsDomain","commands","LaneListCmd","LaneShowCmd","LaneCreateCmd","LaneMergeCmd","LaneRemoveCmd","LaneTrackCmd","LaneDiffCmd","register","CLIAspect","ScopeAspect","WorkspaceAspect","GraphqlAspect","CommunityAspect","MergingAspect","MainRuntime","LanesAspect","addRuntime"],"mappings":"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","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { ScopeMain, ScopeAspect } from '@teambit/scope';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport getRemoteByName from '@teambit/legacy/dist/remotes/get-remote-by-name';\nimport { LaneDiffCmd, LaneDiffGenerator } from '@teambit/lanes.modules.diff';\nimport { LaneData } from '@teambit/legacy/dist/scope/lanes/lanes';\nimport LaneId from '@teambit/legacy/dist/lane-id/lane-id';\nimport { BitError } from '@teambit/bit-error';\nimport createNewLane from '@teambit/legacy/dist/consumer/lanes/create-lane';\nimport { DEFAULT_LANE } from '@teambit/legacy/dist/constants';\nimport { DiffOptions } from '@teambit/legacy/dist/consumer/component-ops/components-diff';\nimport { MergeStrategy, ApplyVersionResults } from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport { TrackLane } from '@teambit/legacy/dist/scope/scope-json';\nimport { CommunityAspect } from '@teambit/community';\nimport type { CommunityMain } from '@teambit/community';\nimport removeLanes from '@teambit/legacy/dist/consumer/lanes/remove-lanes';\nimport { MergingMain, MergingAspect } from '@teambit/merging';\nimport { LanesAspect } from './lanes.aspect';\nimport {\n  LaneCmd,\n  LaneCreateCmd,\n  LaneListCmd,\n  LaneMergeCmd,\n  LaneRemoveCmd,\n  LaneShowCmd,\n  LaneTrackCmd,\n} from './lane.cmd';\nimport { lanesSchema } from './lanes.graphql';\nimport { SwitchCmd } from './switch.cmd';\nimport { mergeLanes } from './merge-lanes';\n\nexport type LaneResults = {\n  lanes: LaneData[];\n  currentLane?: string | null;\n};\n\nexport type MergeLaneOptions = {\n  remoteName: string | null;\n  mergeStrategy: MergeStrategy;\n  noSnap: boolean;\n  snapMessage: string;\n  existingOnWorkspaceOnly: boolean;\n  build: boolean;\n};\n\nexport type CreateLaneOptions = {\n  remoteScope?: string; // default to the defaultScope in workspace.jsonc\n  remoteName?: string; // default to the local lane\n};\n\nexport class LanesMain {\n  constructor(private workspace: Workspace | undefined, private scope: ScopeMain, private merging: MergingMain) {}\n\n  async getLanes({\n    name,\n    remote,\n    merged,\n    showDefaultLane,\n    notMerged,\n  }: {\n    name?: string;\n    remote?: string;\n    merged?: boolean;\n    showDefaultLane?: boolean;\n    notMerged?: boolean;\n  }): Promise<LaneData[]> {\n    const showMergeData = Boolean(merged || notMerged);\n    const consumer = this.workspace?.consumer;\n    if (remote) {\n      const remoteObj = await getRemoteByName(remote, consumer);\n      const lanes = await remoteObj.listLanes(name, showMergeData);\n      return lanes;\n    }\n    const lanes = await this.scope.legacyScope.lanes.getLanesData(this.scope.legacyScope, name, showMergeData);\n\n    if (showDefaultLane) {\n      const defaultLane = this.getLaneDataOfDefaultLane();\n      if (defaultLane) lanes.push(defaultLane);\n    }\n\n    return lanes;\n  }\n\n  getCurrentLane(): string | null {\n    if (!this.workspace?.consumer) return null;\n    return this.scope.legacyScope.lanes.getCurrentLaneName();\n  }\n\n  async createLane(name: string, { remoteScope, remoteName }: CreateLaneOptions = {}): Promise<TrackLane> {\n    if (!this.workspace) {\n      throw new BitError(`unable to create a lane outside of Bit workspace`);\n    }\n    await createNewLane(this.workspace.consumer, name);\n    this.scope.legacyScope.lanes.setCurrentLane(name);\n    const trackLaneData = {\n      localLane: name,\n      remoteLane: remoteName || name,\n      remoteScope: remoteScope || this.workspace.defaultScope,\n    };\n    this.scope.legacyScope.lanes.trackLane(trackLaneData);\n    await this.workspace.consumer.onDestroy();\n\n    return trackLaneData;\n  }\n\n  async trackLane(\n    localName: string,\n    remoteScope: string,\n    remoteName?: string\n  ): Promise<{ beforeTrackData?: TrackLane; afterTrackData: TrackLane }> {\n    if (!this.workspace) {\n      throw new BitError(`unable to track a lane outside of Bit workspace`);\n    }\n    const lane = await this.scope.legacyScope.lanes.loadLane(LaneId.from(localName));\n    if (!lane) {\n      throw new BitError(`unable to find a local lane \"${localName}\"`);\n    }\n    const beforeTrackData = this.scope.legacyScope.lanes.getRemoteTrackedDataByLocalLane(localName);\n    const beforeTrackDataCloned = beforeTrackData ? { ...beforeTrackData } : undefined;\n    const afterTrackData = {\n      localLane: localName,\n      remoteLane: remoteName || beforeTrackData?.remoteLane || localName,\n      remoteScope,\n    };\n    this.scope.legacyScope.lanes.trackLane(afterTrackData);\n    await this.workspace.consumer.onDestroy();\n\n    return { beforeTrackData: beforeTrackDataCloned, afterTrackData };\n  }\n\n  async removeLanes(laneNames: string[], { remote, force }: { remote: boolean; force: boolean }): Promise<string[]> {\n    const results = await removeLanes(this.workspace?.consumer, laneNames, remote, force);\n    if (this.workspace) await this.workspace.consumer.onDestroy();\n\n    return results.laneResults;\n  }\n\n  async mergeLane(laneName: string, options: MergeLaneOptions): Promise<ApplyVersionResults> {\n    if (!this.workspace) {\n      throw new BitError(`unable to merge a lane outside of Bit workspace`);\n    }\n    const mergeResults = await mergeLanes({\n      merging: this.merging,\n      consumer: this.workspace.consumer,\n      laneName,\n      ...options,\n    });\n    await this.workspace.consumer.onDestroy();\n\n    return mergeResults;\n  }\n\n  /**\n   * the values array may include zero to two values and will be processed as following:\n   * [] => diff between the current lane and default lane. (only inside workspace).\n   * [to] => diff between the current lane (or default-lane when in scope) and \"to\" lane.\n   * [from, to] => diff between \"from\" lane and \"to\" lane.\n   */\n  public getDiff(values: string[], diffOptions: DiffOptions = {}) {\n    const laneDiffGenerator = new LaneDiffGenerator(this.workspace, this.scope);\n    return laneDiffGenerator.generate(values, diffOptions);\n  }\n\n  private getLaneDataOfDefaultLane(): LaneData | null {\n    const consumer = this.workspace?.consumer;\n    if (!consumer) return null;\n    const bitIds = consumer.bitMap.getAuthoredAndImportedBitIdsOfDefaultLane();\n    return {\n      name: DEFAULT_LANE,\n      remote: null,\n      components: bitIds.map((bitId) => ({ id: bitId, head: bitId.version as string })),\n      isMerged: null,\n    };\n  }\n\n  static slots = [];\n  static dependencies = [CLIAspect, ScopeAspect, WorkspaceAspect, GraphqlAspect, CommunityAspect, MergingAspect];\n  static runtime = MainRuntime;\n  static async provider([cli, scope, workspace, graphql, community, merging]: [\n    CLIMain,\n    ScopeMain,\n    Workspace,\n    GraphqlMain,\n    CommunityMain,\n    MergingMain\n  ]) {\n    const lanesMain = new LanesMain(workspace, scope, merging);\n    const isLegacy = workspace && workspace.consumer.isLegacy;\n    const switchCmd = new SwitchCmd();\n    if (!isLegacy) {\n      const laneCmd = new LaneCmd(lanesMain, workspace, scope, community.getDocsDomain());\n      laneCmd.commands = [\n        new LaneListCmd(lanesMain, workspace, scope),\n        switchCmd,\n        new LaneShowCmd(lanesMain, workspace, scope),\n        new LaneCreateCmd(lanesMain),\n        new LaneMergeCmd(lanesMain),\n        new LaneRemoveCmd(lanesMain),\n        new LaneTrackCmd(lanesMain),\n        new LaneDiffCmd(workspace, scope),\n      ];\n      cli.register(laneCmd, switchCmd);\n      graphql.register(lanesSchema(lanesMain));\n    }\n    return lanesMain;\n  }\n}\n\nLanesAspect.addRuntime(LanesMain);\n\nexport default LanesMain;\n"]}