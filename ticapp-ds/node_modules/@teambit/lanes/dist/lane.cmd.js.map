{"version":3,"sources":["lane.cmd.ts"],"names":["LaneListCmd","constructor","lanes","workspace","scope","report","args","laneOptions","details","remote","merged","notMerged","getLanes","showDefaultLane","mergedLanes","filter","l","isMerged","length","chalk","green","map","m","name","join","unmergedLanes","currentLane","getCurrentLane","currentLaneStr","bold","laneDataOfCurrentLane","find","remoteOfCurrentLane","currentLaneComponents","outputComponents","components","outputRemoteLane","availableLanes","laneData","laneTitle","outputFooter","footer","outputCurrentLane","outputAvailableLanes","json","LaneShowCmd","onlyLane","title","LaneCreateCmd","createLaneOptions","result","createLane","remoteScopeOrDefaultScope","remoteScope","localLane","remoteScopeOutput","LaneTrackCmd","localName","remoteName","beforeTrackData","afterTrackData","trackLane","remoteScopeChanges","remoteNameChanges","remoteLane","LaneMergeCmd","ours","theirs","manual","build","existing","existingOnWorkspaceOnly","noSnap","message","snapMessage","BUILD_ON_CI","Boolean","mergeStrategy","BitError","results","mergeLane","LaneRemoveCmd","names","force","silent","removePromptResult","shouldRemove","laneResults","removeLanes","LaneCmd","docsDomain","description","componentsTitle","componentsStr","c","id","toString","head"],"mappings":"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","sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport chalk from 'chalk';\nimport yn from 'yn';\nimport { ScopeMain } from '@teambit/scope';\nimport { Workspace } from '@teambit/workspace';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { LaneData } from '@teambit/legacy/dist/scope/lanes/lanes';\nimport { getMergeStrategy } from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport { mergeReport } from '@teambit/merging';\nimport { BUILD_ON_CI, isFeatureEnabled } from '@teambit/legacy/dist/api/consumer/lib/feature-toggle';\nimport { BitError } from '@teambit/bit-error';\nimport { removePrompt } from '@teambit/legacy/dist/prompts';\nimport { CreateLaneOptions, LanesMain } from './lanes.main.runtime';\n\ntype LaneOptions = {\n  details?: boolean;\n  remote?: string;\n  merged?: boolean;\n  notMerged?: boolean;\n  json?: boolean;\n};\n\nexport class LaneListCmd implements Command {\n  name = 'list';\n  description = `list lanes`;\n  alias = '';\n  options = [\n    ['d', 'details', 'show more details on the state of each component in each lane'],\n    ['j', 'json', 'show lanes details in json format'],\n    ['r', 'remote <string>', 'show remote lanes'],\n    ['', 'merged', 'show merged lanes'],\n    ['', 'not-merged', 'show not merged lanes'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n  remoteOp = true;\n  skipWorkspace = true;\n\n  constructor(private lanes: LanesMain, private workspace: Workspace, private scope: ScopeMain) {}\n\n  async report(args, laneOptions: LaneOptions): Promise<string> {\n    const { details, remote, merged, notMerged } = laneOptions;\n\n    const lanes = await this.lanes.getLanes({\n      remote,\n      merged,\n      notMerged,\n      showDefaultLane: true,\n    });\n    if (merged) {\n      const mergedLanes = lanes.filter((l) => l.isMerged);\n      if (!mergedLanes.length) return chalk.green('None of the lanes is merged');\n      return chalk.green(mergedLanes.map((m) => m.name).join('\\n'));\n    }\n    if (notMerged) {\n      const unmergedLanes = lanes.filter((l) => !l.isMerged);\n      if (!unmergedLanes.length) return chalk.green('All lanes are merged');\n      return chalk.green(unmergedLanes.map((m) => m.name).join('\\n'));\n    }\n    const currentLane = this.lanes.getCurrentLane();\n    let currentLaneStr = currentLane ? `current lane - ${chalk.bold(currentLane as string)}` : '';\n    if (details) {\n      const laneDataOfCurrentLane = lanes.find((l) => l.name === currentLane);\n      const remoteOfCurrentLane = laneDataOfCurrentLane ? laneDataOfCurrentLane.remote : null;\n      const currentLaneComponents = laneDataOfCurrentLane ? outputComponents(laneDataOfCurrentLane.components) : '';\n      if (currentLaneStr) {\n        currentLaneStr += `${outputRemoteLane(remoteOfCurrentLane)}\\n${currentLaneComponents}`;\n      }\n    }\n\n    const availableLanes = lanes\n      .filter((l) => l.name !== currentLane)\n      // @ts-ignore\n      .map((laneData) => {\n        if (details) {\n          const laneTitle = `> ${chalk.green(laneData.name)}${outputRemoteLane(laneData.remote)}\\n`;\n          const components = outputComponents(laneData.components);\n          return laneTitle + components;\n        }\n        return `    > ${chalk.green(laneData.name)} (${laneData.components.length} components)`;\n      })\n      .join('\\n');\n\n    const outputFooter = () => {\n      let footer = '\\n';\n      if (details) {\n        footer += 'You can use --merged and --not-merged to see which of the lanes is fully merged.';\n      } else {\n        footer +=\n          \"to get more info on all lanes in workspace use 'bit lane list --details' or 'bit lane show <lane-name>' for a specific lane.\";\n      }\n      if (!remote && this.workspace) footer += `\\nswitch lanes using 'bit switch <name>'.`;\n\n      return footer;\n    };\n\n    return outputCurrentLane() + outputAvailableLanes() + outputFooter();\n\n    function outputCurrentLane() {\n      return currentLaneStr ? `${currentLaneStr}\\n` : '';\n    }\n\n    function outputAvailableLanes() {\n      if (!availableLanes) return '';\n      return remote ? `${availableLanes}\\n` : `\\nAvailable lanes:\\n${availableLanes}\\n`;\n    }\n  }\n  async json(args, laneOptions: LaneOptions) {\n    const { remote, merged = false, notMerged = false } = laneOptions;\n\n    const lanes = await this.lanes.getLanes({\n      remote,\n      showDefaultLane: true,\n      merged,\n      notMerged,\n    });\n    const currentLane = this.lanes.getCurrentLane();\n    return { lanes, currentLane };\n  }\n}\n\nexport class LaneShowCmd implements Command {\n  name = 'show <name>';\n  description = `show lane details`;\n  alias = '';\n  options = [\n    ['j', 'json', 'show the lane details in json format'],\n    ['r', 'remote <string>', 'show remote lanes'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n  remoteOp = true;\n  skipWorkspace = true;\n\n  constructor(private lanes: LanesMain, private workspace: Workspace, private scope: ScopeMain) {}\n\n  async report([name]: [string], laneOptions: LaneOptions): Promise<string> {\n    const { remote } = laneOptions;\n\n    const lanes = await this.lanes.getLanes({\n      name,\n      remote,\n    });\n\n    const onlyLane = lanes[0];\n    const title = `showing information for ${chalk.bold(name)}${outputRemoteLane(onlyLane.remote)}\\n`;\n    return title + outputComponents(onlyLane.components);\n  }\n\n  async json([name]: [string], laneOptions: LaneOptions) {\n    const { remote } = laneOptions;\n\n    const lanes = await this.lanes.getLanes({\n      name,\n      remote,\n    });\n    return lanes[0];\n  }\n}\n\nexport class LaneCreateCmd implements Command {\n  name = 'create <name>';\n  description = `create and switch to a new lane`;\n  alias = '';\n  options = [\n    [\n      '',\n      'remote-scope <string>',\n      'remote scope where this lane will be exported to (can be changed later with \"bit lane track\")',\n    ],\n    [\n      '',\n      'remote-name <string>',\n      'lane name on the remote, default to the local name (can be changed later with \"bit lane track\")',\n    ],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report([name]: [string], createLaneOptions: CreateLaneOptions): Promise<string> {\n    const result = await this.lanes.createLane(name, createLaneOptions);\n    const remoteScopeOrDefaultScope = createLaneOptions.remoteScope\n      ? `the remote scope ${chalk.bold(createLaneOptions.remoteScope)}`\n      : `the default-scope ${chalk.bold(result.remoteScope)}. to change it, please run \"bit lane track\" command`;\n    const title = chalk.green(`successfully added and checked out to a new lane ${chalk.bold(result.localLane)}`);\n    const remoteScopeOutput = `this lane will be exported to ${remoteScopeOrDefaultScope}`;\n    return `${title}\\n${remoteScopeOutput}`;\n  }\n}\n\nexport class LaneTrackCmd implements Command {\n  name = 'track <local-name> <remote-scope> [remote-name]';\n  description = `change the remote scope or remote lane of the local lane`;\n  alias = '';\n  options = [] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report([localName, remoteScope, remoteName]: [string, string, string]): Promise<string> {\n    const { beforeTrackData, afterTrackData } = await this.lanes.trackLane(localName, remoteScope, remoteName);\n    const remoteScopeChanges =\n      afterTrackData.remoteScope === beforeTrackData?.remoteScope\n        ? `the remote-scope has not been changed`\n        : `the remote-scope has been changed from ${chalk.bold(\n            beforeTrackData?.remoteScope || '<n/a>'\n          )} to ${chalk.bold(afterTrackData.remoteScope)}`;\n    const remoteNameChanges =\n      afterTrackData.remoteLane === beforeTrackData?.remoteLane\n        ? `the remote-name has not been changed`\n        : `the remote-name has been changed from ${chalk.bold(beforeTrackData?.remoteLane || '<n/a>')} to ${chalk.bold(\n            afterTrackData.remoteLane\n          )}`;\n\n    return `${remoteScopeChanges}\\n${remoteNameChanges}`;\n  }\n}\n\nexport class LaneMergeCmd implements Command {\n  name = 'merge <lane>';\n  description = `merge a local or a remote lane`;\n  alias = '';\n  options = [\n    ['', 'remote <name>', 'remote scope name'],\n    ['', 'ours', 'in case of a conflict, override the used version with the current modification'],\n    ['', 'theirs', 'in case of a conflict, override the current modification with the specified version'],\n    ['', 'manual', 'in case of a conflict, leave the files with a conflict state to resolve them manually later'],\n    ['', 'existing', 'checkout only components in a lane that exist in the workspace'],\n    ['', 'no-snap', 'do not auto snap in case the merge completed without conflicts'],\n    ['', 'build', 'in case of snap during the merge, run the build-pipeline (similar to bit snap --build)'],\n    ['m', 'message <message>', 'override the default message for the auto snap'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n  remoteOp = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report(\n    [name]: [string],\n    {\n      ours = false,\n      theirs = false,\n      manual = false,\n      remote: remoteName,\n      build,\n      existing: existingOnWorkspaceOnly = false,\n      noSnap = false,\n      message: snapMessage = '',\n    }: {\n      ours: boolean;\n      theirs: boolean;\n      manual: boolean;\n      remote?: string;\n      existing?: boolean;\n      build?: boolean;\n      noSnap: boolean;\n      message: string;\n    }\n  ): Promise<string> {\n    build = isFeatureEnabled(BUILD_ON_CI) ? Boolean(build) : true;\n    const mergeStrategy = getMergeStrategy(ours, theirs, manual);\n    if (noSnap && snapMessage) throw new BitError('unable to use \"noSnap\" and \"message\" flags together');\n\n    const results = await this.lanes.mergeLane(name, {\n      // @ts-ignore\n      remoteName,\n      build,\n      // @ts-ignore\n      mergeStrategy,\n      existingOnWorkspaceOnly,\n      noSnap,\n      snapMessage,\n    });\n    return mergeReport(results);\n  }\n}\n\nexport class LaneRemoveCmd implements Command {\n  name = 'remove <lane...>';\n  description = `remove lanes`;\n  alias = '';\n  options = [\n    ['r', 'remote', 'remove a remote lane (in the lane arg, use remote/lane-id syntax)'],\n    [\n      'f',\n      'force',\n      'removes the component from the scope, even if used as a dependency. WARNING: components that depend on this component will corrupt',\n    ],\n    ['s', 'silent', 'skip confirmation'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report(\n    [names]: [string[]],\n    {\n      remote = false,\n      force = false,\n      silent = false,\n    }: {\n      remote: boolean;\n      force: boolean;\n      silent: boolean;\n    }\n  ): Promise<string> {\n    if (!silent) {\n      const removePromptResult = await removePrompt();\n      // @ts-ignore\n      if (!yn(removePromptResult.shouldRemove)) {\n        throw new BitError('the operation has been canceled');\n      }\n    }\n    const laneResults = await this.lanes.removeLanes(names, { remote, force });\n    return chalk.green(`successfully removed the following lane(s): ${chalk.bold(laneResults.join(', '))}`);\n  }\n}\n\nexport class LaneCmd implements Command {\n  name = 'lane [name]';\n  shortDescription = 'show lanes details';\n  description: string;\n  alias = '';\n  options = [\n    ['d', 'details', 'show more details on the state of each component in each lane'],\n    ['j', 'json', 'show lanes details in json format'],\n    ['r', 'remote <string>', 'show remote lanes'],\n    ['', 'merged', 'show merged lanes'],\n    ['', 'not-merged', 'show not merged lanes'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n  remoteOp = true;\n  skipWorkspace = true;\n  commands: Command[] = [];\n\n  constructor(private lanes: LanesMain, private workspace: Workspace, private scope: ScopeMain, docsDomain: string) {\n    this.description = `show lanes details\nhttps://${docsDomain}/components/lanes`;\n  }\n\n  async report([name]: [string], laneOptions: LaneOptions): Promise<string> {\n    return new LaneListCmd(this.lanes, this.workspace, this.scope).report([name], laneOptions);\n  }\n}\n\nfunction outputComponents(components: LaneData['components']): string {\n  const componentsTitle = `\\tcomponents (${components.length})\\n`;\n  const componentsStr = components.map((c) => `\\t  ${c.id.toString()} - ${c.head}`).join('\\n');\n  return componentsTitle + componentsStr;\n}\n\nfunction outputRemoteLane(remoteLane: string | null | undefined): string {\n  if (!remoteLane) return '';\n  return ` - (remote lane - ${remoteLane})`;\n}\n"]}