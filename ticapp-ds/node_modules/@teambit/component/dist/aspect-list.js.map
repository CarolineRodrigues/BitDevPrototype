{"version":3,"sources":["aspect-list.ts"],"names":["AspectList","constructor","entries","addEntry","aspectId","data","extensionDataEntry","ExtensionDataEntry","undefined","_legacy","entry","AspectEntry","push","withoutEntries","aspectIds","filter","includes","legacy","stringId","ids","list","map","id","toString","get","find","toStringWithoutVersion","ignoreVersion","aspectEntry","isEqual","predicate","pmap","entriesP","Promise","all","toConfigObject","res","forEach","config","serialize","serializedEntries","length","toLegacy","legacyEntries","ExtensionDataList","fromArray","stringIds","clone","fromLegacyExtensions","legacyDataList","scope","newEntries","getAspectId","extensionId","name","ComponentID","fromString","fromLegacy","Error"],"mappings":"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","sourcesContent":["import {\n  ExtensionDataList,\n  ExtensionDataEntry,\n  removeInternalConfigFields,\n} from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { ComponentID } from '@teambit/component-id';\nimport { AspectEntry, SerializableMap } from './aspect-entry';\n\n/**\n * list of aspects, each may have data and artifacts saved per component.\n */\nexport class AspectList {\n  constructor(readonly entries: AspectEntry[]) {}\n\n  addEntry(aspectId: ComponentID, data: SerializableMap = {}) {\n    const extensionDataEntry = new ExtensionDataEntry(undefined, aspectId._legacy, undefined, {}, data);\n    const entry = new AspectEntry(aspectId, extensionDataEntry);\n    this.entries.push(entry);\n    return entry;\n  }\n\n  /**\n   * transform an aspect list into a new one without the given aspect ids\n   */\n  withoutEntries(aspectIds: string[]): AspectList {\n    const entries = this.entries.filter((entry) => !aspectIds.includes(entry.legacy.stringId));\n    return new AspectList(entries);\n  }\n\n  /**\n   * get all ids as strings from the aspect list.\n   */\n  get ids(): string[] {\n    const list = this.entries.map((entry) => entry.id.toString());\n    return list;\n  }\n\n  /**\n   * get an aspect from the list using a serialized ID.\n   */\n  get(id: string): AspectEntry | undefined {\n    return this.entries.find((entry) => {\n      return entry.legacy.stringId === id || entry.id.toStringWithoutVersion() === id;\n    });\n  }\n\n  /**\n   * find aspect by component ID.\n   */\n  find(id: ComponentID, ignoreVersion = false): AspectEntry | undefined {\n    return this.entries.find((aspectEntry) => {\n      return id.isEqual(aspectEntry.id, { ignoreVersion });\n    });\n  }\n\n  /**\n   * transform an aspect list into a new one.\n   */\n  map(predicate: (entry: AspectEntry) => AspectEntry) {\n    const entries = this.entries.map(predicate);\n    return new AspectList(entries);\n  }\n\n  /**\n   * transform an aspect list into a new one.\n   */\n  async pmap(predicate: (entry: AspectEntry) => Promise<AspectEntry>) {\n    const entriesP = this.entries.map(predicate);\n    const entries = await Promise.all(entriesP);\n    return new AspectList(entries);\n  }\n\n  toConfigObject() {\n    const res = {};\n    this.entries.forEach((entry) => {\n      if (entry.config) {\n        res[entry.id.toString()] = removeInternalConfigFields(entry.config);\n      }\n    });\n    return res;\n  }\n\n  serialize() {\n    const serializedEntries = this.entries.map((entry) => entry.serialize());\n    return serializedEntries;\n  }\n\n  filter(ids?: string[]): AspectList {\n    if (!ids?.length) return new AspectList(this.entries);\n    const entries = this.entries.filter((aspectEntry) => {\n      return ids?.includes(aspectEntry.id.toStringWithoutVersion());\n    });\n    return new AspectList(entries);\n  }\n\n  toLegacy(): ExtensionDataList {\n    const legacyEntries = this.entries.map((entry) => entry.legacy);\n    return ExtensionDataList.fromArray(legacyEntries);\n  }\n\n  stringIds(): string[] {\n    const ids = this.entries.map((entry) => entry.id.toString());\n    return ids;\n  }\n\n  clone(): AspectList {\n    return new AspectList(this.entries.map((entry) => entry.clone()));\n  }\n\n  static fromLegacyExtensions(legacyDataList: ExtensionDataList, scope?: string): AspectList {\n    const newEntries = legacyDataList.map((entry) => {\n      return new AspectEntry(getAspectId(entry, scope), entry);\n    });\n\n    return new AspectList(newEntries);\n  }\n}\n\nfunction getAspectId(entry: ExtensionDataEntry, scope?: string) {\n  if (!entry.extensionId && entry.name) return ComponentID.fromString(entry.name);\n  if (entry.extensionId) return ComponentID.fromLegacy(entry.extensionId, scope);\n  throw new Error('aspect cannot be loaded without setting an ID');\n}\n"]}