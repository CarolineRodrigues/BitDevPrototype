{"version":3,"sources":["tag.ts"],"names":["Tag","constructor","hash","version","toObject","raw","fromObject","tag","SemVer"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOA;AACA;AACA;AACO,MAAMA,GAAN,CAAU;AACfC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,IAJA;AAMT;AACJ;AACA;AACaC,EAAAA,OATA,EAUT;AAAA,SANSD,IAMT,GANSA,IAMT;AAAA,SADSC,OACT,GADSA,OACT;AAAE;AAEJ;AACF;AACA;;;AACEC,EAAAA,QAAQ,GAAa;AACnB,WAAO;AACLF,MAAAA,IAAI,EAAE,KAAKA,IADN;AAELC,MAAAA,OAAO,EAAE,KAAKA,OAAL,CAAaE;AAFjB,KAAP;AAID;;AAEgB,SAAVC,UAAU,CAACC,GAAD,EAAgB;AAC/B,WAAO,IAAIP,GAAJ,CAAQO,GAAG,CAACL,IAAZ,EAAkB,KAAIM,gBAAJ,EAAWD,GAAG,CAACJ,OAAf,CAAlB,CAAP;AACD;;AAzBc","sourcesContent":["import { SemVer } from 'semver';\n\nexport type TagProps = {\n  hash: string;\n  version: string;\n};\n\n/**\n * `Tag` provides a sematic reference to a specific state `Snap` in the working tree.\n */\nexport class Tag {\n  constructor(\n    /**\n     * tag hash, can be used to load it by component-factory.getSnap\n     */\n    readonly hash: string,\n\n    /**\n     * sematic version of the snap.\n     */\n    readonly version: SemVer\n  ) {}\n\n  /**\n   * create a plain tag object.\n   */\n  toObject(): TagProps {\n    return {\n      hash: this.hash,\n      version: this.version.raw,\n    };\n  }\n\n  static fromObject(tag: TagProps) {\n    return new Tag(tag.hash, new SemVer(tag.version));\n  }\n}\n"]}