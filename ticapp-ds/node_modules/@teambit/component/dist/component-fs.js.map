{"version":3,"sources":["component-fs.ts"],"names":["ComponentFS","MemoryFS","constructor","files","hash","byRegex","extension","filter","file","path","match","byGlob","patterns","find","pattern","relative","toObject","map","contents","fromVinyls","fs","forEach","dirPath","relativeDir","startsWith","join","mkdirpSync","writeFileSync"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AACA;AACA;AACe,MAAMA,WAAN,SAA0BC,iBAA1B,CAAmC;AAChDC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,KAJA,EAKT;AACA;AADA,SADSA,KACT,GADSA,KACT;AAED;AACD;AACF;AACA;;;AACU,MAAJC,IAAI,GAAG;AACT,WAAO,EAAP;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,OAAO,CAACC,SAAD,EAAqC;AAC1C,WAAO,KAAKH,KAAL,CAAWI,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBJ,SAAhB,CAA5B,CAAP;AACD;AAED;AACF;AACA;;;AACEK,EAAAA,MAAM,CAACC,QAAD,EAAqB;AACzB,WAAO,KAAKT,KAAL,CAAWI,MAAX,CAAmBC,IAAD,IAAU;AACjC,aAAOI,QAAQ,CAACC,IAAT,CAAeC,OAAD,IAAa;AAChC,cAAMJ,KAAK,GAAG,0BAAUF,IAAI,CAACO,QAAf,EAAyBD,OAAzB,CAAd;AACA,eAAOJ,KAAP;AACD,OAHM,CAAP;AAID,KALM,CAAP;AAMD;;AAEDM,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKb,KAAL,CAAWc,GAAX,CAAgBT,IAAD,IAAU;AAC9B,aAAO;AACLC,QAAAA,IAAI,EAAED,IAAI,CAACC,IADN;AAELS,QAAAA,QAAQ,EAAEV,IAAI,CAACU;AAFV,OAAP;AAID,KALM,CAAP;AAMD;;AAEgB,SAAVC,UAAU,CAAChB,KAAD,EAAyB;AACxC,UAAMiB,EAAE,GAAG,IAAIpB,WAAJ,CAAgBG,KAAhB,CAAX;AACAA,IAAAA,KAAK,CAACkB,OAAN,CAAeb,IAAD,IAAU;AACtB,UAAIc,OAAO,GAAGd,IAAI,CAACe,WAAnB;AACA,UAAI,CAACD,OAAO,CAACE,UAAR,CAAmB,GAAnB,CAAL,EAA8BF,OAAO,GAAGb,gBAAKgB,IAAL,CAAU,GAAV,EAAeH,OAAf,CAAV;AAC9BF,MAAAA,EAAE,CAACM,UAAH,CAAcJ,OAAd;AACAF,MAAAA,EAAE,CAACO,aAAH,CAAkB,IAAGnB,IAAI,CAACO,QAAS,EAAnC,EAAsC,iBAAKP,IAAI,CAACU,QAAL,IAAiB,EAAtB,CAAtC;AACD,KALD;AAOA,WAAOE,EAAP;AACD;;AAtD+C","sourcesContent":["import { MemoryFS } from '@teambit/any-fs';\nimport type { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { auto } from '@teambit/legacy/dist/utils/eol';\nimport path from 'path';\nimport minimatch from 'minimatch';\n\n/**\n * The virtual component filesystem\n */\nexport default class ComponentFS extends MemoryFS {\n  constructor(\n    /**\n     * array of all fs files.\n     */\n    readonly files: AbstractVinyl[]\n  ) {\n    super();\n  }\n  /**\n   * hash to represent all contents within this filesystem volume.\n   */\n  get hash() {\n    return '';\n  }\n\n  /**\n   * filter all component files by regex.\n   */\n  byRegex(extension: RegExp): AbstractVinyl[] {\n    return this.files.filter((file) => file.path.match(extension));\n  }\n\n  /**\n   * filter all files using an array of glob patterns.\n   */\n  byGlob(patterns: string[]) {\n    return this.files.filter((file) => {\n      return patterns.find((pattern) => {\n        const match = minimatch(file.relative, pattern);\n        return match;\n      });\n    });\n  }\n\n  toObject() {\n    return this.files.map((file) => {\n      return {\n        path: file.path,\n        contents: file.contents,\n      };\n    });\n  }\n\n  static fromVinyls(files: AbstractVinyl[]) {\n    const fs = new ComponentFS(files);\n    files.forEach((file) => {\n      let dirPath = file.relativeDir;\n      if (!dirPath.startsWith('/')) dirPath = path.join('/', dirPath);\n      fs.mkdirpSync(dirPath);\n      fs.writeFileSync(`/${file.relative}`, auto(file.contents || ''));\n    });\n\n    return fs;\n  }\n}\n"]}