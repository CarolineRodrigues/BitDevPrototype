{"version":3,"sources":["show.cmd.ts"],"names":["ShowCmd","constructor","component","getComponent","idStr","remote","bitId","BitId","parse","host","getHost","id","resolveComponentId","getRemoteComponent","Error","get","MissingBitMapComponent","useLegacy","json","compare","legacyShow","LegacyShow","showData","action","versions","undefined","report","legacy","fragments","getShowFragments","rows","Promise","all","map","fragment","row","renderRow","content","title","table","CLITable","render","JSON","filter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AALA;AACA;AAOO,MAAMA,OAAN,CAAiC;AAgBtCC,EAAAA,WAAW,CAASC,SAAT,EAAmC;AAAA,SAA1BA,SAA0B,GAA1BA,SAA0B;AAAA,kDAfvC,WAeuC;AAAA,yDAdhC,kBAcgC;AAAA,mDAbtC,EAasC;AAAA,mDAZtC,MAYsC;AAAA,qDAXpC,CACR,CAAC,GAAD,EAAM,MAAN,EAAc,0CAAd,CADQ,EAER,CAAC,GAAD,EAAM,QAAN,EAAgB,0BAAhB,CAFQ,EAGR,CAAC,GAAD,EAAM,QAAN,EAAgB,yBAAhB,CAHQ,EAIR,CACE,GADF,EAEE,SAFF,EAGE,0GAHF,CAJQ,CAWoC;AAAE;;AAEtB,QAAZC,YAAY,CAACC,KAAD,EAAgBC,MAAhB,EAAiC;AACzD,QAAIA,MAAJ,EAAY;AACV,YAAMC,KAAY,GAAGC,qBAAMC,KAAN,CAAYJ,KAAZ,EAAmB,IAAnB,CAArB,CADU,CACqC;;;AAC/C,YAAMK,IAAI,GAAG,KAAKP,SAAL,CAAeQ,OAAf,CAAuB,qBAAvB,CAAb;AACA,YAAMC,EAAE,GAAG,MAAMF,IAAI,CAACG,kBAAL,CAAwBN,KAAxB,CAAjB;;AACA,UAAI,CAACG,IAAI,CAACI,kBAAV,EAA8B;AAC5B,cAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD,YAAMZ,SAAS,GAAG,MAAMO,IAAI,CAACI,kBAAL,CAAwBF,EAAxB,CAAxB;AACA,aAAOT,SAAP;AACD;;AACD,UAAMO,IAAI,GAAG,KAAKP,SAAL,CAAeQ,OAAf,EAAb;AACA,UAAMC,EAAE,GAAG,MAAMF,IAAI,CAACG,kBAAL,CAAwBR,KAAxB,CAAjB;AACA,UAAMF,SAAS,GAAG,MAAMO,IAAI,CAACM,GAAL,CAASJ,EAAT,CAAxB;AACA,QAAI,CAACT,SAAL,EAAgB,MAAM,KAAIc,oCAAJ,EAA2BZ,KAA3B,CAAN;AAChB,WAAOF,SAAP;AACD;;AAEc,QAATe,SAAS,CAACN,EAAD,EAAaO,IAAI,GAAG,KAApB,EAA2Bb,MAAM,GAAG,KAApC,EAA2Cc,OAAO,GAAG,KAArD,EAA4D;AACzE,UAAMC,UAAU,GAAG,KAAIC,kBAAJ,GAAnB;AACA,UAAMC,QAAQ,GAAG,MAAMF,UAAU,CAACG,MAAX,CAAkB,CAACZ,EAAD,CAAlB,EAAwB;AAC7CO,MAAAA,IAD6C;AAE7CM,MAAAA,QAAQ,EAAEC,SAFmC;AAG7CpB,MAAAA,MAH6C;AAI7Cc,MAAAA;AAJ6C,KAAxB,CAAvB;AAOA,WAAOC,UAAU,CAACM,MAAX,CAAkBJ,QAAlB,CAAP;AACD;;AAEW,QAANI,MAAM,CAAC,CAACtB,KAAD,CAAD,EAAoB;AAAEuB,IAAAA,MAAF;AAAUtB,IAAAA,MAAV;AAAkBc,IAAAA;AAAlB,GAApB,EAAyG;AACnH,QAAIQ,MAAJ,EAAY,OAAO,KAAKV,SAAL,CAAeb,KAAf,EAAsB,KAAtB,EAA6BC,MAA7B,EAAqCc,OAArC,CAAP;AACZ,UAAMjB,SAAS,GAAG,MAAM,KAAKC,YAAL,CAAkBC,KAAlB,EAAyBC,MAAzB,CAAxB;AACA,UAAMuB,SAAS,GAAG,KAAK1B,SAAL,CAAe2B,gBAAf,EAAlB;AACA,UAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACjBJ,SAAS,CAACK,GAAV,CAAc,MAAOC,QAAP,IAAoB;AAChC,YAAMC,GAAG,GAAG,MAAMD,QAAQ,CAACE,SAAT,CAAmBlC,SAAnB,CAAlB;AACA,UAAI,CAACiC,GAAG,CAACE,OAAT,EAAkB,OAAO,IAAP;AAClB,aAAO,CAACF,GAAG,CAACG,KAAL,EAAYH,GAAG,CAACE,OAAhB,CAAP;AACD,KAJD,CADiB,CAAnB;AAQA,UAAME,KAAK,GAAG,KAAIC,oBAAJ,EAAa,EAAb,EAAiB,uBAAQV,IAAR,CAAjB,CAAd;AACA,WAAOS,KAAK,CAACE,MAAN,EAAP;AACD;;AAES,QAAJvB,IAAI,CAAC,CAACd,KAAD,CAAD,EAAoB;AAAEC,IAAAA,MAAF;AAAUsB,IAAAA;AAAV,GAApB,EAA8E;AACtF,QAAIA,MAAJ,EAAY,OAAOe,IAAI,CAAClC,KAAL,CAAW,MAAM,KAAKS,SAAL,CAAeb,KAAf,EAAsB,IAAtB,EAA4BC,MAA5B,CAAjB,CAAP;AACZ,UAAMH,SAAS,GAAG,MAAM,KAAKC,YAAL,CAAkBC,KAAlB,EAAyBC,MAAzB,CAAxB;AACA,UAAMuB,SAAS,GAAG,KAAK1B,SAAL,CAAe2B,gBAAf,EAAlB;AACA,UAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACjBJ,SAAS,CAACK,GAAV,CAAc,MAAOC,QAAP,IAAoB;AAChC,aAAOA,QAAQ,CAAChB,IAAT,GAAgBgB,QAAQ,CAAChB,IAAT,CAAchB,SAAd,CAAhB,GAA2CuB,SAAlD;AACD,KAFD,CADiB,CAAnB;AAMA,WAAOK,IAAI,CAACa,MAAL,CAAaR,GAAD,IAAS,CAAC,CAACA,GAAvB,CAAP;AACD;;AA3EqC","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport { compact } from 'lodash';\n// import { Logger } from '@teambit/logger';\n// import chalk from 'chalk';\nimport { CLITable } from '@teambit/cli-table';\nimport { MissingBitMapComponent } from '@teambit/legacy/dist/consumer/bit-map/exceptions';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport LegacyShow from '@teambit/legacy/dist/cli/commands/public-cmds/show-cmd';\nimport { ComponentMain } from '../component.main.runtime';\n\nexport class ShowCmd implements Command {\n  name = 'show <id>';\n  description = 'show a component';\n  alias = '';\n  group = 'info';\n  options = [\n    ['j', 'json', 'return the component data in json format'],\n    ['l', 'legacy', 'use the legacy bit show.'],\n    ['r', 'remote', 'show a remote component'],\n    [\n      'c',\n      'compare',\n      'compare current file system component to latest tagged component [default=latest]. only works in legacy.',\n    ],\n  ] as CommandOptions;\n\n  constructor(private component: ComponentMain) {}\n\n  private async getComponent(idStr: string, remote: boolean) {\n    if (remote) {\n      const bitId: BitId = BitId.parse(idStr, true); // user used --remote so we know it has a scope\n      const host = this.component.getHost('teambit.scope/scope');\n      const id = await host.resolveComponentId(bitId);\n      if (!host.getRemoteComponent) {\n        throw new Error('Component Host does not implement getRemoteComponent()');\n      }\n      const component = await host.getRemoteComponent(id);\n      return component;\n    }\n    const host = this.component.getHost();\n    const id = await host.resolveComponentId(idStr);\n    const component = await host.get(id);\n    if (!component) throw new MissingBitMapComponent(idStr);\n    return component;\n  }\n\n  async useLegacy(id: string, json = false, remote = false, compare = false) {\n    const legacyShow = new LegacyShow();\n    const showData = await legacyShow.action([id], {\n      json,\n      versions: undefined,\n      remote,\n      compare,\n    });\n\n    return legacyShow.report(showData);\n  }\n\n  async report([idStr]: [string], { legacy, remote, compare }: { legacy: boolean; remote: boolean; compare: boolean }) {\n    if (legacy) return this.useLegacy(idStr, false, remote, compare);\n    const component = await this.getComponent(idStr, remote);\n    const fragments = this.component.getShowFragments();\n    const rows = await Promise.all(\n      fragments.map(async (fragment) => {\n        const row = await fragment.renderRow(component);\n        if (!row.content) return null;\n        return [row.title, row.content];\n      })\n    );\n\n    const table = new CLITable([], compact(rows));\n    return table.render();\n  }\n\n  async json([idStr]: [string], { remote, legacy }: { remote: boolean; legacy: boolean }) {\n    if (legacy) return JSON.parse(await this.useLegacy(idStr, true, remote));\n    const component = await this.getComponent(idStr, remote);\n    const fragments = this.component.getShowFragments();\n    const rows = await Promise.all(\n      fragments.map(async (fragment) => {\n        return fragment.json ? fragment.json(component) : undefined;\n      })\n    );\n\n    return rows.filter((row) => !!row);\n  }\n}\n"]}