{"version":3,"sources":["state.ts"],"names":["State","constructor","config","_aspects","filesystem","dependencies","_consumer","mainFile","file","files","find","componentFile","relative","MainFileNotFound","ComponentID","fromLegacy","id","hash","issues","IssuesList","isModified","_isModified","aspects"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,KAAN,CAAY;AACjBC,EAAAA,WAAW;AACT;AACJ;AACA;AACA;AACaC,EAAAA,MALA;AAOT;AACJ;AACA;AACYC,EAAAA,QAVC;AAYT;AACJ;AACA;AACaC,EAAAA,UAfA;AAiBT;AACJ;AACA;AACI;AACSC,EAAAA,YArBA;AAuBT;AACJ;AACA;AACaC,EAAAA,SA1BA,EA2BT;AAAA,SAtBSJ,MAsBT,GAtBSA,MAsBT;AAAA,SAjBQC,QAiBR,GAjBQA,QAiBR;AAAA,SAZSC,UAYT,GAZSA,UAYT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SADSC,SACT,GADSA,SACT;AAAE;AAEJ;AACF;AACA;;;AACc,MAARC,QAAQ,GAAG;AACb,UAAMC,IAAI,GAAG,KAAKJ,UAAL,CAAgBK,KAAhB,CAAsBC,IAAtB,CAA4BC,aAAD,IAAmB;AACzD,aAAOA,aAAa,CAACC,QAAd,KAA2B,KAAKN,SAAL,CAAeC,QAAjD;AACD,KAFY,CAAb;AAIA,QAAI,CAACC,IAAL,EAAW,MAAM,KAAIK,8BAAJ,EAAqBC,2BAAYC,UAAZ,CAAuB,KAAKT,SAAL,CAAeU,EAAtC,CAArB,EAAgE,KAAKV,SAAL,CAAeC,QAA/E,CAAN;AAEX,WAAOC,IAAP;AACD;AAED;AACF;AACA;;;AACU,MAAJS,IAAI,GAAG;AACT,WAAO,EAAP;AACD;;AAES,MAANC,MAAM,GAAe;AAAA;;AACvB,WAAQ,wBAAKZ,SAAL,EAAeY,MAAvB,KAAQ,gBAAeA,MAAvB,GAAkC,KAAIC,6BAAJ,GAAlC;AACD;AAED;AACF;AACA;;;AAEgB,MAAVC,UAAU,GAAY;AACxB,WAAO,KAAKd,SAAL,CAAee,WAAtB;AACD;;AAEU,MAAPC,OAAO,GAAe;AACxB,WAAO,KAAKnB,QAAZ;AACD;;AAEU,MAAPmB,OAAO,CAACA,OAAD,EAAsB;AAC/B,SAAKnB,QAAL,GAAgBmB,OAAhB;AACD,GApEgB,CAsEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA/EiB","sourcesContent":["import { IssuesList } from '@teambit/component-issues';\nimport { ComponentID } from '@teambit/component-id';\nimport ComponentFS from './component-fs';\nimport Config from './config';\nimport { AspectList } from './aspect-list';\nimport { MainFileNotFound } from './exceptions';\n\nexport class State {\n  constructor(\n    /**\n     * component configuration which is later generated to a component `package.json` and `bit.json`.\n     * @deprecated please use `aspects` instead.\n     */\n    readonly config: Config,\n\n    /**\n     * list of aspects configured on the component.\n     */\n    private _aspects: AspectList,\n\n    /**\n     * in-memory representation of the component current filesystem.\n     */\n    readonly filesystem: ComponentFS,\n\n    /**\n     * dependency graph of the component current. ideally package dependencies would be also placed here.\n     */\n    // readonly dependencies: Dependencies\n    readonly dependencies,\n\n    /**\n     * instance of legacy consumer component.\n     */\n    readonly _consumer: any\n  ) {}\n\n  /**\n   * get the main file of the component.\n   */\n  get mainFile() {\n    const file = this.filesystem.files.find((componentFile) => {\n      return componentFile.relative === this._consumer.mainFile;\n    });\n\n    if (!file) throw new MainFileNotFound(ComponentID.fromLegacy(this._consumer.id), this._consumer.mainFile);\n\n    return file;\n  }\n\n  /**\n   * calculate the hash of this state\n   */\n  get hash() {\n    return '';\n  }\n\n  get issues(): IssuesList {\n    return (this._consumer.issues ||= new IssuesList());\n  }\n\n  /**\n   * is modified\n   */\n\n  get isModified(): boolean {\n    return this._consumer._isModified;\n  }\n\n  get aspects(): AspectList {\n    return this._aspects;\n  }\n\n  set aspects(aspects: AspectList) {\n    this._aspects = aspects;\n  }\n\n  // static fromLegacy(consumerComponent: ConsumerComponent) {\n  //   return new State(\n  //     new Config(consumerComponent.mainFile, consumerComponent.extensions),\n  //     consumerComponent.version || 'new',\n  //     ComponentFS.fromVinyls(consumerComponent.files),\n  //     Store.fromArray([]),\n  //     consumerComponent.dependencies,\n  //     consumerComponent\n  //   );\n  // }\n}\n"]}