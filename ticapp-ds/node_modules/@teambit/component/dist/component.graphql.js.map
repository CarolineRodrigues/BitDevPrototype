{"version":3,"sources":["component.graphql.ts"],"names":["componentSchema","componentExtension","typeDefs","resolvers","JSONObject","GraphQLJSONObject","Component","id","component","toObject","displayName","fs","state","filesystem","files","map","file","relative","getFile","path","maybeFile","find","undefined","contents","toString","mainFile","_consumer","headTag","latest","tags","toArray","tag","aspects","include","filter","serialize","logs","getLogs","log","hash","ComponentHost","get","host","componentId","resolveComponentId","error","snaps","list","listInvalid","invalidComps","err","errorName","name","errorMessage","message","Query","getHost","componentExt"],"mappings":"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","sourcesContent":["import stripAnsi from 'strip-ansi';\nimport gql from 'graphql-tag';\nimport { GraphQLJSONObject } from 'graphql-type-json';\nimport { pathNormalizeToLinux } from '@teambit/legacy/dist/utils';\nimport { Component } from './component';\nimport { ComponentFactory } from './component-factory';\nimport { ComponentMain } from './component.main.runtime';\n\nexport function componentSchema(componentExtension: ComponentMain) {\n  return {\n    typeDefs: gql`\n      scalar JSON\n      scalar JSONObject\n\n      type ComponentID {\n        name: String!\n        version: String\n        scope: String\n      }\n\n      type Tag {\n        # semver assigned to the tag.\n        version: String!\n\n        # tag hash.\n        hash: String!\n      }\n\n      type Snap {\n        # hash of the snapshot.\n        hash: String!\n\n        # time of the snapshot.\n        timestamp: String!\n\n        # parents of the snap\n        parents: [Snap]!\n\n        # snapper\n        author: Author!\n\n        # snapshot message\n        message: String\n      }\n\n      type LogEntry {\n        message: String!\n        username: String\n        email: String\n        date: String\n        hash: String!\n        tag: String\n        id: String!\n      }\n\n      type Author {\n        # display name of the snapper.\n        displayName: String!\n\n        # author of the snapper.\n        email: String!\n      }\n\n      type Component {\n        # id of the component.\n        id: ComponentID!\n\n        # head snap of the component.\n        head: Snap\n\n        # head tag of the component.\n        headTag: Tag\n\n        # list of all relative component paths.\n        fs: [String]\n\n        # relative path to the main file of the component\n        mainFile: String\n\n        # return specific file contents by relative file path.\n        getFile(path: String): String\n\n        # latest version of the component.\n        latest: String\n\n        # display name of the component\n        displayName: String!\n\n        # component buildStatus\n        buildStatus: String\n\n        # list of component releases.\n        tags: [Tag]!\n\n        # component logs\n        logs(type: String, offset: Int, limit: Int, head: String, sort: String): [LogEntry]!\n\n        aspects(include: [String]): [Aspect]\n      }\n\n      type Aspect {\n        id: String!\n        icon: String\n        config: JSONObject\n        data: JSONObject\n      }\n\n      type InvalidComponent {\n        id: ComponentID!\n        errorName: String!\n        errorMessage: String!\n      }\n\n      type ComponentHost {\n        id: ID!\n        name: String!\n\n        # load a component.\n        get(id: String!, withState: Boolean): Component\n\n        # list components\n        list(offset: Int, limit: Int): [Component]!\n\n        # list invalid components and their errors\n        listInvalid: [InvalidComponent]!\n\n        # get component logs(snaps) by component id\n        snaps(id: String!): [LogEntry]! @deprecated(reason: \"Use the logs field on Component\")\n      }\n\n      type Query {\n        getHost(id: String): ComponentHost\n      }\n    `,\n    resolvers: {\n      JSONObject: GraphQLJSONObject,\n      Component: {\n        id: (component: Component) => component.id.toObject(),\n        displayName: (component: Component) => component.displayName,\n        fs: (component: Component) => {\n          return component.state.filesystem.files.map((file) => file.relative);\n        },\n        getFile: (component: Component, { path }: { path: string }) => {\n          const maybeFile = component.state.filesystem.files.find(\n            (file) => pathNormalizeToLinux(file.relative) === path\n          );\n          if (!maybeFile) return undefined;\n          return maybeFile.contents.toString('utf-8');\n        },\n        mainFile: (component: Component) => {\n          return component.state._consumer.mainFile;\n        },\n        headTag: (component: Component) => component.headTag?.toObject(),\n        latest: (component: Component) => component.latest,\n        tags: (component) => {\n          // graphql doesn't support map types\n          return component.tags.toArray().map((tag) => tag.toObject());\n        },\n        aspects: (component: Component, { include }: { include?: string[] }) => {\n          return component.state.aspects.filter(include).serialize();\n        },\n        logs: async (\n          component: Component,\n          filter?: { type?: string; offset?: number; limit?: number; head?: string; sort?: string }\n        ) => {\n          return (await component.getLogs(filter)).map((log) => ({ ...log, id: log.hash }));\n        },\n      },\n      ComponentHost: {\n        get: async (host: ComponentFactory, { id }: { id: string }) => {\n          try {\n            const componentId = await host.resolveComponentId(id);\n            const component = await host.get(componentId);\n            return component;\n          } catch (error: any) {\n            return null;\n          }\n        },\n        snaps: async (host: ComponentFactory, { id }: { id: string }) => {\n          const componentId = await host.resolveComponentId(id);\n          // return (await host.getLogs(componentId)).map(log => ({...log, id: log.hash}))\n          return host.getLogs(componentId);\n        },\n        list: async (host: ComponentFactory, filter?: { offset: number; limit: number }) => {\n          return host.list(filter);\n        },\n        listInvalid: async (host: ComponentFactory) => {\n          const invalidComps = await host.listInvalid();\n          return invalidComps.map(({ id, err }) => ({\n            id,\n            errorName: err.name,\n            errorMessage: err.message ? stripAnsi(err.message) : err.name,\n          }));\n        },\n        id: async (host: ComponentFactory) => {\n          return host.name;\n        },\n        name: async (host: ComponentFactory) => {\n          return host.name;\n        },\n      },\n      Query: {\n        getHost: (componentExt: ComponentMain, { id }: { id: string }) => {\n          return componentExtension.getHost(id);\n        },\n      },\n    },\n  };\n}\n"]}