{"version":3,"sources":["dependencies.ts"],"names":["DEV_ENV","RUNTIME_ENV","DependencyId","BitId","Dependency","constructor","id","PackageDependency","ComponentDependency","DependencyList","Array","packages","filter","dep","components","fromArray","dependencies","Dependencies","runtime","dev","peer","getByEnvironment","env","concat","BitError","computeDev","computeRuntime"],"mappings":";;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;AAIA,MAAMA,OAAO,GAAG,aAAhB;AACA,MAAMC,WAAW,GAAG,SAApB,C,CAEA;;AAEA;AAEO,MAAMC,YAAN,SAA2BC,oBAA3B,CAAiC;;;;AAEjC,MAAMC,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAAQC,EAAR,EAA0B;AAAA,SAAlBA,EAAkB,GAAlBA,EAAkB;AAAE;;AADjB;;;;AAIjB,MAAMC,iBAAN,SAAgCH,UAAhC,CAA2C;;;;AAE3C,MAAMI,mBAAN,SAAkCJ,UAAlC,CAA6C;;;;AAE7C,MAAMK,cAAN,SAA6BC,KAA7B,CAA+C;AACpD;AACF;AACA;AACA;AACA;AACA;AACc,MAARC,QAAQ,GAAwB;AAClC,WAAO,KAAKC,MAAL,CAAaC,GAAD,IAASA,GAAG,YAAYN,iBAApC,CAAP;AACD;;AAEa,MAAVO,UAAU,GAA0B;AACtC,WAAO,KAAKF,MAAL,CAAaC,GAAD,IAASA,GAAG,YAAYL,mBAApC,CAAP;AACD;;AAEe,SAATO,SAAS,CAACC,YAAD,EAA6C;AAC3D,WAAO,IAAIP,cAAJ,CAAmB,GAAGO,YAAtB,CAAP;AACD;;AAjBmD;;;;AAoB/C,MAAMC,YAAN,CAAmB;AACxBZ,EAAAA,WAAW,CAAQa,OAAR,EAAwCC,GAAxC,EAAoEC,IAApE,EAA0F;AAAA,SAAlFF,OAAkF,GAAlFA,OAAkF;AAAA,SAAlDC,GAAkD,GAAlDA,GAAkD;AAAA,SAAtBC,IAAsB,GAAtBA,IAAsB;AAAE;;AAE/FC,EAAAA,gBAAgB,CAACC,GAAD,EAAmC;AACzD,QAAIA,GAAG,KAAKtB,OAAZ,EAAqB;AACnB,aAAOS,cAAc,CAACM,SAAf,CAAyB,KAAKG,OAAL,CAAaK,MAAb,CAAoB,KAAKJ,GAAzB,EAA8BI,MAA9B,CAAqC,KAAKH,IAA1C,CAAzB,CAAP;AACD;;AACD,QAAIE,GAAG,KAAKrB,WAAZ,EAAyB;AACvB,aAAOQ,cAAc,CAACM,SAAf,CAAyB,KAAKG,OAAL,CAAaK,MAAb,CAAoB,KAAKH,IAAzB,CAAzB,CAAP;AACD;;AACD,UAAM,KAAII,oBAAJ,EAAc,OAAMF,GAAI,mBAAxB,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,UAAU,GAAmB;AAC3B,WAAO,KAAKJ,gBAAL,CAAsBrB,OAAtB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE0B,EAAAA,cAAc,GAAmB;AAC/B,WAAO,KAAKL,gBAAL,CAAsBpB,WAAtB,CAAP;AACD;;AA/BuB","sourcesContent":["/* eslint-disable max-classes-per-file */\nimport { BitError } from '@teambit/bit-error';\nimport { BitId } from '@teambit/legacy-bit-id';\n\nconst DEV_ENV = 'development';\nconst RUNTIME_ENV = 'runtime';\n\n// type Environment = DEV_ENV | RUNTIME_ENV;\ntype Environment = 'development' | 'runtime';\n// type WrappingMethod = 'component' | 'package';\n\nexport class DependencyId extends BitId {}\n\nexport class Dependency {\n  constructor(public id: DependencyId) {}\n}\n\nexport class PackageDependency extends Dependency {}\n\nexport class ComponentDependency extends Dependency {}\n\nexport class DependencyList extends Array<Dependency> {\n  /**\n   * Get only package dependencies\n   *\n   * @readonly\n   * @memberof DependencyList\n   */\n  get packages(): PackageDependency[] {\n    return this.filter((dep) => dep instanceof PackageDependency);\n  }\n\n  get components(): ComponentDependency[] {\n    return this.filter((dep) => dep instanceof ComponentDependency);\n  }\n\n  static fromArray(dependencies: Dependency[]): DependencyList {\n    return new DependencyList(...dependencies);\n  }\n}\n\nexport class Dependencies {\n  constructor(public runtime: DependencyList, public dev: DependencyList, public peer: DependencyList) {}\n\n  private getByEnvironment(env: Environment): DependencyList {\n    if (env === DEV_ENV) {\n      return DependencyList.fromArray(this.runtime.concat(this.dev).concat(this.peer));\n    }\n    if (env === RUNTIME_ENV) {\n      return DependencyList.fromArray(this.runtime.concat(this.peer));\n    }\n    throw new BitError(`env ${env} is not supported`);\n  }\n\n  /**\n   * Get dependencies needed for development environnement such as runtime, dev and peer\n   *\n   * @returns {DependencyList}\n   * @memberof Dependencies\n   */\n  computeDev(): DependencyList {\n    return this.getByEnvironment(DEV_ENV);\n  }\n\n  /**\n   * Get dependencies needed for runtime environnement such as runtime and peer\n   *\n   * @returns {DependencyList}\n   * @memberof Dependencies\n   */\n  computeRuntime(): DependencyList {\n    return this.getByEnvironment(RUNTIME_ENV);\n  }\n}\n"]}