{"version":3,"sources":["aspect-entry.ts"],"names":["AspectEntry","constructor","id","legacyEntry","legacy","isLegacy","config","__legacy","data","isRemoved","val","transform","newData","newEntry","clone","serialize","toString","icon"],"mappings":";;;;;;;AAAA;AACA;AACA;AAkBO,MAAMA,WAAN,CAAkB;AACvBC,EAAAA,WAAW,CAAQC,EAAR,EAAiCC,WAAjC,EAAkE;AAAA,SAA1DD,EAA0D,GAA1DA,EAA0D;AAAA,SAAjCC,WAAiC,GAAjCA,WAAiC;AAAE;;AAErE,MAANC,MAAM,GAAG;AACX,WAAO,KAAKD,WAAZ;AACD;;AAEW,MAARE,QAAQ,GAAY;AAAA;;AACtB,wBAAI,KAAKC,MAAT,yCAAI,aAAaC,QAAjB,EAA2B,OAAO,IAAP;AAC3B,WAAO,KAAP;AACD;;AAES,MAAND,MAAM,GAAG;AACX,WAAO,KAAKF,MAAL,CAAYE,MAAnB;AACD;;AAES,MAANA,MAAM,CAACA,MAAD,EAAS;AACjB,SAAKF,MAAL,CAAYE,MAAZ,GAAqBA,MAArB;AACD;;AAEO,MAAJE,IAAI,GAA2B;AACjC,WAAO,KAAKJ,MAAL,CAAYI,IAAnB;AACD;;AAEY,MAATC,SAAS,GAAY;AACvB,WAAO,KAAKL,MAAL,CAAYK,SAAnB;AACD,GA1BsB,CA4BvB;;;AACQ,MAAJD,IAAI,CAACE,GAAD,EAA8B;AACpC,SAAKN,MAAL,CAAYI,IAAZ,GAAmBE,GAAnB;AACD;;AAEDC,EAAAA,SAAS,CAACC,OAAD,EAAwC;AAC/C,UAAMC,QAAQ,GAAG,KAAKC,KAAL,EAAjB;AACAD,IAAAA,QAAQ,CAACL,IAAT,GAAgBI,OAAhB;AACA,WAAO,IAAIZ,WAAJ,CAAgB,KAAKE,EAArB,EAAyBW,QAAQ,CAACT,MAAlC,CAAP;AACD;;AAEDU,EAAAA,KAAK,GAAgB;AACnB,WAAO,IAAId,WAAJ,CAAgB,KAAKE,EAArB,EAAyB,KAAKC,WAAL,CAAiBW,KAAjB,EAAzB,CAAP;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,WAAO;AACLb,MAAAA,EAAE,EAAE,KAAKA,EAAL,CAAQc,QAAR,EADC;AAELV,MAAAA,MAAM,EAAE,KAAKA,MAFR;AAGLE,MAAAA,IAAI,EAAE,KAAKA,IAHN;AAILS,MAAAA,IAAI,EAAE,qDAJD,CAIwD;;AAJxD,KAAP;AAMD;;AAlDsB","sourcesContent":["/**\n * avoid importing any (non-type) legacy code here. otherwise, PreviewTask will throw cryptic errors\n */\n\nimport type { ExtensionDataEntry } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { ComponentID } from '@teambit/component-id';\n\nexport type Serializable = {\n  toString(): string;\n};\n\nexport type SerializableMap = {\n  [key: string]: Serializable;\n};\n\nexport type AspectData = {\n  [key: string]: any;\n};\n\nexport type ResolveComponentIdFunc = (id: string) => Promise<ComponentID>;\nexport class AspectEntry {\n  constructor(public id: ComponentID, private legacyEntry: ExtensionDataEntry) {}\n\n  get legacy() {\n    return this.legacyEntry;\n  }\n\n  get isLegacy(): boolean {\n    if (this.config?.__legacy) return true;\n    return false;\n  }\n\n  get config() {\n    return this.legacy.config;\n  }\n\n  set config(config) {\n    this.legacy.config = config;\n  }\n\n  get data(): { [key: string]: any } {\n    return this.legacy.data;\n  }\n\n  get isRemoved(): boolean {\n    return this.legacy.isRemoved;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures\n  set data(val: { [key: string]: any }) {\n    this.legacy.data = val;\n  }\n\n  transform(newData: SerializableMap): AspectEntry {\n    const newEntry = this.clone();\n    newEntry.data = newData;\n    return new AspectEntry(this.id, newEntry.legacy);\n  }\n\n  clone(): AspectEntry {\n    return new AspectEntry(this.id, this.legacyEntry.clone());\n  }\n\n  serialize() {\n    return {\n      id: this.id.toString(),\n      config: this.config,\n      data: this.data,\n      icon: 'https://static.bit.dev/extensions-icons/default.svg', // TODO @gilad - once you connect the icon here please use this url as the default icon\n    };\n  }\n}\n"]}