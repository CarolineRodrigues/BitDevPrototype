{"version":3,"sources":["tag-map.ts"],"names":["TagMap","Map","byHash","hash","tag","Array","from","values","find","currTag","getPreReleaseLatestTags","preReleaseTagsWithAllVersions","toArray","reduce","acc","current","preReleases","version","prerelease","length","push","raw","Object","keys","includePrerelease","getHashMap","res","forEach","set","getLatest","versions","map","isEmpty","CouldNotFindLatest","size","byVersion","fromArray","tags","tuples","empty"],"mappings":"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","sourcesContent":["import { getLatestVersion } from '@teambit/legacy/dist/utils/semver-helper';\nimport { SemVer, maxSatisfying } from 'semver';\n\nimport { CouldNotFindLatest } from './exceptions';\nimport { Hash } from './hash';\nimport { Tag } from './tag';\n\nexport class TagMap extends Map<SemVer, Tag> {\n  /**\n   * get snap by hash.\n   */\n  byHash(hash: Hash) {\n    const tag = Array.from(this.values()).find((currTag) => currTag.hash === hash);\n    return tag;\n  }\n\n  /**\n   * e.g.\n   * {\n   *   alpha: '1.0.0-alpha.5',\n   *   dev: '2.2.4-dev.37\n   * }\n   */\n  getPreReleaseLatestTags(): { [preRelease: string]: string } {\n    const preReleaseTagsWithAllVersions = this.toArray().reduce((acc, current) => {\n      const preReleases = current.version.prerelease;\n      if (!preReleases.length) return acc;\n      if (preReleases.length !== 2) {\n        // it could be length 1, e.g. 1.0.0-0, we ignore it.\n        // it could also be length > 2, e.g. 1.0.0-dev.1.alpha.1, we don't support it for now.\n        return acc;\n      }\n      if (typeof preReleases[0] !== 'string') return acc;\n      (acc[preReleases[0]] ||= []).push(current.version.raw);\n      return acc;\n    }, {});\n    return Object.keys(preReleaseTagsWithAllVersions).reduce((acc, current) => {\n      acc[current] = maxSatisfying<string>(preReleaseTagsWithAllVersions[current], '*', { includePrerelease: true });\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Get a map that map snap hash to tag\n   */\n  getHashMap(): Map<Hash, Tag> {\n    const res: Map<Hash, Tag> = new Map();\n    this.forEach((tag: Tag) => {\n      res.set(tag.hash, tag);\n    });\n    return res;\n  }\n\n  /**\n   * get the latest semver from the tag map.\n   */\n  getLatest(): string {\n    const versions = this.toArray().map((tag) => tag.version.raw);\n    if (this.isEmpty()) throw new CouldNotFindLatest(versions);\n    return getLatestVersion(versions);\n  }\n\n  isEmpty() {\n    return this.size === 0;\n  }\n\n  /**\n   * get an array of all tags.\n   */\n  toArray(): Tag[] {\n    return Array.from(this.values());\n  }\n\n  byVersion(version: string): Tag | undefined {\n    const versions = this.toArray().map((tag) => tag);\n    return versions.find((tag) => tag.version.raw === version);\n  }\n\n  static fromArray(tags: Tag[]) {\n    const tuples: [SemVer, Tag][] = tags.map((tag) => [tag.version, tag]);\n    return new TagMap(tuples);\n  }\n\n  static empty() {\n    return new TagMap();\n  }\n}\n"]}