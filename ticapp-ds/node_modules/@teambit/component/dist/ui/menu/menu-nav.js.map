{"version":3,"sources":["menu-nav.tsx"],"names":["MenuNav","navigationSlot","plugins","toArray","sort","sortFn","styles","navigation","map","id","menuItem","props","order","first","second"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,SAASA,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAAgF;AACrF,QAAMC,OAAO,GAAGD,cAAc,CAACE,OAAf,GAAyBC,IAAzB,CAA8BC,MAA9B,CAAhB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEC,sBAAOC;AAAvB,KACGL,OAAO,CAACM,GAAR,CAAY,CAAC,CAACC,EAAD,EAAKC,QAAL,CAAD,kBACX,+BAAC,sBAAD;AAAW,IAAA,GAAG,EAAED;AAAhB,KAAwBC,QAAQ,CAACC,KAAjC,EADD,CADH,CADF;AAOD;;AAED,SAASN,MAAT,CAAgB,GAAG;AAAEO,EAAAA,KAAK,EAAEC;AAAT,CAAH,CAAhB,EAA2D,GAAG;AAAED,EAAAA,KAAK,EAAEE;AAAT,CAAH,CAA3D,EAAuG;AACrG;AACA;AACA;AAEA,SAAO,CAACD,KAAD,aAACA,KAAD,cAACA,KAAD,GAAU,CAAV,KAAgBC,MAAhB,aAAgBA,MAAhB,cAAgBA,MAAhB,GAA0B,CAA1B,CAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\n\nimport { TopBarNav } from '../top-bar-nav';\nimport styles from './menu.module.scss';\nimport { NavPlugin, OrderedNavigationSlot } from './nav-plugin';\n\nexport function MenuNav({ navigationSlot }: { navigationSlot: OrderedNavigationSlot }) {\n  const plugins = navigationSlot.toArray().sort(sortFn);\n\n  return (\n    <nav className={styles.navigation}>\n      {plugins.map(([id, menuItem]) => (\n        <TopBarNav key={id} {...menuItem.props} />\n      ))}\n    </nav>\n  );\n}\n\nfunction sortFn([, { order: first }]: [string, NavPlugin], [, { order: second }]: [string, NavPlugin]) {\n  // 0  - equal\n  // <0 - first < second\n  // >0 - first > second\n\n  return (first ?? 0) - (second ?? 0);\n}\n\n// // this is the aspect-oriented and serialize-able way to sort plugins.\n// const pluginOrder = ['teambit.docs/docs', 'teambit.compositions/compositions', 'teambit.docs/docs'];\n// export function toSortedArray<T>(slot: SlotRegistry<T>, order: string[]) {\n//   // sort items according to the order\n//   const sorted = order.map((x) => [x, slot.get(x)]).filter(([, val]) => !!val) as [string, T][];\n//\n//   // add all other items\n//   const unsorted = slot.toArray().filter(([id]) => order.indexOf(id) < 0);\n//\n//   return sorted.concat(unsorted);\n// }\n"]}