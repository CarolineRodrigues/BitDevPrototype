{"version":3,"sources":["component-model.ts"],"names":["ComponentModel","constructor","id","displayName","packageName","server","compositions","tags","buildStatus","issuesCount","elementsUrl","status","deprecation","environment","description","labels","host","latest","preview","logs","version","from","env","ComponentID","fromObject","Composition","fromArray","TagMap","map","tag","Tag","componentsProps","rawComponent","empty","name","scope","url"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAqCO,MAAMA,cAAN,CAAqB;AAC1BC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,EAJA;AAMT;AACJ;AACA;AACaC,EAAAA,WATA;AAWT;AACJ;AACA;AACaC,EAAAA,WAdA;AAgBT;AACJ;AACA;AACaC,EAAAA,MAnBA;AAqBT;AACJ;AACA;AACaC,EAAAA,YAxBA;AA0BT;AACJ;AACA;AACaC,EAAAA,IA7BA;AA+BT;AACJ;AACA;AACaC,EAAAA,WAlCA;AAoCT;AACJ;AACA;AACaC,EAAAA,WAvCA;AAwCT;AACJ;AACA;AACaC,EAAAA,WA3CA;AA4CT;AACJ;AACA;AACaC,EAAAA,MA/CA;AAiDT;AACJ;AACA;AACaC,EAAAA,WApDA;AAsDT;AACJ;AACA;AACaC,EAAAA,WAzDA;AA2DT;AACJ;AACA;AAEaC,EAAAA,WAAW,GAAG,EA/Dd,EAiEAC,MAAgB,GAAG,EAjEnB;AAmET;AACJ;AACA;AACaC,EAAAA,IAtEA;AAwET;AACJ;AACA;AACaC,EAAAA,MA3EA,EA6EAC,OA7EA,EA+EAC,IA/EA,EAgFT;AAAA,SA5ESjB,EA4ET,GA5ESA,EA4ET;AAAA,SAvESC,WAuET,GAvESA,WAuET;AAAA,SAlESC,WAkET,GAlESA,WAkET;AAAA,SA7DSC,MA6DT,GA7DSA,MA6DT;AAAA,SAxDSC,YAwDT,GAxDSA,YAwDT;AAAA,SAnDSC,IAmDT,GAnDSA,IAmDT;AAAA,SA9CSC,WA8CT,GA9CSA,WA8CT;AAAA,SAzCSC,WAyCT,GAzCSA,WAyCT;AAAA,SArCSC,WAqCT,GArCSA,WAqCT;AAAA,SAjCSC,MAiCT,GAjCSA,MAiCT;AAAA,SA5BSC,WA4BT,GA5BSA,WA4BT;AAAA,SAvBSC,WAuBT,GAvBSA,WAuBT;AAAA,SAjBSC,WAiBT,GAjBSA,WAiBT;AAAA,SAfSC,MAeT,GAfSA,MAeT;AAAA,SAVSC,IAUT,GAVSA,IAUT;AAAA,SALSC,MAKT,GALSA,MAKT;AAAA,SAHSC,OAGT,GAHSA,OAGT;AAAA,SADSC,IACT,GADSA,IACT;AAAE;;AAEO,MAAPC,OAAO,GAAG;AACZ,QAAI,CAAC,KAAKlB,EAAL,CAAQkB,OAAb,EAAsB,OAAO,KAAP;AACtB,WAAO,KAAKlB,EAAL,CAAQkB,OAAf;AACD;AAED;AACF;AACA;;;AACa,SAAJC,IAAI,CAAC;AACVnB,IAAAA,EADU;AAEVG,IAAAA,MAFU;AAGVF,IAAAA,WAHU;AAIVG,IAAAA,YAAY,GAAG,EAJL;AAKVF,IAAAA,WALU;AAMVM,IAAAA,WANU;AAOVH,IAAAA,IAAI,GAAG,EAPG;AAQVK,IAAAA,WARU;AASVJ,IAAAA,WATU;AAUVc,IAAAA,GAVU;AAWVX,IAAAA,MAXU;AAYVF,IAAAA,WAZU;AAaVK,IAAAA,WAbU;AAcVC,IAAAA,MAdU;AAeVC,IAAAA,IAfU;AAgBVC,IAAAA,MAhBU;AAiBVC,IAAAA,OAjBU;AAkBVC,IAAAA;AAlBU,GAAD,EAmBa;AACtB,WAAO,IAAInB,cAAJ,CACLuB,2BAAYC,UAAZ,CAAuBtB,EAAvB,CADK,EAELC,WAFK,EAGLC,WAHK,EAILC,MAJK,EAKLoB,4BAAYC,SAAZ,CAAsBpB,YAAtB,CALK,EAMLqB,iBAAOD,SAAP,CAAiBnB,IAAI,CAACqB,GAAL,CAAUC,GAAD,IAASC,WAAIN,UAAJ,CAAeK,GAAf,CAAlB,CAAjB,CANK,EAOLrB,WAPK,EAQLC,WARK,EASLC,WATK,EAULC,MAVK,EAWLC,WAXK,EAYLU,GAZK,EAaLR,WAbK,EAcLC,MAdK,EAeLC,IAfK,EAgBLC,MAhBK,EAiBLC,OAjBK,EAkBLC,IAlBK,CAAP;AAoBD;;AAEe,SAATO,SAAS,CAACK,eAAD,EAAyC;AACvD,WAAOA,eAAe,CAACH,GAAhB,CAAqBI,YAAD,IAAkBhC,cAAc,CAACqB,IAAf,CAAoBW,YAApB,CAAtC,CAAP;AACD;;AAEW,SAALC,KAAK,GAAG;AACb,WAAO,IAAIjC,cAAJ,CACLuB,2BAAYC,UAAZ,CAAuB;AAAEU,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KAAvB,CADK,EAEL,EAFK,EAGL,EAHK,EAIL;AAAEb,MAAAA,GAAG,EAAE,EAAP;AAAWc,MAAAA,GAAG,EAAE;AAAhB,KAJK,EAKL,EALK,EAMLT,iBAAOM,KAAP,EANK,CAAP;AAQD;;AAlJyB","sourcesContent":["import { Composition, CompositionProps } from '@teambit/compositions';\nimport { DeprecationInfo } from '@teambit/deprecation';\nimport { Descriptor } from '@teambit/envs';\nimport { ComponentID, ComponentIdObj } from '@teambit/component-id';\nimport { LegacyComponentLog } from '@teambit/legacy-component-log';\nimport { Tag } from '../../tag';\nimport { TagMap } from '../../tag-map';\nimport { TagProps } from '../../tag/tag';\n// import { Snap } from '../../snap';\n\n// ADDING MORE PROPERTIES HERE IS NOT ALLOWED!!! IF YOU NEED DATA PLEASE ADD A NEW\n// HOOK FROM YOUR ASPECT!!!\n// TODO: remove all properties from here to their rightful place in their aspects.\nexport type ComponentModelProps = {\n  id: ComponentIdObj;\n  description: string;\n  buildStatus?: string;\n  server?: ComponentServer;\n  displayName: string;\n  packageName: string; // pkg aspect\n  elementsUrl?: string; // pkg aspect\n  compositions?: CompositionProps[];\n  tags?: TagProps[];\n  issuesCount?: number; // component/issues aspect\n  status?: any; // workspace aspect.\n  deprecation?: DeprecationInfo; // deprecation aspect\n  env?: Descriptor; // env aspect.\n  labels?: string[];\n  host?: string;\n  latest?: string;\n  preview?: ComponentPreview;\n  logs?: LegacyComponentLog[];\n};\n\nexport type ComponentPreview = {\n  includesEnvTemplate?: boolean;\n};\n\nexport type ComponentServer = {\n  env: string;\n  url: string;\n};\n\nexport class ComponentModel {\n  constructor(\n    /**\n     * id of the component\n     */\n    readonly id: ComponentID,\n\n    /**\n     * display name of the component.\n     */\n    readonly displayName: string,\n\n    /**\n     * package name of the component.\n     */\n    readonly packageName: string,\n\n    /**\n     * the component server.\n     */\n    readonly server: ComponentServer | undefined,\n\n    /**\n     * array of compositions\n     */\n    readonly compositions: Composition[],\n\n    /**\n     * tags of the component.\n     */\n    readonly tags: TagMap,\n\n    /**\n     * component build status\n     */\n    readonly buildStatus?: string,\n\n    /**\n     * issues of component.\n     */\n    readonly issuesCount?: number,\n    /**\n     * elements url\n     */\n    readonly elementsUrl?: string,\n    /**\n     * status of component.\n     */\n    readonly status?: any,\n\n    /**\n     * deprecation info of the component.\n     */\n    readonly deprecation?: DeprecationInfo,\n\n    /**\n     * env descriptor.\n     */\n    readonly environment?: Descriptor,\n\n    /**\n     * description of the component.\n     */\n\n    readonly description = '',\n\n    readonly labels: string[] = [],\n\n    /**\n     * host of the component\n     */\n    readonly host?: string,\n\n    /**\n     * latest version of component\n     */\n    readonly latest?: string,\n\n    readonly preview?: ComponentPreview,\n\n    readonly logs?: LegacyComponentLog[]\n  ) {}\n\n  get version() {\n    if (!this.id.version) return 'new';\n    return this.id.version;\n  }\n\n  /**\n   * create an instance of a component from a plain object.\n   */\n  static from({\n    id,\n    server,\n    displayName,\n    compositions = [],\n    packageName,\n    elementsUrl,\n    tags = [],\n    deprecation,\n    buildStatus,\n    env,\n    status,\n    issuesCount,\n    description,\n    labels,\n    host,\n    latest,\n    preview,\n    logs,\n  }: ComponentModelProps) {\n    return new ComponentModel(\n      ComponentID.fromObject(id),\n      displayName,\n      packageName,\n      server,\n      Composition.fromArray(compositions),\n      TagMap.fromArray(tags.map((tag) => Tag.fromObject(tag))),\n      buildStatus,\n      issuesCount,\n      elementsUrl,\n      status,\n      deprecation,\n      env,\n      description,\n      labels,\n      host,\n      latest,\n      preview,\n      logs\n    );\n  }\n\n  static fromArray(componentsProps: ComponentModelProps[]) {\n    return componentsProps.map((rawComponent) => ComponentModel.from(rawComponent));\n  }\n\n  static empty() {\n    return new ComponentModel(\n      ComponentID.fromObject({ name: 'root', scope: 'temp' }),\n      '',\n      '',\n      { env: '', url: '' },\n      [],\n      TagMap.empty()\n    );\n  }\n}\n"]}