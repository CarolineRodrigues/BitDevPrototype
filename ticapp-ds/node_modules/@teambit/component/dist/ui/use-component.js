"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useComponent = useComponent;

function _reactRouterDom() {
  const data = require("react-router-dom");

  _reactRouterDom = function () {
    return data;
  };

  return data;
}

function _uiFoundationUiReactRouter() {
  const data = require("@teambit/ui-foundation.ui.react-router.use-query");

  _uiFoundationUiReactRouter = function () {
    return data;
  };

  return data;
}

function _lanesUi() {
  const data = require("@teambit/lanes.ui.lanes");

  _lanesUi = function () {
    return data;
  };

  return data;
}

function _useComponentQuery() {
  const data = require("./use-component-query");

  _useComponentQuery = function () {
    return data;
  };

  return data;
}

function useComponent(host, id) {
  var _lanesContext$current, _lanesContext$current2;

  const {
    params: {
      componentId
    }
  } = (0, _reactRouterDom().useRouteMatch)();
  const query = (0, _uiFoundationUiReactRouter().useQuery)();
  const version = query.get('version') || undefined;
  const lanesContext = (0, _lanesUi().useLanesContext)();
  const targetId = (id === null || id === void 0 ? void 0 : id.toString({
    ignoreVersion: true
  })) || componentId;
  if (!targetId) throw new TypeError('useComponent received no component id');
  const currentLane = lanesContext === null || lanesContext === void 0 ? void 0 : lanesContext.currentLane; // when on a lane, always fetch all the logs starting from the 'head' version

  const logHead = lanesContext === null || lanesContext === void 0 ? void 0 : (_lanesContext$current = lanesContext.currentLane) === null || _lanesContext$current === void 0 ? void 0 : (_lanesContext$current2 = _lanesContext$current.components.find(component => component.model.id.fullName === targetId)) === null || _lanesContext$current2 === void 0 ? void 0 : _lanesContext$current2.model.id.version;
  const logFilters = currentLane ? {
    log: {
      logHead
    }
  } : undefined;
  return (0, _useComponentQuery().useComponentQuery)(withVersion(targetId, version), host, logFilters);
}

function withVersion(id, version) {
  if (!version) return id;
  if (id.includes('@')) return id;
  return `${id}@${version}`;
}

//# sourceMappingURL=use-component.js.map