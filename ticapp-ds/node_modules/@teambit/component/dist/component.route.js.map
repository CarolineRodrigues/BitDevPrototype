{"version":3,"sources":["component.route.ts"],"names":["ComponentRoute","constructor","registerRoute","componentExtension","dynamicRouteRegex","route","method","componentMiddlewares","concat","middlewares","req","res","next","resolveComponent","componentId","params","host","getHost","compId","resolveComponentId","component","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAYO,MAAMA,cAAN,CAAsC;AAC3CC,EAAAA,WAAW,CAASC,aAAT,EAA0DC,kBAA1D,EAA6F;AAAA,SAApFD,aAAoF,GAApFA,aAAoF;AAAA,SAAnCC,kBAAmC,GAAnCA,kBAAmC;AAAA,+DACpF,gBADoF;AAAA,mDAEtF,iBAAgB,KAAKC,iBAAkB,YAAW,KAAKF,aAAL,CAAmBG,KAAM,EAFW;AAAA,oDAqB/F,KAAKH,aAAL,CAAmBI,MArB4E;AAAA,yDAuB1F,KAAKC,oBAAL,CAA0BC,MAA1B,CAAiC,KAAKN,aAAL,CAAmBO,WAApD,CAvB0F;AAAE;;AAIlF,MAApBF,oBAAoB,GAAG;AACzB,WAAO,CACL,OAAOG,GAAP,EAAyCC,GAAzC,EAAwDC,IAAxD,KAA+E;AAAA;;AAC7E,YAAMC,gBAAgB,4BAAG,KAAKX,aAAL,CAAmBW,gBAAtB,yEAA0C,IAAhE;;AACA,UAAIA,gBAAJ,EAAsB;AACpB,cAAM;AAAEC,UAAAA;AAAF,YAAkBJ,GAAG,CAACK,MAA5B;AACA,cAAMC,IAAI,GAAG,KAAKb,kBAAL,CAAwBc,OAAxB,EAAb;AACA,cAAMC,MAAM,GAAG,MAAMF,IAAI,CAACG,kBAAL,CAAwBL,WAAxB,CAArB;AACA,cAAMM,SAAS,GAAG,MAAMJ,IAAI,CAACK,GAAL,CAASH,MAAT,CAAxB,CAJoB,CAKpB;;AACAR,QAAAA,GAAG,CAACU,SAAJ,GAAgBA,SAAhB;AACD;;AACDR,MAAAA,IAAI;AACL,KAZI,CAAP;AAcD;;AApB0C","sourcesContent":["import { NextFunction, Request, Response, Route } from '@teambit/express';\n\nimport { ComponentMain } from './component.main.runtime';\n\nexport type RegisteredComponentRoute = Route & {\n  resolveComponent?: boolean;\n};\n\nexport type ComponentUrlParams = {\n  componentId: string;\n};\n\nexport class ComponentRoute implements Route {\n  constructor(private registerRoute: RegisteredComponentRoute, private componentExtension: ComponentMain) {}\n  dynamicRouteRegex = '/?[^/@]+/[^~]*';\n  readonly route = `/:componentId(${this.dynamicRouteRegex})/~aspect${this.registerRoute.route}`;\n\n  get componentMiddlewares() {\n    return [\n      async (req: Request<ComponentUrlParams>, res: Response, next: NextFunction) => {\n        const resolveComponent = this.registerRoute.resolveComponent ?? true;\n        if (resolveComponent) {\n          const { componentId } = req.params;\n          const host = this.componentExtension.getHost();\n          const compId = await host.resolveComponentId(componentId);\n          const component = await host.get(compId);\n          // @ts-ignore\n          req.component = component;\n        }\n        next();\n      },\n    ];\n  }\n\n  method = this.registerRoute.method;\n  // @ts-ignore\n  middlewares = this.componentMiddlewares.concat(this.registerRoute.middlewares);\n}\n"]}