{"version":3,"sources":["component.main.runtime.ts"],"names":["ComponentMain","constructor","hostSlot","express","showFragmentSlot","registerHost","host","register","createAspectListFromLegacy","legacyExtensionDataList","scope","AspectList","fromLegacyExtensions","createAspectListFromEntries","entries","registerRoute","routes","routeEntries","map","route","ComponentRoute","flattenRoutes","setHostPriority","id","get","HostNotFound","_priorHost","getHost","getPriorHost","getRoute","routeName","toString","hosts","values","priorityHost","find","priority","getShowFragments","fragments","isHost","name","registerShowFragments","showFragments","provider","graphql","cli","configAspect","config","componentExtension","workspaceConfig","isLegacy","type","unregister","ShowCmd","NameFragment","MainFileFragment","IDFragment","ScopeFragment","FilesFragment","ExtensionsFragment","Slot","withType","MainRuntime","GraphqlAspect","ExpressAspect","CLIAspect","ConfigAspect","ComponentAspect","addRuntime"],"mappings":"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","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { ExpressAspect, ExpressMain, Route } from '@teambit/express';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { ConfigAspect } from '@teambit/config';\nimport type { ConfigMain } from '@teambit/config';\nimport { ComponentID } from '@teambit/component-id';\nimport { flatten, orderBy } from 'lodash';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config';\nimport { ComponentFactory } from './component-factory';\nimport { ComponentAspect } from './component.aspect';\nimport { componentSchema } from './component.graphql';\nimport { ComponentRoute } from './component.route';\nimport { AspectList } from './aspect-list';\nimport { HostNotFound } from './exceptions';\nimport { AspectEntry } from './aspect-entry';\nimport {\n  ShowCmd,\n  ShowFragment,\n  NameFragment,\n  MainFileFragment,\n  IDFragment,\n  ScopeFragment,\n  FilesFragment,\n  ExtensionsFragment,\n} from './show';\nimport { RegisteredComponentRoute } from '.';\n\nexport type ComponentHostSlot = SlotRegistry<ComponentFactory>;\n\nexport type ShowFragmentSlot = SlotRegistry<ShowFragment[]>;\n\nexport class ComponentMain {\n  constructor(\n    /**\n     * slot for component hosts to register.\n     */\n    private hostSlot: ComponentHostSlot,\n\n    /**\n     * Express Extension\n     */\n    private express: ExpressMain,\n\n    private showFragmentSlot: ShowFragmentSlot\n  ) {}\n\n  /**\n   * register a new component host.\n   */\n  registerHost(host: ComponentFactory) {\n    this.hostSlot.register(host);\n    return this;\n  }\n\n  /**\n   * important! avoid using this method.\n   * seems like this method was written to work around a very specific case when the ComponentID of the aspects are\n   * not available. in case of new components, to get the ComponentID, the workspace-aspect is needed to get the\n   * default-scope. when this method is called from the scope, there is no way to get the real component-id.\n   * instead, this method asks for the \"scope\", which when called by the scope-aspect is the current scope-name.\n   * it may or may not be the real scope-name of the aspect.\n   * to fix this possibly incorrect scope-name, the `workspace.resolveScopeAspectListIds()` checks whether the\n   * scope-name is the same as scope.name, and if so, resolve it to the correct scope-name.\n   */\n  createAspectListFromLegacy(legacyExtensionDataList: ExtensionDataList, scope?: string) {\n    return AspectList.fromLegacyExtensions(legacyExtensionDataList, scope);\n  }\n\n  createAspectListFromEntries(entries: AspectEntry[]) {\n    return new AspectList(entries);\n  }\n\n  registerRoute(routes: RegisteredComponentRoute[]) {\n    const routeEntries = routes.map((route: RegisteredComponentRoute) => {\n      return new ComponentRoute(route, this);\n    });\n\n    const flattenRoutes = flatten(routeEntries) as any as Route[];\n\n    this.express.register(flattenRoutes);\n    return this;\n  }\n\n  /**\n   * set the prior host.\n   */\n  setHostPriority(id: string) {\n    const host = this.hostSlot.get(id);\n    if (!host) {\n      throw new HostNotFound(id);\n    }\n\n    this._priorHost = host;\n    return this;\n  }\n\n  /**\n   * get component host by extension ID.\n   */\n  getHost(id?: string): ComponentFactory {\n    if (id) {\n      const host = this.hostSlot.get(id);\n      if (!host) throw new HostNotFound(id);\n      return host;\n    }\n\n    return this.getPriorHost();\n  }\n\n  getRoute(id: ComponentID, routeName: string) {\n    return `/api/${id.toString()}/~aspect/${routeName}`;\n  }\n\n  /**\n   * get the prior host.\n   */\n  private getPriorHost() {\n    if (this._priorHost) return this._priorHost;\n\n    const hosts = this.hostSlot.values();\n    const priorityHost = hosts.find((host) => host.priority);\n    return priorityHost || hosts[0];\n  }\n\n  getShowFragments() {\n    const fragments = orderBy(flatten(this.showFragmentSlot.values()), ['weight', ['asc']]);\n    return fragments;\n  }\n\n  isHost(name: string) {\n    return !!this.hostSlot.get(name);\n  }\n\n  /**\n   * register a show fragment to display further information in the `bit show` command.\n   */\n  registerShowFragments(showFragments: ShowFragment[]) {\n    this.showFragmentSlot.register(showFragments);\n    return this;\n  }\n\n  private _priorHost: ComponentFactory | undefined;\n\n  static slots = [Slot.withType<ComponentFactory>(), Slot.withType<Route[]>(), Slot.withType<ShowFragment[]>()];\n\n  static runtime = MainRuntime;\n  static dependencies = [GraphqlAspect, ExpressAspect, CLIAspect, ConfigAspect];\n\n  static async provider(\n    [graphql, express, cli, configAspect]: [GraphqlMain, ExpressMain, CLIMain, ConfigMain],\n    config,\n    [hostSlot, showFragmentSlot]: [ComponentHostSlot, ShowFragmentSlot]\n  ) {\n    const componentExtension = new ComponentMain(hostSlot, express, showFragmentSlot);\n\n    if ((configAspect.workspaceConfig && !configAspect.workspaceConfig.isLegacy) || configAspect.type === 'scope') {\n      cli.unregister('show');\n      cli.register(new ShowCmd(componentExtension));\n    }\n\n    componentExtension.registerShowFragments([\n      new NameFragment(),\n      new MainFileFragment(),\n      new IDFragment(),\n      new ScopeFragment(),\n      new FilesFragment(),\n      new ExtensionsFragment(),\n    ]);\n    graphql.register(componentSchema(componentExtension));\n\n    return componentExtension;\n  }\n}\n\nComponentAspect.addRuntime(ComponentMain);\n"]}