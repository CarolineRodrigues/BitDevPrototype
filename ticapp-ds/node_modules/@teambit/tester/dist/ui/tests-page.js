"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestsPage = TestsPage;

function _client() {
  const data = require("@apollo/client");

  _client = function () {
    return data;
  };

  return data;
}

function _component() {
  const data = require("@teambit/component");

  _component = function () {
    return data;
  };

  return data;
}

function _documenterUi() {
  const data = require("@teambit/documenter.ui.heading");

  _documenterUi = function () {
    return data;
  };

  return data;
}

function _designUi() {
  const data = require("@teambit/design.ui.separator");

  _designUi = function () {
    return data;
  };

  return data;
}

function _designUi2() {
  const data = require("@teambit/design.ui.empty-box");

  _designUi2 = function () {
    return data;
  };

  return data;
}

function _mdxUi() {
  const data = require("@teambit/mdx.ui.mdx-layout");

  _mdxUi = function () {
    return data;
  };

  return data;
}

function _designUi3() {
  const data = require("@teambit/design.ui.alert-card");

  _designUi3 = function () {
    return data;
  };

  return data;
}

function _defenderUi() {
  const data = require("@teambit/defender.ui.test-loader");

  _defenderUi = function () {
    return data;
  };

  return data;
}

function _classnames() {
  const data = _interopRequireDefault(require("classnames"));

  _classnames = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireWildcard(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _defenderUi2() {
  const data = require("@teambit/defender.ui.test-table");

  _defenderUi2 = function () {
    return data;
  };

  return data;
}

function _testsPageModule() {
  const data = _interopRequireDefault(require("./tests-page.module.scss"));

  _testsPageModule = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TESTS_SUBSCRIPTION_CHANGED = (0, _client().gql)`
  subscription OnTestsChanged($id: String!) {
    testsChanged(id: $id) {
      testsResults {
        testFiles {
          file
          duration
          pass
          failed
          pending
          errorStr
          tests {
            ancestor
            duration
            status
            name
            error
          }
        }
      }
    }
  }
`;
const GET_COMPONENT = (0, _client().gql)`
  query ($id: String!) {
    getHost {
      id # for GQL caching
      getTests(id: $id) {
        loading
        testsResults {
          testFiles {
            file
            duration
            pass
            failed
            pending
            errorStr
            tests {
              ancestor
              duration
              status
              name
              error
            }
          }
        }
      }
    }
  }
`;

function TestsPage({
  className,
  emptyState
}) {
  var _onTestsChanged$data, _data$getHost, _testData$testsResult, _component$environmen;

  const component = (0, _react().useContext)(_component().ComponentContext);
  const onTestsChanged = (0, _client().useSubscription)(TESTS_SUBSCRIPTION_CHANGED, {
    variables: {
      id: component.id.toString()
    }
  });
  const {
    data
  } = (0, _client().useQuery)(GET_COMPONENT, {
    variables: {
      id: component.id._legacy.name
    }
  });
  const testData = ((_onTestsChanged$data = onTestsChanged.data) === null || _onTestsChanged$data === void 0 ? void 0 : _onTestsChanged$data.testsChanged) || (data === null || data === void 0 ? void 0 : (_data$getHost = data.getHost) === null || _data$getHost === void 0 ? void 0 : _data$getHost.getTests);
  const testResults = testData === null || testData === void 0 ? void 0 : (_testData$testsResult = testData.testsResults) === null || _testData$testsResult === void 0 ? void 0 : _testData$testsResult.testFiles; // TODO: change loading EmptyBox

  if (testData !== null && testData !== void 0 && testData.loading) return /*#__PURE__*/_react().default.createElement(_defenderUi().TestLoader, null);
  const env = (_component$environmen = component.environment) === null || _component$environmen === void 0 ? void 0 : _component$environmen.id;
  const EmptyStateTemplate = emptyState.get(env || '');

  if ((testResults === null || (testData === null || testData === void 0 ? void 0 : testData.testsResults) === null) && component.host === 'teambit.workspace/workspace' && EmptyStateTemplate) {
    return /*#__PURE__*/_react().default.createElement("div", {
      className: (0, _classnames().default)(_testsPageModule().default.testsPage, className)
    }, /*#__PURE__*/_react().default.createElement("div", null, /*#__PURE__*/_react().default.createElement(_documenterUi().H1, {
      className: _testsPageModule().default.title
    }, "Tests"), /*#__PURE__*/_react().default.createElement(_designUi().Separator, {
      isPresentational: true,
      className: _testsPageModule().default.separator
    }), /*#__PURE__*/_react().default.createElement(_designUi3().AlertCard, {
      level: "info",
      title: "There are no tests for this Component. Learn how to add tests:"
    }, /*#__PURE__*/_react().default.createElement(_mdxUi().MDXLayout, null, /*#__PURE__*/_react().default.createElement(EmptyStateTemplate, null)))));
  } // TODO: get the docs domain from the community aspect and pass it here as a prop


  if (testResults === null || (testData === null || testData === void 0 ? void 0 : testData.testsResults) === null) {
    return /*#__PURE__*/_react().default.createElement(_designUi2().EmptyBox, {
      title: "This component doesn\u2019t have any tests.",
      linkText: "Learn how to add tests to your components",
      link: `https://bit.dev/docs/dev-services-overview/tester/tester-overview`
    });
  }

  return /*#__PURE__*/_react().default.createElement("div", {
    className: (0, _classnames().default)(_testsPageModule().default.testsPage, className)
  }, /*#__PURE__*/_react().default.createElement("div", null, /*#__PURE__*/_react().default.createElement(_documenterUi().H1, {
    className: _testsPageModule().default.title
  }, "Tests"), /*#__PURE__*/_react().default.createElement(_designUi().Separator, {
    isPresentational: true,
    className: _testsPageModule().default.separator
  }), /*#__PURE__*/_react().default.createElement(_defenderUi2().TestTable, {
    testResults: testResults,
    className: _testsPageModule().default.testBlock
  })));
}

//# sourceMappingURL=tests-page.js.map