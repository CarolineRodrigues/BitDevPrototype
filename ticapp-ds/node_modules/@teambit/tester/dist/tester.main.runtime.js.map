{"version":3,"sources":["tester.main.runtime.ts"],"names":["TesterMain","constructor","graphql","envs","workspace","service","task","devFiles","builder","test","components","opts","options","getOptions","envsRuntime","createEnvironment","env","runEnv","results","run","junit","generateJUnit","filePath","testsResults","map","envResult","data","flat","jUnit","fs","outputFile","watch","onTestRunComplete","forEach","component","_testsResults","componentId","toString","uiWatch","list","debug","ui","getTestsResults","entry","state","aspects","get","TesterAspect","id","componentStatus","getComponentStatus","getDataByAspect","modifyInfo","hasModifiedFiles","tests","loading","getTestsResultsFromState","getTestFiles","defaults","provider","cli","loggerAspect","config","logger","createLogger","testerService","TesterService","patterns","pubsub","registerService","registerDevPattern","tester","TesterTask","consumer","isLegacy","unregister","registerOnStart","watchOnStart","undefined","register","TestCmd","MainRuntime","CLIAspect","EnvsAspect","WorkspaceAspect","LoggerAspect","GraphqlAspect","UIAspect","DevFilesAspect","BuilderAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAiDO,MAAMA,UAAN,CAAiB;AAatBC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,OAJC;AAMT;AACJ;AACA;AACYC,EAAAA,IATC;AAWT;AACJ;AACA;AACYC,EAAAA,SAdC;AAgBT;AACJ;AACA;AACaC,EAAAA,OAnBA;AAqBT;AACJ;AACA;AACaC,EAAAA,IAxBA,EA0BDC,QA1BC,EA4BDC,OA5BC,EA6BT;AAAA,SAzBQN,OAyBR,GAzBQA,OAyBR;AAAA,SApBQC,IAoBR,GApBQA,IAoBR;AAAA,SAfQC,SAeR,GAfQA,SAeR;AAAA,SAVSC,OAUT,GAVSA,OAUT;AAAA,SALSC,IAKT,GALSA,IAKT;AAAA,SAHQC,QAGR,GAHQA,QAGR;AAAA,SADQC,OACR,GADQA,OACR;AAAA,2DAE0E,EAF1E;AAAE;;AAIM,QAAJC,IAAI,CAACC,UAAD,EAA0BC,IAA1B,EAAqF;AAC7F,UAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBF,IAAhB,CAAhB;AACA,UAAMG,WAAW,GAAG,MAAM,KAAKX,IAAL,CAAUY,iBAAV,CAA4BL,UAA5B,CAA1B;;AACA,QAAIC,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEK,GAAV,EAAe;AACb,aAAOF,WAAW,CAACG,MAAZ,CAAmBN,IAAI,CAACK,GAAxB,EAA6B,KAAKX,OAAlC,EAA2CO,OAA3C,CAAP;AACD;;AACD,UAAMM,OAAO,GAAG,MAAMJ,WAAW,CAACK,GAAZ,CAAgB,KAAKd,OAArB,EAA8BO,OAA9B,CAAtB;;AACA,QAAID,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAES,KAAV,EAAiB;AACf,YAAM,KAAKC,aAAL,CAAmBV,IAAnB,aAAmBA,IAAnB,uBAAmBA,IAAI,CAAES,KAAzB,EAAgCF,OAAhC,CAAN;AACD;;AACD,WAAOA,OAAP;AACD;;AAE0B,QAAbG,aAAa,CAACC,QAAD,EAAmBC,YAAnB,EAA6D;AACtF,UAAMb,UAAU,GAAGa,YAAY,CAACL,OAAb,CAAqBM,GAArB,CAA0BC,SAAD;AAAA;;AAAA,gCAAeA,SAAS,CAACC,IAAzB,oDAAe,gBAAgBhB,UAA/B;AAAA,KAAzB,EAAoEiB,IAApE,EAAnB;AACA,UAAMC,KAAK,GAAG,iDAA0B,uBAAQlB,UAAR,CAA1B,CAAd;AACA,UAAMmB,mBAAGC,UAAH,CAAcR,QAAd,EAAwBM,KAAxB,CAAN;AACD;AAED;AACF;AACA;;;AACa,QAALG,KAAK,CAACrB,UAAD,EAA0BC,IAA1B,EAAgD;AACzD,UAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBF,IAAhB,CAAhB;AACA,UAAMG,WAAW,GAAG,MAAM,KAAKX,IAAL,CAAUY,iBAAV,CAA4BL,UAA5B,CAA1B;;AACA,QAAIC,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEK,GAAV,EAAe;AACb,aAAOF,WAAW,CAACG,MAAZ,CAAmBN,IAAI,CAACK,GAAxB,EAA6B,KAAKX,OAAlC,EAA2CO,OAA3C,CAAP;AACD;;AAED,SAAKP,OAAL,CAAa2B,iBAAb,CAAgCd,OAAD,IAAa;AAC1CA,MAAAA,OAAO,CAACR,UAAR,CAAmBuB,OAAnB,CAA4BC,SAAD,IAAe;AACxC,aAAKC,aAAL,CAAmBD,SAAS,CAACE,WAAV,CAAsBC,QAAtB,EAAnB,IAAuDH,SAAvD;AACD,OAFD;AAGD,KAJD;AAKA,WAAOpB,WAAW,CAACK,GAAZ,CAAgB,KAAKd,OAArB,EAA8BO,OAA9B,CAAP;AACD;;AAEY,QAAP0B,OAAO,GAAG;AACd,UAAM5B,UAAU,GAAG,MAAM,KAAKN,SAAL,CAAemC,IAAf,EAAzB;AACA,WAAO,KAAKR,KAAL,CAAWrB,UAAX,EAAuB;AAAEqB,MAAAA,KAAK,EAAE,IAAT;AAAeS,MAAAA,KAAK,EAAE,KAAtB;AAA6BC,MAAAA,EAAE,EAAE;AAAjC,KAAvB,CAAP;AACD;;AAEoB,QAAfC,eAAe,CAACR,SAAD,EAA8F;AAAA;;AACjH,UAAMS,KAAK,GAAGT,SAAS,CAACU,KAAV,CAAgBC,OAAhB,CAAwBC,GAAxB,CAA4BC,uBAAaC,EAAzC,CAAd;AACA,UAAMC,eAAe,GAAG,0BAAM,KAAK7C,SAAX,oDAAM,gBAAgB8C,kBAAhB,CAAmChB,SAAnC,CAAN,CAAxB;AACA,UAAMR,IAAI,GAAG,KAAKlB,OAAL,CAAa2C,eAAb,CAA6BjB,SAA7B,EAAwCa,uBAAaC,EAArD,CAAb;;AACA,QAAI,CAACL,KAAK,IAAIjB,IAAV,KAAmB,EAACuB,eAAD,aAACA,eAAD,wCAACA,eAAe,CAAEG,UAAlB,kDAAC,sBAA6BC,gBAA9B,CAAvB,EAAuE;AACrE,aAAO;AAAE9B,QAAAA,YAAY,EAAE,CAAAG,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE4B,KAAN,MAAeX,KAAf,aAAeA,KAAf,uBAAeA,KAAK,CAAEjB,IAAP,CAAY4B,KAA3B,CAAhB;AAAkDC,QAAAA,OAAO,EAAE;AAA3D,OAAP;AACD;;AACD,WAAO,KAAKC,wBAAL,CAA8BtB,SAA9B,CAAP;AACD;;AAEOsB,EAAAA,wBAAwB,CAACtB,SAAD,EAAuB;AACrD,UAAMoB,KAAK,GAAG,KAAKnB,aAAL,CAAmBD,SAAS,CAACc,EAAV,CAAaX,QAAb,EAAnB,CAAd;;AACA,WAAO;AAAEd,MAAAA,YAAY,EAAE+B,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEpC,OAAvB;AAAgCqC,MAAAA,OAAO,EAAE,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,OAAP,KAAkB;AAA3D,KAAP;AACD;AAED;AACF;AACA;;;AACEE,EAAAA,YAAY,CAACvB,SAAD,EAAuB;AACjC,WAAO,8BAAgBA,SAAhB,EAA2B,KAAK3B,QAAhC,CAAP;AACD;;AAEOM,EAAAA,UAAU,CAACD,OAAD,EAAyC;AACzD,UAAM8C,QAAQ,GAAG;AACf3B,MAAAA,KAAK,EAAE,KADQ;AAEfS,MAAAA,KAAK,EAAE;AAFQ,KAAjB;AAKA,WAAO,sBAAMkB,QAAN,EAAgB9C,OAAhB,CAAP;AACD;;AAcoB,eAAR+C,QAAQ,CACnB,CAACC,GAAD,EAAMzD,IAAN,EAAYC,SAAZ,EAAuByD,YAAvB,EAAqC3D,OAArC,EAA8CuC,EAA9C,EAAkDlC,QAAlD,EAA4DC,OAA5D,CADmB,EAWnBsD,MAXmB,EAYnB;AACA,UAAMC,MAAM,GAAGF,YAAY,CAACG,YAAb,CAA0BjB,uBAAaC,EAAvC,CAAf;AACA,UAAMiB,aAAa,GAAG,KAAIC,wBAAJ,EAAkB9D,SAAlB,EAA6B0D,MAAM,CAACK,QAApC,EAA8CJ,MAA9C,EAAsD7D,OAAO,CAACkE,MAA9D,EAAsE7D,QAAtE,CAAtB;AACAJ,IAAAA,IAAI,CAACkE,eAAL,CAAqBJ,aAArB;AACA1D,IAAAA,QAAQ,CAAC+D,kBAAT,CAA4BR,MAAM,CAACK,QAAnC;AACA,UAAMI,MAAM,GAAG,IAAIvE,UAAJ,CACbE,OADa,EAEbC,IAFa,EAGbC,SAHa,EAIb6D,aAJa,EAKb,KAAIO,qBAAJ,EAAezB,uBAAaC,EAA5B,EAAgCzC,QAAhC,CALa,EAMbA,QANa,EAObC,OAPa,CAAf;;AAUA,QAAIJ,SAAS,IAAI,CAACA,SAAS,CAACqE,QAAV,CAAmBC,QAArC,EAA+C;AAC7Cd,MAAAA,GAAG,CAACe,UAAJ,CAAe,MAAf;AACAlC,MAAAA,EAAE,CAACmC,eAAH,CAAmB,YAAY;AAC7B,YAAI,CAACd,MAAM,CAACe,YAAZ,EAA0B,OAAOC,SAAP;AAC1B,cAAMP,MAAM,CAACjC,OAAP,EAAN;AACA,eAAOwC,SAAP;AACD,OAJD;AAMAlB,MAAAA,GAAG,CAACmB,QAAJ,CAAa,KAAIC,eAAJ,EAAYT,MAAZ,EAAoBnE,SAApB,EAA+B2D,MAA/B,CAAb;AACD;;AAED7D,IAAAA,OAAO,CAAC6E,QAAR,CAAiB,6BAAaR,MAAb,EAAqBrE,OAArB,CAAjB;AAEA,WAAOqE,MAAP;AACD;;AA5KqB;;;gCAAXvE,U,aACMiF,kB;gCADNjF,U,kBAEW,CACpBkF,gBADoB,EAEpBC,kBAFoB,EAGpBC,4BAHoB,EAIpBC,sBAJoB,EAKpBC,wBALoB,EAMpBC,cANoB,EAOpBC,mBAPoB,EAQpBC,wBARoB,C;gCAFXzF,U,mBAuHY;AACrB;AACJ;AACA;AACImE,EAAAA,QAAQ,EAAE,CAAC,4BAAD,EAA+B,4BAA/B,CAJW;;AAMrB;AACJ;AACA;AACIU,EAAAA,YAAY,EAAE;AATO,C;;AAwDzB9B,uBAAa2C,UAAb,CAAwB1F,UAAxB","sourcesContent":["import fs from 'fs-extra';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component } from '@teambit/component';\nimport compact from 'lodash.compact';\nimport { EnvsAspect, EnvsExecutionResult, EnvsMain } from '@teambit/envs';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { UiMain, UIAspect } from '@teambit/ui';\nimport { merge } from 'lodash';\nimport DevFilesAspect, { DevFilesMain } from '@teambit/dev-files';\nimport { TestsResult } from '@teambit/tests-results';\nimport { ComponentsResults, CallbackFn, Tests } from './tester';\nimport { TestCmd } from './test.cmd';\nimport { TesterAspect } from './tester.aspect';\nimport { TesterService } from './tester.service';\nimport { TesterTask } from './tester.task';\nimport { detectTestFiles } from './utils';\nimport { testerSchema } from './tester.graphql';\nimport { testsResultsToJUnitFormat } from './utils/junit-generator';\n\nexport type TesterExtensionConfig = {\n  /**\n   * regex of the text environment.\n   */\n  testRegex: string;\n\n  /**\n   * determine whether to watch on start.\n   */\n  watchOnStart: boolean;\n  patterns: string[];\n};\n\nexport type TesterOptions = {\n  /**\n   * start the tester in watch mode.\n   */\n  watch: boolean;\n\n  /**\n   * start the tester in debug mode.\n   */\n  debug: boolean;\n\n  /**\n   * start the tester in debug mode.\n   */\n  ui?: boolean;\n\n  /**\n   * initiate the tester on given env.\n   */\n  env?: string;\n\n  /**\n   * generate JUnit files on the specified dir\n   */\n  junit?: string;\n\n  /**\n   * show code coverage\n   */\n  coverage?: boolean;\n\n  callback?: CallbackFn;\n};\n\nexport class TesterMain {\n  static runtime = MainRuntime;\n  static dependencies = [\n    CLIAspect,\n    EnvsAspect,\n    WorkspaceAspect,\n    LoggerAspect,\n    GraphqlAspect,\n    UIAspect,\n    DevFilesAspect,\n    BuilderAspect,\n  ];\n\n  constructor(\n    /**\n     * graphql extension.\n     */\n    private graphql: GraphqlMain,\n\n    /**\n     * envs extension.\n     */\n    private envs: EnvsMain,\n\n    /**\n     * workspace extension.\n     */\n    private workspace: Workspace,\n\n    /**\n     * tester service.\n     */\n    readonly service: TesterService,\n\n    /**\n     * build task.\n     */\n    readonly task: TesterTask,\n\n    private devFiles: DevFilesMain,\n\n    private builder: BuilderMain\n  ) {}\n\n  _testsResults: { [componentId: string]: ComponentsResults } | undefined[] = [];\n\n  async test(components: Component[], opts?: TesterOptions): Promise<EnvsExecutionResult<Tests>> {\n    const options = this.getOptions(opts);\n    const envsRuntime = await this.envs.createEnvironment(components);\n    if (opts?.env) {\n      return envsRuntime.runEnv(opts.env, this.service, options);\n    }\n    const results = await envsRuntime.run(this.service, options);\n    if (opts?.junit) {\n      await this.generateJUnit(opts?.junit, results);\n    }\n    return results;\n  }\n\n  private async generateJUnit(filePath: string, testsResults: EnvsExecutionResult<Tests>) {\n    const components = testsResults.results.map((envResult) => envResult.data?.components).flat();\n    const jUnit = testsResultsToJUnitFormat(compact(components));\n    await fs.outputFile(filePath, jUnit);\n  }\n\n  /**\n   * watch all components for changes and test upon each.\n   */\n  async watch(components: Component[], opts?: TesterOptions) {\n    const options = this.getOptions(opts);\n    const envsRuntime = await this.envs.createEnvironment(components);\n    if (opts?.env) {\n      return envsRuntime.runEnv(opts.env, this.service, options);\n    }\n\n    this.service.onTestRunComplete((results) => {\n      results.components.forEach((component) => {\n        this._testsResults[component.componentId.toString()] = component;\n      });\n    });\n    return envsRuntime.run(this.service, options);\n  }\n\n  async uiWatch() {\n    const components = await this.workspace.list();\n    return this.watch(components, { watch: true, debug: false, ui: true });\n  }\n\n  async getTestsResults(component: Component): Promise<{ testsResults?: TestsResult; loading: boolean } | undefined> {\n    const entry = component.state.aspects.get(TesterAspect.id);\n    const componentStatus = await this.workspace?.getComponentStatus(component);\n    const data = this.builder.getDataByAspect(component, TesterAspect.id) as { tests: TestsResult };\n    if ((entry || data) && !componentStatus?.modifyInfo?.hasModifiedFiles) {\n      return { testsResults: data?.tests || entry?.data.tests, loading: false };\n    }\n    return this.getTestsResultsFromState(component);\n  }\n\n  private getTestsResultsFromState(component: Component) {\n    const tests = this._testsResults[component.id.toString()];\n    return { testsResults: tests?.results, loading: tests?.loading || false };\n  }\n\n  /**\n   * get all test files of a component.\n   */\n  getTestFiles(component: Component) {\n    return detectTestFiles(component, this.devFiles);\n  }\n\n  private getOptions(options?: TesterOptions): TesterOptions {\n    const defaults = {\n      watch: false,\n      debug: false,\n    };\n\n    return merge(defaults, options);\n  }\n\n  static defaultConfig = {\n    /**\n     * default test regex for which files tester to apply on.\n     */\n    patterns: ['**/*.spec.+(js|ts|jsx|tsx)', '**/*.test.+(js|ts|jsx|tsx)'],\n\n    /**\n     * determine whether to watch on start.\n     */\n    watchOnStart: true,\n  };\n\n  static async provider(\n    [cli, envs, workspace, loggerAspect, graphql, ui, devFiles, builder]: [\n      CLIMain,\n      EnvsMain,\n      Workspace,\n      LoggerMain,\n      GraphqlMain,\n      UiMain,\n      DevFilesMain,\n      BuilderMain\n    ],\n    config: TesterExtensionConfig\n  ) {\n    const logger = loggerAspect.createLogger(TesterAspect.id);\n    const testerService = new TesterService(workspace, config.patterns, logger, graphql.pubsub, devFiles);\n    envs.registerService(testerService);\n    devFiles.registerDevPattern(config.patterns);\n    const tester = new TesterMain(\n      graphql,\n      envs,\n      workspace,\n      testerService,\n      new TesterTask(TesterAspect.id, devFiles),\n      devFiles,\n      builder\n    );\n\n    if (workspace && !workspace.consumer.isLegacy) {\n      cli.unregister('test');\n      ui.registerOnStart(async () => {\n        if (!config.watchOnStart) return undefined;\n        await tester.uiWatch();\n        return undefined;\n      });\n\n      cli.register(new TestCmd(tester, workspace, logger));\n    }\n\n    graphql.register(testerSchema(tester, graphql));\n\n    return tester;\n  }\n}\n\nTesterAspect.addRuntime(TesterMain);\n"]}