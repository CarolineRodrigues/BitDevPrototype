{"version":3,"sources":["test.cmd.tsx"],"names":["TestCmd","constructor","tester","workspace","logger","render","userPattern","watch","debug","all","env","scope","junit","coverage","timer","Timer","create","scopeName","undefined","start","ConsumerNotFound","getPatternWithScope","pattern","patternWithScope","components","getComponentsByUserInput","length","NoMatchingComponents","code","data","console","chalk","cyan","name","off","tests","test","hasErrors","seconds","stop"],"mappings":"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","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { Logger } from '@teambit/logger';\nimport { Workspace } from '@teambit/workspace';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { Timer } from '@teambit/legacy/dist/toolbox/timer';\nimport { Box, Text } from 'ink';\nimport React from 'react';\nimport { NoMatchingComponents } from './exceptions';\n\nimport type { TesterMain } from './tester.main.runtime';\n\ntype TestFlags = {\n  watch: boolean;\n  debug: boolean;\n  all: boolean;\n  env?: string;\n  scope?: string;\n  junit?: string;\n  coverage?: boolean;\n};\n\nexport class TestCmd implements Command {\n  name = 'test [pattern]';\n  description = 'test set of components in your workspace';\n  alias = 'at';\n  group = 'development';\n  shortDescription = '';\n  options = [\n    ['w', 'watch', 'start the tester in watch mode.'],\n    ['d', 'debug', 'start the tester in debug mode.'],\n    ['a', 'all', 'test all components, not only new and modified'],\n    ['', 'junit <filepath>', 'write tests results as JUnit XML format into the specified file path'],\n    ['', 'coverage', 'show code coverage data'],\n    ['e', 'env <id>', 'test only the given env'],\n    ['s', 'scope <scope>', 'name of the scope to test'],\n    // TODO: we need to reduce this redundant casting every time.\n  ] as CommandOptions;\n\n  constructor(private tester: TesterMain, private workspace: Workspace, private logger: Logger) {}\n\n  async render(\n    [userPattern]: [string],\n    { watch = false, debug = false, all = false, env, scope, junit, coverage = false }: TestFlags\n  ) {\n    const timer = Timer.create();\n    const scopeName = typeof scope === 'string' ? scope : undefined;\n    timer.start();\n    if (!this.workspace) throw new ConsumerNotFound();\n\n    const getPatternWithScope = () => {\n      if (!userPattern && !scope) return undefined;\n      const pattern = userPattern || '**';\n      return scopeName ? `${scopeName}/${pattern}` : pattern;\n    };\n    const patternWithScope = getPatternWithScope();\n    const components = await this.workspace.getComponentsByUserInput(all, patternWithScope, true);\n    if (!components.length) {\n      if (userPattern) throw new NoMatchingComponents(userPattern);\n      return {\n        code: 0,\n        data: (\n          <Box>\n            <Text bold>\n              no components found to test. use \"--all\" flag to test all components or specify the ids to test,\n              otherwise, only new and modified components will be tested{' '}\n            </Text>\n          </Box>\n        ),\n      };\n    }\n\n    this.logger.console(\n      `testing total of ${components.length} components in workspace '${chalk.cyan(this.workspace.name)}'`\n    );\n\n    let code = 0;\n    if (watch && !debug) {\n      // avoid turning off the logger for non-watch scenario. otherwise, when this aspect throws errors, they'll be\n      // swallowed. (Jest errors are shown regardless via Jest, but if the tester is unable to run Jest in the first\n      // place, these errors won't be shown)\n      this.logger.off();\n      await this.tester.watch(components, {\n        watch,\n        debug,\n        env,\n        coverage,\n      });\n    } else {\n      const tests = await this.tester.test(components, {\n        watch,\n        debug,\n        env,\n        junit,\n        coverage,\n      });\n      if (tests.hasErrors()) code = 1;\n    }\n    const { seconds } = timer.stop();\n\n    if (watch) return <Box></Box>;\n    return {\n      code,\n      data: (\n        <Box>\n          <Text>test has been completed in </Text>\n          <Text color=\"cyan\">{seconds} </Text>\n          <Text>seconds.</Text>\n        </Box>\n      ),\n    };\n  }\n}\n"]}