{"version":3,"sources":["tester.graphql.ts"],"names":["testerSchema","tester","graphql","typeDefs","resolvers","Subscription","testsChanged","subscribe","pubsub","asyncIterator","OnTestsChanged","payload","variables","id","ComponentHost","getTests","host","componentId","resolveComponentId","component","get","testsResults","getTestsResults"],"mappings":";;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,SAASA,YAAT,CAAsBC,MAAtB,EAA0CC,OAA1C,EAAwE;AAC7E,SAAO;AACLC,IAAAA,QAAQ,EAAE,0BAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA3CS;AA4CLC,IAAAA,SAAS,EAAE;AACTC,MAAAA,YAAY,EAAE;AACZC,QAAAA,YAAY,EAAE;AACZC,UAAAA,SAAS,EAAE,wCACT,MAAML,OAAO,CAACM,MAAR,CAAeC,aAAf,CAA6BC,wBAA7B,CADG,EAET,CAACC,OAAD,EAAUC,SAAV,KAAwB;AACtB,mBAAOD,OAAO,CAACL,YAAR,CAAqBO,EAArB,KAA4BD,SAAS,CAACC,EAA7C;AACD,WAJQ;AADC;AADF,OADL;AAYTC,MAAAA,aAAa,EAAE;AACbC,QAAAA,QAAQ,EAAE,OAAOC,IAAP,EAA+B;AAAEH,UAAAA;AAAF,SAA/B,KAA0D;AAClE,gBAAMI,WAAW,GAAG,MAAMD,IAAI,CAACE,kBAAL,CAAwBL,EAAxB,CAA1B;AACA,gBAAMM,SAAS,GAAG,MAAMH,IAAI,CAACI,GAAL,CAASH,WAAT,CAAxB;AACA,cAAI,CAACE,SAAL,EAAgB,OAAO,IAAP;AAChB,gBAAME,YAAY,GAAG,MAAMpB,MAAM,CAACqB,eAAP,CAAuBH,SAAvB,CAA3B;AACA,cAAI,CAACE,YAAL,EAAmB,OAAO,IAAP;AACnB,iBAAOA,YAAP;AACD;AARY;AAZN;AA5CN,GAAP;AAoED","sourcesContent":["import { GraphqlMain, Schema } from '@teambit/graphql';\nimport { ComponentFactory } from '@teambit/component';\nimport { withFilter } from 'graphql-subscriptions';\nimport gql from 'graphql-tag';\n\nimport { TesterMain } from './tester.main.runtime';\nimport { OnTestsChanged } from './tester.service';\n\nexport function testerSchema(tester: TesterMain, graphql: GraphqlMain): Schema {\n  return {\n    typeDefs: gql`\n      extend type ComponentHost {\n        getTests(id: String!): Tests\n      }\n\n      type Subscription {\n        testsChanged(id: String!): Tests\n      }\n\n      type Tests {\n        loading: Boolean!\n        testsResults: TestsResults\n      }\n\n      type TestsChanged {\n        testsResults: TestsResults\n      }\n\n      type TestsResults {\n        testFiles: [TestFiles]\n        success: Boolean\n        start: Int\n      }\n\n      type TestFiles {\n        file: String\n        tests: [Tests]\n        pass: Int\n        failed: Int\n        pending: Int\n        duration: Int\n        slow: Boolean\n        errorStr: String\n      }\n\n      type Tests {\n        ancestor: [String]\n        name: String\n        duration: String\n        status: String\n        error: String\n      }\n    `,\n    resolvers: {\n      Subscription: {\n        testsChanged: {\n          subscribe: withFilter(\n            () => graphql.pubsub.asyncIterator(OnTestsChanged),\n            (payload, variables) => {\n              return payload.testsChanged.id === variables.id;\n            }\n          ),\n        },\n      },\n\n      ComponentHost: {\n        getTests: async (host: ComponentFactory, { id }: { id: string }) => {\n          const componentId = await host.resolveComponentId(id);\n          const component = await host.get(componentId);\n          if (!component) return null;\n          const testsResults = await tester.getTestsResults(component);\n          if (!testsResults) return null;\n          return testsResults;\n        },\n      },\n    },\n  };\n}\n"]}