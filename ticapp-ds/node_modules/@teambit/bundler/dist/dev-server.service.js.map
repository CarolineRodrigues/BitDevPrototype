{"version":3,"sources":["dev-server.service.tsx"],"names":["DevServerService","constructor","pubsub","runtimeSlot","render","env","context","descriptor","getDescriptor","id","displayName","version","config","language","ignoreIllegals","environment","getDevServer","undefined","mergedContext","buildContext","devServer","icon","displayConfig","runOnce","contexts","dedicatedEnvDevServers","groupedEnvs","servers","Promise","all","Object","entries","map","contextList","mainContext","find","envDefinition","additionalContexts","filter","devServerContext","envRuntime","ComponentServer","mergeContext","getComponentsFromContexts","components","relatedContexts","ctx","concat","assign","entry","rootPath","publicPath","sep"],"mappings":"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","sourcesContent":["import { EnvService, ExecutionContext, EnvDefinition } from '@teambit/envs';\nimport { PubsubMain } from '@teambit/pubsub';\nimport { flatten } from 'lodash';\nimport React from 'react';\nimport { Text, Newline } from 'ink';\nimport highlight from 'cli-highlight';\nimport { sep } from 'path';\nimport { BrowserRuntimeSlot } from './bundler.main.runtime';\nimport { ComponentServer } from './component-server';\nimport { dedupEnvs } from './dedup-envs';\nimport { DevServer } from './dev-server';\nimport { DevServerContext } from './dev-server-context';\nimport { getEntry } from './get-entry';\n\nexport type DevServerServiceOptions = { dedicatedEnvDevServers?: string[] };\n\nexport type DevServerDescriptor = {\n  /**\n   * id of the dev server (e.g. jest/mocha)\n   */\n  id: string;\n\n  /**\n   * display name of the dev server (e.g. Jest / Mocha)\n   */\n  displayName: string;\n\n  /**\n   * icon of the configured dev server.\n   */\n  icon: string;\n\n  /**\n   * string containing the config for display.\n   */\n  config: string;\n\n  version?: string;\n};\n\nexport class DevServerService implements EnvService<ComponentServer, DevServerDescriptor> {\n  name = 'dev server';\n\n  constructor(\n    /**\n     * browser runtime slot\n     */\n    private pubsub: PubsubMain,\n\n    /**\n     * browser runtime slot\n     */\n    private runtimeSlot: BrowserRuntimeSlot\n  ) {}\n\n  async render(env: EnvDefinition, context: ExecutionContext[]) {\n    const descriptor = await this.getDescriptor(env, context);\n    return (\n      <Text key={descriptor?.id}>\n        <Text color=\"cyan\">configured dev server: </Text>\n        <Text>\n          {descriptor?.id} ({descriptor?.displayName} @ {descriptor?.version})\n        </Text>\n        <Newline />\n        <Text underline color=\"cyan\">\n          dev server config:\n        </Text>\n        <Newline />\n        <Text>\n          {/* refactor a separate component which highlights for cli */}\n          {highlight(descriptor?.config || '', { language: 'javascript', ignoreIllegals: true })}\n        </Text>\n        <Newline />\n      </Text>\n    );\n  }\n\n  async getDescriptor(\n    environment: EnvDefinition,\n    context?: ExecutionContext[]\n  ): Promise<DevServerDescriptor | undefined> {\n    if (!environment.env.getDevServer || !context) return undefined;\n    const mergedContext = await this.buildContext(context[0], []);\n    const devServer: DevServer = environment.env.getDevServer(mergedContext);\n\n    return {\n      id: devServer.id || '',\n      displayName: devServer.displayName || '',\n      icon: devServer.icon || '',\n      config: devServer.displayConfig ? devServer.displayConfig() : '',\n      version: devServer.version ? devServer.version() : '?',\n    };\n  }\n\n  // async run(context: ExecutionContext): Promise<ComponentServer[]> {\n  //   const devServerContext = await this.buildContext(context);\n  //   const devServer: DevServer = context.env.getDevServer(devServerContext);\n  //   const port = await selectPort();\n  //   // TODO: refactor to replace with a component server instance.\n  //   return new ComponentServer(this.pubsub, context, port, devServer);\n  // }\n\n  async runOnce(\n    contexts: ExecutionContext[],\n    { dedicatedEnvDevServers }: DevServerServiceOptions\n  ): Promise<ComponentServer[]> {\n    const groupedEnvs = dedupEnvs(contexts, dedicatedEnvDevServers);\n\n    const servers = await Promise.all(\n      Object.entries(groupedEnvs).map(async ([id, contextList]) => {\n        const mainContext = contextList.find((context) => context.envDefinition.id === id) || contextList[0];\n        const additionalContexts = contextList.filter((context) => context.envDefinition.id !== id);\n\n        const devServerContext = await this.buildContext(mainContext, additionalContexts);\n        const devServer: DevServer = await devServerContext.envRuntime.env.getDevServer(devServerContext);\n\n        return new ComponentServer(this.pubsub, devServerContext, [3300, 3400], devServer);\n      })\n    );\n\n    return servers;\n  }\n\n  mergeContext() {}\n\n  private getComponentsFromContexts(contexts: ExecutionContext[]) {\n    return flatten(\n      contexts.map((context) => {\n        return context.components;\n      })\n    );\n  }\n\n  /**\n   * builds the execution context for the dev server.\n   */\n  private async buildContext(\n    context: ExecutionContext,\n    additionalContexts: ExecutionContext[] = []\n  ): Promise<DevServerContext> {\n    context.relatedContexts = additionalContexts.map((ctx) => ctx.envDefinition.id);\n    context.components = context.components.concat(this.getComponentsFromContexts(additionalContexts));\n\n    return Object.assign(context, {\n      entry: await getEntry(context, this.runtimeSlot),\n      // don't start with a leading \"/\" because it generates errors on Windows\n      rootPath: `preview/${context.envRuntime.id}`,\n      publicPath: `${sep}public`,\n    });\n  }\n}\n"]}