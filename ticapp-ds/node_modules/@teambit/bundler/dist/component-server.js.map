{"version":3,"sources":["component-server.ts"],"names":["ComponentServer","constructor","pubsub","context","portRange","devServer","componentsServer","hostname","port","ComponentsServerStartedEvent","Date","now","hasComponent","component","components","find","contextComponent","equals","_port","listen","server","address","getHostname","BindError","pub","BundlerAspect","id","createComponentsServerStartedEvent","onChange","url","envRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,eAAN,CAAsB;AAC3B;AAEAC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,MAJC;AAMT;AACJ;AACA;AACaC,EAAAA,OATA;AAWT;AACJ;AACA;AACaC,EAAAA,SAdA;AAgBT;AACJ;AACA;AACaC,EAAAA,SAnBA,EAoBT;AAAA,SAhBQH,MAgBR,GAhBQA,MAgBR;AAAA,SAXSC,OAWT,GAXSA,OAWT;AAAA,SANSC,SAMT,GANSA,SAMT;AAAA,SADSC,SACT,GADSA,SACT;AAAA;AAAA;AAAA;AAAA,gFA+CkC,CAACC,gBAAD,EAAmBH,OAAnB,EAA4BI,QAA5B,EAAsCC,IAAtC,KAA+C;AACjF,aAAO,KAAIC,sCAAJ,EAAiCC,IAAI,CAACC,GAAL,EAAjC,EAA6CL,gBAA7C,EAA+DH,OAA/D,EAAwEI,QAAxE,EAAkFC,IAAlF,CAAP;AACD,KAjDC;AAAE;;AAIJ;AACF;AACA;AACEI,EAAAA,YAAY,CAACC,SAAD,EAAuB;AACjC,WAAO,KAAKV,OAAL,CAAaW,UAAb,CAAwBC,IAAxB,CAA8BC,gBAAD,IAAsBA,gBAAgB,CAACC,MAAjB,CAAwBJ,SAAxB,CAAnD,CAAP;AACD;;AAEO,MAAJL,IAAI,GAAG;AACT,WAAO,KAAKU,KAAZ;AACD;;AAGW,QAANC,MAAM,GAAG;AACb,UAAMX,IAAI,GAAG,MAAM,8BAAW,KAAKJ,SAAhB,CAAnB;AACA,SAAKc,KAAL,GAAaV,IAAb;AACA,UAAMY,MAAM,GAAG,MAAM,KAAKf,SAAL,CAAec,MAAf,CAAsBX,IAAtB,CAArB;AACA,UAAMa,OAAO,GAAGD,MAAM,CAACC,OAAP,EAAhB;AACA,UAAMd,QAAQ,GAAG,KAAKe,WAAL,CAAiBD,OAAjB,CAAjB;AACA,QAAI,CAACA,OAAL,EAAc,MAAM,KAAIE,uBAAJ,GAAN;AACd,SAAKhB,QAAL,GAAgBA,QAAhB;AAEA,SAAKL,MAAL,CAAYsB,GAAZ,CAAgBC,yBAAcC,EAA9B,EAAkC,KAAKC,kCAAL,CAAwCP,MAAxC,EAAgD,KAAKjB,OAArD,EAA8DI,QAA9D,EAAwEC,IAAxE,CAAlC;AACD;;AAEOc,EAAAA,WAAW,CAACD,OAAD,EAAuC;AACxD,QAAIA,OAAO,KAAK,IAAhB,EAAsB,MAAM,KAAIE,uBAAJ,GAAN;AACtB,QAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC,OAAOA,OAAP;AAEjC,QAAId,QAAQ,GAAGc,OAAO,CAACA,OAAvB;;AACA,QAAId,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,MAAAA,QAAQ,GAAG,WAAX;AACD;;AAED,WAAOA,QAAP;AACD;;AAEOqB,EAAAA,QAAQ,GAAG,CAAE;;AAWrB;AACF;AACA;AACS,MAAHC,GAAG,GAAG;AACR;AACA,WAAQ,YAAW,KAAK1B,OAAL,CAAa2B,UAAb,CAAwBJ,EAAG,GAA9C;AACD;;AAhF0B","sourcesContent":["import { Component } from '@teambit/component';\nimport { ExecutionContext } from '@teambit/envs';\nimport { PubsubMain } from '@teambit/pubsub';\n\nimport { AddressInfo } from 'net';\n\nimport { DevServer } from './dev-server';\nimport { BindError } from './exceptions';\nimport { ComponentsServerStartedEvent } from './events';\nimport { BundlerAspect } from './bundler.aspect';\nimport { selectPort } from './select-port';\n\nexport class ComponentServer {\n  // why is this here\n  errors?: Error[];\n  constructor(\n    /**\n     * browser runtime slot\n     */\n    private pubsub: PubsubMain,\n\n    /**\n     * components contained in the existing component server.\n     */\n    readonly context: ExecutionContext,\n\n    /**\n     * port range of the component server.\n     */\n    readonly portRange: number[],\n\n    /**\n     * env dev server.\n     */\n    readonly devServer: DevServer\n  ) {}\n\n  hostname: string | undefined;\n\n  /**\n   * determine whether component server contains a component.\n   */\n  hasComponent(component: Component) {\n    return this.context.components.find((contextComponent) => contextComponent.equals(component));\n  }\n\n  get port() {\n    return this._port;\n  }\n\n  _port: number;\n  async listen() {\n    const port = await selectPort(this.portRange);\n    this._port = port;\n    const server = await this.devServer.listen(port);\n    const address = server.address();\n    const hostname = this.getHostname(address);\n    if (!address) throw new BindError();\n    this.hostname = hostname;\n\n    this.pubsub.pub(BundlerAspect.id, this.createComponentsServerStartedEvent(server, this.context, hostname, port));\n  }\n\n  private getHostname(address: string | AddressInfo | null) {\n    if (address === null) throw new BindError();\n    if (typeof address === 'string') return address;\n\n    let hostname = address.address;\n    if (hostname === '::') {\n      hostname = 'localhost';\n    }\n\n    return hostname;\n  }\n\n  private onChange() {}\n\n  private createComponentsServerStartedEvent: (\n    DevServer,\n    ExecutionContext,\n    string,\n    number\n  ) => ComponentsServerStartedEvent = (componentsServer, context, hostname, port) => {\n    return new ComponentsServerStartedEvent(Date.now(), componentsServer, context, hostname, port);\n  };\n\n  /**\n   * get the url of the component server.\n   */\n  get url() {\n    // tailing `/` is required!\n    return `/preview/${this.context.envRuntime.id}/`;\n  }\n}\n"]}