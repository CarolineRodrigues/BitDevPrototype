{"version":3,"sources":["bundler.main.runtime.ts"],"names":["BundlerMain","constructor","config","pubsub","envs","devService","runtimeSlot","devServer","components","envRuntime","createEnvironment","servers","runOnce","dedicatedEnvDevServers","_componentServers","indexByComponent","getComponentServer","component","undefined","envId","getEnvId","server","find","componentServer","context","relatedContexts","includes","id","computeEntries","slotEntries","Promise","all","values","map","browserRuntime","entry","slotPaths","reduce","acc","current","concat","registerTarget","runtime","register","provider","graphql","devServerService","DevServerService","bundler","registerService","Slot","withType","MainRuntime","PubsubAspect","EnvsAspect","GraphqlAspect","ComponentAspect","BundlerAspect","addRuntime"],"mappings":"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","sourcesContent":["import PubsubAspect, { PubsubMain } from '@teambit/pubsub';\nimport { MainRuntime } from '@teambit/cli';\nimport { Component, ComponentAspect } from '@teambit/component';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { BrowserRuntime } from './browser-runtime';\nimport { BundlerAspect } from './bundler.aspect';\nimport { ComponentServer } from './component-server';\nimport { BundlerContext } from './bundler-context';\nimport { devServerSchema } from './dev-server.graphql';\nimport { DevServerService } from './dev-server.service';\n\nexport type BrowserRuntimeSlot = SlotRegistry<BrowserRuntime>;\n\nexport type BundlerConfig = {\n  dedicatedEnvDevServers: string[];\n};\n\n/**\n * bundler extension.\n */\nexport class BundlerMain {\n  constructor(\n    readonly config: BundlerConfig,\n    /**\n     * Pubsub extension.\n     */\n    private pubsub: PubsubMain,\n\n    /**\n     * environments extension.\n     */\n    private envs: EnvsMain,\n\n    /**\n     * dev server service.\n     */\n    private devService: DevServerService,\n\n    /**\n     * browser runtime slot.\n     */\n    private runtimeSlot: BrowserRuntimeSlot\n  ) {}\n\n  /**\n   * load all given components in corresponding dev servers.\n   * @param components defaults to all components in the workspace.\n   */\n  async devServer(components: Component[]): Promise<ComponentServer[]> {\n    const envRuntime = await this.envs.createEnvironment(components);\n    // TODO: this must be refactored away from here. this logic should be in the Preview.\n    const servers: ComponentServer[] = await envRuntime.runOnce<ComponentServer[]>(this.devService, {\n      dedicatedEnvDevServers: this.config.dedicatedEnvDevServers,\n    });\n    this._componentServers = servers;\n\n    this.indexByComponent();\n\n    return this._componentServers;\n  }\n\n  /**\n   * get a dev server instance containing a component.\n   * @param component\n   */\n  getComponentServer(component: Component): undefined | ComponentServer {\n    if (!this._componentServers) return undefined;\n    const envId = this.envs.getEnvId(component);\n    const server = this._componentServers.find(\n      (componentServer) =>\n        componentServer.context.relatedContexts.includes(envId) || componentServer.context.id === envId\n    );\n\n    return server;\n  }\n\n  /**\n   * compute entry files for bundling components in a given execution context.\n   */\n  async computeEntries(context: BundlerContext) {\n    const slotEntries = await Promise.all(\n      this.runtimeSlot.values().map(async (browserRuntime) => browserRuntime.entry(context))\n    );\n\n    const slotPaths = slotEntries.reduce((acc, current) => {\n      acc = acc.concat(current);\n      return acc;\n    });\n\n    return slotPaths;\n  }\n\n  /**\n   * register a new browser runtime environment.\n   * @param browserRuntime\n   */\n  registerTarget(browserRuntime: BrowserRuntime[]) {\n    browserRuntime.map((runtime) => {\n      return this.runtimeSlot.register(runtime);\n    });\n\n    return this;\n  }\n\n  /**\n   * component servers.\n   */\n  private _componentServers: null | ComponentServer[];\n\n  private indexByComponent() {}\n\n  static slots = [Slot.withType<BrowserRuntime>()];\n\n  static runtime = MainRuntime;\n  static dependencies = [PubsubAspect, EnvsAspect, GraphqlAspect, ComponentAspect];\n\n  static defaultConfig = {\n    dedicatedEnvDevServers: [],\n  };\n\n  static async provider(\n    [pubsub, envs, graphql]: [PubsubMain, EnvsMain, GraphqlMain],\n    config,\n    [runtimeSlot]: [BrowserRuntimeSlot]\n  ) {\n    const devServerService = new DevServerService(pubsub, runtimeSlot);\n    const bundler = new BundlerMain(config, pubsub, envs, devServerService, runtimeSlot);\n    envs.registerService(devServerService);\n\n    graphql.register(devServerSchema(bundler));\n\n    return bundler;\n  }\n}\n\nBundlerAspect.addRuntime(BundlerMain);\n"]}