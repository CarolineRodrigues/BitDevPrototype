{"version":3,"sources":["get-entry.ts"],"names":["getEntry","context","runtimeSlot","slotEntries","Promise","all","values","map","browserRuntime","entry","slotPaths","reduce","acc","current","concat"],"mappings":";;;;;;;;;;;AAeA;AACA;AACA;AACO,eAAeA,QAAf,CAAwBC,OAAxB,EAAmDC,WAAnD,EAAuG;AAC5G;AACA,QAAMC,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAR,CACxBH,WAAW,CAACI,MAAZ,GAAqBC,GAArB,CAAyB,MAAOC,cAAP,IAA0BA,cAAc,CAACC,KAAf,CAAqBR,OAArB,CAAnD,CADwB,CAA1B;AAIA,QAAMS,SAAS,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACrDD,IAAAA,GAAG,GAAGA,GAAG,CAACE,MAAJ,CAAWD,OAAX,CAAN;AACA,WAAOD,GAAP;AACD,GAHiB,CAAlB;AAKA,SAAOF,SAAP;AACD","sourcesContent":["import { ComponentID } from '@teambit/component';\nimport { ExecutionContext } from '@teambit/envs';\nimport { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';\nimport { PathOsBased } from '@teambit/legacy/dist/utils/path';\n\nimport { BrowserRuntimeSlot } from './bundler.main.runtime';\n\nexport type ComponentDir = {\n  componentDir?: (\n    componentId: ComponentID,\n    bitMapOptions?: GetBitMapComponentOptions,\n    options?: { relative: boolean }\n  ) => PathOsBased | undefined;\n};\n\n/**\n * computes the bundler entry.\n */\nexport async function getEntry(context: ExecutionContext, runtimeSlot: BrowserRuntimeSlot): Promise<string[]> {\n  // TODO: refactor this away from here and use computePaths instead\n  const slotEntries = await Promise.all(\n    runtimeSlot.values().map(async (browserRuntime) => browserRuntime.entry(context))\n  );\n\n  const slotPaths = slotEntries.reduce((acc, current) => {\n    acc = acc.concat(current);\n    return acc;\n  });\n\n  return slotPaths;\n}\n"]}