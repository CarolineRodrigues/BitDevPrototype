{"version":3,"sources":["dedup-envs.ts"],"names":["dedupEnvs","contexts","dedicatedEnvDevServers","groupedEnvs","forEach","context","envId","getEnvId","push","dedicatedServers","id","split","includes","env","getDevEnvId"],"mappings":";;;;;;;;;AAEA;AACO,SAASA,SAAT,CAAmBC,QAAnB,EAAiDC,sBAAjD,EAAoF;AACzF,QAAMC,WAA+C,GAAG,EAAxD;AAEAF,EAAAA,QAAQ,CAACG,OAAT,CAAkBC,OAAD,IAAa;AAC5B,UAAMC,KAAK,GAAGC,QAAQ,CAACF,OAAD,EAAUH,sBAAV,CAAtB;AACA,QAAI,CAACI,KAAL,EAAY;AACZ,QAAI,EAAEA,KAAK,IAAIH,WAAX,CAAJ,EAA6BA,WAAW,CAACG,KAAD,CAAX,GAAqB,EAArB;AAE7BH,IAAAA,WAAW,CAACG,KAAD,CAAX,CAAmBE,IAAnB,CAAwBH,OAAxB;AACD,GAND;AAQA,SAAOF,WAAP;AACD;;AAED,SAASI,QAAT,CAAkBF,OAAlB,EAA6CI,gBAA7C,EAA8F;AAAA;;AAC5F,QAAMC,EAAE,GAAGL,OAAO,CAACK,EAAR,CAAWC,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAX;;AAEA,MAAIF,gBAAJ,aAAIA,gBAAJ,eAAIA,gBAAgB,CAAEG,QAAlB,CAA2BF,EAA3B,CAAJ,EAAoC;AAClC,WAAOL,OAAO,CAACK,EAAf;AACD;;AAED,yBAAOL,OAAO,CAACQ,GAAf,iDAAO,aAAaC,WAAb,CAAyBT,OAAzB,CAAP;AACD","sourcesContent":["import type { ExecutionContext } from '@teambit/envs';\n\n// de-duping dev servers by the amount of type the dev server configuration was overridden by envs.\nexport function dedupEnvs(contexts: ExecutionContext[], dedicatedEnvDevServers?: string[]) {\n  const groupedEnvs: Record<string, ExecutionContext[]> = {};\n\n  contexts.forEach((context) => {\n    const envId = getEnvId(context, dedicatedEnvDevServers);\n    if (!envId) return;\n    if (!(envId in groupedEnvs)) groupedEnvs[envId] = [];\n\n    groupedEnvs[envId].push(context);\n  });\n\n  return groupedEnvs;\n}\n\nfunction getEnvId(context: ExecutionContext, dedicatedServers?: string[]): string | undefined {\n  const id = context.id.split('@')[0];\n\n  if (dedicatedServers?.includes(id)) {\n    return context.id;\n  }\n\n  return context.env?.getDevEnvId(context);\n}\n"]}