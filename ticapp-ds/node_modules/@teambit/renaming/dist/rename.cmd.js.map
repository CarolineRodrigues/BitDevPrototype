{"version":3,"sources":["rename.cmd.ts"],"names":["RenameCmd","constructor","renaming","report","sourceId","targetId","options","results","rename","chalk","green","bold","toString"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AASO,MAAMA,SAAN,CAAmC;AAiBxCC,EAAAA,WAAW,CAASC,QAAT,EAAiC;AAAA,SAAxBA,QAAwB,GAAxBA,QAAwB;AAAA,kDAhBrC,oCAgBqC;AAAA,yDAd1C,+GAc0C;AAAA,iEAbrB;AACzB,uEAY8C;AAAA,mDAXpC,aAWoC;AAAA,2DAV5B,IAU4B;AAAA,mDATpC,EASoC;AAAA,qDARlC,CACR,CAAC,GAAD,EAAM,gBAAN,EAAwB,+CAAxB,CADQ,EAER,CAAC,GAAD,EAAM,eAAN,EAAuB,qFAAvB,CAFQ,CAQkC;AAAA,oDAJnC,IAImC;AAAA,uDAHhC,IAGgC;AAAA,sDAFjC,IAEiC;AAAE;;AAElC,QAANC,MAAM,CAAC,CAACC,QAAD,EAAWC,QAAX,CAAD,EAAyCC,OAAzC,EAAkF;AAC5F,UAAMC,OAAO,GAAG,MAAM,KAAKL,QAAL,CAAcM,MAAd,CAAqBJ,QAArB,EAA+BC,QAA/B,EAAyCC,OAAzC,CAAtB;AACA,WAAOG,iBAAMC,KAAN,CACJ,wBAAuBD,iBAAME,IAAN,CAAWJ,OAAO,CAACH,QAAR,CAAiBQ,QAAjB,EAAX,CAAwC,OAAMH,iBAAME,IAAN,CAAWJ,OAAO,CAACF,QAAR,CAAiBO,QAAjB,EAAX,CAAwC,EADzG,CAAP;AAGD;;AAxBuC","sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { RenamingMain } from '.';\n\nexport type RenameOptions = {\n  scope?: string;\n  path?: string;\n};\n\nexport class RenameCmd implements Command {\n  name = 'rename <source-name> <target-name>';\n  description =\n    'EXPERIMENTAL. rename component. if tagged/exported, create a new component and deprecate the source-component';\n  extendedDescription = `the \"<target-name>\" should include the component-name only, without the scope-name.\nto assign a default-scope to this component, please use \"--scope\" flag`;\n  group = 'collaborate';\n  skipWorkspace = true;\n  alias = '';\n  options = [\n    ['s', 'scope <string>', 'default scope for the newly created component'],\n    ['p', 'path <string>', 'relative path in the workspace. by default the path is `<scope>/<namespace>/<name>`'],\n  ] as CommandOptions;\n  loader = true;\n  migration = true;\n  remoteOp = true;\n\n  constructor(private renaming: RenamingMain) {}\n\n  async report([sourceId, targetId]: [string, string], options: RenameOptions): Promise<string> {\n    const results = await this.renaming.rename(sourceId, targetId, options);\n    return chalk.green(\n      `successfully renamed ${chalk.bold(results.sourceId.toString())} to ${chalk.bold(results.targetId.toString())}`\n    );\n  }\n}\n"]}