import { CLIMain } from '@teambit/cli';
import { Component, ComponentID, ComponentMain } from '@teambit/component';
import { DeprecationMain } from '@teambit/deprecation';
import { GraphqlMain } from '@teambit/graphql';
import { NewComponentHelperMain } from '@teambit/new-component-helper';
import { Workspace } from '@teambit/workspace';
import { RenameOptions } from './rename.cmd';
export declare class RenamingMain {
    private workspace;
    private newComponentHelper;
    private deprecation;
    constructor(workspace: Workspace, newComponentHelper: NewComponentHelperMain, deprecation: DeprecationMain);
    rename(sourceIdStr: string, targetIdStr: string, options: RenameOptions): Promise<RenameResult>;
    getRenamingInfo(component: Component): RenamingInfo | null;
    private getConfig;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([cli, workspace, deprecation, newComponentHelper, componentMain, graphql]: [
        CLIMain,
        Workspace,
        DeprecationMain,
        NewComponentHelperMain,
        ComponentMain,
        GraphqlMain
    ]): Promise<RenamingMain>;
}
export declare type RenameResult = {
    sourceId: ComponentID;
    targetId: ComponentID;
};
export declare type RenamingInfo = {
    renamedFrom: ComponentID;
};
