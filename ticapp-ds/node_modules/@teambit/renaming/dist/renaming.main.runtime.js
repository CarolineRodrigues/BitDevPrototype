"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RenamingMain = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _cli() {
  const data = require("@teambit/cli");

  _cli = function () {
    return data;
  };

  return data;
}

function _component() {
  const data = _interopRequireWildcard(require("@teambit/component"));

  _component = function () {
    return data;
  };

  return data;
}

function _deprecation() {
  const data = require("@teambit/deprecation");

  _deprecation = function () {
    return data;
  };

  return data;
}

function _graphql() {
  const data = _interopRequireDefault(require("@teambit/graphql"));

  _graphql = function () {
    return data;
  };

  return data;
}

function _newComponentHelper() {
  const data = _interopRequireDefault(require("@teambit/new-component-helper"));

  _newComponentHelper = function () {
    return data;
  };

  return data;
}

function _workspace() {
  const data = _interopRequireDefault(require("@teambit/workspace"));

  _workspace = function () {
    return data;
  };

  return data;
}

function _rename() {
  const data = require("./rename.cmd");

  _rename = function () {
    return data;
  };

  return data;
}

function _renaming() {
  const data = require("./renaming.aspect");

  _renaming = function () {
    return data;
  };

  return data;
}

function _renaming2() {
  const data = require("./renaming.fragment");

  _renaming2 = function () {
    return data;
  };

  return data;
}

function _renaming3() {
  const data = require("./renaming.graphql");

  _renaming3 = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

class RenamingMain {
  constructor(workspace, newComponentHelper, deprecation) {
    this.workspace = workspace;
    this.newComponentHelper = newComponentHelper;
    this.deprecation = deprecation;
  }

  async rename(sourceIdStr, targetIdStr, options) {
    const sourceId = await this.workspace.resolveComponentId(sourceIdStr);
    const isTagged = sourceId.hasVersion();
    const sourceComp = await this.workspace.get(sourceId);
    const targetId = this.newComponentHelper.getNewComponentId(targetIdStr, undefined, options === null || options === void 0 ? void 0 : options.scope);

    if (isTagged) {
      const config = await this.getConfig(sourceComp);
      await this.newComponentHelper.writeAndAddNewComp(sourceComp, targetId, options, config);
      await this.deprecation.deprecate(sourceId, targetId);
    } else {
      this.workspace.bitMap.renameNewComponent(sourceId, targetId);
      await this.workspace.bitMap.write();
    }

    return {
      sourceId,
      targetId
    };
  }

  getRenamingInfo(component) {
    var _component$state$aspe;

    const renameConfig = (_component$state$aspe = component.state.aspects.get(_renaming().RenamingAspect.id)) === null || _component$state$aspe === void 0 ? void 0 : _component$state$aspe.config;
    if (!renameConfig) return null;
    return {
      renamedFrom: _component().ComponentID.fromObject(renameConfig.renamedFrom)
    };
  }

  async getConfig(comp) {
    const fromExisting = await this.newComponentHelper.getConfigFromExistingToNewComponent(comp);
    return _objectSpread(_objectSpread({}, fromExisting), {}, {
      [_renaming().RenamingAspect.id]: {
        renamedFrom: comp.id.toObject()
      }
    });
  }

  static async provider([cli, workspace, deprecation, newComponentHelper, componentMain, graphql]) {
    const renaming = new RenamingMain(workspace, newComponentHelper, deprecation);
    cli.register(new (_rename().RenameCmd)(renaming));
    graphql.register((0, _renaming3().renamingSchema)(renaming));
    componentMain.registerShowFragments([new (_renaming2().RenamingFragment)(renaming)]);
    return renaming;
  }

}

exports.RenamingMain = RenamingMain;
(0, _defineProperty2().default)(RenamingMain, "slots", []);
(0, _defineProperty2().default)(RenamingMain, "dependencies", [_cli().CLIAspect, _workspace().default, _deprecation().DeprecationAspect, _newComponentHelper().default, _component().default, _graphql().default]);
(0, _defineProperty2().default)(RenamingMain, "runtime", _cli().MainRuntime);

_renaming().RenamingAspect.addRuntime(RenamingMain);

//# sourceMappingURL=renaming.main.runtime.js.map