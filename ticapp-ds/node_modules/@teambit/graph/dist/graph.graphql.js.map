{"version":3,"sources":["graph.graphql.ts"],"names":["textCmp","Intl","Collator","compare","graphSchema","graphBuilder","componentAspect","typeDefs","resolvers","ComponentGraph","nodes","graph","map","node","id","component","attr","sort","a","b","edges","edge","sourceId","targetId","dependencyLifecycleType","getDependencyLifecycleType","type","Query","_parent","ids","filter","componentsHost","getHost","resolvedIds","resolveMultipleComponentIds","list","x","getGraph","undefined","runtimeGraph","runtimeOnly","toString","edgeRawData","EdgeType","dev","runtime","peer"],"mappings":"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","sourcesContent":["import { ComponentMain } from '@teambit/component';\nimport { Schema } from '@teambit/graphql';\nimport gql from 'graphql-tag';\n\nimport { GraphBuilder } from './graph-builder';\nimport { ComponentGraph } from './component-graph';\nimport { GraphFilter } from './model/graph-filters';\nimport { DependencyType } from './model/dependency';\nimport { EdgeType } from './edge-type';\n\nconst textCmp = new Intl.Collator().compare;\n\nexport function graphSchema(graphBuilder: GraphBuilder, componentAspect: ComponentMain): Schema {\n  return {\n    typeDefs: gql`\n      type ComponentGraph {\n        nodes: [ComponentGraphNode]\n        edges: [ComponentGraphEdge]\n      }\n\n      type ComponentGraphNode {\n        id: String\n        component: Component\n      }\n\n      enum DependencyLifecycleType {\n        PEER\n        RUNTIME\n        DEV\n      }\n\n      type ComponentGraphEdge {\n        sourceId: String\n        targetId: String\n        dependencyLifecycleType: DependencyLifecycleType\n      }\n\n      extend type Query {\n        graph(ids: [String], filter: String): ComponentGraph\n      }\n    `,\n    resolvers: {\n      ComponentGraph: {\n        nodes: (graph: ComponentGraph) => {\n          return graph.nodes\n            .map((node) => {\n              return {\n                id: node.id,\n                component: node.attr,\n              };\n            })\n            .sort((a, b) => textCmp(a.id, b.id));\n        },\n        edges: (graph: ComponentGraph) => {\n          return graph.edges\n            .map(\n              (edge) =>\n                ({\n                  sourceId: edge.sourceId,\n                  targetId: edge.targetId,\n                  dependencyLifecycleType: getDependencyLifecycleType(edge.attr.type),\n                } as { sourceId: string; targetId: string; dependencyLifecycleType: EdgeType })\n            )\n            .sort((a, b) => textCmp(a.sourceId, b.sourceId))\n            .sort((a, b) => textCmp(a.targetId, b.targetId));\n        },\n      },\n      Query: {\n        graph: async (_parent, { ids, filter }: { ids?: string[]; filter?: GraphFilter }) => {\n          const componentsHost = componentAspect.getHost();\n          const resolvedIds = ids\n            ? await componentsHost.resolveMultipleComponentIds(ids)\n            : (await componentsHost.list()).map((x) => x.id);\n\n          const graph = await graphBuilder.getGraph(resolvedIds);\n          if (!graph) return undefined;\n\n          if (filter === 'runtimeOnly') {\n            const runtimeGraph = graph.runtimeOnly(resolvedIds.map((x) => x.toString()));\n            return runtimeGraph;\n          }\n\n          return graph;\n        },\n      },\n    },\n  };\n}\n\nfunction getDependencyLifecycleType(edgeRawData: DependencyType): EdgeType {\n  if (edgeRawData === 'dev') return EdgeType.dev;\n  if (edgeRawData === 'runtime') return EdgeType.runtime;\n  return EdgeType.peer;\n}\n"]}