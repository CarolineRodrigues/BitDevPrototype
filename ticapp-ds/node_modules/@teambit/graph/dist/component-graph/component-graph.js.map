{"version":3,"sources":["component-graph.ts"],"names":["DEPENDENCIES_TYPES","ComponentGraph","Graph","constructor","nodes","edges","versionMap","Map","create","findCycles","graph","cycles","shouldLimitToSeedersOnly","seederIdsStr","seederIds","map","id","toString","cyclesWithSeeders","filter","cycle","some","cycleIdStr","includes","findDuplicateDependencies","seederIdsNoVersions","toStringWithoutVersion","duplicateDependencies","compFullName","versions","allVersionNodes","length","versionSubgraphs","notLatestVersions","version","latestVersionNode","forEach","predecessors","predecessorsSubgraph","immediatePredecessors","predecessor","subGraph","buildFromCleargraph","versionSubgraph","versionId","immediateDependents","push","isSeeder","shouldDisplayDueToBeingSeeder","duplicateDep","DuplicateDependency","set","newGraph","newGraphNodes","node","attr","newGraphEdges","edge","sourceId","targetId","setNodes","setEdges","runtimeOnly","componentIds","successorsSubgraph","type","_calculateVersionMap","comp","compKey","_legacy","has","value","get","Object","prototype","hasOwnProperty","call","currentComp","latestComp","isLegacy","head","currentCompVersion","getVersion","latestCompVersion","isLaterThan","Date","timestamp"],"mappings":"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","sourcesContent":["import { Component, ComponentID } from '@teambit/component';\nimport { Graph } from 'cleargraph';\n\nimport { Dependency } from '../model/dependency';\nimport { DuplicateDependency, VersionSubgraph } from '../duplicate-dependency';\n\nexport const DEPENDENCIES_TYPES = ['dependencies', 'devDependencies'];\n\ntype Node = { id: string; node: Component };\ntype Edge = { sourceId: string; targetId: string; edge: Dependency };\n\nexport class ComponentGraph extends Graph<Component, Dependency> {\n  versionMap: Map<string, { allVersionNodes: string[]; latestVersionNode: string }>;\n  seederIds: ComponentID[] = []; // component IDs that started the graph. (if from workspace, the .bitmap ids normally)\n  constructor(nodes: Node[] = [], edges: Edge[] = []) {\n    super(nodes, edges);\n    this.versionMap = new Map();\n  }\n\n  protected create(nodes: Node[] = [], edges: Edge[] = []): this {\n    return new ComponentGraph(nodes, edges) as this;\n  }\n\n  /**\n   * overrides the super class to eliminate non-seeders components\n   */\n  findCycles(graph?: this): string[][] {\n    const cycles = super.findCycles(graph);\n    if (!this.shouldLimitToSeedersOnly()) {\n      return cycles;\n    }\n    const seederIdsStr = this.seederIds.map((id) => id.toString());\n    const cyclesWithSeeders = cycles.filter((cycle) => {\n      return cycle.some((cycleIdStr) => seederIdsStr.includes(cycleIdStr));\n    });\n    return cyclesWithSeeders;\n  }\n\n  findDuplicateDependencies(): Map<string, DuplicateDependency> {\n    const seederIdsNoVersions = this.seederIds.map((id) => id.toStringWithoutVersion());\n    const duplicateDependencies: Map<string, DuplicateDependency> = new Map();\n    for (const [compFullName, versions] of this.versionMap) {\n      if (versions.allVersionNodes.length > 1) {\n        const versionSubgraphs: VersionSubgraph[] = [];\n        const notLatestVersions = versions.allVersionNodes.filter((version) => version !== versions.latestVersionNode);\n        notLatestVersions.forEach((version) => {\n          const predecessors = this.predecessorsSubgraph(version);\n          const immediatePredecessors = this.predecessors(version).map((predecessor) => predecessor.id);\n          const subGraph = this.buildFromCleargraph(predecessors);\n          const versionSubgraph: VersionSubgraph = {\n            versionId: version,\n            subGraph,\n            // TODO: validate that this is working correctly\n            immediateDependents: immediatePredecessors,\n          };\n          versionSubgraphs.push(versionSubgraph);\n        });\n        const isSeeder = seederIdsNoVersions.includes(compFullName);\n        const shouldDisplayDueToBeingSeeder = !this.shouldLimitToSeedersOnly() || isSeeder;\n        if (shouldDisplayDueToBeingSeeder && versionSubgraphs.length > 0) {\n          const duplicateDep = new DuplicateDependency(versions.latestVersionNode, versionSubgraphs);\n          duplicateDependencies.set(compFullName, duplicateDep);\n        }\n      }\n    }\n    return duplicateDependencies;\n  }\n\n  buildFromCleargraph(graph: Graph<Component, Dependency>): ComponentGraph {\n    // TODO: once cleargraph constructor and graph.nodes are consistent we should just use this line\n    // this.create(graph.nodes, graph.edges)\n\n    const newGraph = new ComponentGraph();\n    const newGraphNodes: Node[] = graph.nodes.map((node) => {\n      return {\n        id: node.id,\n        node: node.attr,\n      };\n    });\n    const newGraphEdges: Edge[] = graph.edges.map((edge) => {\n      return {\n        sourceId: edge.sourceId,\n        targetId: edge.targetId,\n        edge: edge.attr,\n      };\n    });\n    newGraph.setNodes(newGraphNodes);\n    newGraph.setEdges(newGraphEdges);\n\n    return newGraph;\n  }\n\n  runtimeOnly(componentIds: string[]) {\n    return this.successorsSubgraph(componentIds, (edge) => edge.attr.type === 'runtime');\n  }\n\n  private shouldLimitToSeedersOnly() {\n    return this.seederIds.length;\n  }\n\n  _calculateVersionMap() {\n    const versionMap: Map<string, { allVersionNodes: string[]; latestVersionNode: string }> = new Map();\n    for (const node of this.nodes) {\n      const comp = node.attr;\n      const compKey = node.id;\n      const compFullName = comp.id._legacy.toStringWithoutVersion();\n      if (!versionMap.has(compFullName)) {\n        versionMap.set(compFullName, {\n          allVersionNodes: [compKey],\n          latestVersionNode: compKey,\n        });\n      } else {\n        const value = versionMap.get(compFullName);\n        if (value) {\n          if (Object.prototype.hasOwnProperty.call(value, 'allVersionNodes')) {\n            value.allVersionNodes.push(compKey);\n          }\n          const currentComp = this.node(compKey)?.attr;\n          const latestComp = this.node(value.latestVersionNode)?.attr;\n          const isLegacy = !currentComp?.head || !latestComp?.head;\n\n          if (isLegacy) {\n            const currentCompVersion = currentComp?.id._legacy.getVersion();\n            const latestCompVersion = latestComp?.id._legacy.getVersion();\n            if (!!currentCompVersion && !!latestCompVersion && currentCompVersion.isLaterThan(latestCompVersion)) {\n              value.latestVersionNode = compKey;\n            }\n          } else if (new Date(currentComp.head.timestamp) > new Date(latestComp.head.timestamp)) {\n            value.latestVersionNode = compKey;\n          }\n        }\n      }\n    }\n    return versionMap;\n  }\n}\n"]}