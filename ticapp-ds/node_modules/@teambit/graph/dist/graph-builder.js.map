{"version":3,"sources":["graph-builder.ts"],"names":["GraphBuilder","constructor","componentAspect","getGraph","ids","opts","componentHost","host","getHost","legacyGraph","getLegacyGraph","graph","buildFromLegacy","_graph","_initialized","seederIds","listIds","newGraph","ComponentGraph","setNodeP","nodes","map","nodeId","componentId","resolveComponentId","component","get","setNode","toString","Promise","all","setEdgePromise","edges","edgeId","source","v","target","w","edgeObj","edge","Dependency","setEdge","versionMap","_calculateVersionMap"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAUA;AACA;AACA;AACA;AACA;AACO,MAAMA,YAAN,CAAmB;AAGxBC,EAAAA,WAAW,CAASC,eAAT,EAAyC;AAAA,SAAhCA,eAAgC,GAAhCA,eAAgC;AAAA;AAAA,0DADrC,KACqC;AAAE;;AAExC,QAARC,QAAQ,CAACC,GAAD,EAAsBC,IAAkB,GAAG,EAA3C,EAAwE;AACpF,UAAMC,aAAa,GAAGD,IAAI,CAACE,IAAL,IAAa,KAAKL,eAAL,CAAqBM,OAArB,EAAnC;AAEA,UAAMC,WAAW,GAAG,MAAMH,aAAa,CAACI,cAAd,CAA6BN,GAA7B,CAA1B;AACA,UAAMO,KAAK,GAAG,MAAM,KAAKC,eAAL,CAAqBH,WAArB,EAAkC;AAAEF,MAAAA,IAAI,EAAEF,IAAI,CAACE;AAAb,KAAlC,CAApB;AACA,SAAKM,MAAL,GAAcF,KAAd;AACA,SAAKG,YAAL,GAAoB,IAApB;AACAH,IAAAA,KAAK,CAACI,SAAN,GAAkBX,GAAG,KAAK,MAAME,aAAa,CAACU,OAAd,EAAX,CAArB;AACA,WAAO,KAAKH,MAAZ;AACD;;AAE4B,QAAfD,eAAe,CAC3BH,WAD2B,EAE3BJ,IAA8B,GAAG,EAFN,EAGF;AACzB,UAAMY,QAAQ,GAAG,KAAIC,gCAAJ,GAAjB;AACA,UAAMZ,aAAa,GAAGD,IAAI,CAACE,IAAL,IAAa,KAAKL,eAAL,CAAqBM,OAArB,EAAnC;AAEA,UAAMW,QAAQ,GAAGV,WAAW,CAACW,KAAZ,GAAoBC,GAApB,CAAwB,MAAOC,MAAP,IAAkB;AACzD,YAAMC,WAAW,GAAG,MAAMjB,aAAa,CAACkB,kBAAd,CAAiCF,MAAjC,CAA1B;AACA,YAAMG,SAAS,GAAG,MAAMnB,aAAa,CAACoB,GAAd,CAAkBH,WAAlB,CAAxB;;AACA,UAAIE,SAAJ,EAAe;AACbR,QAAAA,QAAQ,CAACU,OAAT,CAAiBJ,WAAW,CAACK,QAAZ,EAAjB,EAAyCH,SAAzC;AACD;AACF,KANgB,CAAjB;AAOA,UAAMI,OAAO,CAACC,GAAR,CAAYX,QAAZ,CAAN;AAEA,UAAMY,cAAc,GAAGtB,WAAW,CAACuB,KAAZ,GAAoBX,GAApB,CAAwB,MAAOY,MAAP,IAAkB;AAC/D,YAAMC,MAAM,GAAG,MAAM5B,aAAa,CAACkB,kBAAd,CAAiCS,MAAM,CAACE,CAAxC,CAArB;AACA,YAAMC,MAAM,GAAG,MAAM9B,aAAa,CAACkB,kBAAd,CAAiCS,MAAM,CAACI,CAAxC,CAArB;AACA,YAAMC,OAAO,GACX7B,WAAW,CAAC8B,IAAZ,CAAiBN,MAAM,CAACE,CAAxB,EAA2BF,MAAM,CAACI,CAAlC,MAAyC,cAAzC,GAA0D,KAAIG,wBAAJ,EAAe,SAAf,CAA1D,GAAsF,KAAIA,wBAAJ,EAAe,KAAf,CADxF;AAEAvB,MAAAA,QAAQ,CAACwB,OAAT,CAAiBP,MAAM,CAACN,QAAP,EAAjB,EAAoCQ,MAAM,CAACR,QAAP,EAApC,EAAuDU,OAAvD;AACD,KANsB,CAAvB;AAOA,UAAMT,OAAO,CAACC,GAAR,CAAYC,cAAZ,CAAN;AAEAd,IAAAA,QAAQ,CAACyB,UAAT,GAAsBzB,QAAQ,CAAC0B,oBAAT,EAAtB;AACA,WAAO1B,QAAP;AACD;;AA3CuB","sourcesContent":["import { ComponentFactory, ComponentID, ComponentMain } from '@teambit/component';\nimport type LegacyGraph from '@teambit/legacy/dist/scope/graph/graph';\nimport { ComponentGraph } from './component-graph';\nimport { Dependency } from './model/dependency';\n\ntype GetGraphOpts = {\n  host?: ComponentFactory;\n};\n\ntype BuildFromLegacyGraphOpts = {\n  host?: ComponentFactory;\n};\n\n/**\n * @todo: potential issues with the current way the class is built.\n * it's possible to call `getGraph` multiple times and at the same time (Promise.all).\n * which makes the _graph prop and other props unpredictable.\n */\nexport class GraphBuilder {\n  _graph?: ComponentGraph;\n  _initialized = false;\n  constructor(private componentAspect: ComponentMain) {}\n\n  async getGraph(ids?: ComponentID[], opts: GetGraphOpts = {}): Promise<ComponentGraph> {\n    const componentHost = opts.host || this.componentAspect.getHost();\n\n    const legacyGraph = await componentHost.getLegacyGraph(ids);\n    const graph = await this.buildFromLegacy(legacyGraph, { host: opts.host });\n    this._graph = graph;\n    this._initialized = true;\n    graph.seederIds = ids || (await componentHost.listIds());\n    return this._graph;\n  }\n\n  private async buildFromLegacy(\n    legacyGraph: LegacyGraph,\n    opts: BuildFromLegacyGraphOpts = {}\n  ): Promise<ComponentGraph> {\n    const newGraph = new ComponentGraph();\n    const componentHost = opts.host || this.componentAspect.getHost();\n\n    const setNodeP = legacyGraph.nodes().map(async (nodeId) => {\n      const componentId = await componentHost.resolveComponentId(nodeId);\n      const component = await componentHost.get(componentId);\n      if (component) {\n        newGraph.setNode(componentId.toString(), component);\n      }\n    });\n    await Promise.all(setNodeP);\n\n    const setEdgePromise = legacyGraph.edges().map(async (edgeId) => {\n      const source = await componentHost.resolveComponentId(edgeId.v);\n      const target = await componentHost.resolveComponentId(edgeId.w);\n      const edgeObj =\n        legacyGraph.edge(edgeId.v, edgeId.w) === 'dependencies' ? new Dependency('runtime') : new Dependency('dev');\n      newGraph.setEdge(source.toString(), target.toString(), edgeObj);\n    });\n    await Promise.all(setEdgePromise);\n\n    newGraph.versionMap = newGraph._calculateVersionMap();\n    return newGraph;\n  }\n}\n"]}