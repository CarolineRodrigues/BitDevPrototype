{"version":3,"sources":["graph-page.tsx"],"names":["GraphPage","componentWidgets","component","ComponentContext","filter","setFilter","onCheckFilter","isFiltered","undefined","graph","error","loading","id","toString","code","styles","page","filters"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAMO,SAASA,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAAyD;AAC9D,QAAMC,SAAS,GAAG,yBAAWC,6BAAX,CAAlB;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB,uBAAsB,aAAtB,CAA5B;;AACA,QAAMC,aAAa,GAAIC,UAAD,IAAyB;AAC7CF,IAAAA,SAAS,CAACE,UAAU,GAAG,aAAH,GAAmBC,SAA9B,CAAT;AACD,GAFD;;AAIA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,MAA4B,4BAAc,CAACT,SAAS,CAACU,EAAV,CAAaC,QAAb,EAAD,CAAd,EAAyCT,MAAzC,CAAlC;AACA,MAAIM,KAAJ,EAAW,OAAOA,KAAK,CAACI,IAAN,KAAe,GAAf,gBAAqB,+BAAC,6BAAD,OAArB,gBAAwC,+BAAC,iCAAD,OAA/C;AACX,MAAI,CAACL,KAAL,EAAY,oBAAO,+BAAC,4BAAD,OAAP;AAEZ,QAAMF,UAAU,GAAGH,MAAM,KAAK,aAA9B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEW,2BAAOC;AAAvB,kBACE,+BAAC,kBAAD;AAAI,IAAA,IAAI,EAAC;AAAT,8BADF,eAEE,+BAAC,sCAAD;AACE,IAAA,gBAAgB,EAAEf,gBADpB;AAEE,IAAA,KAAK,EAAEQ,KAFT;AAGE,IAAA,QAAQ,EAAEP,SAAS,CAACU,EAHtB;AAIE,IAAA,SAAS,EAAEG,2BAAON;AAJpB,kBAME,+BAAC,4BAAD;AACE,IAAA,SAAS,EAAEM,2BAAOE,OADpB;AAEE,IAAA,OAAO,EAAEN,OAFX;AAGE,IAAA,UAAU,EAAEJ,UAHd;AAIE,IAAA,cAAc,EAAED;AAJlB,IANF,CAFF,CADF;AAkBD","sourcesContent":["import React, { useContext, useState } from 'react';\n\nimport { H2 } from '@teambit/documenter.ui.heading';\nimport { NotFoundPage } from '@teambit/design.ui.pages.not-found';\nimport { ServerErrorPage } from '@teambit/design.ui.pages.server-error';\nimport { ComponentContext } from '@teambit/component';\nimport { FullLoader } from '@teambit/ui-foundation.ui.full-loader';\n\nimport { useGraphQuery } from '../query';\nimport { DependenciesGraph } from '../dependencies-graph';\nimport { ComponentWidgetSlot } from '../../graph.ui.runtime';\nimport type { GraphFilter } from '../../model/graph-filters';\n\nimport { GraphFilters } from './graph-filters';\n\nimport styles from './graph-page.module.scss';\n\ntype GraphPageProps = {\n  componentWidgets: ComponentWidgetSlot;\n};\n\nexport function GraphPage({ componentWidgets }: GraphPageProps) {\n  const component = useContext(ComponentContext);\n\n  const [filter, setFilter] = useState<GraphFilter>('runtimeOnly');\n  const onCheckFilter = (isFiltered: boolean) => {\n    setFilter(isFiltered ? 'runtimeOnly' : undefined);\n  };\n\n  const { graph, error, loading } = useGraphQuery([component.id.toString()], filter);\n  if (error) return error.code === 404 ? <NotFoundPage /> : <ServerErrorPage />;\n  if (!graph) return <FullLoader />;\n\n  const isFiltered = filter === 'runtimeOnly';\n\n  return (\n    <div className={styles.page}>\n      <H2 size=\"xs\">Component Dependencies</H2>\n      <DependenciesGraph\n        componentWidgets={componentWidgets}\n        graph={graph}\n        rootNode={component.id}\n        className={styles.graph}\n      >\n        <GraphFilters\n          className={styles.filters}\n          disable={loading}\n          isFiltered={isFiltered}\n          onChangeFilter={onCheckFilter}\n        />\n      </DependenciesGraph>\n    </div>\n  );\n}\n"]}