{"version":3,"sources":["component-node.tsx"],"names":["ComponentNode","node","type","rest","graphContext","ComponentGraphContext","component","id","styles","compNode","variants","firstRow","envIcon","mutedText","nameLine","name","ellipsis","version","buffs","componentWidgets","toArray","map","widgetId","Widget","Breadcrumbs","componentId","className","scope","namespace","showSep","breadcrumbs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAFA;AASO,SAASA,aAAT,OAA+E;AAAA,MAAxD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAI,GAAG;AAAf,GAAwD;AAAA,MAAvBC,IAAuB;AACpF,QAAMC,YAAY,GAAG,yBAAWC,0CAAX,CAArB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBL,IAAtB;AACA,QAAM;AAAEM,IAAAA;AAAF,MAASD,SAAf;AAEA,sBACE,+BAAC,sBAAD;AAAM,IAAA,SAAS,EAAE,2BAAWE,+BAAOC,QAAlB,EAA4BC,0BAASR,IAAT,CAA5B,CAAjB;AAA8D,IAAA,SAAS,EAAC;AAAxE,KAAmFC,IAAnF,gBACE;AAAK,IAAA,SAAS,EAAEK,+BAAOG;AAAvB,kBACE,+BAAC,iBAAD;AAAS,IAAA,SAAS,EAAEL,SAApB;AAA+B,IAAA,SAAS,EAAEE,+BAAOI;AAAjD,IADF,eAEE,+BAAC,WAAD;AAAa,IAAA,WAAW,EAAEL,EAA1B;AAA8B,IAAA,SAAS,EAAEM;AAAzC,IAFF,CADF,eAKE;AAAK,IAAA,SAAS,EAAEL,+BAAOM;AAAvB,kBACE;AAAM,IAAA,SAAS,EAAE,2BAAWN,+BAAOO,IAAlB,EAAwBC,0BAAxB;AAAjB,KAAqDT,EAAE,CAACQ,IAAxD,CADF,EAEGR,EAAE,CAACU,OAAH,iBAAc;AAAM,IAAA,SAAS,EAAE,2BAAWT,+BAAOS,OAAlB,EAA2BD,0BAA3B;AAAjB,KAAwDT,EAAE,CAACU,OAA3D,CAFjB,eAIE;AAAK,IAAA,SAAS,EAAET,+BAAOU;AAAvB,kBACE,+BAAC,8BAAD;AAAiB,IAAA,SAAS,EAAEZ;AAA5B,IADF,EAEGF,YAAY,IACXA,YAAY,CAACe,gBAAb,CACGC,OADH,GAEGC,GAFH,CAEO,CAAC,CAACC,QAAD,EAAWC,MAAX,CAAD,kBAAwB,+BAAC,MAAD;AAAQ,IAAA,GAAG,EAAED,QAAb;AAAuB,IAAA,SAAS,EAAEhB;AAAlC,IAF/B,CAHJ,CAJF,CALF,CADF;AAoBD;;AAID,SAASkB,WAAT,QAA4E;AAAA,MAAvD;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAuD;AAAA,MAA1BvB,IAA0B;AAC1E,QAAM;AAAEwB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBH,WAA7B;AACA,QAAMI,OAAO,GAAG,CAAC,CAACF,KAAF,IAAW,CAAC,CAACC,SAA7B;AAEA,sBACE,mEAASzB,IAAT;AAAe,IAAA,SAAS,EAAE,2BAAWK,+BAAOsB,WAAlB,EAA+Bd,0BAA/B,EAAyCU,SAAzC;AAA1B,MACGC,KADH,EAEGE,OAAO,IAAI,GAFd,EAGGD,SAHH,CADF;AAOD","sourcesContent":["import React, { useContext } from 'react';\nimport classnames from 'classnames';\nimport { mutedText } from '@teambit/base-ui.text.muted-text';\nimport { ComponentID } from '@teambit/component';\nimport { DeprecationIcon } from '@teambit/component.ui.deprecation-icon';\nimport { EnvIcon } from '@teambit/envs.ui.env-icon';\nimport { ellipsis } from '@teambit/design.ui.styles.ellipsis';\nimport { Card, CardProps } from '@teambit/base-ui.surfaces.card';\nimport { NodeModel } from '../query/node-model';\nimport { ComponentGraphContext } from '../dependencies-graph/';\n\n// keep order: styles, then variants\nimport styles from './component-node.module.scss';\nimport variants from './variants.module.scss';\n\nexport interface ComponentNode extends CardProps {\n  node: NodeModel;\n  type: string;\n}\n\nexport function ComponentNode({ node, type = 'defaultNode', ...rest }: ComponentNode) {\n  const graphContext = useContext(ComponentGraphContext);\n  const { component } = node;\n  const { id } = component;\n\n  return (\n    <Card className={classnames(styles.compNode, variants[type])} elevation=\"none\" {...rest}>\n      <div className={styles.firstRow}>\n        <EnvIcon component={component} className={styles.envIcon} />\n        <Breadcrumbs componentId={id} className={mutedText} />\n      </div>\n      <div className={styles.nameLine}>\n        <span className={classnames(styles.name, ellipsis)}>{id.name}</span>\n        {id.version && <span className={classnames(styles.version, ellipsis)}>{id.version}</span>}\n\n        <div className={styles.buffs}>\n          <DeprecationIcon component={component} />\n          {graphContext &&\n            graphContext.componentWidgets\n              .toArray()\n              .map(([widgetId, Widget]) => <Widget key={widgetId} component={component} />)}\n        </div>\n      </div>\n    </Card>\n  );\n}\n\ntype BreadcrumbsProps = { componentId: ComponentID } & React.HTMLAttributes<HTMLDivElement>;\n\nfunction Breadcrumbs({ componentId, className, ...rest }: BreadcrumbsProps) {\n  const { scope, namespace } = componentId;\n  const showSep = !!scope && !!namespace;\n\n  return (\n    <div {...rest} className={classnames(styles.breadcrumbs, ellipsis, className)}>\n      {scope}\n      {showSep && '/'}\n      {namespace}\n    </div>\n  );\n}\n"]}