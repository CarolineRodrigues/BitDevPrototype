{"version":3,"sources":["calc-elements.tsx"],"names":["calcElements","graph","rootNode","positions","nodes","Array","from","values","map","x","id","type","data","node","component","isEqual","ignoreVersion","undefined","position","get","y","edges","e","sourceId","targetId","source","target","label","dependencyLifecycleType","labelBgPadding","className","arrowHeadType","ArrowHeadType","Arrow"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMA;AACA;AACA;AACO,SAASA,YAAT,CAAsBC,KAAtB,EAAqD;AAAEC,EAAAA;AAAF,CAArD,EAAoF;AACzF,SAAO,sBAAQ,MAAM;AACnB,QAAI,CAACD,KAAL,EAAY,OAAO,EAAP;AAEZ,UAAME,SAAS,GAAG,8BAAWF,KAAX,CAAlB;AAEA,UAAMG,KAAa,GAAGC,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACG,KAAN,CAAYG,MAAZ,EAAX,EAAiCC,GAAjC,CAAsCC,CAAD,IAAO;AAChE,aAAO;AACLC,QAAAA,EAAE,EAAED,CAAC,CAACC,EADD;AAELC,QAAAA,IAAI,EAAE,eAFD;AAGLC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAEJ,CADF;AAEJE,UAAAA,IAAI,EAAET,QAAQ,IAAIO,CAAC,CAACK,SAAF,CAAYJ,EAAZ,CAAeK,OAAf,CAAuBb,QAAvB,EAAiC;AAAEc,YAAAA,aAAa,EAAE;AAAjB,WAAjC,CAAZ,GAAwE,MAAxE,GAAiFC;AAFnF,SAHD;AAOLC,QAAAA,QAAQ,EAAEf,SAAS,CAACgB,GAAV,CAAcV,CAAC,CAACC,EAAhB,KAAuB;AAAED,UAAAA,CAAC,EAAE,CAAL;AAAQW,UAAAA,CAAC,EAAE;AAAX;AAP5B,OAAP;AASD,KAVqB,CAAtB;AAYA,UAAMC,KAAa,GAAGpB,KAAK,CAACoB,KAAN,CAAYb,GAAZ,CAAiBc,CAAD,KAAQ;AAC5CZ,MAAAA,EAAE,EAAG,IAAGY,CAAC,CAACC,QAAS,KAAID,CAAC,CAACE,QAAS,EADU;AAE5CC,MAAAA,MAAM,EAAEH,CAAC,CAACC,QAFkC;AAG5CG,MAAAA,MAAM,EAAEJ,CAAC,CAACE,QAHkC;AAI5CG,MAAAA,KAAK,EAAE,+BAAeL,CAAC,CAACM,uBAAjB,CAJqC;AAK5CC,MAAAA,cAAc,EAAE,CAAC,CAAD,EAAI,CAAJ,CAL4B;AAM5ClB,MAAAA,IAAI,EAAE,YANsC;AAO5CmB,MAAAA,SAAS,EAAE,+BAAeR,CAAC,CAACM,uBAAjB,CAPiC;AAQ5CG,MAAAA,aAAa,EAAEC,mCAAcC;AARe,KAAR,CAAhB,CAAtB;AAWA,WAAO,CAAC,GAAG7B,KAAJ,EAAW,GAAGiB,KAAd,CAAP;AACD,GA7BM,EA6BJ,CAACpB,KAAD,CA7BI,CAAP;AA8BD","sourcesContent":["import { useMemo } from 'react';\nimport { Node, Edge, ArrowHeadType } from 'react-flow-renderer';\nimport { ComponentID } from '@teambit/component';\nimport { calcLayout } from './calc-layout';\nimport { GraphModel } from '../query';\n\nimport { depTypeToClass, depTypeToLabel } from './dep-edge';\n\ntype ElementsOptions = {\n  rootNode?: ComponentID;\n};\n\n/**\n * generate Nodes and Edges for the ReactFlowRenderer graph renderer\n */\nexport function calcElements(graph: GraphModel | undefined, { rootNode }: ElementsOptions) {\n  return useMemo(() => {\n    if (!graph) return [];\n\n    const positions = calcLayout(graph);\n\n    const nodes: Node[] = Array.from(graph.nodes.values()).map((x) => {\n      return {\n        id: x.id,\n        type: 'ComponentNode',\n        data: {\n          node: x,\n          type: rootNode && x.component.id.isEqual(rootNode, { ignoreVersion: true }) ? 'root' : undefined,\n        },\n        position: positions.get(x.id) || { x: 0, y: 0 },\n      };\n    });\n\n    const edges: Edge[] = graph.edges.map((e) => ({\n      id: `_${e.sourceId}__${e.targetId}`,\n      source: e.sourceId,\n      target: e.targetId,\n      label: depTypeToLabel(e.dependencyLifecycleType),\n      labelBgPadding: [4, 4],\n      type: 'smoothstep',\n      className: depTypeToClass(e.dependencyLifecycleType),\n      arrowHeadType: ArrowHeadType.Arrow,\n    }));\n\n    return [...nodes, ...edges];\n  }, [graph]);\n}\n"]}