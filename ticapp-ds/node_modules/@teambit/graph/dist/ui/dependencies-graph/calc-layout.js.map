{"version":3,"sources":["calc-layout.tsx"],"names":["NODE_WIDTH","NODE_HEIGHT","BOTTOM_TO_TOP","calcLayout","graph","g","graphlib","Graph","setGraph","rankdir","setDefaultEdgeLabel","nodes","forEach","n","setNode","id","width","height","edges","e","setEdge","v","sourceId","w","targetId","dagre","layout","positionsArr","map","nodeId","node","pos","x","y","Map"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAGA,MAAMA,UAAU,GAAG,GAAnB;AACA,MAAMC,WAAW,GAAG,EAApB;AAEA,MAAMC,aAAa,GAAG,IAAtB;AAEA;AACA;AACA;;AACO,SAASC,UAAT,CAAoBC,KAApB,EAAuC;AAC5C,QAAMC,CAAC,GAAG,KAAIC,kBAASC,KAAb,GAAV;AACAF,EAAAA,CAAC,CAACG,QAAF,CAAW;AAAEC,IAAAA,OAAO,EAAEP;AAAX,GAAX;AACAG,EAAAA,CAAC,CAACK,mBAAF,CAAsB,OAAO,EAAP,CAAtB,EAH4C,CAK5C;;AACAN,EAAAA,KAAK,CAACO,KAAN,CAAYC,OAAZ,CAAqBC,CAAD,IAAOR,CAAC,CAACS,OAAF,CAAUD,CAAC,CAACE,EAAZ,EAAgB;AAAEC,IAAAA,KAAK,EAAEhB,UAAT;AAAqBiB,IAAAA,MAAM,EAAEhB;AAA7B,GAAhB,CAA3B;AACAG,EAAAA,KAAK,CAACc,KAAN,CAAYN,OAAZ,CAAqBO,CAAD,IAAOd,CAAC,CAACe,OAAF,CAAU;AAAEC,IAAAA,CAAC,EAAEF,CAAC,CAACG,QAAP;AAAiBC,IAAAA,CAAC,EAAEJ,CAAC,CAACK;AAAtB,GAAV,CAA3B,EAP4C,CAS5C;;AACAC,mBAAMC,MAAN,CAAarB,CAAb;;AAEA,QAAMsB,YAAkD,GAAGtB,CAAC,CAACM,KAAF,GAAUiB,GAAV,CAAeC,MAAD,IAAY;AACnF,UAAMC,IAAI,GAAGzB,CAAC,CAACyB,IAAF,CAAOD,MAAP,CAAb;AAEA,UAAME,GAAG,GAAG;AACVC,MAAAA,CAAC,EAAEF,IAAI,CAACE,CAAL,GAASF,IAAI,CAACd,KAAL,GAAa,CADf;AAEViB,MAAAA,CAAC,EAAEH,IAAI,CAACG,CAAL,GAASH,IAAI,CAACb,MAAL,GAAc;AAFhB,KAAZ;AAKA,WAAO,CAACY,MAAD,EAASE,GAAT,CAAP;AACD,GAT0D,CAA3D;AAWA,SAAO,IAAIG,GAAJ,CAAQP,YAAR,CAAP;AACD","sourcesContent":["import dagre, { graphlib } from 'dagre';\nimport { GraphModel } from '../query';\n\nconst NODE_WIDTH = 260;\nconst NODE_HEIGHT = 90;\n\nconst BOTTOM_TO_TOP = 'BT';\n\n/**\n * calculate the specific location of each node in the graph\n */\nexport function calcLayout(graph: GraphModel) {\n  const g = new graphlib.Graph();\n  g.setGraph({ rankdir: BOTTOM_TO_TOP });\n  g.setDefaultEdgeLabel(() => ({}));\n\n  // make a new instance of { width, height } per node, or dagre will get confused and place all nodes in the same spot\n  graph.nodes.forEach((n) => g.setNode(n.id, { width: NODE_WIDTH, height: NODE_HEIGHT }));\n  graph.edges.forEach((e) => g.setEdge({ v: e.sourceId, w: e.targetId }));\n\n  // position items in graph\n  dagre.layout(g);\n\n  const positionsArr: [string, { x: number; y: number }][] = g.nodes().map((nodeId) => {\n    const node = g.node(nodeId);\n\n    const pos = {\n      x: node.x - node.width / 2,\n      y: node.y - node.height / 2,\n    };\n\n    return [nodeId, pos];\n  });\n\n  return new Map(positionsArr);\n}\n"]}