{"version":3,"sources":["dependencies-graph.tsx"],"names":["ComponentNodeContainer","props","sourcePosition","Position","Top","targetPosition","Bottom","data","id","node","type","NodeTypes","ComponentNode","DependenciesGraph","graph","rootNode","componentWidgets","className","onLoad","children","rest","graphRef","elements","context","handleLoad","instance","current","fitView","undefined","styles","controls","calcMinimapColors","minimap"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, useRef, useEffect } from 'react';\nimport classnames from 'classnames';\nimport ReactFlow, {\n  ReactFlowProvider,\n  Controls,\n  Background,\n  MiniMap,\n  OnLoadParams,\n  NodeTypesType,\n  Handle,\n  Position,\n  NodeProps,\n  ReactFlowProps,\n} from 'react-flow-renderer';\nimport { ComponentID } from '@teambit/component';\n\nimport { ComponentWidgetSlot } from '../../graph.ui.runtime';\nimport { ComponentNode } from '../component-node';\nimport { GraphModel } from '../query';\nimport { calcElements } from './calc-elements';\nimport { calcMinimapColors } from './minimap';\nimport { ComponentGraphContext } from './graph-context';\n\nimport styles from './dependencies-graph.module.scss';\n\nfunction ComponentNodeContainer(props: NodeProps) {\n  const { sourcePosition = Position.Top, targetPosition = Position.Bottom, data, id } = props;\n\n  return (\n    <div key={id}>\n      <Handle type=\"target\" position={targetPosition} isConnectable={false} />\n      <Handle type=\"source\" position={sourcePosition} isConnectable={false} />\n      <ComponentNode node={data.node} type={data.type} />\n    </div>\n  );\n}\n\nconst NodeTypes: NodeTypesType = { ComponentNode: ComponentNodeContainer };\n\nexport type DependenciesGraphProps = {\n  rootNode: ComponentID;\n  graph: GraphModel;\n  componentWidgets: ComponentWidgetSlot;\n  onLoad?: (instance: OnLoadParams) => void;\n} & Omit<ReactFlowProps, 'elements'>;\n\nexport function DependenciesGraph({\n  graph,\n  rootNode,\n  componentWidgets,\n  className,\n  onLoad,\n  children,\n  ...rest\n}: DependenciesGraphProps) {\n  const graphRef = useRef<OnLoadParams>();\n  const elements = calcElements(graph, { rootNode });\n  const context = useMemo(() => ({ componentWidgets }), [componentWidgets]);\n\n  const handleLoad = useCallback(\n    (instance: OnLoadParams) => {\n      graphRef.current = instance;\n      instance.fitView();\n      onLoad?.(instance);\n    },\n    [onLoad]\n  );\n\n  // clear ref on unmount\n  useEffect(() => () => (graphRef.current = undefined), []);\n\n  useEffect(() => {\n    graphRef.current?.fitView();\n  }, [graph]);\n\n  return (\n    <ComponentGraphContext.Provider value={context}>\n      <ReactFlowProvider>\n        <ReactFlow\n          draggable={false}\n          nodesDraggable={true}\n          selectNodesOnDrag={false}\n          nodesConnectable={false}\n          zoomOnDoubleClick={false}\n          elementsSelectable={false}\n          maxZoom={1}\n          {...rest}\n          className={classnames(styles.graph, className)}\n          elements={elements}\n          nodeTypes={NodeTypes}\n          onLoad={handleLoad}\n        >\n          <Background />\n          <Controls className={styles.controls} />\n          <MiniMap nodeColor={calcMinimapColors} className={styles.minimap} />\n          {children}\n        </ReactFlow>\n      </ReactFlowProvider>\n    </ComponentGraphContext.Provider>\n  );\n}\n"]}