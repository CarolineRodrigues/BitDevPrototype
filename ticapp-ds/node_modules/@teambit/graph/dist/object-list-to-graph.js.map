{"version":3,"sources":["object-list-to-graph.ts"],"names":["IdGraph","Graph","constructor","nodes","edges","objectListToGraph","objectList","bitObjectsList","toBitObjects","components","getComponents","versions","getVersions","Promise","all","map","component","versionsInfo","modelComponent","versionObjects","throws","forEach","versionInfo","id","toBitId","changeVersion","tag","ref","toString","idStr","push","node","version","dependencies","devDependencies","extensionDependencies","depsIdsGroupedByType","addDep","depId","edge","depIdStr","sourceId","targetId","runTime","Dependency","dev","uniqNodes","idGraph"],"mappings":";;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKO,MAAMA,OAAN,SAAsBC,mBAAtB,CAA+C;AACpDC,EAAAA,WAAW,CAACC,KAAa,GAAG,EAAjB,EAAqBC,KAAa,GAAG,EAArC,EAAyC;AAClD,UAAMD,KAAN,EAAaC,KAAb;AACD;;AAHmD;;;;AAM/C,eAAeC,iBAAf,CAAiCC,UAAjC,EAA2E;AAChF,QAAMC,cAAc,GAAG,MAAMD,UAAU,CAACE,YAAX,EAA7B;AACA,QAAMC,UAAU,GAAGF,cAAc,CAACG,aAAf,EAAnB;AACA,QAAMC,QAAQ,GAAGJ,cAAc,CAACK,WAAf,EAAjB;AACA,QAAMT,KAAa,GAAG,EAAtB;AACA,QAAMC,KAAa,GAAG,EAAtB;AACA,QAAMS,OAAO,CAACC,GAAR,CACJL,UAAU,CAACM,GAAX,CAAe,MAAOC,SAAP,IAAqB;AAClC,UAAMC,YAAY,GAAG,MAAM,4CAAmB;AAC5CC,MAAAA,cAAc,EAAEF,SAD4B;AAE5CG,MAAAA,cAAc,EAAER,QAF4B;AAG5CS,MAAAA,MAAM,EAAE;AAHoC,KAAnB,CAA3B;AAKAH,IAAAA,YAAY,CAACI,OAAb,CAAsBC,WAAD,IAAiB;AACpC,YAAMC,EAAE,GAAGP,SAAS,CAACQ,OAAV,GAAoBC,aAApB,CAAkCH,WAAW,CAACI,GAAZ,IAAmBJ,WAAW,CAACK,GAAZ,CAAgBC,QAAhB,EAArD,CAAX;AACA,YAAMC,KAAK,GAAGN,EAAE,CAACK,QAAH,EAAd;AACAzB,MAAAA,KAAK,CAAC2B,IAAN,CAAW;AAAEP,QAAAA,EAAE,EAAEM,KAAN;AAAaE,QAAAA,IAAI,EAAER;AAAnB,OAAX;;AACA,UAAI,CAACD,WAAW,CAACU,OAAjB,EAA0B;AACxB;AACD;;AACD,YAAM;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA,eAAhB;AAAiCC,QAAAA;AAAjC,UAA2Db,WAAW,CAACU,OAAZ,CAAoBI,oBAArF;;AACA,YAAMC,MAAM,GAAG,CAACC,KAAD,EAAeC,IAAf,KAAoC;AACjD,cAAMC,QAAQ,GAAGF,KAAK,CAACV,QAAN,EAAjB;AACAzB,QAAAA,KAAK,CAAC2B,IAAN,CAAW;AAAEP,UAAAA,EAAE,EAAEiB,QAAN;AAAgBT,UAAAA,IAAI,EAAEO;AAAtB,SAAX;AACAlC,QAAAA,KAAK,CAAC0B,IAAN,CAAW;AAAEW,UAAAA,QAAQ,EAAEZ,KAAZ;AAAmBa,UAAAA,QAAQ,EAAEF,QAA7B;AAAuCD,UAAAA;AAAvC,SAAX;AACD,OAJD;;AAKA,YAAMI,OAAO,GAAG,KAAIC,wBAAJ,EAAe,SAAf,CAAhB;AACA,YAAMC,GAAG,GAAG,KAAID,wBAAJ,EAAe,KAAf,CAAZ;AACAX,MAAAA,YAAY,CAACZ,OAAb,CAAsBiB,KAAD,IAAWD,MAAM,CAACC,KAAD,EAAQK,OAAR,CAAtC;AACA,OAAC,GAAGT,eAAJ,EAAqB,GAAGC,qBAAxB,EAA+Cd,OAA/C,CAAwDiB,KAAD,IAAWD,MAAM,CAACC,KAAD,EAAQO,GAAR,CAAxE;AACD,KAjBD;AAkBD,GAxBD,CADI,CAAN;AA2BA,QAAMC,SAAS,GAAG,sBAAO3C,KAAP,EAAc,IAAd,CAAlB;AACA,QAAM4C,OAAO,GAAG,IAAI/C,OAAJ,CAAY8C,SAAZ,EAAuB1C,KAAvB,CAAhB;AAEA,SAAO2C,OAAP;AACD","sourcesContent":["import { Graph } from 'cleargraph';\nimport { uniqBy } from 'lodash';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { ObjectList } from '@teambit/legacy/dist/scope/objects/object-list';\nimport { getAllVersionsInfo } from '@teambit/legacy/dist/scope/component-ops/traverse-versions';\nimport { Dependency } from './model/dependency';\n\ntype Node = { id: string; node: BitId };\ntype Edge = { sourceId: string; targetId: string; edge: Dependency };\n\nexport class IdGraph extends Graph<BitId, Dependency> {\n  constructor(nodes: Node[] = [], edges: Edge[] = []) {\n    super(nodes, edges);\n  }\n}\n\nexport async function objectListToGraph(objectList: ObjectList): Promise<IdGraph> {\n  const bitObjectsList = await objectList.toBitObjects();\n  const components = bitObjectsList.getComponents();\n  const versions = bitObjectsList.getVersions();\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n  await Promise.all(\n    components.map(async (component) => {\n      const versionsInfo = await getAllVersionsInfo({\n        modelComponent: component,\n        versionObjects: versions,\n        throws: false,\n      });\n      versionsInfo.forEach((versionInfo) => {\n        const id = component.toBitId().changeVersion(versionInfo.tag || versionInfo.ref.toString());\n        const idStr = id.toString();\n        nodes.push({ id: idStr, node: id });\n        if (!versionInfo.version) {\n          return;\n        }\n        const { dependencies, devDependencies, extensionDependencies } = versionInfo.version.depsIdsGroupedByType;\n        const addDep = (depId: BitId, edge: Dependency) => {\n          const depIdStr = depId.toString();\n          nodes.push({ id: depIdStr, node: depId });\n          edges.push({ sourceId: idStr, targetId: depIdStr, edge });\n        };\n        const runTime = new Dependency('runtime');\n        const dev = new Dependency('dev');\n        dependencies.forEach((depId) => addDep(depId, runTime));\n        [...devDependencies, ...extensionDependencies].forEach((depId) => addDep(depId, dev));\n      });\n    })\n  );\n  const uniqNodes = uniqBy(nodes, 'id');\n  const idGraph = new IdGraph(uniqNodes, edges);\n\n  return idGraph;\n}\n"]}