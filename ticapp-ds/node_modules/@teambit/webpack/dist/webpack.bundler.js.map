{"version":3,"sources":["webpack.bundler.ts"],"names":["WebpackBundler","constructor","targets","configs","logger","metaData","webpack","run","startTime","Date","now","compilers","map","config","initiator","envId","initiatorMessage","envIdMessage","longProcessLogger","createLongProcessLogger","length","componentOutput","compiler","components","getComponents","outputPath","componentsLengthMessage","fullMessage","ids","component","id","toString","join","logProgress","debug","Promise","resolve","err","stats","error","errors","stack","BitError","info","toJson","all","entrypoints","warnings","assets","assetsMap","getAssets","entriesAssetsMap","getEntriesAssetsMap","Object","values","assetsByChunkName","getErrors","compilation","outputOptions","path","endTime","end","fieldsToShow","webpackError","lines","fieldName","undefined","errorMessage","reduce","acc","asset","name","size","compressedSize","getCompressedSize","entriesMap","keys","entries","forEach","entryVal","compressedAssetsSize","compressedAuxiliaryAssetsSize","auxiliaryAssets","related","gzipped","find","relatedAsset","type","substring","lastIndexOf","sep","target","targetCandidate","Error"],"mappings":"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","sourcesContent":["import { BitError } from '@teambit/bit-error';\nimport type { Bundler, BundlerResult, Asset, Target, EntriesAssetsMap, BundlerContextMetaData } from '@teambit/bundler';\nimport type { Logger } from '@teambit/logger';\nimport { compact, isEmpty } from 'lodash';\nimport mapSeries from 'p-map-series';\nimport type { Compiler, Configuration, StatsCompilation, StatsAsset } from 'webpack';\nimport { sep } from 'path';\n\ntype AssetsMap = { [assetId: string]: Asset };\nexport class WebpackBundler implements Bundler {\n  constructor(\n    /**\n     * targets to bundle.\n     */\n    private targets: Target[],\n\n    /**\n     * webpack configuration.\n     */\n    private configs: Configuration[],\n\n    private logger: Logger,\n\n    private metaData: BundlerContextMetaData | undefined,\n\n    private webpack\n  ) {}\n\n  async run(): Promise<BundlerResult[]> {\n    const startTime = Date.now();\n    const compilers = this.configs.map((config: any) => this.webpack(config));\n    const initiator = this.metaData?.initiator;\n    const envId = this.metaData?.envId;\n    const initiatorMessage = initiator ? `process initiated by: ${initiator}.` : '';\n    const envIdMessage = envId ? `config created by env: ${envId}.` : '';\n\n    const longProcessLogger = this.logger.createLongProcessLogger('running Webpack bundler', compilers.length);\n    const componentOutput = await mapSeries(compilers, (compiler: Compiler) => {\n      const components = this.getComponents(compiler.outputPath);\n      const componentsLengthMessage = `running on ${components.length} components`;\n      const fullMessage = `${initiatorMessage} ${envIdMessage} ${componentsLengthMessage}`;\n      const ids = components.map((component) => component.id.toString()).join(', ');\n      longProcessLogger.logProgress(`${fullMessage}`);\n      this.logger.debug(`${fullMessage}\\ncomponents ids: ${ids}`);\n      return new Promise((resolve) => {\n        // TODO: split to multiple processes to reduce time and configure concurrent builds.\n        // @see https://github.com/trivago/parallel-webpack\n        return compiler.run((err, stats) => {\n          if (err) {\n            this.logger.error('get error from webpack compiler, full error:', err);\n\n            return resolve({\n              errors: [`${err.toString()}\\n${err.stack}`],\n              components,\n            });\n          }\n          if (!stats) throw new BitError('unknown build error');\n          // const info = stats.toJson();\n\n          const info = stats.toJson({ all: false, entrypoints: true, warnings: true, errors: true, assets: true });\n          const assetsMap = this.getAssets(info);\n          const entriesAssetsMap = this.getEntriesAssetsMap(info, assetsMap);\n\n          return resolve({\n            assets: Object.values(assetsMap),\n            assetsByChunkName: info.assetsByChunkName,\n            entriesAssetsMap,\n            errors: this.getErrors(info),\n            outputPath: stats.compilation.outputOptions.path,\n            components,\n            warnings: info.warnings,\n            startTime,\n            endTime: Date.now(),\n          });\n        });\n      });\n    });\n    longProcessLogger.end();\n    return componentOutput as BundlerResult[];\n  }\n\n  private getErrors(stats: StatsCompilation): Error[] {\n    if (!stats.errors) return [];\n    const fieldsToShow = ['message', 'moduleId', 'moduleName', 'moduleIdentifier', 'loc'];\n    return stats.errors.map((webpackError) => {\n      const lines = fieldsToShow.map((fieldName) => {\n        if (webpackError[fieldName]) {\n          return `${fieldName}: ${webpackError[fieldName]}`;\n        }\n        return undefined;\n      });\n      const errorMessage = compact(lines).join('\\n');\n      return new BitError(errorMessage);\n    });\n  }\n\n  private getAssets(stats: StatsCompilation): AssetsMap {\n    if (!stats.assets) return {};\n    return stats.assets.reduce((acc, asset) => {\n      acc[asset.name] = {\n        name: asset.name,\n        size: asset.size,\n        compressedSize: this.getCompressedSize(asset),\n      };\n      return acc;\n    }, {});\n  }\n\n  private getEntriesAssetsMap(stats: StatsCompilation, assetsMap: AssetsMap): EntriesAssetsMap {\n    const entriesMap = stats.entrypoints;\n    if (!entriesMap || !Object.keys(assetsMap).length) return {};\n    Object.entries(entriesMap).forEach(([, entryVal]) => {\n      let compressedAssetsSize = 0;\n      let compressedAuxiliaryAssetsSize = 0;\n      entryVal.assets?.forEach((asset) => {\n        const compressedSize = assetsMap[asset.name]?.compressedSize;\n        if (compressedSize) {\n          // @ts-ignore\n          asset.compressedSize = compressedSize;\n          compressedAssetsSize += compressedSize;\n        }\n      });\n      entryVal.auxiliaryAssets?.forEach((asset) => {\n        const compressedSize = assetsMap[asset.name]?.compressedSize;\n        if (compressedSize) {\n          // @ts-ignore\n          asset.compressedSize = compressedSize;\n          compressedAuxiliaryAssetsSize += compressedSize;\n        }\n      });\n      entryVal.compressedAssetsSize = compressedAssetsSize;\n      entryVal.compressedAuxiliaryAssetsSize = compressedAuxiliaryAssetsSize;\n    });\n    return entriesMap as any as EntriesAssetsMap;\n  }\n\n  private getCompressedSize(asset: StatsAsset): number | undefined {\n    if (!asset.related || isEmpty(asset.related)) return undefined;\n    const gzipped = asset.related.find((relatedAsset) => {\n      return relatedAsset.type === 'gzipped';\n    });\n    if (!gzipped) return undefined;\n    return gzipped.size;\n  }\n\n  private getComponents(outputPath: string) {\n    const path = outputPath.substring(0, outputPath.lastIndexOf(sep));\n    const target = this.targets.find((targetCandidate) => path === targetCandidate.outputPath);\n\n    if (!target) throw new Error(`Could not find component id for path \"${path}\"`);\n    return target.components;\n  }\n}\n"]}