{"version":3,"sources":["webpack.dev.config.ts"],"names":["publicUrlOrPath","process","env","NODE_ENV","configFactory","devServerID","workspaceDir","entryFiles","publicRoot","publicPath","pubsub","title","favicon","resolveWorkspacePath","relativePath","path","resolve","publicDirectory","mode","devtool","entry","map","filePath","output","filename","pathinfo","chunkFilename","devtoolModuleFilenameTemplate","info","absoluteResourcePath","infrastructureLogging","level","stats","errorDetails","devServer","allowedHosts","static","directory","staticOptions","serveIndex","watch","compress","hot","historyApiFallback","disableDotRule","index","client","overlay","onBeforeSetupMiddleware","wds","app","use","onAfterSetupMiddleware","devMiddleware","join","extensions","alias","fallbacksAliases","fallback","fallbacks","plugins","HtmlWebpackPlugin","templateContent","webpack","ProvidePlugin","fallbacksProvidePluginConfig","WebpackBitReporterPlugin","options"],"mappings":"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","sourcesContent":["import path from 'path';\nimport webpack from 'webpack';\nimport HtmlWebpackPlugin from 'html-webpack-plugin';\nimport errorOverlayMiddleware from 'react-dev-utils/errorOverlayMiddleware';\nimport evalSourceMapMiddleware from 'react-dev-utils/evalSourceMapMiddleware';\nimport noopServiceWorkerMiddleware from 'react-dev-utils/noopServiceWorkerMiddleware';\nimport redirectServedPath from 'react-dev-utils/redirectServedPathMiddleware';\nimport getPublicUrlOrPath from 'react-dev-utils/getPublicUrlOrPath';\nimport { PubsubMain } from '@teambit/pubsub';\nimport { pathNormalizeToLinux } from '@teambit/legacy/dist/utils';\nimport { WebpackConfigWithDevServer } from '../webpack.dev-server';\nimport { fallbacks } from './webpack-fallbacks';\n\nimport { html } from './html';\n\nimport { WebpackBitReporterPlugin } from '../plugins/webpack-bit-reporter-plugin';\nimport { fallbacksProvidePluginConfig } from './webpack-fallbacks-provide-plugin-config';\nimport { fallbacksAliases } from './webpack-fallbacks-aliases';\n\nconst publicUrlOrPath = getPublicUrlOrPath(process.env.NODE_ENV === 'development', '/', '/public');\n\nexport function configFactory(\n  devServerID: string,\n  workspaceDir: string,\n  entryFiles: string[],\n  publicRoot: string,\n  publicPath: string,\n  pubsub: PubsubMain,\n  title?: string,\n  favicon?: string\n): WebpackConfigWithDevServer {\n  const resolveWorkspacePath = (relativePath) => path.resolve(workspaceDir, relativePath);\n\n  // Required for babel-preset-react-app\n  process.env.NODE_ENV = 'development';\n\n  const publicDirectory = `${publicRoot}/${publicPath}`;\n\n  return {\n    // Environment mode\n    mode: 'development',\n\n    devtool: 'inline-source-map',\n\n    // Entry point of app\n    entry: entryFiles.map((filePath) => resolveWorkspacePath(filePath)),\n\n    output: {\n      // Development filename output\n      filename: 'static/js/[name].bundle.js',\n\n      pathinfo: true,\n\n      path: resolveWorkspacePath(publicDirectory),\n\n      // publicPath: resolveWorkspacePath(publicDirectory),\n\n      chunkFilename: 'static/js/[name].chunk.js',\n\n      // point sourcemap entries to original disk locations (format as URL on windows)\n      devtoolModuleFilenameTemplate: (info) => pathNormalizeToLinux(path.resolve(info.absoluteResourcePath)),\n\n      // this defaults to 'window', but by setting it to 'this' then\n      // module chunks which are built will work in web workers as well.\n      // Commented out to use the default (self) as according to tobias with webpack5 self is working with workers as well\n      // globalObject: 'this',\n    },\n\n    infrastructureLogging: {\n      level: 'error',\n    },\n\n    stats: {\n      errorDetails: true,\n    },\n\n    devServer: {\n      allowedHosts: 'all',\n\n      static: [\n        {\n          directory: resolveWorkspacePath(publicDirectory),\n          staticOptions: {},\n          // Don't be confused with `dev.publicPath`, it is `publicPath` for static directory\n          // Can be:\n          // publicPath: ['/static-public-path-one/', '/static-public-path-two/'],\n          publicPath: publicDirectory,\n          // Can be:\n          // serveIndex: {} (options for the `serveIndex` option you can find https://github.com/expressjs/serve-index)\n          serveIndex: true,\n          // Can be:\n          // watch: {} (options for the `watch` option you can find https://github.com/paulmillr/chokidar)\n          watch: true,\n        },\n      ],\n\n      // Enable compression\n      compress: true,\n\n      // Enable hot reloading\n      hot: true,\n\n      historyApiFallback: {\n        disableDotRule: true,\n        index: resolveWorkspacePath(publicDirectory),\n      },\n\n      client: {\n        overlay: false,\n      },\n\n      onBeforeSetupMiddleware(wds) {\n        const { app } = wds;\n        // Keep `evalSourceMapMiddleware` and `errorOverlayMiddleware`\n        // middlewares before `redirectServedPath` otherwise will not have any effect\n        // This lets us fetch source contents from webpack for the error overlay\n        // @ts-ignore - @types/WDS mismatch - 3.11.6 vs 4.0.3\n        app.use(evalSourceMapMiddleware(wds));\n        // This lets us open files from the runtime error overlay.\n        app.use(errorOverlayMiddleware());\n      },\n\n      onAfterSetupMiddleware({ app }) {\n        // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match\n        app.use(redirectServedPath(publicUrlOrPath));\n\n        // This service worker file is effectively a 'no-op' that will reset any\n        // previous service worker registered for the same host:port combination.\n        // We do this in development to avoid hitting the production cache if\n        // it used the same host and port.\n        // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\n        app.use(noopServiceWorkerMiddleware(publicUrlOrPath));\n      },\n\n      devMiddleware: {\n        // forward static files\n        publicPath: path.join('/', publicRoot),\n      },\n    },\n\n    resolve: {\n      extensions: ['.ts', '.tsx', '.js', '.mdx', '.md'],\n      alias: fallbacksAliases,\n\n      fallback: fallbacks as any,\n    },\n\n    plugins: [\n      new HtmlWebpackPlugin({\n        templateContent: html(title || 'Component preview'),\n        filename: 'index.html',\n        favicon,\n      }),\n      new webpack.ProvidePlugin(fallbacksProvidePluginConfig),\n\n      new WebpackBitReporterPlugin({\n        options: { pubsub, devServerID },\n      }),\n    ],\n  };\n}\n"]}