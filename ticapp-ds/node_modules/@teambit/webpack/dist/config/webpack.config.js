"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configFactory = configFactory;
exports.getExternals = getExternals;

function _camelcase() {
  const data = _interopRequireDefault(require("camelcase"));

  _camelcase = function () {
    return data;
  };

  return data;
}

function _webpack() {
  const data = _interopRequireDefault(require("webpack"));

  _webpack = function () {
    return data;
  };

  return data;
}

function _webpackModules() {
  const data = require("@teambit/webpack.modules.generate-externals");

  _webpackModules = function () {
    return data;
  };

  return data;
}

function _lodash() {
  const data = require("lodash");

  _lodash = function () {
    return data;
  };

  return data;
}

function _compressionWebpackPlugin() {
  const data = _interopRequireDefault(require("compression-webpack-plugin"));

  _compressionWebpackPlugin = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function () {
    return data;
  };

  return data;
}

function _htmlWebpackPlugin() {
  const data = _interopRequireDefault(require("html-webpack-plugin"));

  _htmlWebpackPlugin = function () {
    return data;
  };

  return data;
}

function _webpackAssetsManifest() {
  const data = _interopRequireDefault(require("webpack-assets-manifest"));

  _webpackAssetsManifest = function () {
    return data;
  };

  return data;
}

function _webpackFallbacks() {
  const data = require("./webpack-fallbacks");

  _webpackFallbacks = function () {
    return data;
  };

  return data;
}

function _webpackFallbacksProvidePluginConfig() {
  const data = require("./webpack-fallbacks-provide-plugin-config");

  _webpackFallbacksProvidePluginConfig = function () {
    return data;
  };

  return data;
}

function _webpackFallbacksAliases() {
  const data = require("./webpack-fallbacks-aliases");

  _webpackFallbacksAliases = function () {
    return data;
  };

  return data;
}

/* eslint-disable complexity */
function configFactory(target, context) {
  var _target$html, _target$compress, _target$externalizePe, _target$chunking;

  let truthyEntries = Array.isArray(target.entries) && target.entries.length ? target.entries.filter(Boolean) : target.entries || {};

  if (Array.isArray(truthyEntries) && !truthyEntries.length) {
    truthyEntries = {};
  }

  const dev = Boolean(context.development);
  const htmlConfig = (_target$html = target.html) !== null && _target$html !== void 0 ? _target$html : context.html;
  const compress = (_target$compress = target.compress) !== null && _target$compress !== void 0 ? _target$compress : context.compress;
  const htmlPlugins = htmlConfig ? generateHtmlPlugins(htmlConfig) : undefined;
  const shouldExternalizePeers = ((_target$externalizePe = target.externalizePeer) !== null && _target$externalizePe !== void 0 ? _target$externalizePe : context.externalizePeer) && target.peers && target.peers.length;
  const externals = shouldExternalizePeers ? getExternals(target.peers || []) : undefined;
  const splitChunks = (_target$chunking = target.chunking) === null || _target$chunking === void 0 ? void 0 : _target$chunking.splitChunks;
  const config = {
    mode: dev ? 'development' : 'production',
    // Stop compilation early in production
    bail: true,
    // These are the "entry points" to our application.
    // This means they will be the "root" imports that are included in JS bundle.
    // @ts-ignore
    entry: truthyEntries,
    infrastructureLogging: {
      level: 'error'
    },
    output: {
      // The build folder.
      path: `${target.outputPath}${_path().sep}public`
    },
    stats: {
      errorDetails: true
    },
    resolve: {
      alias: _webpackFallbacksAliases().fallbacksAliases,
      fallback: _webpackFallbacks().fallbacks
    },
    plugins: [new (_webpack().default.ProvidePlugin)(_webpackFallbacksProvidePluginConfig().fallbacksProvidePluginConfig), getAssetManifestPlugin()]
  };

  if (target.filename) {
    config.output = config.output || {};
    config.output.filename = target.filename;
  }

  if (target.chunkFilename) {
    config.output = config.output || {};
    config.output.chunkFilename = target.chunkFilename;
  }

  if (target.runtimeChunkName) {
    config.optimization = config.optimization || {};
    config.optimization.runtimeChunk = {
      name: target.runtimeChunkName
    };
  }

  if (splitChunks) {
    config.optimization = config.optimization || {};
    config.optimization.splitChunks = {
      chunks: 'all',
      name: false
    };
  }

  if (htmlPlugins && htmlPlugins.length) {
    if (!config.plugins) {
      config.plugins = [];
    }

    config.plugins = config.plugins.concat(htmlPlugins);
  }

  if (compress) {
    if (!config.plugins) {
      config.plugins = [];
    }

    config.plugins = config.plugins.concat(new (_compressionWebpackPlugin().default)());
  }

  if (externals) {
    config.externals = externals;
  }

  return config;
}

function getAssetManifestPlugin() {
  return new (_webpackAssetsManifest().default)({
    entrypoints: true
  });
}

function generateHtmlPlugins(configs) {
  return configs.map(config => generateHtmlPlugin(config));
}

function generateHtmlPlugin(config) {
  const baseConfig = {
    filename: config.filename,
    chunks: config.chunks,
    title: config.title,
    templateContent: config.templateContent,
    minify: config.minify,
    cache: false,
    chunksSortMode: 'auto',
    favicon: config.favicon
  };

  if (baseConfig.chunks && baseConfig.chunks.length) {
    // Make sure the order is that the preview root coming after the preview def
    // we can't make it like this on the entries using depend on because this will
    // prevent the splitting between different preview defs
    // @ts-ignore
    baseConfig.chunksSortMode = 'manual';
  }

  const filteredConfig = (0, _lodash().omitBy)(baseConfig, _lodash().isUndefined);
  return new (_htmlWebpackPlugin().default)(filteredConfig);
}

function getExternals(deps) {
  return (0, _webpackModules().generateExternals)(deps, {
    transformName: depName => (0, _camelcase().default)(depName.replace('@', '').replace('/', '-'), {
      pascalCase: true
    })
  });
}

//# sourceMappingURL=webpack.config.js.map