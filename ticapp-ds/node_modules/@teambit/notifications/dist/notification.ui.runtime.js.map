{"version":3,"sources":["notification.ui.runtime.tsx"],"names":["NotificationUI","provider","uiRuntimeExtension","constructor","message","level","id","dispatch","type","content","time","Date","toISOString","add","MessageLevel","info","warning","error","success","props","messages","notificationReducer","children","registerHudItem","registerContext","renderContext","dismiss","UIAspect","UIRuntime","NotificationsAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA;AACA;AACA;AACe,MAAMA,cAAN,CAAmD;AAK3C,eAARC,QAAQ,CAAC,CAACC,kBAAD,CAAD,EAA+B;AAClD,WAAO,IAAIF,cAAJ,CAAmBE,kBAAnB,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAACD,kBAAD,EAA2B;AAAA;AAAA,iDAQhC,CAACE,OAAD,EAAkBC,KAAlB,KAA0C;AAAA;;AAC9C,YAAMC,EAAE,GAAG,iBAAX;AAEA,6BAAKC,QAAL,6EAAgB;AACdC,QAAAA,IAAI,EAAE,KADQ;AAEdC,QAAAA,OAAO,EAAE;AACPH,UAAAA,EADO;AAEPF,UAAAA,OAFO;AAGPC,UAAAA,KAHO;AAIPK,UAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AAJC;AAFK,OAAhB;AAUA,aAAON,EAAP;AACD,KAtBqC;AAAA,iDAiC/BF,OAAD,IAAqB,KAAKS,GAAL,CAAST,OAAT,EAAkBU,6CAAaC,IAA/B,CAjCW;AAAA,kDAmC9BX,OAAD,IAAqB,KAAKS,GAAL,CAAST,OAAT,EAAkBU,6CAAaE,OAA/B,CAnCU;AAAA,mDAqC7BZ,OAAD,IAAqB,KAAKS,GAAL,CAAST,OAAT,EAAkBU,6CAAaG,KAA/B,CArCS;AAAA,qDAuC3Bb,OAAD,IAAqB,KAAKS,GAAL,CAAST,OAAT,EAAkBU,6CAAaI,OAA/B,CAvCO;AAAA,mDA0C9B,MAAM;AAAA;;AACZ,8BAAKX,QAAL,+EAAgB;AACdC,QAAAA,IAAI,EAAE;AADQ,OAAhB;AAGD,KA9CqC;AAAA,oDAgDpBW,KAAD,IAA2D;AAC1E;AACA,YAAM,CAACC,QAAD,EAAWb,QAAX,IAAuB,yBAAWc,0CAAX,EAAgC,EAAhC,CAA7B;AACA,WAAKd,QAAL,GAAgBA,QAAhB;AAEA,0BAAO,+BAAC,kDAAD,+BAAwBY,KAAxB;AAA+B,QAAA,aAAa,EAAEC;AAA9C,SAAP;AACD,KAtDqC;AAAA,2DAwDd,CAAC;AAAEE,MAAAA;AAAF,KAAD,KAA2C;AACjE,0BAAO,+BAAC,kDAAD,CAAqB,QAArB;AAA8B,QAAA,KAAK,EAAE;AAArC,SAA4CA,QAA5C,CAAP;AACD,KA1DqC;AACpCpB,IAAAA,kBAAkB,CAACqB,eAAnB,eAAmC,oCAAM,MAAN;AAAa,MAAA,GAAG,EAAC;AAAjB,MAAnC;AACArB,IAAAA,kBAAkB,CAACsB,eAAnB,CAAmC,KAAKC,aAAxC;AACD;;AAqBD;AACAC,EAAAA,OAAO,CAACpB,EAAD,EAAa;AAAA;;AAClB,4BAAKC,QAAL,+EAAgB;AACdC,MAAAA,IAAI,EAAE,SADQ;AAEdF,MAAAA;AAFc,KAAhB;AAID;AAED;;;AAzCgE;;;gCAA7CN,c,kBACG,CAAC2B,cAAD,C;gCADH3B,c,aAGF4B,e;;AAmEnBC,qCAAoBC,UAApB,CAA+B9B,cAA/B","sourcesContent":["import { UIAspect, UIRuntime, UiUI } from '@teambit/ui';\nimport React, { ReactNode, useReducer } from 'react';\nimport { v1 } from 'uuid';\n\nimport { NotificationContext } from '@teambit/ui-foundation.ui.notifications.notification-context';\nimport {\n  NotificationCenter,\n  NotificationCenterProps,\n} from '@teambit/ui-foundation.ui.notifications.notification-center';\nimport { MessageLevel, NotificationsStore } from '@teambit/ui-foundation.ui.notifications.store';\nimport { NotificationAction, notificationReducer } from './notification-reducer';\nimport { NotificationsAspect } from './notifications.aspect';\n\n/**\n * extension\n */\nexport default class NotificationUI implements NotificationsStore {\n  static dependencies = [UIAspect];\n\n  static runtime = UIRuntime;\n\n  static async provider([uiRuntimeExtension]: [UiUI]) {\n    return new NotificationUI(uiRuntimeExtension);\n  }\n\n  constructor(uiRuntimeExtension: UiUI) {\n    uiRuntimeExtension.registerHudItem(<this.render key=\"NotificationUI\" />);\n    uiRuntimeExtension.registerContext(this.renderContext);\n  }\n\n  private dispatch?: React.Dispatch<NotificationAction>;\n\n  /** adds a full message to the log */\n  add = (message: string, level: MessageLevel) => {\n    const id = v1();\n\n    this.dispatch?.({\n      type: 'add',\n      content: {\n        id,\n        message,\n        level,\n        time: new Date().toISOString(),\n      },\n    });\n\n    return id;\n  };\n\n  /** removes/archives a message from the log */\n  dismiss(id: string) {\n    this.dispatch?.({\n      type: 'dismiss',\n      id,\n    });\n  }\n\n  /** adds a message with level \"info\" to the log */\n  log = (message: string) => this.add(message, MessageLevel.info);\n  /** adds a message with level \"warning\" to the log */\n  warn = (message: string) => this.add(message, MessageLevel.warning);\n  /** adds a message with level \"error\" to the log */\n  error = (message: string) => this.add(message, MessageLevel.error);\n  /** adds a message with level \"success\" to the log */\n  success = (message: string) => this.add(message, MessageLevel.success);\n\n  /** removes all notifications */\n  clear = () => {\n    this.dispatch?.({\n      type: 'clear',\n    });\n  };\n\n  private render = (props: Omit<NotificationCenterProps, 'notifications'>) => {\n    // this code assumes a single place of render per instance of NotificationUI\n    const [messages, dispatch] = useReducer(notificationReducer, []);\n    this.dispatch = dispatch;\n\n    return <NotificationCenter {...props} notifications={messages} />;\n  };\n\n  private renderContext = ({ children }: { children: ReactNode }) => {\n    return <NotificationContext.Provider value={this}>{children}</NotificationContext.Provider>;\n  };\n}\n\nNotificationsAspect.addRuntime(NotificationUI);\n"]}