{"version":3,"sources":["schema.main.runtime.ts"],"names":["SchemaMain","constructor","parserSlot","envs","config","getDefaultParser","get","defaultParser","parseModule","path","parsers","toArray","maybeParser","find","parser","match","extension","getSchemaExtractorContext","getSchemaExtractor","component","env","getEnv","Error","name","getSchema","schemaExtractor","extract","registerParser","register","provider","cli","graphql","schema","SchemaCommand","MainRuntime","EnvsAspect","CLIAspect","ComponentAspect","GraphqlAspect","Slot","withType","SchemaAspect","addRuntime"],"mappings":"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","sourcesContent":["import { MainRuntime, CLIMain, CLIAspect } from '@teambit/cli';\nimport ComponentAspect, { Component, ComponentMain } from '@teambit/component';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport GraphqlAspect, { GraphqlMain } from '@teambit/graphql';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { Module, SemanticSchema } from '@teambit/semantics.entities.semantic-schema';\nimport { Parser } from './parser';\nimport { SchemaAspect } from './schema.aspect';\nimport { SchemaExtractor } from './schema-extractor';\nimport { SchemaCommand } from './schema.cmd';\nimport { schemaSchema } from './schema.graphql';\n\nexport type ParserSlot = SlotRegistry<Parser>;\n\nexport type SchemaConfig = {\n  /**\n   * default parser\n   */\n  defaultParser: string;\n};\n\n/**\n * extension for extracting component schemas.\n */\nexport class SchemaMain {\n  constructor(\n    /**\n     * parsers slot.\n     */\n    private parserSlot: ParserSlot,\n\n    private envs: EnvsMain,\n\n    private config: SchemaConfig\n  ) {}\n\n  /**\n   * get the default parser.\n   */\n  getDefaultParser(): Parser {\n    return this.parserSlot.get(this.config.defaultParser) as Parser;\n  }\n\n  /**\n   * parse a module into a component schema.\n   */\n  parseModule(path: string): Module {\n    const parsers = this.parserSlot.toArray();\n    let maybeParser = parsers.find(([, parser]) => {\n      const match = path.match(parser.extension);\n      return match;\n    });\n\n    if (!maybeParser) {\n      maybeParser = [this.config.defaultParser, this.getDefaultParser()];\n    }\n\n    const [, parser] = maybeParser;\n    return parser.parseModule(path);\n  }\n\n  private getSchemaExtractorContext() {}\n\n  getSchemaExtractor(component: Component) {\n    const env = this.envs.getEnv(component).env;\n    if (typeof env.getSchemaExtractor === 'undefined') {\n      throw new Error(`No SchemaExtractor defined for ${env.name}`);\n    }\n  }\n\n  /**\n   * get a schema of a component.\n   * @param component target component.\n   */\n  async getSchema(component: Component): Promise<SemanticSchema> {\n    const env = this.envs.getEnv(component).env;\n    if (typeof env.getSchemaExtractor === 'undefined') {\n      throw new Error(`No SchemaExtractor defined for ${env.name}`);\n    }\n    const schemaExtractor: SchemaExtractor = env.getSchemaExtractor();\n    return schemaExtractor.extract(component);\n  }\n\n  /**\n   * register a new parser.\n   */\n  registerParser(parser: Parser): SchemaMain {\n    this.parserSlot.register(parser);\n    return this;\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [EnvsAspect, CLIAspect, ComponentAspect, GraphqlAspect];\n  static slots = [Slot.withType<Parser>()];\n\n  static defaultConfig = {\n    defaultParser: 'teambit.typescript/typescript',\n  };\n\n  static async provider(\n    [envs, cli, component, graphql]: [EnvsMain, CLIMain, ComponentMain, GraphqlMain],\n    config: SchemaConfig,\n    [parserSlot]: [ParserSlot]\n  ) {\n    const schema = new SchemaMain(parserSlot, envs, config);\n    cli.register(new SchemaCommand(schema, component));\n    graphql.register(schemaSchema(schema));\n\n    // workspace.onComponentLoad(async (component) => {\n    //   const apiSchema = await schema.getSchema(component);\n    //   return {};\n    // });\n\n    return schema;\n  }\n}\n\nSchemaAspect.addRuntime(SchemaMain);\n"]}