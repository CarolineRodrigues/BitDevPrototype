import { CLIMain } from '@teambit/cli';
import { Component, ComponentMain } from '@teambit/component';
import { SlotRegistry } from '@teambit/harmony';
import { GraphqlMain } from '@teambit/graphql';
import { EnvsMain } from '@teambit/envs';
import { Module, SemanticSchema } from '@teambit/semantics.entities.semantic-schema';
import { Parser } from './parser';
export declare type ParserSlot = SlotRegistry<Parser>;
export declare type SchemaConfig = {
    /**
     * default parser
     */
    defaultParser: string;
};
/**
 * extension for extracting component schemas.
 */
export declare class SchemaMain {
    /**
     * parsers slot.
     */
    private parserSlot;
    private envs;
    private config;
    constructor(
    /**
     * parsers slot.
     */
    parserSlot: ParserSlot, envs: EnvsMain, config: SchemaConfig);
    /**
     * get the default parser.
     */
    getDefaultParser(): Parser;
    /**
     * parse a module into a component schema.
     */
    parseModule(path: string): Module;
    private getSchemaExtractorContext;
    getSchemaExtractor(component: Component): void;
    /**
     * get a schema of a component.
     * @param component target component.
     */
    getSchema(component: Component): Promise<SemanticSchema>;
    /**
     * register a new parser.
     */
    registerParser(parser: Parser): SchemaMain;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static slots: ((registerFn: () => string) => SlotRegistry<Parser>)[];
    static defaultConfig: {
        defaultParser: string;
    };
    static provider([envs, cli, component, graphql]: [EnvsMain, CLIMain, ComponentMain, GraphqlMain], config: SchemaConfig, [parserSlot]: [ParserSlot]): Promise<SchemaMain>;
}
