"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RootRoute = RootRoute;
exports.RouteContext = RouteContext;

function _react() {
  const data = _interopRequireWildcard(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _reactRouterDom() {
  const data = require("react-router-dom");

  _reactRouterDom = function () {
    return data;
  };

  return data;
}

function _baseUiRouting() {
  const data = require("@teambit/base-ui.routing.routing-provider");

  _baseUiRouting = function () {
    return data;
  };

  return data;
}

function _uiFoundationUiReactRouter() {
  const data = require("@teambit/ui-foundation.ui.react-router.slot-router");

  _uiFoundationUiReactRouter = function () {
    return data;
  };

  return data;
}

function _reactRouterRouting() {
  const data = require("./react-router-routing");

  _reactRouterRouting = function () {
    return data;
  };

  return data;
}

function _routingMethod() {
  const data = require("./routing-method");

  _routingMethod = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Setup context needed for routing.
 */
function RouteContext({
  reactRouterUi,
  routing = _routingMethod().Routing.url,
  children,
  location
}) {
  return (
    /*#__PURE__*/
    // {/* set up the virtual router (browser, inMemory, etc) */}
    _react().default.createElement(Router, {
      type: routing,
      location: location
    }, /*#__PURE__*/_react().default.createElement(HistoryGetter, {
      onRouterChange: reactRouterUi.setRouter
    }), /*#__PURE__*/_react().default.createElement(_baseUiRouting().RoutingProvider, {
      value: _reactRouterRouting().reactRouterRouting
    }, children))
  );
}

function RootRoute({
  rootRoutes,
  routeSlot
}) {
  return /*#__PURE__*/_react().default.createElement(_uiFoundationUiReactRouter().SlotRouter, {
    slot: routeSlot,
    rootRoutes: rootRoutes
  });
}
/** provides the router engine (browser, inMemory, etc) */


function Router({
  type,
  children,
  location
}) {
  switch (type) {
    case _routingMethod().Routing.static:
      return /*#__PURE__*/_react().default.createElement(_reactRouterDom().StaticRouter, {
        location: location
      }, children);

    case _routingMethod().Routing.inMemory:
      return /*#__PURE__*/_react().default.createElement(_reactRouterDom().MemoryRouter, {
        initialEntries: [location || '/'],
        initialIndex: 1
      }, children);

    case _routingMethod().Routing.hash:
      return /*#__PURE__*/_react().default.createElement(_reactRouterDom().HashRouter, null, children);

    case _routingMethod().Routing.url:
    default:
      return /*#__PURE__*/_react().default.createElement(_reactRouterDom().BrowserRouter, null, children);
  }
}
/**
 * Calls onRouterChange when routing History object changes.
 * Used to inject history back into reactRouterUi
 * (needs to be rendered inside of <BrowserRouter/>)
 */


function HistoryGetter({
  onRouterChange
}) {
  const history = (0, _reactRouterDom().useHistory)();
  (0, _react().useEffect)(() => onRouterChange(history), [history]);
  return null;
}

//# sourceMappingURL=route-context.js.map