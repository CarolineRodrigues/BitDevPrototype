{"version":3,"sources":["route-context.tsx"],"names":["RouteContext","reactRouterUi","routing","Routing","url","children","location","setRouter","reactRouterRouting","RootRoute","rootRoutes","routeSlot","Router","type","static","inMemory","hash","HistoryGetter","onRouterChange","history"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAgBA;AACA;AACA;AACO,SAASA,YAAT,CAAsB;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,OAAO,GAAGC,yBAAQC,GAAnC;AAAwCC,EAAAA,QAAxC;AAAkDC,EAAAA;AAAlD,CAAtB,EAAwG;AAC7G;AAAA;AACE;AACA,mCAAC,MAAD;AAAQ,MAAA,IAAI,EAAEJ,OAAd;AAAuB,MAAA,QAAQ,EAAEI;AAAjC,oBAEE,+BAAC,aAAD;AAAe,MAAA,cAAc,EAAEL,aAAa,CAACM;AAA7C,MAFF,eAIE,+BAAC,gCAAD;AAAiB,MAAA,KAAK,EAAEC;AAAxB,OAEGH,QAFH,CAJF;AAFF;AAYD;;AAEM,SAASI,SAAT,CAAmB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAnB,EAA8D;AACnE,sBAAO,+BAAC,uCAAD;AAAY,IAAA,IAAI,EAAEA,SAAlB;AAA6B,IAAA,UAAU,EAAED;AAAzC,IAAP;AACD;AAED;;;AACA,SAASE,MAAT,CAAgB;AAAEC,EAAAA,IAAF;AAAQR,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAhB,EAAyG;AACvG,UAAQO,IAAR;AACE,SAAKV,yBAAQW,MAAb;AACE,0BAAO,+BAAC,8BAAD;AAAc,QAAA,QAAQ,EAAER;AAAxB,SAAmCD,QAAnC,CAAP;;AACF,SAAKF,yBAAQY,QAAb;AACE,0BACE,+BAAC,8BAAD;AAAc,QAAA,cAAc,EAAE,CAACT,QAAQ,IAAI,GAAb,CAA9B;AAAiD,QAAA,YAAY,EAAE;AAA/D,SACGD,QADH,CADF;;AAKF,SAAKF,yBAAQa,IAAb;AACE,0BAAO,+BAAC,4BAAD,QAAaX,QAAb,CAAP;;AACF,SAAKF,yBAAQC,GAAb;AACA;AACE,0BAAO,+BAAC,+BAAD,QAAgBC,QAAhB,CAAP;AAbJ;AAeD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASY,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAiG;AAC/F,QAAMC,OAAO,GAAG,mCAAhB;AACA,0BAAU,MAAMD,cAAc,CAACC,OAAD,CAA9B,EAAyC,CAACA,OAAD,CAAzC;AAEA,SAAO,IAAP;AACD","sourcesContent":["import React, { useEffect, ReactNode } from 'react';\nimport { BrowserRouter, StaticRouter, MemoryRouter, HashRouter, RouteProps, useHistory } from 'react-router-dom';\nimport { RoutingProvider } from '@teambit/base-ui.routing.routing-provider';\nimport { RouteSlot, SlotRouter } from '@teambit/ui-foundation.ui.react-router.slot-router';\nimport { ReactRouterUI } from './react-router.ui.runtime';\nimport { reactRouterRouting } from './react-router-routing';\nimport { Routing } from './routing-method';\n\nexport type History = ReturnType<typeof useHistory>;\n\ntype RouterContextProps = {\n  reactRouterUi: ReactRouterUI;\n  routing?: Routing;\n  children: ReactNode;\n  location?: string;\n};\n\ntype RootRouteProps = {\n  rootRoutes: RouteProps[];\n  routeSlot: RouteSlot;\n};\n\n/**\n * Setup context needed for routing.\n */\nexport function RouteContext({ reactRouterUi, routing = Routing.url, children, location }: RouterContextProps) {\n  return (\n    // {/* set up the virtual router (browser, inMemory, etc) */}\n    <Router type={routing} location={location}>\n      {/* injects History object back to reactRouterUi */}\n      <HistoryGetter onRouterChange={reactRouterUi.setRouter} />\n      {/* injects react-router Link into context  */}\n      <RoutingProvider value={reactRouterRouting}>\n        {/* route tree root: */}\n        {children}\n      </RoutingProvider>\n    </Router>\n  );\n}\n\nexport function RootRoute({ rootRoutes, routeSlot }: RootRouteProps) {\n  return <SlotRouter slot={routeSlot} rootRoutes={rootRoutes} />;\n}\n\n/** provides the router engine (browser, inMemory, etc) */\nfunction Router({ type, children, location }: { type: Routing; children: ReactNode; location?: string }) {\n  switch (type) {\n    case Routing.static:\n      return <StaticRouter location={location}>{children}</StaticRouter>;\n    case Routing.inMemory:\n      return (\n        <MemoryRouter initialEntries={[location || '/']} initialIndex={1}>\n          {children}\n        </MemoryRouter>\n      );\n    case Routing.hash:\n      return <HashRouter>{children}</HashRouter>;\n    case Routing.url:\n    default:\n      return <BrowserRouter>{children}</BrowserRouter>;\n  }\n}\n\n/**\n * Calls onRouterChange when routing History object changes.\n * Used to inject history back into reactRouterUi\n * (needs to be rendered inside of <BrowserRouter/>)\n */\nfunction HistoryGetter({ onRouterChange }: { onRouterChange: (routerHistory: History) => void }) {\n  const history = useHistory();\n  useEffect(() => onRouterChange(history), [history]);\n\n  return null;\n}\n"]}