/// <reference types="react" />
import { RouteProps } from 'react-router-dom';
import { History, LocationListener, LocationDescriptor, Action } from 'history';
import { SlotRegistry } from '@teambit/harmony';
import { RenderPlugins } from '@teambit/ui';
import { RouteSlot } from '@teambit/ui-foundation.ui.react-router.slot-router';
import { Routing } from './routing-method';
declare type RouteChangeSlot = SlotRegistry<LocationListener>;
declare type RenderContext = {
    initialLocation?: string;
};
export declare class ReactRouterUI {
    /**
     * route slot.
     */
    private routeSlot;
    /**
     *
     */
    private routeChangeListener;
    private routerHistory?;
    private routingMode;
    constructor(
    /**
     * route slot.
     */
    routeSlot: RouteSlot, 
    /**
     *
     */
    routeChangeListener: RouteChangeSlot);
    /**
     * render all slot routes.
     */
    renderRoutes(routes: RouteProps[]): JSX.Element;
    private unregisterListener?;
    /** (internal method) sets the routing engine for navigation methods */
    setRouter: (routerHistory: History) => void;
    /** decides how navigation is stored and applied.
     * Url - updates the `window.location.pathname`.
     * Hash - updates `window.location.hash`.
     * InMemory - store state internally and don't update the browser.
     */
    setRoutingMode(routing: Routing): void;
    /**
     * register a new route.
     */
    register(route: RouteProps): this;
    registerListener(listener: LocationListener): void;
    /**
     * change browser location
     */
    navigateTo: (path: LocationDescriptor, action?: Action | undefined) => void;
    private AppRoutingContext;
    renderPlugin: RenderPlugins<RenderContext>;
    static slots: (((registerFn: () => string) => SlotRegistry<RouteProps<string, {
        [x: string]: string | undefined;
    }>>) | ((registerFn: () => string) => SlotRegistry<LocationListener<unknown>>))[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider(deps: any, config: any, [routeSlot, routeChangeSlot]: [RouteSlot, RouteChangeSlot]): Promise<ReactRouterUI>;
}
export {};
