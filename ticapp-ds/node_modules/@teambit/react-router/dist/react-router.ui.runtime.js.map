{"version":3,"sources":["react-router.ui.runtime.tsx"],"names":["ReactRouterUI","constructor","routeSlot","routeChangeListener","isBrowser","Routing","url","static","undefined","routerHistory","unregisterListener","listen","args","values","forEach","listener","path","action","replace","push","children","renderCtx","routingMode","initialLocation","browserInit","window","location","pathname","search","hash","serverInit","browser","reactContext","AppRoutingContext","renderRoutes","routes","setRoutingMode","routing","register","route","registerListener","provider","deps","config","routeChangeSlot","Slot","withType","UIRuntime","ReactRouterAspect","addRuntime"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { RouteProps } from 'react-router-dom';\nimport { History, UnregisterCallback, LocationListener, LocationDescriptor, Action } from 'history';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { RenderPlugins, UIRuntime } from '@teambit/ui';\nimport { RouteSlot } from '@teambit/ui-foundation.ui.react-router.slot-router';\nimport { isBrowser } from '@teambit/ui-foundation.ui.is-browser';\n\nimport { ReactRouterAspect } from './react-router.aspect';\nimport { RouteContext, RootRoute } from './route-context';\nimport { Routing } from './routing-method';\n\ntype RouteChangeSlot = SlotRegistry<LocationListener>;\ntype RenderContext = { initialLocation?: string };\n\nexport class ReactRouterUI {\n  private routerHistory?: History;\n  private routingMode = isBrowser ? Routing.url : Routing.static;\n\n  constructor(\n    /**\n     * route slot.\n     */\n    private routeSlot: RouteSlot,\n    /**\n     *\n     */\n    private routeChangeListener: RouteChangeSlot\n  ) {}\n\n  /**\n   * render all slot routes.\n   */\n  renderRoutes(routes: RouteProps[]) {\n    return <RootRoute routeSlot={this.routeSlot} rootRoutes={routes} />;\n  }\n\n  private unregisterListener?: UnregisterCallback = undefined;\n  /** (internal method) sets the routing engine for navigation methods */\n  setRouter = (routerHistory: History) => {\n    this.routerHistory = routerHistory;\n\n    this.unregisterListener?.();\n    this.unregisterListener = routerHistory.listen((...args) => {\n      this.routeChangeListener.values().forEach((listener) => listener(...args));\n    });\n  };\n\n  /** decides how navigation is stored and applied.\n   * Url - updates the `window.location.pathname`.\n   * Hash - updates `window.location.hash`.\n   * InMemory - store state internally and don't update the browser.\n   */\n  setRoutingMode(routing: Routing) {\n    this.routingMode = routing;\n  }\n\n  /**\n   * register a new route.\n   */\n  register(route: RouteProps) {\n    this.routeSlot.register(route);\n    return this;\n  }\n\n  registerListener(listener: LocationListener) {\n    this.routeChangeListener.register(listener);\n  }\n\n  /**\n   * change browser location\n   */\n  navigateTo = (\n    /** destination */\n    path: LocationDescriptor,\n    /** history action to execute (pop / push / replace) */\n    action?: Action\n  ) => {\n    switch (action) {\n      case 'POP':\n        return; // TBD;\n      case 'REPLACE':\n        this.routerHistory?.replace(path);\n        return;\n      case 'PUSH':\n      default:\n        this.routerHistory?.push(path);\n    }\n  };\n\n  private AppRoutingContext = ({ children, renderCtx }: { children: ReactNode; renderCtx?: RenderContext }) => {\n    return (\n      <RouteContext reactRouterUi={this} routing={this.routingMode} location={renderCtx?.initialLocation}>\n        {children}\n      </RouteContext>\n    );\n  };\n\n  public renderPlugin: RenderPlugins<RenderContext> = {\n    browserInit: () => {\n      const initialLocation = `${window.location.pathname}${window.location.search}${window.location.hash}`;\n      return { initialLocation };\n    },\n    serverInit: ({ browser }) => {\n      const initialLocation = browser?.location.url;\n      return { initialLocation };\n    },\n    reactContext: this.AppRoutingContext,\n  };\n\n  static slots = [Slot.withType<RouteProps>(), Slot.withType<LocationListener>()];\n  static runtime = UIRuntime;\n\n  static async provider(deps, config, [routeSlot, routeChangeSlot]: [RouteSlot, RouteChangeSlot]) {\n    return new ReactRouterUI(routeSlot, routeChangeSlot);\n  }\n}\n\nReactRouterAspect.addRuntime(ReactRouterUI);\n"]}