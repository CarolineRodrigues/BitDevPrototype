{"version":3,"sources":["importer.ts"],"names":["Importer","constructor","workspace","depResolver","import","importOptions","packageManagerArgs","consumer","populateLanesDataIfNeeded","importComponents","ImportComponents","dependencies","importDetails","bitIds","map","R","path","Analytics","setExtraData","length","ids","importedComponents","d","component","removeFromWorkspaceConfig","onDestroy","importedPackageNames","getImportedPackagesNames","removeFromRootPolicy","persistConfig","components","objectsOnly","currentRemoteLane","getCurrentRemoteLaneId","lanes","laneIds","laneId","lane"],"mappings":";;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,QAAN,CAAe;AACpBC,EAAAA,WAAW,CAASC,SAAT,EAAuCC,WAAvC,EAA4E;AAAA,SAAnED,SAAmE,GAAnEA,SAAmE;AAAA,SAArCC,WAAqC,GAArCA,WAAqC;AAAE;;AAE7E,QAANC,MAAM,CAACC,aAAD,EAA+BC,kBAA/B,EAAoF;AAC9F,UAAMC,QAAQ,GAAG,KAAKL,SAAL,CAAeK,QAAhC;AACAA,IAAAA,QAAQ,CAACD,kBAAT,GAA8BA,kBAA9B;AACA,UAAM,KAAKE,yBAAL,CAA+BH,aAA/B,CAAN;AACA,UAAMI,gBAAgB,GAAG,KAAIC,2BAAJ,EAAqBH,QAArB,EAA+BF,aAA/B,CAAzB;AACA,UAAM;AAAEM,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAkC,MAAMH,gBAAgB,CAACA,gBAAjB,EAA9C;AACA,UAAMI,MAAM,GAAGF,YAAY,CAACG,GAAb,CAAiBC,iBAAEC,IAAF,CAAO,CAAC,WAAD,EAAc,IAAd,CAAP,CAAjB,CAAf;;AACAC,2BAAUC,YAAV,CAAuB,gBAAvB,EAAyCL,MAAM,CAACM,MAAhD;;AACA,QAAId,aAAa,CAACe,GAAd,CAAkBD,MAAtB,EAA8B;AAC5B,YAAME,kBAAkB,GAAGV,YAAY,CAACG,GAAb,CAAkBQ,CAAD,IAAOA,CAAC,CAACC,SAA1B,CAA3B;AACA,YAAM,KAAKC,yBAAL,CAA+BH,kBAA/B,CAAN;AACD;;AACD,UAAMd,QAAQ,CAACkB,SAAT,EAAN;AACA,WAAO;AAAEd,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAP;AACD;;AAEsC,QAAzBY,yBAAyB,CAACD,SAAD,EAAiC;AACtE,UAAMG,oBAAoB,GAAG,KAAKC,wBAAL,CAA8BJ,SAA9B,CAA7B;AACA,SAAKpB,WAAL,CAAiByB,oBAAjB,CAAsCF,oBAAtC;AACA,UAAM,KAAKvB,WAAL,CAAiB0B,aAAjB,CAA+B,KAAK3B,SAAL,CAAec,IAA9C,CAAN;AACD;;AAEOW,EAAAA,wBAAwB,CAACG,UAAD,EAA4C;AAC1E,WAAOA,UAAU,CAAChB,GAAX,CAAgBS,SAAD,IAAe,yCAAyBA,SAAzB,CAA9B,CAAP;AACD;;AAEsC,QAAzBf,yBAAyB,CAACH,aAAD,EAA+B;AACpE,QAAI,CAACA,aAAa,CAACe,GAAd,CAAkBD,MAAvB,EAA+B;AAC7Bd,MAAAA,aAAa,CAAC0B,WAAd,GAA4B,IAA5B;AACD;;AACD,UAAMC,iBAAiB,GAAG,MAAM,KAAK9B,SAAL,CAAe+B,sBAAf,EAAhC;;AACA,QAAID,iBAAJ,EAAuB;AACrB3B,MAAAA,aAAa,CAAC6B,KAAd,GAAsB;AAAEC,QAAAA,OAAO,EAAE,CAACH,iBAAiB,CAACI,MAAnB,CAAX;AAAuCF,QAAAA,KAAK,EAAE,CAACF,iBAAiB,CAACK,IAAnB;AAA9C,OAAtB;AACD;AACF;;AArCmB","sourcesContent":["import { DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { Workspace } from '@teambit/workspace';\nimport R from 'ramda';\nimport { Analytics } from '@teambit/legacy/dist/analytics/analytics';\nimport ImportComponents, {\n  ImportOptions,\n  ImportResult,\n} from '@teambit/legacy/dist/consumer/component-ops/import-components';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\n\nexport class Importer {\n  constructor(private workspace: Workspace, private depResolver: DependencyResolverMain) {}\n\n  async import(importOptions: ImportOptions, packageManagerArgs: string[]): Promise<ImportResult> {\n    const consumer = this.workspace.consumer;\n    consumer.packageManagerArgs = packageManagerArgs;\n    await this.populateLanesDataIfNeeded(importOptions);\n    const importComponents = new ImportComponents(consumer, importOptions);\n    const { dependencies, importDetails } = await importComponents.importComponents();\n    const bitIds = dependencies.map(R.path(['component', 'id']));\n    Analytics.setExtraData('num_components', bitIds.length);\n    if (importOptions.ids.length) {\n      const importedComponents = dependencies.map((d) => d.component);\n      await this.removeFromWorkspaceConfig(importedComponents);\n    }\n    await consumer.onDestroy();\n    return { dependencies, importDetails };\n  }\n\n  private async removeFromWorkspaceConfig(component: ConsumerComponent[]) {\n    const importedPackageNames = this.getImportedPackagesNames(component);\n    this.depResolver.removeFromRootPolicy(importedPackageNames);\n    await this.depResolver.persistConfig(this.workspace.path);\n  }\n\n  private getImportedPackagesNames(components: ConsumerComponent[]): string[] {\n    return components.map((component) => componentIdToPackageName(component));\n  }\n\n  private async populateLanesDataIfNeeded(importOptions: ImportOptions) {\n    if (!importOptions.ids.length) {\n      importOptions.objectsOnly = true;\n    }\n    const currentRemoteLane = await this.workspace.getCurrentRemoteLaneId();\n    if (currentRemoteLane) {\n      importOptions.lanes = { laneIds: [currentRemoteLane.laneId], lanes: [currentRemoteLane.lane] };\n    }\n  }\n}\n"]}