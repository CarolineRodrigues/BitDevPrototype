{"version":3,"sources":["importer.main.runtime.ts"],"names":["ImporterMain","provider","cli","workspace","depResolver","community","consumer","isLegacy","unregister","importer","Importer","register","ImportCmd","getDocsDomain","CLIAspect","WorkspaceAspect","DependencyResolverAspect","CommunityAspect","MainRuntime","ImporterAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,YAAN,CAAmB;AAIH,eAARC,QAAQ,CAAC,CAACC,GAAD,EAAMC,SAAN,EAAiBC,WAAjB,EAA8BC,SAA9B,CAAD,EAKlB;AACD,QAAIF,SAAS,IAAI,CAACA,SAAS,CAACG,QAAV,CAAmBC,QAArC,EAA+C;AAC7CL,MAAAA,GAAG,CAACM,UAAJ,CAAe,QAAf;AACA,YAAMC,QAAQ,GAAG,KAAIC,oBAAJ,EAAaP,SAAb,EAAwBC,WAAxB,CAAjB;AACAF,MAAAA,GAAG,CAACS,QAAJ,CAAa,KAAIC,iBAAJ,EAAcH,QAAd,EAAwBJ,SAAS,CAACQ,aAAV,EAAxB,CAAb;AACD;;AACD,WAAO,IAAIb,YAAJ,EAAP;AACD;;AAhBuB;;;gCAAbA,Y,WACI,E;gCADJA,Y,kBAEW,CAACc,gBAAD,EAAYC,oBAAZ,EAA6BC,8CAA7B,EAAuDC,4BAAvD,C;gCAFXjB,Y,aAGMkB,kB;;AAgBnBC,4BAAeC,UAAf,CAA0BpB,YAA1B","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { CommunityAspect } from '@teambit/community';\nimport type { CommunityMain } from '@teambit/community';\n\nimport ImportCmd from './import.cmd';\nimport { Importer } from './importer';\nimport { ImporterAspect } from './importer.aspect';\n\nexport class ImporterMain {\n  static slots = [];\n  static dependencies = [CLIAspect, WorkspaceAspect, DependencyResolverAspect, CommunityAspect];\n  static runtime = MainRuntime;\n  static async provider([cli, workspace, depResolver, community]: [\n    CLIMain,\n    Workspace,\n    DependencyResolverMain,\n    CommunityMain\n  ]) {\n    if (workspace && !workspace.consumer.isLegacy) {\n      cli.unregister('import');\n      const importer = new Importer(workspace, depResolver);\n      cli.register(new ImportCmd(importer, community.getDocsDomain()));\n    }\n    return new ImporterMain();\n  }\n}\n\nImporterAspect.addRuntime(ImporterMain);\n"]}