"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Importer = void 0;

function _ramda() {
  const data = _interopRequireDefault(require("ramda"));

  _ramda = function () {
    return data;
  };

  return data;
}

function _analytics() {
  const data = require("@teambit/legacy/dist/analytics/analytics");

  _analytics = function () {
    return data;
  };

  return data;
}

function _importComponents() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/consumer/component-ops/import-components"));

  _importComponents = function () {
    return data;
  };

  return data;
}

function _componentIdToPackageName() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/utils/bit/component-id-to-package-name"));

  _componentIdToPackageName = function () {
    return data;
  };

  return data;
}

class Importer {
  constructor(workspace, depResolver) {
    this.workspace = workspace;
    this.depResolver = depResolver;
  }

  async import(importOptions, packageManagerArgs) {
    const consumer = this.workspace.consumer;
    consumer.packageManagerArgs = packageManagerArgs;
    await this.populateLanesDataIfNeeded(importOptions);
    const importComponents = new (_importComponents().default)(consumer, importOptions);
    const {
      dependencies,
      importDetails
    } = await importComponents.importComponents();
    const bitIds = dependencies.map(_ramda().default.path(['component', 'id']));

    _analytics().Analytics.setExtraData('num_components', bitIds.length);

    if (importOptions.ids.length) {
      const importedComponents = dependencies.map(d => d.component);
      await this.removeFromWorkspaceConfig(importedComponents);
    }

    await consumer.onDestroy();
    return {
      dependencies,
      importDetails
    };
  }

  async removeFromWorkspaceConfig(component) {
    const importedPackageNames = this.getImportedPackagesNames(component);
    this.depResolver.removeFromRootPolicy(importedPackageNames);
    await this.depResolver.persistConfig(this.workspace.path);
  }

  getImportedPackagesNames(components) {
    return components.map(component => (0, _componentIdToPackageName().default)(component));
  }

  async populateLanesDataIfNeeded(importOptions) {
    if (!importOptions.ids.length) {
      importOptions.objectsOnly = true;
    }

    const currentRemoteLane = await this.workspace.getCurrentRemoteLaneId();

    if (currentRemoteLane) {
      importOptions.lanes = {
        laneIds: [currentRemoteLane.laneId],
        lanes: [currentRemoteLane.lane]
      };
    }
  }

}

exports.Importer = Importer;

//# sourceMappingURL=importer.js.map