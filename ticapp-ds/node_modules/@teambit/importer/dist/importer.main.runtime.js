"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImporterMain = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _cli() {
  const data = require("@teambit/cli");

  _cli = function () {
    return data;
  };

  return data;
}

function _dependencyResolver() {
  const data = require("@teambit/dependency-resolver");

  _dependencyResolver = function () {
    return data;
  };

  return data;
}

function _workspace() {
  const data = _interopRequireDefault(require("@teambit/workspace"));

  _workspace = function () {
    return data;
  };

  return data;
}

function _community() {
  const data = require("@teambit/community");

  _community = function () {
    return data;
  };

  return data;
}

function _import() {
  const data = _interopRequireDefault(require("./import.cmd"));

  _import = function () {
    return data;
  };

  return data;
}

function _importer() {
  const data = require("./importer");

  _importer = function () {
    return data;
  };

  return data;
}

function _importer2() {
  const data = require("./importer.aspect");

  _importer2 = function () {
    return data;
  };

  return data;
}

class ImporterMain {
  static async provider([cli, workspace, depResolver, community]) {
    if (workspace && !workspace.consumer.isLegacy) {
      cli.unregister('import');
      const importer = new (_importer().Importer)(workspace, depResolver);
      cli.register(new (_import().default)(importer, community.getDocsDomain()));
    }

    return new ImporterMain();
  }

}

exports.ImporterMain = ImporterMain;
(0, _defineProperty2().default)(ImporterMain, "slots", []);
(0, _defineProperty2().default)(ImporterMain, "dependencies", [_cli().CLIAspect, _workspace().default, _dependencyResolver().DependencyResolverAspect, _community().CommunityAspect]);
(0, _defineProperty2().default)(ImporterMain, "runtime", _cli().MainRuntime);

_importer2().ImporterAspect.addRuntime(ImporterMain);

//# sourceMappingURL=importer.main.runtime.js.map