{"version":3,"sources":["elements.route.ts"],"names":["ElementsRoute","constructor","elements","logger","baseRoute","req","res","component","status","send","artifact","getElements","e","file","params","elementsPath","relativePath","calculatedPath","getElementsDirName","getFile","getMainElementsBundleFile","contents","str","cwd","path","contentType","mime","getType","set","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAWO,MAAMA,aAAN,CAAqC;AAC1CC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,QAJC,EAKDC,MALC,EAMT;AAAA,SAFQD,QAER,GAFQA,QAER;AAAA,SADQC,MACR,GADQA,MACR;AAAA,mDAEO,IAAG,KAAKD,QAAL,CAAcE,SAAU,kBAFlC;AAAA,oDAGO,KAHP;AAAA,yDAKY,CACZ,OAAOC,GAAP,EAAgCC,GAAhC,KAAkD;AAChD,UAAI;AACF;AACA,cAAMC,SAAS,GAAGF,GAAG,CAACE,SAAtB;AACA,YAAI,CAACA,SAAL,EAAgB,OAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AAEhB,YAAIC,QAAJ,CALE,CAMF;;AACA,YAAI;AACFA,UAAAA,QAAQ,GAAG,MAAM,KAAKR,QAAL,CAAcS,WAAd,CAA0BJ,SAA1B,CAAjB;AACD,SAFD,CAEE,OAAOK,CAAP,EAAe;AACf,iBAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AACD,SAXC,CAYF;;;AACA,YAAII,IAAJ;;AACA,YAAIR,GAAG,CAACS,MAAJ,CAAWC,YAAf,EAA6B;AAAA;;AAC3B,gBAAMC,YAAY,GAAGX,GAAG,CAACS,MAAJ,CAAWC,YAAhC;AACA,gBAAME,cAAc,GAAG,kBAAK,KAAKf,QAAL,CAAcgB,kBAAd,EAAL,EAAyC,QAAzC,EAAmDF,YAAnD,CAAvB;AACAH,UAAAA,IAAI,gBAAGH,QAAH,8CAAG,UAAUS,OAAV,CAAkBF,cAAlB,CAAP;AACD,SAJD,MAIO;AAAA;;AACLJ,UAAAA,IAAI,iBAAGH,QAAH,+CAAG,WAAUU,yBAAV,EAAP;AACD;;AACD,YAAI,CAACP,IAAL,EAAW,OAAOP,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AAEX,cAAMY,QAAQ,GAAGR,IAAI,CAACQ,QAAtB;AACA,cAAMC,GAAG,GAAI,GAAET,IAAI,CAACU,GAAI,IAAGV,IAAI,CAACW,IAAK,EAArC,CAxBE,CAyBF;;AACA,cAAMC,WAAW,GAAGC,gBAAKC,OAAL,CAAaL,GAAb,CAApB;;AACA,YAAIG,WAAJ,EAAiBnB,GAAG,CAACsB,GAAJ,CAAQ,cAAR,EAAwBH,WAAxB;AACjB,eAAOnB,GAAG,CAACG,IAAJ,CAASY,QAAT,CAAP;AACD,OA7BD,CA6BE,OAAOT,CAAP,EAAe;AACf,aAAKT,MAAL,CAAY0B,KAAZ,CAAkB,yBAAlB,EAA6CjB,CAA7C;AACA,eAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,yCAArB,CAAP;AACD;AACF,KAnCW,CALZ;AAAE;;AAPsC","sourcesContent":["import { Request, Response, Route } from '@teambit/express';\nimport mime from 'mime';\nimport { join } from 'path';\nimport type { Component } from '@teambit/component';\nimport { serverError } from '@teambit/ui-foundation.ui.pages.static-error';\nimport type { Logger } from '@teambit/logger';\n\nimport { ElementsMain } from './elements.main.runtime';\nimport { ElementsArtifact } from './elements-artifact';\n\ntype UrlParams = {\n  /** `/elements/:elementPath(*)` */\n  elementsPath?: string;\n};\n\nexport class ElementsRoute implements Route {\n  constructor(\n    /**\n     * elements extension.\n     */\n    private elements: ElementsMain,\n    private logger: Logger\n  ) {}\n\n  route = `/${this.elements.baseRoute}:elementsPath(*)`;\n  method = 'get';\n\n  middlewares = [\n    async (req: Request<UrlParams>, res: Response) => {\n      try {\n        // @ts-ignore TODO: @guy please fix.\n        const component = req.component as Component | undefined;\n        if (!component) return res.status(404).send();\n\n        let artifact: ElementsArtifact | undefined;\n        // TODO - prevent error `getVinylsAndImportIfMissing is not a function` #4680\n        try {\n          artifact = await this.elements.getElements(component);\n        } catch (e: any) {\n          return res.status(404).send();\n        }\n        // TODO: please fix file path concatenation here.\n        let file;\n        if (req.params.elementsPath) {\n          const relativePath = req.params.elementsPath;\n          const calculatedPath = join(this.elements.getElementsDirName(), 'public', relativePath);\n          file = artifact?.getFile(calculatedPath);\n        } else {\n          file = artifact?.getMainElementsBundleFile();\n        }\n        if (!file) return res.status(404).send();\n\n        const contents = file.contents;\n        const str = `${file.cwd}/${file.path}`;\n        // @ts-ignore - temporarily, remove it later\n        const contentType = mime.getType(str);\n        if (contentType) res.set('Content-Type', contentType);\n        return res.send(contents);\n      } catch (e: any) {\n        this.logger.error('failed getting elements', e);\n        return res.status(500).send(serverError());\n      }\n    },\n  ];\n}\n"]}