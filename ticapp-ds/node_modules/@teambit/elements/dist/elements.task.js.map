{"version":3,"sources":["elements.task.ts"],"names":["ElementTask","constructor","elements","storageResolver","ElementsAspect","id","CompilerAspect","execute","context","url","envRuntime","outDirName","getElementsDirName","elementsWrapperFn","env","getElementsWrapper","bind","targets","bundlerContext","Object","assign","entry","publicPath","getElementsDir","rootPath","bundler","getElementsBundler","bundlerResults","run","outputPath"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAQO,MAAMA,WAAN,CAAuC;AAC5CC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,QAJC,EAKDC,eALC,EAMT;AAAA,SAFQD,QAER,GAFQA,QAER;AAAA,SADQC,eACR,GADQA,eACR;AAAA,sDAESC,mBAAeC,EAFxB;AAAA,kDAGK,uBAHL;AAAA,sDAIuB,KAJvB;AAAA,0DAKsB,CAACC,2BAAeD,EAAhB,CALtB;AAAE;;AAOS,QAAPE,OAAO,CAACC,OAAD,EAAkD;AAC7D,UAAMC,GAAG,GAAI,aAAYD,OAAO,CAACE,UAAR,CAAmBL,EAAG,EAA/C;AAEA,UAAMM,UAAU,GAAG,KAAKT,QAAL,CAAcU,kBAAd,EAAnB;AAEA,UAAMC,iBAAiB,GAAGL,OAAO,CAACM,GAAR,CAAYC,kBAAZ,CAA+BC,IAA/B,CAAoCR,OAAO,CAACM,GAA5C,CAA1B;AAEA,UAAMG,OAAiB,GAAG,MAAM,sCAAeT,OAAf,EAAwBK,iBAAxB,EAA2CF,UAA3C,CAAhC;AAEA,UAAMO,cAA8B,GAAGC,MAAM,CAACC,MAAP,CAAcZ,OAAd,EAAuB;AAC5DS,MAAAA,OAD4D;AAE5DI,MAAAA,KAAK,EAAE,EAFqD;AAG5DC,MAAAA,UAAU,EAAE,KAAKC,cAAL,CAAoBf,OAApB,CAHgD;AAI5DgB,MAAAA,QAAQ,EAAEf;AAJkD,KAAvB,CAAvC;AAOA,UAAMgB,OAAgB,GAAG,MAAMjB,OAAO,CAACM,GAAR,CAAYY,kBAAZ,CAA+BR,cAA/B,EAA+C,EAA/C,CAA/B;AACA,UAAMS,cAAc,GAAG,MAAMF,OAAO,CAACG,GAAR,EAA7B;AAEA,WAAO,sCAAeV,cAAf,EAA+BS,cAA/B,EAA+ChB,UAA/C,EAA2D,KAAKR,eAAhE,CAAP;AACD;;AAEDoB,EAAAA,cAAc,CAACf,OAAD,EAA4B;AACxC,UAAMqB,UAAU,GAAG,qBAAS,GAAErB,OAAO,CAACH,EAAG,SAAtB,CAAnB;AACA,WAAOwB,UAAP;AACD;;AAvC2C","sourcesContent":["import { resolve } from 'path';\nimport { ExecutionContext } from '@teambit/envs';\nimport { BuildContext, BuiltTaskResult, BuildTask, TaskLocation, ArtifactStorageResolver } from '@teambit/builder';\nimport { CompilerAspect } from '@teambit/compiler';\nimport { Bundler, BundlerContext, Target } from '@teambit/bundler';\nimport { ElementsMain } from './elements.main.runtime';\nimport { computeTargets } from './compute-targets';\nimport { computeResults } from './compute-results';\nimport { ElementsAspect } from '.';\n\nexport type ElementsWrapperContext = {\n  mainFilePath: string;\n  componentName: string;\n};\nexport type ElementsWrapperFn = (context: ElementsWrapperContext) => string;\n\nexport class ElementTask implements BuildTask {\n  constructor(\n    /**\n     * elements extension.\n     */\n    private elements: ElementsMain,\n    private storageResolver?: ArtifactStorageResolver\n  ) {}\n\n  aspectId = ElementsAspect.id;\n  name = 'GenerateElementBundle';\n  location: TaskLocation = 'end';\n  readonly dependencies = [CompilerAspect.id];\n\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    const url = `/elements/${context.envRuntime.id}`;\n\n    const outDirName = this.elements.getElementsDirName();\n\n    const elementsWrapperFn = context.env.getElementsWrapper.bind(context.env);\n\n    const targets: Target[] = await computeTargets(context, elementsWrapperFn, outDirName);\n\n    const bundlerContext: BundlerContext = Object.assign(context, {\n      targets,\n      entry: [],\n      publicPath: this.getElementsDir(context),\n      rootPath: url,\n    });\n\n    const bundler: Bundler = await context.env.getElementsBundler(bundlerContext, []);\n    const bundlerResults = await bundler.run();\n\n    return computeResults(bundlerContext, bundlerResults, outDirName, this.storageResolver);\n  }\n\n  getElementsDir(context: ExecutionContext) {\n    const outputPath = resolve(`${context.id}/public`);\n    return outputPath;\n  }\n}\n"]}