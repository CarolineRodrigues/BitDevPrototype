{"version":3,"sources":["elements.main.runtime.ts"],"names":["ElementsMain","constructor","builder","componentExtension","getElementsDirName","createTask","storageResolver","ElementTask","getWebpackTransformers","defaultTransformer","configMutator","context","defaultBundlePrefix","ElementsArtifact","defaultMainFilePrefix","namePascalCase","target","components","id","name","pascalCase","raw","output","filename","library","type","getElements","component","artifacts","getArtifactsVinylByExtension","ElementsAspect","length","undefined","isElementsExist","getArtifactsByExtension","getElementUrl","isEmpty","url","getMainElementsFileUrl","getRoute","baseRoute","provider","loggerMain","graphql","elements","logger","createLogger","elementsRoute","ElementsRoute","register","registerRoute","ComponentAspect","BuilderAspect","LoggerAspect","GraphqlAspect","MainRuntime","addRuntime"],"mappings":"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","sourcesContent":["import camelCase from 'camelcase';\nimport { ArtifactStorageResolver, BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { MainRuntime } from '@teambit/cli';\nimport ComponentAspect, { Component, ComponentMain } from '@teambit/component';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { WebpackConfigTransformer } from '@teambit/webpack';\nimport GraphqlAspect, { GraphqlMain } from '@teambit/graphql';\nimport { ElementsArtifact } from './elements-artifact';\nimport { ElementsAspect } from './elements.aspect';\nimport { ElementsRoute } from './elements.route';\nimport { ElementTask } from './elements.task';\nimport { elementsSchema } from './elemets.graphql';\n\nexport class ElementsMain {\n  constructor(private builder: BuilderMain, private componentExtension: ComponentMain) {}\n  baseRoute = `elements/`;\n\n  getElementsDirName(): string {\n    return '__bit__elements';\n  }\n\n  createTask(storageResolver?: ArtifactStorageResolver) {\n    return new ElementTask(this, storageResolver);\n  }\n\n  getWebpackTransformers(): WebpackConfigTransformer[] {\n    const defaultTransformer: WebpackConfigTransformer = (configMutator, context) => {\n      const defaultBundlePrefix = ElementsArtifact.defaultMainFilePrefix;\n      const namePascalCase = camelCase(context.target.components[0].id.name, { pascalCase: true });\n      configMutator.raw.output = configMutator.raw.output || {};\n      configMutator.raw.output.filename = `static/js/${defaultBundlePrefix}.[contenthash:8].js`;\n      configMutator.raw.output.library = {\n        name: namePascalCase,\n        type: 'umd',\n      };\n      return configMutator;\n    };\n    return [defaultTransformer];\n  }\n\n  async getElements(component: Component): Promise<ElementsArtifact | undefined> {\n    const artifacts = await this.builder.getArtifactsVinylByExtension(component, ElementsAspect.id);\n    if (!artifacts.length) return undefined;\n\n    return new ElementsArtifact(artifacts);\n  }\n\n  isElementsExist(component: Component): boolean {\n    const artifacts = this.builder.getArtifactsByExtension(component, ElementsAspect.id);\n    return !!artifacts?.length;\n  }\n\n  async getElementUrl(component: Component): Promise<string | undefined> {\n    const artifacts = await this.getElements(component);\n    // In case there are no elements return as undefined\n    if (!artifacts) return undefined;\n    if (artifacts?.isEmpty()) return undefined;\n\n    const url = artifacts?.getMainElementsFileUrl();\n    // In case of public url (like cdn) return the public url\n    if (url) {\n      return url;\n    }\n    // return the url in the scope\n    return this.componentExtension.getRoute(component.id, this.baseRoute);\n  }\n\n  static slots = [];\n  static dependencies = [ComponentAspect, BuilderAspect, LoggerAspect, GraphqlAspect];\n  static runtime = MainRuntime;\n  static async provider([componentExtension, builder, loggerMain, graphql]: [\n    ComponentMain,\n    BuilderMain,\n    LoggerMain,\n    GraphqlMain\n  ]) {\n    const elements = new ElementsMain(builder, componentExtension);\n    const logger = loggerMain.createLogger(ElementsAspect.id);\n    const elementsRoute = new ElementsRoute(elements, logger);\n    graphql.register(elementsSchema(elements));\n    componentExtension.registerRoute([elementsRoute]);\n    return elements;\n  }\n}\n\nElementsAspect.addRuntime(ElementsMain);\n"]}