{"version":3,"sources":["compute-targets.ts"],"names":["computeTargets","context","createEntryFn","outDirName","Promise","all","components","map","comp","getComponentTarget","component","elementsWrapperFn","outputPath","getOutputPath","id","entries","getEntryFile","componentId","capsule","capsuleNetwork","graphCapsules","getCapsule","Error","toString","path","mainFilePath","getMainFilePath","entryContent","componentName","name","targetPath","mainFile","state","_consumer","compiler","env","getCompiler","getDistPathBySrcPath"],"mappings":";;;;;;;;;;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,eAAeA,cAAf,CACLC,OADK,EAELC,aAFK,EAGLC,UAHK,EAIc;AACnB,SAAOC,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACK,UAAR,CAAmBC,GAAnB,CAAwBC,IAAD,IAAUC,kBAAkB,CAACR,OAAD,EAAUO,IAAV,EAAgBN,aAAhB,EAA+BC,UAA/B,CAAnD,CAAZ,CAAP;AACD;;AAED,eAAeM,kBAAf,CACER,OADF,EAEES,SAFF,EAGEC,iBAHF,EAIER,UAJF,EAKmB;AACjB,QAAMS,UAAU,GAAGC,aAAa,CAACZ,OAAD,EAAUS,SAAS,CAACI,EAApB,EAAwBX,UAAxB,CAAhC;AACA,MAAI,CAAC,2BAAWS,UAAX,CAAL,EAA6B,2BAAWA,UAAX;AAE7B,SAAO;AACLG,IAAAA,OAAO,EAAE,CAAC,MAAMC,YAAY,CAACJ,UAAD,EAAaF,SAAb,EAAwBC,iBAAxB,EAA2CV,OAA3C,CAAnB,CADJ;AAELK,IAAAA,UAAU,EAAE,CAACI,SAAD,CAFP;AAGLE,IAAAA;AAHK,GAAP;AAKD;;AAED,SAASC,aAAT,CAAuBZ,OAAvB,EAA8CgB,WAA9C,EAAwEd,UAAxE,EAAoG;AAClG;AACA,QAAMe,OAAO,GAAGjB,OAAO,CAACkB,cAAR,CAAuBC,aAAvB,CAAqCC,UAArC,CAAgDJ,WAAhD,CAAhB;AACA,MAAI,CAACC,OAAL,EAAc,MAAM,IAAII,KAAJ,CAAW,0BAAyBL,WAAW,CAACM,QAAZ,EAAuB,6BAA3D,CAAN;AACd,SAAO,qBAAS,GAAEL,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEM,IAAK,IAAGrB,UAAW,EAAvC,CAAP;AACD;;AAED,eAAea,YAAf,CACEJ,UADF,EAEEF,SAFF,EAGEC,iBAHF,EAIEV,OAJF,EAKmB;AACjB,QAAMwB,YAAY,GAAGC,eAAe,CAACzB,OAAD,EAAUS,SAAV,CAApC;AACA,QAAMiB,YAAY,GAAGhB,iBAAiB,CAAC;AAAEc,IAAAA,YAAF;AAAgBG,IAAAA,aAAa,EAAElB,SAAS,CAACI,EAAV,CAAae;AAA5C,GAAD,CAAtC;AACA,QAAMC,UAAU,GAAG,kBAAKlB,UAAL,EAAkB,eAAlB,CAAnB;AACA,gCAAckB,UAAd,EAA0BH,YAA1B;AACA,SAAOG,UAAP;AACD;;AAED,SAASJ,eAAT,CAAyBzB,OAAzB,EAAgDS,SAAhD,EAA8E;AAC5E,QAAMQ,OAAO,GAAGjB,OAAO,CAACkB,cAAR,CAAuBC,aAAvB,CAAqCC,UAArC,CAAgDX,SAAS,CAACI,EAA1D,CAAhB;AACA,MAAI,CAACI,OAAL,EAAc,MAAM,IAAII,KAAJ,CAAW,0BAAyBZ,SAAS,CAACI,EAAV,CAAaS,QAAb,EAAwB,6BAA5D,CAAN;AACd,QAAMQ,QAAQ,GAAGrB,SAAS,CAACsB,KAAV,CAAgBC,SAAhB,CAA0BF,QAA3C;AACA,QAAMG,QAAkB,GAAGjC,OAAO,CAACkC,GAAR,CAAYC,WAAZ,EAA3B;AACA,SAAO,kBAAKlB,OAAO,CAACM,IAAb,EAAmBU,QAAQ,CAACG,oBAAT,CAA8BN,QAA9B,CAAnB,CAAP;AACD","sourcesContent":["import { BuildContext } from '@teambit/builder';\nimport { Target } from '@teambit/bundler';\nimport { Compiler } from '@teambit/compiler';\nimport { Component } from '@teambit/component';\nimport { ComponentID } from '@teambit/component-id';\nimport { existsSync, mkdirpSync, writeFileSync } from 'fs-extra';\nimport { join, resolve } from 'path';\nimport { ElementsWrapperFn } from './elements.task';\n\nexport async function computeTargets(\n  context: BuildContext,\n  createEntryFn: ElementsWrapperFn,\n  outDirName: string\n): Promise<Target[]> {\n  return Promise.all(context.components.map((comp) => getComponentTarget(context, comp, createEntryFn, outDirName)));\n}\n\nasync function getComponentTarget(\n  context: BuildContext,\n  component: Component,\n  elementsWrapperFn: ElementsWrapperFn,\n  outDirName: string\n): Promise<Target> {\n  const outputPath = getOutputPath(context, component.id, outDirName);\n  if (!existsSync(outputPath)) mkdirpSync(outputPath);\n\n  return {\n    entries: [await getEntryFile(outputPath, component, elementsWrapperFn, context)],\n    components: [component],\n    outputPath,\n  };\n}\n\nfunction getOutputPath(context: BuildContext, componentId: ComponentID, outDirName: string): string {\n  // return resolve(`${context.capsuleNetwork.capsulesRootDir}/${getDirName(context, componentId)}`);\n  const capsule = context.capsuleNetwork.graphCapsules.getCapsule(componentId);\n  if (!capsule) throw new Error(`can't find capsule for ${componentId.toString()} while bundling for element`);\n  return resolve(`${capsule?.path}/${outDirName}`);\n}\n\nasync function getEntryFile(\n  outputPath: string,\n  component: Component,\n  elementsWrapperFn: ElementsWrapperFn,\n  context: BuildContext\n): Promise<string> {\n  const mainFilePath = getMainFilePath(context, component);\n  const entryContent = elementsWrapperFn({ mainFilePath, componentName: component.id.name });\n  const targetPath = join(outputPath, `__elements.js`);\n  writeFileSync(targetPath, entryContent);\n  return targetPath;\n}\n\nfunction getMainFilePath(context: BuildContext, component: Component): string {\n  const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);\n  if (!capsule) throw new Error(`can't find capsule for ${component.id.toString()} while bundling for element`);\n  const mainFile = component.state._consumer.mainFile;\n  const compiler: Compiler = context.env.getCompiler();\n  return join(capsule.path, compiler.getDistPathBySrcPath(mainFile));\n}\n"]}