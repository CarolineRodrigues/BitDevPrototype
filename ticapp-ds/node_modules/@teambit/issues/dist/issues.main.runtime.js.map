{"version":3,"sources":["issues.main.runtime.ts"],"names":["IssuesMain","constructor","config","getIssuesToIgnore","allIssues","listIssues","map","issue","name","issuesToIgnore","ignoreIssues","forEach","issueToIgnore","includes","BitError","IssuesAspect","id","instances","Object","keys","IssuesClasses","issueClass","issuesList","IssuesList","nonLegacyIssues","getHarmonyIssues","issueInstance","description","solution","isTagBlocker","provider","cli","issuesMain","register","ComponentIssuesCmd","CLIAspect","MainRuntime","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMO,MAAMA,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAASC,MAAT,EAA+B;AAAA,SAAtBA,MAAsB,GAAtBA,MAAsB;AAAE;;AAE5CC,EAAAA,iBAAiB,GAAa;AAC5B,UAAMC,SAAS,GAAG,KAAKC,UAAL,GAAkBC,GAAlB,CAAuBC,KAAD,IAAWA,KAAK,CAACC,IAAvC,CAAlB;AACA,UAAMC,cAAc,GAAG,KAAKP,MAAL,CAAYQ,YAAZ,IAA4B,EAAnD;AACAD,IAAAA,cAAc,CAACE,OAAf,CAAwBC,aAAD,IAAmB;AACxC,UAAI,CAACR,SAAS,CAACS,QAAV,CAAmBD,aAAnB,CAAL,EAAwC;AACtC,cAAM,KAAIE,oBAAJ,EACH,0CAAyCF,aAAc,wBAAuBG,uBAAaC,EAAG,SAD3F,CAAN;AAGD;AACF,KAND;AAOA,WAAOP,cAAP;AACD;;AAEDJ,EAAAA,UAAU,GAAG;AACX,UAAMY,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYC,gCAAZ,EAA2Bd,GAA3B,CAAgCe,UAAD,IAAgB,KAAID,iCAAcC,UAAd,CAAJ,GAA/C,CAAlB;AACA,UAAMC,UAAU,GAAG,KAAIC,6BAAJ,EAAeN,SAAf,CAAnB;AACA,UAAMO,eAAe,GAAGF,UAAU,CAACG,gBAAX,EAAxB;AACA,WAAOD,eAAe,CAAClB,GAAhB,CAAqBoB,aAAD,IAAmB;AAC5C,aAAO;AACLlB,QAAAA,IAAI,EAAEkB,aAAa,CAACzB,WAAd,CAA0BO,IAD3B;AAELmB,QAAAA,WAAW,EAAED,aAAa,CAACC,WAFtB;AAGLC,QAAAA,QAAQ,EAAEF,aAAa,CAACE,QAHnB;AAILC,QAAAA,YAAY,EAAEH,aAAa,CAACG;AAJvB,OAAP;AAMD,KAPM,CAAP;AAQD;;AAQoB,eAARC,QAAQ,CAAC,CAACC,GAAD,CAAD,EAAmB7B,MAAnB,EAAyC;AAC5D,UAAM8B,UAAU,GAAG,IAAIhC,UAAJ,CAAeE,MAAf,CAAnB;AACA6B,IAAAA,GAAG,CAACE,QAAJ,CAAa,KAAIC,+BAAJ,EAAuBF,UAAvB,CAAb;AACA,WAAOA,UAAP;AACD;;AAxCqB;;;gCAAXhC,U,WA8BI,E;gCA9BJA,U,kBA+BW,CAACmC,gBAAD,C;gCA/BXnC,U,mBAgCY;AACrBU,EAAAA,YAAY,EAAE;AADO,C;gCAhCZV,U,aAmCMoC,kB;;AAQnBrB,uBAAasB,UAAb,CAAwBrC,UAAxB","sourcesContent":["import { BitError } from '@teambit/bit-error';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { IssuesClasses, IssuesList } from '@teambit/component-issues';\nimport { ComponentIssuesCmd } from './issues-cmd';\nimport { IssuesAspect } from './issues.aspect';\n\nexport type IssuesConfig = {\n  ignoreIssues: string[];\n};\n\nexport class IssuesMain {\n  constructor(private config: IssuesConfig) {}\n\n  getIssuesToIgnore(): string[] {\n    const allIssues = this.listIssues().map((issue) => issue.name);\n    const issuesToIgnore = this.config.ignoreIssues || [];\n    issuesToIgnore.forEach((issueToIgnore) => {\n      if (!allIssues.includes(issueToIgnore)) {\n        throw new BitError(\n          `fatal: a non-existing component-issue \"${issueToIgnore}\" was configured for ${IssuesAspect.id} aspect`\n        );\n      }\n    });\n    return issuesToIgnore;\n  }\n\n  listIssues() {\n    const instances = Object.keys(IssuesClasses).map((issueClass) => new IssuesClasses[issueClass]());\n    const issuesList = new IssuesList(instances);\n    const nonLegacyIssues = issuesList.getHarmonyIssues();\n    return nonLegacyIssues.map((issueInstance) => {\n      return {\n        name: issueInstance.constructor.name,\n        description: issueInstance.description,\n        solution: issueInstance.solution,\n        isTagBlocker: issueInstance.isTagBlocker,\n      };\n    });\n  }\n\n  static slots = [];\n  static dependencies = [CLIAspect];\n  static defaultConfig = {\n    ignoreIssues: [],\n  };\n  static runtime = MainRuntime;\n  static async provider([cli]: [CLIMain], config: IssuesConfig) {\n    const issuesMain = new IssuesMain(config);\n    cli.register(new ComponentIssuesCmd(issuesMain));\n    return issuesMain;\n  }\n}\n\nIssuesAspect.addRuntime(IssuesMain);\n"]}