{"version":3,"sources":["mocha.tester.ts"],"names":["MochaTester","constructor","id","logger","mochaConfig","babelConfig","MochaModule","test","context","specsPerComp","specFiles","toArray","allSpecsFiles","map","specFile","path","flat","only","filePath","includes","extensions","componentsResults","component","files","testsFiles","file","runMochaOnOneFile","err","errMsg","message","error","consoleFailure","TestsFiles","relative","undefined","allComponentErrors","testFile","tests","failureErrOrStr","componentId","results","TestsResult","errors","Tests","watch","_callback","onTestRunComplete","callback","mocha","addFile","testResults","Promise","resolve","runner","run","on","state","Error","title","push","TestResult","titlePath","duration","stats","testsFile","passes","failures","pending","version","Mocha","prototype"],"mappings":"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","sourcesContent":["import { Logger } from '@teambit/logger';\nimport { ComponentsResults, Tester, CallbackFn, TesterContext, Tests } from '@teambit/tester';\nimport Mocha from 'mocha';\nimport babelRegister from '@babel/register';\nimport type { TransformOptions } from '@babel/core';\nimport { TestResult, TestsFiles, TestsResult } from '@teambit/tests-results';\nimport pMapSeries from 'p-map-series';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { compact } from 'lodash';\n\nexport class MochaTester implements Tester {\n  _callback: CallbackFn | undefined;\n  displayName = 'Mocha';\n  constructor(\n    readonly id: string,\n    private logger: Logger,\n    readonly mochaConfig: Mocha.MochaOptions,\n    /**\n     * babel config are needed when the spec files are not native javascript and need to be compiled.\n     * pass the same config you pass to your babel compiler if you're using one.\n     */\n    private babelConfig: TransformOptions,\n    private MochaModule: typeof Mocha\n  ) {}\n  async test(context: TesterContext): Promise<Tests> {\n    const specsPerComp = context.specFiles.toArray();\n    const allSpecsFiles = specsPerComp.map(([, specFiles]) => specFiles.map((specFile) => specFile.path)).flat();\n    babelRegister({\n      only: [(filePath: string) => allSpecsFiles.includes(filePath)],\n      extensions: ['.es6', '.es', '.jsx', '.js', '.mjs', '.ts', '.tsx'],\n      ...(this.babelConfig || {}),\n    });\n    const componentsResults: ComponentsResults[] = await pMapSeries(specsPerComp, async ([component, files]) => {\n      const testsFiles: TestsFiles[] = await pMapSeries(files, async (file) => {\n        try {\n          return await this.runMochaOnOneFile(file);\n        } catch (err: any) {\n          const errMsg = `Mocha found an error while working on \"${file.path}\". ${err.message}`;\n          this.logger.error(errMsg, err);\n          this.logger.consoleFailure(errMsg);\n          return new TestsFiles(file.relative, [], 0, 0, 0, undefined, undefined, err);\n        }\n      });\n      const allComponentErrors = testsFiles\n        .map((testFile) => testFile.error || testFile.tests.map((test) => test.failureErrOrStr as Error))\n        .flat();\n      return {\n        componentId: component.id,\n        results: new TestsResult(testsFiles),\n        errors: compact(allComponentErrors),\n      };\n    });\n    return new Tests(componentsResults);\n  }\n\n  /**\n   * @todo: make this work. currently, it doesn't update the UI upon changes.\n   */\n  async watch(context: TesterContext): Promise<Tests> {\n    const results = await this.test(context);\n    if (this._callback) {\n      this._callback(results);\n    }\n    return results;\n  }\n\n  async onTestRunComplete(callback: CallbackFn) {\n    this._callback = callback;\n  }\n\n  private async runMochaOnOneFile(file: AbstractVinyl): Promise<TestsFiles> {\n    const mocha = new this.MochaModule(this.mochaConfig);\n    mocha.addFile(file.path);\n    const testResults: TestResult[] = [];\n    return new Promise((resolve) => {\n      const runner = mocha\n        .run()\n        .on('test end', function (test) {\n          const state = test.state;\n          if (!state)\n            throw new Error(`the test.state of \"${test.title}\", file \"${file.path}\" is neither passed nor failed`);\n          testResults.push(new TestResult(test.titlePath(), test.title, state, test.duration, undefined, test.err));\n        })\n        .on('end', function () {\n          const stats = runner.stats;\n          if (!stats) throw new Error('stats is missing');\n          const testsFile = new TestsFiles(\n            file.relative,\n            testResults,\n            stats.passes,\n            stats.failures,\n            stats.pending,\n            stats.duration\n          );\n          resolve(testsFile);\n        });\n    });\n  }\n\n  version(): string {\n    // @ts-ignore\n    return Mocha.prototype.version || 'N/A';\n  }\n}\n"]}