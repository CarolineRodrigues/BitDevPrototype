{"version":3,"sources":["export-cmd.ts"],"names":["ExportCmd","constructor","docsDomain","description","report","remote","ids","eject","includeDependencies","setCurrentScope","all","allVersions","originDirectly","force","rewire","ignoreMissingArtifacts","resume","currentScope","CURRENT_UPSTREAM","GeneralError","componentsIds","nonExistOnBitMap","missingScope","exportedLanes","ejectResults","includeNonStaged","codemod","resumeExportId","chalk","yellow","exportOutput","lanesOutput","length","bold","name","green","join","nonExistOnBitMapOutput","idsStr","map","id","toString","missingScopeOutput","ejectOutput","output"],"mappings":"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","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\n\nimport { exportAction } from '@teambit/legacy/dist/api/consumer';\nimport ejectTemplate from '@teambit/legacy/dist/cli/templates/eject-template';\nimport { CURRENT_UPSTREAM, WILDCARD_HELP } from '@teambit/legacy/dist/constants';\nimport GeneralError from '@teambit/legacy/dist/error/general-error';\nimport chalk from 'chalk';\nimport { isEmpty } from 'lodash';\n\nexport class ExportCmd implements Command {\n  name = 'export [remote] [id...]';\n  description: string;\n  alias = 'e';\n  options = [\n    ['e', 'eject', 'replaces the exported components from the local scope with the corresponding packages'],\n    ['a', 'all', 'export all components include non-staged'],\n    [\n      'd',\n      'include-dependencies',\n      \"LEGACY ONLY. include the component's dependencies as part of the export to the remote scope\",\n    ],\n    [\n      's',\n      'set-current-scope',\n      \"LEGACY ONLY. ensure the component's remote scope is set according to the target location\",\n    ],\n    [\n      'r',\n      'rewire',\n      'LEGACY ONLY. when exporting to a different or new scope, replace import/require statements in the source code to match the new scope',\n    ],\n    ['f', 'force', 'force changing a component remote without asking for a confirmation'],\n    ['', 'all-versions', 'export not only staged versions but all of them'],\n    [\n      '',\n      'origin-directly',\n      'HARMONY ONLY. avoid export to the central hub, instead, export directly to the original scopes. not recommended!',\n    ],\n    [\n      '',\n      'resume <string>',\n      'in case the previous export failed and suggested to resume with an export-id, enter the id',\n    ],\n    [\n      '',\n      'ignore-missing-artifacts',\n      \"EXPERIMENTAL. don't throw an error when artifact files are missing. not recommended, unless you're sure the artifacts are in the remote\",\n    ],\n  ] as CommandOptions;\n  loader = true;\n  migration = true;\n  group = 'collaborate';\n  shortDescription = 'Export components to a remote scope';\n  remoteOp = true;\n\n  constructor(private docsDomain: string) {\n    this.description = `export components to a remote scope.\nbit export => export all staged components to their current scope, if checked out to a lane, export the lane as well\n\\`bit export [id...]\\` => export the given ids to their current scope\n\nhttps://${docsDomain}/components/exporting-components\n${WILDCARD_HELP('export remote-scope')}`;\n  }\n\n  async report(\n    [remote, ids = []]: [string, string[]],\n    {\n      eject = false,\n      includeDependencies = false,\n      setCurrentScope = false,\n      all = false,\n      allVersions = false,\n      originDirectly = false,\n      force = false,\n      rewire = false,\n      ignoreMissingArtifacts = false,\n      resume,\n    }: any\n  ): Promise<string> {\n    const currentScope = !remote || remote === CURRENT_UPSTREAM;\n    if (currentScope && remote) {\n      remote = '';\n    }\n    if (includeDependencies && !remote) {\n      throw new GeneralError(\n        'to use --includeDependencies, please specify a remote (the default remote gets already the dependencies)'\n      );\n    }\n    const { componentsIds, nonExistOnBitMap, missingScope, exportedLanes, ejectResults } = await exportAction({\n      ids,\n      remote,\n      eject,\n      includeDependencies,\n      setCurrentScope,\n      includeNonStaged: all || allVersions,\n      allVersions: allVersions || all,\n      originDirectly,\n      codemod: rewire,\n      force,\n      resumeExportId: resume,\n      ignoreMissingArtifacts,\n    });\n    if (isEmpty(componentsIds) && isEmpty(nonExistOnBitMap) && isEmpty(missingScope)) {\n      return chalk.yellow('nothing to export');\n    }\n    const exportOutput = () => {\n      if (isEmpty(componentsIds)) return '';\n      const lanesOutput = exportedLanes.length ? ` from lane ${chalk.bold(exportedLanes[0].name)}` : '';\n      if (remote)\n        return chalk.green(`exported ${componentsIds.length} components${lanesOutput} to scope ${chalk.bold(remote)}`);\n      return chalk.green(\n        `exported the following ${componentsIds.length} component(s)${lanesOutput}:\\n${chalk.bold(\n          componentsIds.join('\\n')\n        )}`\n      );\n    };\n    const nonExistOnBitMapOutput = () => {\n      // if includeDependencies is true, the nonExistOnBitMap might be the dependencies\n      if (isEmpty(nonExistOnBitMap) || includeDependencies) return '';\n      const idsStr = nonExistOnBitMap.map((id) => id.toString()).join(', ');\n      return chalk.yellow(\n        `${idsStr}\\nexported successfully. bit did not update the workspace as the component files are not tracked. this might happen when a component was tracked in a different git branch. to fix it check if they where tracked in a different git branch, checkout to that branch and resync by running 'bit import'. or stay on your branch and track the components again using 'bit add'.\\n`\n      );\n    };\n    const missingScopeOutput = () => {\n      if (isEmpty(missingScope)) return '';\n      const idsStr = missingScope.map((id) => id.toString()).join(', ');\n      return chalk.yellow(\n        `the following component(s) were not exported: ${chalk.bold(\n          idsStr\n        )}.\\nplease specify <remote> to export them, or set a \"defaultScope\" in your workspace config\\n\\n`\n      );\n    };\n    const ejectOutput = () => {\n      if (!ejectResults) return '';\n      const output = ejectTemplate(ejectResults);\n      return `\\n${output}`;\n    };\n\n    return nonExistOnBitMapOutput() + missingScopeOutput() + exportOutput() + ejectOutput();\n  }\n}\n"]}