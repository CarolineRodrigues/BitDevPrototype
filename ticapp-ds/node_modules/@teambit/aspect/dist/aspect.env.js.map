{"version":3,"sources":["aspect.env.ts"],"names":["tsconfig","require","AspectEnvType","AspectEnv","constructor","reactEnv","aspectLoader","__getDescriptor","type","getTsConfig","tsConfig","targetConf","createTsCompiler","getCompiler","getTemplateBundler","context","transformers","createTemplateWebpackBundler","getNpmIgnore","patterns","CAPSULE_ARTIFACTS_DIR","isCoreEnv","component","id","toStringWithoutVersion","push","getPreviewConfig","strategyName","splitComponentBundle","getDependencies","dependencies","react","devDependencies","peerDependencies"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEO,MAAMC,aAAa,GAAG,QAAtB;AAEP;AACA;AACA;;;;AACO,MAAMC,SAAN,CAA2C;AAChDC,EAAAA,WAAW,CAASC,QAAT,EAAqCC,YAArC,EAAqE;AAAA,SAA5DD,QAA4D,GAA5DA,QAA4D;AAAA,SAAhCC,YAAgC,GAAhCA,YAAgC;AAAA,kDAEzE,qDAFyE;AAAE;;AAI7D,QAAfC,eAAe,GAAG;AACtB,WAAO;AACLC,MAAAA,IAAI,EAAEN;AADD,KAAP;AAGD;;AAEDO,EAAAA,WAAW,CAACC,QAAD,EAA+B;AACxC,UAAMC,UAAU,GAAG,qBAAMX,QAAN,EAAgBU,QAAhB,CAAnB;AACA,WAAOC,UAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACF,QAAD,EAAyC;AACvD,WAAO,KAAKL,QAAL,CAAcQ,WAAd,CAA0B,KAAKJ,WAAL,CAAiBC,QAAjB,CAA1B,CAAP;AACD;;AAEuB,QAAlBI,kBAAkB,CAACC,OAAD,EAA0BC,YAAwC,GAAG,EAArE,EAA2F;AACjH,WAAO,KAAKX,QAAL,CAAcY,4BAAd,CAA2CF,OAA3C,EAAoDC,YAApD,CAAP;AACD;;AAEDE,EAAAA,YAAY,CAACH,OAAD,EAA+B;AACzC;AACA;AACA;AACA,UAAMI,QAAQ,GAAG,CAAC,OAAD,EAAW,GAAEC,gCAAsB,GAAnC,CAAjB,CAJyC,CAMzC;AACA;AACA;AACA;;AACA,QAAI,KAAKd,YAAL,CAAkBe,SAAlB,CAA4BN,OAAO,CAACO,SAAR,CAAkBC,EAAlB,CAAqBC,sBAArB,EAA5B,CAAJ,EAAgF;AAC9EL,MAAAA,QAAQ,CAACM,IAAT,CAAe,IAAGL,gCAAsB,eAAxC;AACD;;AACD,WAAOD,QAAP;AACD;;AAEDO,EAAAA,gBAAgB,GAAG;AACjB,WAAO;AACLC,MAAAA,YAAY,EAAE,WADT;AAELC,MAAAA,oBAAoB,EAAE;AAFjB,KAAP;AAID;;AAEoB,QAAfC,eAAe,GAAG;AACtB,WAAO;AACLC,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE,GADK;AAEZ,qBAAa,GAFD;AAGZ,mBAAW,QAHC;AAIZ;AACA,0BAAkB;AALN,OADT;AAQL;AACAC,MAAAA,eAAe,EAAE;AACfD,QAAAA,KAAK,EAAE,GADQ;AAEf,qBAAa,GAFE;AAGf,wBAAgB,GAHD;AAIf,uBAAe,SAJA;AAKf,wBAAgB,SALD;AAMf,4BAAoB,SANL;AAOf,uBAAe,SAPA;AAQf,4CAAoC;AARrB,OATZ;AAmBLE,MAAAA,gBAAgB,EAAE;AAChB;AACAF,QAAAA,KAAK,EAAE,oBAFS;AAGhB,qBAAa;AAHG;AAnBb,KAAP;AAyBD;;AAzE+C","sourcesContent":["import { Compiler } from '@teambit/compiler';\nimport type { DependenciesEnv, GetNpmIgnoreContext } from '@teambit/envs';\nimport { merge } from 'lodash';\nimport { TsConfigSourceFile } from 'typescript';\nimport { ReactEnv } from '@teambit/react';\nimport { CAPSULE_ARTIFACTS_DIR } from '@teambit/builder';\nimport type { AspectLoaderMain } from '@teambit/aspect-loader';\nimport { Bundler, BundlerContext } from '@teambit/bundler';\nimport { WebpackConfigTransformer } from '@teambit/webpack';\n\nconst tsconfig = require('./typescript/tsconfig.json');\n\nexport const AspectEnvType = 'aspect';\n\n/**\n * a component environment built for Aspects .\n */\nexport class AspectEnv implements DependenciesEnv {\n  constructor(private reactEnv: ReactEnv, private aspectLoader: AspectLoaderMain) {}\n\n  icon = 'https://static.bit.dev/extensions-icons/default.svg';\n\n  async __getDescriptor() {\n    return {\n      type: AspectEnvType,\n    };\n  }\n\n  getTsConfig(tsConfig: TsConfigSourceFile) {\n    const targetConf = merge(tsconfig, tsConfig);\n    return targetConf;\n  }\n\n  createTsCompiler(tsConfig: TsConfigSourceFile): Compiler {\n    return this.reactEnv.getCompiler(this.getTsConfig(tsConfig));\n  }\n\n  async getTemplateBundler(context: BundlerContext, transformers: WebpackConfigTransformer[] = []): Promise<Bundler> {\n    return this.reactEnv.createTemplateWebpackBundler(context, transformers);\n  }\n\n  getNpmIgnore(context: GetNpmIgnoreContext) {\n    // ignores only .ts files in the root directory, so d.ts files inside dists are unaffected.\n    // without this change, the package has \"index.ts\" file in the root, causing typescript to parse it instead of the\n    // d.ts files. (changing the \"types\" prop in the package.json file doesn't help).\n    const patterns = ['/*.ts', `${CAPSULE_ARTIFACTS_DIR}/`];\n\n    // In order to load the env preview template from core aspects we need it to be in the package of the core envs\n    // This is because we don't have the core envs in the local scope so we load it from the package itself in the bvm installation\n    // as this will be excluded from the package tar by default (as it's under the CAPSULE_ARTIFACTS_DIR)\n    // we want to make sure to add it for the core envs\n    if (this.aspectLoader.isCoreEnv(context.component.id.toStringWithoutVersion())) {\n      patterns.push(`!${CAPSULE_ARTIFACTS_DIR}/env-template`);\n    }\n    return patterns;\n  }\n\n  getPreviewConfig() {\n    return {\n      strategyName: 'component',\n      splitComponentBundle: false,\n    };\n  }\n\n  async getDependencies() {\n    return {\n      dependencies: {\n        react: '-',\n        'react-dom': '-',\n        'core-js': '^3.0.0',\n        // For aspects the babel runtime should be a runtime dep not only dev as they are compiled by babel\n        '@babel/runtime': '7.12.18',\n      },\n      // TODO: add this only if using ts\n      devDependencies: {\n        react: '-',\n        'react-dom': '-',\n        '@types/mocha': '-',\n        '@types/node': '12.20.4',\n        '@types/react': '^17.0.8',\n        '@types/react-dom': '^17.0.5',\n        '@types/jest': '^26.0.0',\n        '@types/testing-library__jest-dom': '5.9.5',\n      },\n      peerDependencies: {\n        // TODO: check if we really need react for aspects (maybe for ink support)\n        react: '^16.8.0 || ^17.0.0',\n        'react-dom': '^16.8.0 || ^17.0.0',\n      },\n    };\n  }\n}\n"]}