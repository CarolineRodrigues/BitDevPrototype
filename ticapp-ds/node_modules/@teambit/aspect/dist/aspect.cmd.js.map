{"version":3,"sources":["aspect.cmd.ts"],"names":["ListAspectCmd","constructor","aspect","report","name","debug","listAspectsResults","listAspectsOfComponent","rows","Object","keys","map","componentId","longestAspectName","Math","max","_","aspectName","length","aspects","aspectSource","origin","source","padEnd","level","join","table","CLITable","render","SetAspectCmd","pattern","aspectId","config","configParsed","JSON","parse","results","setAspectsToComponents","chalk","yellow","bold","green","UpdateAspectCmd","updateAspectsToComponents","UnsetAspectCmd","unsetAspectsFromComponents","GetAspectCmd","componentName","extensions","mergedExtensions","beforeMerge","getAspectsOfComponent","extensionsDetailsToString","e","data","extensionId","toComponentObject","toString","stringify","undefined","beforeMergeOutput","extraData","title","details","moreData","afterMergeTitle","afterMergeOutput","json","extensionsDetailsToObject","reduce","acc","current","jsonObj","forEach","FinalAfterMerge","AspectCmd","unrecognizedSubcommand","red"],"mappings":"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","sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { PATTERN_HELP } from '@teambit/legacy/dist/constants';\nimport { CLITable } from '@teambit/cli-table';\nimport chalk from 'chalk';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config';\nimport { AspectMain } from './aspect.main.runtime';\n\nexport class ListAspectCmd implements Command {\n  name = 'list [pattern]';\n  description = 'list all aspects configured on component(s)';\n  options = [['d', 'debug', 'show the origins were the aspects were taken from']] as CommandOptions;\n  group = 'development';\n  extendedDescription = `${PATTERN_HELP('aspect list')}`;\n\n  constructor(private aspect: AspectMain) {}\n\n  async report([name]: [string], { debug }: { debug: boolean }) {\n    const listAspectsResults = await this.aspect.listAspectsOfComponent(name);\n    const rows = Object.keys(listAspectsResults).map((componentId) => {\n      const longestAspectName = Math.max(...listAspectsResults[componentId].map((_) => _.aspectName.length));\n      const aspects = listAspectsResults[componentId]\n        .map((aspectSource) => {\n          const origin = debug ? ` (origin: ${aspectSource.source})` : '';\n          const aspectName = aspectSource.aspectName.padEnd(longestAspectName);\n          return `${aspectName} (level: ${aspectSource.level})${origin}`;\n        })\n        .join('\\n');\n\n      return [componentId, aspects];\n    });\n    const table = new CLITable([], rows);\n    return table.render();\n  }\n}\n\nexport class SetAspectCmd implements Command {\n  name = 'set <pattern> <aspect-id> [config]';\n  description = 'set an aspect to component(s) with optional config.';\n  extendedDescription = `enter the config as stringified JSON (e.g. '{\"foo\":\"bar\"}' ).\nif no config entered, the aspect will be set with empty config ({}).\n${PATTERN_HELP('aspect set')}`;\n  options = [];\n  group = 'development';\n\n  constructor(private aspect: AspectMain) {}\n\n  async report([pattern, aspectId, config]: [string, string, string]) {\n    const configParsed = config ? JSON.parse(config) : {};\n    const results = await this.aspect.setAspectsToComponents(pattern, aspectId, configParsed);\n    if (!results.length) return chalk.yellow(`unable to find any matching for ${chalk.bold(pattern)} pattern`);\n    return chalk.green(`the following component(s) have been successfully updated:\\n${results.join('\\n')}`);\n  }\n}\n\nexport class UpdateAspectCmd implements Command {\n  name = 'update <aspect-id> [pattern]';\n  description = 'update a version of an aspect';\n  extendedDescription = `default to all components using the aspect, unless \"pattern\" is provided.\n${PATTERN_HELP('aspect update <aspect-id>')}\nexamples:\n\"bit aspect update scope.org/aspect '**/ui/**'\" - update \"ui\" components that use scope.org/aspect to the latest version\n\"bit aspect update scope.org/aspect@2.0.0\"      - updates all components using scope.org/aspect to version 2.0.0.`;\n\n  options = [];\n  group = 'development';\n\n  constructor(private aspect: AspectMain) {}\n\n  async report([aspectId, pattern]: [string, string]) {\n    const results = await this.aspect.updateAspectsToComponents(aspectId, pattern);\n    if (!results.length) return chalk.yellow(`unable to find any component that use ${chalk.bold(aspectId)}`);\n    return chalk.green(`the following component(s) have been successfully updated:\\n${results.join('\\n')}`);\n  }\n}\n\nexport class UnsetAspectCmd implements Command {\n  name = 'unset <pattern> <aspect-id>';\n  description = `unset an aspect from component(s).`;\n  extendedDescription = `${PATTERN_HELP('aspect unset')}`;\n  options = [];\n  group = 'development';\n\n  constructor(private aspect: AspectMain) {}\n\n  async report([pattern, aspectId]: [string, string]) {\n    const results = await this.aspect.unsetAspectsFromComponents(pattern, aspectId);\n    if (!results.length) return chalk.yellow(`unable to find any matching for ${chalk.bold(pattern)} pattern`);\n    return chalk.green(`the following component(s) have been successfully updated:\\n${results.join('\\n')}`);\n  }\n}\n\nexport class GetAspectCmd implements Command {\n  name = 'get <component-id>';\n  description = \"show aspects' data and configuration of the given component\";\n  options = [\n    ['d', 'debug', 'show the origins were the aspects were taken from'],\n    ['j', 'json', 'format as json'],\n  ] as CommandOptions;\n  group = 'development';\n\n  constructor(private aspect: AspectMain) {}\n\n  async report([componentName]: [string], { debug }: { debug: boolean }) {\n    const { extensions: mergedExtensions, beforeMerge } = await this.aspect.getAspectsOfComponent(componentName);\n\n    const extensionsDetailsToString = (extensions: ExtensionDataList) =>\n      extensions\n        .map((e) => {\n          const { name, data, config, extensionId } = e.toComponentObject();\n          return `${chalk.bold('name:')}   ${name || extensionId?.toString()}\n${chalk.bold('config:')} ${JSON.stringify(config, undefined, 2)}\n${chalk.bold('data:')}   ${JSON.stringify(data, undefined, 2)}\n`;\n        })\n        .join('\\n');\n\n    if (debug) {\n      const beforeMergeOutput = beforeMerge\n        .map(({ origin, extensions, extraData }) => {\n          const title = chalk.green.bold(`Origin: ${origin}`);\n          const details = extensionsDetailsToString(extensions);\n          const moreData = extraData ? `\\n${chalk.bold('Extra Data:')} ${JSON.stringify(extraData, undefined, 2)}` : '';\n          return `${title}\\n${details}${moreData}`;\n        })\n        .join('\\n\\n');\n\n      const afterMergeTitle = chalk.green.bold('Final - after merging all origins');\n      const afterMergeOutput = `${afterMergeTitle}\\n${extensionsDetailsToString(mergedExtensions)}`;\n\n      return `${beforeMergeOutput}\\n\\n\\n${afterMergeOutput}`;\n    }\n\n    return extensionsDetailsToString(mergedExtensions);\n  }\n\n  async json([componentName]: [string], { debug }: { debug: boolean }) {\n    const { extensions: mergedExtensions, beforeMerge } = await this.aspect.getAspectsOfComponent(componentName);\n\n    const extensionsDetailsToObject = (extensions: ExtensionDataList) =>\n      extensions.reduce((acc, current) => {\n        const { name, data, config, extensionId } = current.toComponentObject();\n        const aspectName = name || extensionId?.toString() || '<no-name>';\n        acc[aspectName] = {\n          name: aspectName,\n          config,\n          data,\n        };\n        return acc;\n      }, {});\n\n    if (debug) {\n      const jsonObj: Record<string, any> = {};\n      beforeMerge.forEach(({ origin, extensions, extraData }) => {\n        jsonObj[origin] = {\n          extensions: extensionsDetailsToObject(extensions),\n          extraData,\n        };\n      });\n\n      jsonObj.FinalAfterMerge = { extensions: extensionsDetailsToObject(mergedExtensions) };\n      return jsonObj;\n    }\n\n    return extensionsDetailsToObject(mergedExtensions);\n  }\n}\n\nexport class AspectCmd implements Command {\n  name = 'aspect <sub-command>';\n  alias = '';\n  description = 'EXPERIMENTAL. manage aspects';\n  options = [];\n  group = 'development';\n  commands: Command[] = [];\n\n  async report([unrecognizedSubcommand]: [string]) {\n    return chalk.red(\n      `\"${unrecognizedSubcommand}\" is not a subcommand of \"aspect\", please run \"bit aspect --help\" to list the subcommands`\n    );\n  }\n}\n"]}