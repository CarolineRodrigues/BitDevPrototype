import { Compiler } from '@teambit/compiler';
import type { DependenciesEnv, GetNpmIgnoreContext } from '@teambit/envs';
import { TsConfigSourceFile } from 'typescript';
import { ReactEnv } from '@teambit/react';
import type { AspectLoaderMain } from '@teambit/aspect-loader';
import { Bundler, BundlerContext } from '@teambit/bundler';
import { WebpackConfigTransformer } from '@teambit/webpack';
export declare const AspectEnvType = "aspect";
/**
 * a component environment built for Aspects .
 */
export declare class AspectEnv implements DependenciesEnv {
    private reactEnv;
    private aspectLoader;
    constructor(reactEnv: ReactEnv, aspectLoader: AspectLoaderMain);
    icon: string;
    __getDescriptor(): Promise<{
        type: string;
    }>;
    getTsConfig(tsConfig: TsConfigSourceFile): any;
    createTsCompiler(tsConfig: TsConfigSourceFile): Compiler;
    getTemplateBundler(context: BundlerContext, transformers?: WebpackConfigTransformer[]): Promise<Bundler>;
    getNpmIgnore(context: GetNpmIgnoreContext): string[];
    getPreviewConfig(): {
        strategyName: string;
        splitComponentBundle: boolean;
    };
    getDependencies(): Promise<{
        dependencies: {
            react: string;
            'react-dom': string;
            'core-js': string;
            '@babel/runtime': string;
        };
        devDependencies: {
            react: string;
            'react-dom': string;
            '@types/mocha': string;
            '@types/node': string;
            '@types/react': string;
            '@types/react-dom': string;
            '@types/jest': string;
            '@types/testing-library__jest-dom': string;
        };
        peerDependencies: {
            react: string;
            'react-dom': string;
        };
    }>;
}
