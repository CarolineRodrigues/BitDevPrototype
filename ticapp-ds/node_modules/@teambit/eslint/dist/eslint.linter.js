"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ESLintLinter = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _lodash() {
  const data = require("lodash");

  _lodash = function () {
    return data;
  };

  return data;
}

function _eslint() {
  const data = require("eslint");

  _eslint = function () {
    return data;
  };

  return data;
}

function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));

  _pMapSeries = function () {
    return data;
  };

  return data;
}

class ESLintLinter {
  constructor(logger, options,
  /**
   * reference to the eslint module.
   */
  ESLint) {
    this.logger = logger;
    this.options = options;
    this.ESLint = ESLint;
    (0, _defineProperty2().default)(this, "displayName", 'ESlint');
  }

  displayConfig() {
    return JSON.stringify(this.options, null, 2);
  }

  async lint(context) {
    const longProcessLogger = this.logger.createLongProcessLogger('linting components', context.components.length);
    const resultsP = (0, _pMapSeries().default)(context.components, async component => {
      longProcessLogger.logProgress(component.id.toString());
      const eslint = this.createEslint(this.options.config, this.ESLint);
      const filesP = component.filesystem.files.map(async file => {
        var _this$options$extensi;

        // The eslint api ignore extensions by default when using lintText, so we do it manually
        if (!((_this$options$extensi = this.options.extensions) !== null && _this$options$extensi !== void 0 && _this$options$extensi.includes(file.extname))) return undefined;
        const sourceCode = file.contents.toString('utf8');
        const lintResults = await eslint.lintText(sourceCode, {
          filePath: file.path,
          warnIgnored: true
        });

        if (eslint && this.options.config.fix && lintResults) {
          await _eslint().ESLint.outputFixes(lintResults);
        }

        return lintResults;
      });
      const files = await Promise.all(filesP);
      const results = (0, _lodash().compact)((0, _lodash().flatten)(files));
      const formatter = await eslint.loadFormatter(this.options.formatter || 'stylish');
      const output = formatter.format(results);
      const {
        totalErrorCount,
        totalFatalErrorCount,
        totalFixableErrorCount,
        totalFixableWarningCount,
        totalWarningCount,
        componentsResults
      } = this.computeComponentResultsWithTotals(results);
      return {
        component,
        output,
        totalErrorCount,
        totalFatalErrorCount,
        totalFixableErrorCount,
        totalFixableWarningCount,
        totalWarningCount,
        results: componentsResults
      };
    });
    const results = await resultsP;
    const {
      totalErrorCount,
      totalFatalErrorCount,
      totalFixableErrorCount,
      totalFixableWarningCount,
      totalWarningCount
    } = this.computeManyComponentsTotals(results);
    return {
      totalErrorCount,
      totalFatalErrorCount,
      totalFixableErrorCount,
      totalFixableWarningCount,
      totalWarningCount,
      results,
      errors: []
    };
  }

  computeComponentResultsWithTotals(results) {
    let totalErrorCount = 0;
    let totalFatalErrorCount = 0;
    let totalFixableErrorCount = 0;
    let totalFixableWarningCount = 0;
    let totalWarningCount = 0;
    const componentsResults = results.map(result => {
      var _result$errorCount, _result$fatalErrorCou, _result$fixableErrorC, _result$fixableWarnin, _result$warningCount;

      totalErrorCount += (_result$errorCount = result.errorCount) !== null && _result$errorCount !== void 0 ? _result$errorCount : 0; // @ts-ignore - missing from the @types/eslint lib

      totalFatalErrorCount += (_result$fatalErrorCou = result.fatalErrorCount) !== null && _result$fatalErrorCou !== void 0 ? _result$fatalErrorCou : 0;
      totalFixableErrorCount += (_result$fixableErrorC = result.fixableErrorCount) !== null && _result$fixableErrorC !== void 0 ? _result$fixableErrorC : 0;
      totalFixableWarningCount += (_result$fixableWarnin = result.fixableWarningCount) !== null && _result$fixableWarnin !== void 0 ? _result$fixableWarnin : 0;
      totalWarningCount += (_result$warningCount = result.warningCount) !== null && _result$warningCount !== void 0 ? _result$warningCount : 0;
      return {
        filePath: result.filePath,
        errorCount: result.errorCount,
        // @ts-ignore - missing from the @types/eslint lib
        fatalErrorCount: result.fatalErrorCount,
        fixableErrorCount: result.fixableErrorCount,
        fixableWarningCount: result.fixableWarningCount,
        warningCount: result.warningCount,
        messages: result.messages,
        raw: result
      };
    });
    return {
      totalErrorCount,
      totalFatalErrorCount,
      totalFixableErrorCount,
      totalFixableWarningCount,
      totalWarningCount,
      componentsResults
    };
  }

  computeManyComponentsTotals(componentsResults) {
    let totalErrorCount = 0;
    let totalFatalErrorCount = 0;
    let totalFixableErrorCount = 0;
    let totalFixableWarningCount = 0;
    let totalWarningCount = 0;
    componentsResults.forEach(result => {
      var _result$totalErrorCou, _result$totalFatalErr, _result$totalFixableE, _result$totalFixableW, _result$totalWarningC;

      totalErrorCount += (_result$totalErrorCou = result.totalErrorCount) !== null && _result$totalErrorCou !== void 0 ? _result$totalErrorCou : 0; // @ts-ignore - missing from the @types/eslint lib

      totalFatalErrorCount += (_result$totalFatalErr = result.totalFatalErrorCount) !== null && _result$totalFatalErr !== void 0 ? _result$totalFatalErr : 0;
      totalFixableErrorCount += (_result$totalFixableE = result.totalFixableErrorCount) !== null && _result$totalFixableE !== void 0 ? _result$totalFixableE : 0;
      totalFixableWarningCount += (_result$totalFixableW = result.totalFixableWarningCount) !== null && _result$totalFixableW !== void 0 ? _result$totalFixableW : 0;
      totalWarningCount += (_result$totalWarningC = result.totalWarningCount) !== null && _result$totalWarningC !== void 0 ? _result$totalWarningC : 0;
    });
    return {
      totalErrorCount,
      totalFatalErrorCount,
      totalFixableErrorCount,
      totalFixableWarningCount,
      totalWarningCount,
      componentsResults
    };
  }
  /**
   * Create the eslint instance by options that was already merged with context
   * @param options
   * @param ESLintModule
   * @returns
   */


  createEslint(options, ESLintModule) {
    // eslint-disable-next-line no-new
    if (ESLintModule) new ESLintModule.ESLint(options);
    return new (_eslint().ESLint)(options);
  }

  version() {
    if (this.ESLint) return this.ESLint.version;
    return _eslint().ESLint.version;
  }

}

exports.ESLintLinter = ESLintLinter;

//# sourceMappingURL=eslint.linter.js.map