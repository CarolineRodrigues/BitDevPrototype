{"version":3,"sources":["eslint.main.runtime.ts"],"names":["ESLintMain","constructor","logger","createLinter","context","options","transformers","ESLintModule","mergedOptions","getOptions","configMutator","EslintConfigMutator","transformerContext","fix","afterMutation","runTransformersWithContext","clone","ESLintLinter","raw","provider","loggerExt","createLogger","ESLintAspect","id","MainRuntime","LoggerAspect","addRuntime","mergedConfig","overrideConfig","config","extensions","extensionFormats","useEslintrc","cwd","pluginPath","fixTypes","Object","assign","Array","isArray","newConfig","reduce","acc","transformer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAkCO,MAAMA,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAASC,MAAT,EAAyB;AAAA,SAAhBA,MAAgB,GAAhBA,MAAgB;AAAE;AAEtC;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,YAAY,CACVC,OADU,EAEVC,OAFU,EAGVC,YAAuC,GAAG,EAHhC,EAIVC,YAJU,EAKF;AACR,UAAMC,aAAa,GAAGC,UAAU,CAACJ,OAAD,EAAUD,OAAV,CAAhC;AACA,UAAMM,aAAa,GAAG,KAAIC,qCAAJ,EAAwBH,aAAxB,CAAtB;AACA,UAAMI,kBAAgD,GAAG;AAAEC,MAAAA,GAAG,EAAE,CAAC,CAACT,OAAO,CAACS;AAAjB,KAAzD;AACA,UAAMC,aAAa,GAAGC,0BAA0B,CAACL,aAAa,CAACM,KAAd,EAAD,EAAwBV,YAAxB,EAAsCM,kBAAtC,CAAhD;AAEA,WAAO,KAAIK,uBAAJ,EAAiB,KAAKf,MAAtB,EAA8BY,aAAa,CAACI,GAA5C,EAAiDX,YAAjD,CAAP;AACD;;AAMoB,eAARY,QAAQ,CAAC,CAACC,SAAD,CAAD,EAAiD;AACpE,UAAMlB,MAAM,GAAGkB,SAAS,CAACC,YAAV,CAAuBC,uBAAaC,EAApC,CAAf;AACA,WAAO,IAAIvB,UAAJ,CAAeE,MAAf,CAAP;AACD;;AA7BqB;;;gCAAXF,U,aAsBMwB,kB;gCAtBNxB,U,kBAwBW,CAACyB,sBAAD,C;;AAQxBH,uBAAaI,UAAb,CAAwB1B,UAAxB;AAEA;AACA;AACA;;;AACA,SAASS,UAAT,CAAoBJ,OAApB,EAA4CD,OAA5C,EAAmF;AACjF,QAAMuB,YAA+B,GAAG;AACtC;AACAC,IAAAA,cAAc,EAAEvB,OAAO,CAACwB,MAFc;AAGtCC,IAAAA,UAAU,EAAE1B,OAAO,CAAC2B,gBAHkB;AAItCC,IAAAA,WAAW,EAAE,KAJyB;AAKtCC,IAAAA,GAAG,EAAE5B,OAAO,CAAC6B,UALyB;AAMtCrB,IAAAA,GAAG,EAAE,CAAC,CAACT,OAAO,CAACS,GANuB;AAOtCsB,IAAAA,QAAQ,EAAE/B,OAAO,CAAC+B;AAPoB,GAAxC;AASA,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhC,OAAlB,EAA2B;AAAEwB,IAAAA,MAAM,EAAEF,YAAV;AAAwBG,IAAAA,UAAU,EAAE1B,OAAO,CAAC2B;AAA5C,GAA3B,CAAP;AACD;;AAEM,SAAShB,0BAAT,CACLc,MADK,EAELvB,YAAuC,GAAG,EAFrC,EAGLF,OAHK,EAIgB;AACrB,MAAI,CAACkC,KAAK,CAACC,OAAN,CAAcjC,YAAd,CAAL,EAAkC,OAAOuB,MAAP;AAClC,QAAMW,SAAS,GAAGlC,YAAY,CAACmC,MAAb,CAAoB,CAACC,GAAD,EAAMC,WAAN,KAAsB;AAC1D,WAAOA,WAAW,CAACD,GAAD,EAAMtC,OAAN,CAAlB;AACD,GAFiB,EAEfyB,MAFe,CAAlB;AAGA,SAAOW,SAAP;AACD","sourcesContent":["import { MainRuntime } from '@teambit/cli';\n// import { Linter as ESLinter, ESLint as ESLintLib } from 'eslint';\nimport { ESLint as ESLintLib } from 'eslint';\nimport { Linter, LinterContext } from '@teambit/linter';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { EslintConfigMutator } from '@teambit/defender.eslint.config-mutator';\nimport { ESLintAspect } from './eslint.aspect';\nimport { ESLintLinter } from './eslint.linter';\n\nexport type ESLintOptions = {\n  /**\n   * linter config for eslint.\n   */\n  // config: ESLinter.Config;\n  config: ESLintLib.Options;\n\n  /**\n   * specify to path to resolve eslint plugins from.\n   */\n  pluginPath?: string;\n\n  /**\n   * decide the formatter for the CLI output.\n   */\n  formatter?: string;\n\n  /**\n   * file types to lint.\n   */\n  extensions?: string[];\n};\n\nexport type EslintConfigTransformContext = {\n  fix: boolean;\n};\n\nexport type EslintConfigTransformer = (\n  config: EslintConfigMutator,\n  context: EslintConfigTransformContext\n) => EslintConfigMutator;\n\nexport class ESLintMain {\n  constructor(private logger: Logger) {}\n\n  /**\n   * create a eslint linter instance.\n   * @param options eslint options.\n   * @param ESLintModule reference to an `eslint` module.\n   */\n  createLinter(\n    context: LinterContext,\n    options: ESLintOptions,\n    transformers: EslintConfigTransformer[] = [],\n    ESLintModule?: any\n  ): Linter {\n    const mergedOptions = getOptions(options, context);\n    const configMutator = new EslintConfigMutator(mergedOptions);\n    const transformerContext: EslintConfigTransformContext = { fix: !!context.fix };\n    const afterMutation = runTransformersWithContext(configMutator.clone(), transformers, transformerContext);\n\n    return new ESLintLinter(this.logger, afterMutation.raw, ESLintModule);\n  }\n\n  static runtime = MainRuntime;\n\n  static dependencies = [LoggerAspect];\n\n  static async provider([loggerExt]: [LoggerMain]): Promise<ESLintMain> {\n    const logger = loggerExt.createLogger(ESLintAspect.id);\n    return new ESLintMain(logger);\n  }\n}\n\nESLintAspect.addRuntime(ESLintMain);\n\n/**\n * get options for eslint.\n */\nfunction getOptions(options: ESLintOptions, context: LinterContext): ESLintOptions {\n  const mergedConfig: ESLintLib.Options = {\n    // @ts-ignore - this is a bug in the @types/eslint types\n    overrideConfig: options.config,\n    extensions: context.extensionFormats,\n    useEslintrc: false,\n    cwd: options.pluginPath,\n    fix: !!context.fix,\n    fixTypes: context.fixTypes,\n  };\n  return Object.assign({}, options, { config: mergedConfig, extensions: context.extensionFormats });\n}\n\nexport function runTransformersWithContext(\n  config: EslintConfigMutator,\n  transformers: EslintConfigTransformer[] = [],\n  context: EslintConfigTransformContext\n): EslintConfigMutator {\n  if (!Array.isArray(transformers)) return config;\n  const newConfig = transformers.reduce((acc, transformer) => {\n    return transformer(acc, context);\n  }, config);\n  return newConfig;\n}\n"]}