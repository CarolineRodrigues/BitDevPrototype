{"version":3,"sources":["eslint.linter.ts"],"names":["ESLintLinter","constructor","logger","options","ESLint","displayConfig","JSON","stringify","lint","context","longProcessLogger","createLongProcessLogger","components","length","resultsP","component","logProgress","id","toString","eslint","createEslint","config","filesP","filesystem","files","map","file","extensions","includes","extname","undefined","sourceCode","contents","lintResults","lintText","filePath","path","warnIgnored","fix","ESLintLib","outputFixes","Promise","all","results","formatter","loadFormatter","output","format","totalErrorCount","totalFatalErrorCount","totalFixableErrorCount","totalFixableWarningCount","totalWarningCount","componentsResults","computeComponentResultsWithTotals","computeManyComponentsTotals","errors","result","errorCount","fatalErrorCount","fixableErrorCount","fixableWarningCount","warningCount","messages","raw","forEach","ESLintModule","version"],"mappings":"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","sourcesContent":["import { flatten, compact } from 'lodash';\nimport { Linter, LinterContext, LintResults, ComponentLintResult } from '@teambit/linter';\nimport { ESLint as ESLintLib } from 'eslint';\nimport mapSeries from 'p-map-series';\nimport { Logger } from '@teambit/logger';\nimport { ESLintOptions } from './eslint.main.runtime';\n\nexport class ESLintLinter implements Linter {\n  constructor(\n    private logger: Logger,\n\n    private options: ESLintOptions,\n\n    /**\n     * reference to the eslint module.\n     */\n    private ESLint?: any\n  ) {}\n\n  displayName = 'ESlint';\n\n  displayConfig() {\n    return JSON.stringify(this.options, null, 2);\n  }\n\n  async lint(context: LinterContext): Promise<LintResults> {\n    const longProcessLogger = this.logger.createLongProcessLogger('linting components', context.components.length);\n    const resultsP = mapSeries(context.components, async (component) => {\n      longProcessLogger.logProgress(component.id.toString());\n      const eslint = this.createEslint(this.options.config, this.ESLint);\n      const filesP = component.filesystem.files.map(async (file) => {\n        // The eslint api ignore extensions by default when using lintText, so we do it manually\n        if (!this.options.extensions?.includes(file.extname)) return undefined;\n        const sourceCode = file.contents.toString('utf8');\n        const lintResults = await eslint.lintText(sourceCode, {\n          filePath: file.path,\n          warnIgnored: true,\n        });\n\n        if (eslint && this.options.config.fix && lintResults) {\n          await ESLintLib.outputFixes(lintResults);\n        }\n\n        return lintResults;\n      });\n\n      const files = await Promise.all(filesP);\n\n      const results: ESLintLib.LintResult[] = compact(flatten(files));\n      const formatter = await eslint.loadFormatter(this.options.formatter || 'stylish');\n      const output = formatter.format(results);\n      const {\n        totalErrorCount,\n        totalFatalErrorCount,\n        totalFixableErrorCount,\n        totalFixableWarningCount,\n        totalWarningCount,\n        componentsResults,\n      } = this.computeComponentResultsWithTotals(results);\n\n      return {\n        component,\n        output,\n        totalErrorCount,\n        totalFatalErrorCount,\n        totalFixableErrorCount,\n        totalFixableWarningCount,\n        totalWarningCount,\n        results: componentsResults,\n      };\n    });\n\n    const results = (await resultsP) as any as ComponentLintResult[];\n    const {\n      totalErrorCount,\n      totalFatalErrorCount,\n      totalFixableErrorCount,\n      totalFixableWarningCount,\n      totalWarningCount,\n    } = this.computeManyComponentsTotals(results);\n\n    return {\n      totalErrorCount,\n      totalFatalErrorCount,\n      totalFixableErrorCount,\n      totalFixableWarningCount,\n      totalWarningCount,\n      results,\n      errors: [],\n    };\n  }\n\n  private computeComponentResultsWithTotals(results: ESLintLib.LintResult[]) {\n    let totalErrorCount = 0;\n    let totalFatalErrorCount = 0;\n    let totalFixableErrorCount = 0;\n    let totalFixableWarningCount = 0;\n    let totalWarningCount = 0;\n    const componentsResults = results.map((result) => {\n      totalErrorCount += result.errorCount ?? 0;\n      // @ts-ignore - missing from the @types/eslint lib\n      totalFatalErrorCount += result.fatalErrorCount ?? 0;\n      totalFixableErrorCount += result.fixableErrorCount ?? 0;\n      totalFixableWarningCount += result.fixableWarningCount ?? 0;\n      totalWarningCount += result.warningCount ?? 0;\n      return {\n        filePath: result.filePath,\n        errorCount: result.errorCount,\n        // @ts-ignore - missing from the @types/eslint lib\n        fatalErrorCount: result.fatalErrorCount,\n        fixableErrorCount: result.fixableErrorCount,\n        fixableWarningCount: result.fixableWarningCount,\n        warningCount: result.warningCount,\n        messages: result.messages,\n        raw: result,\n      };\n    });\n    return {\n      totalErrorCount,\n      totalFatalErrorCount,\n      totalFixableErrorCount,\n      totalFixableWarningCount,\n      totalWarningCount,\n      componentsResults,\n    };\n  }\n\n  private computeManyComponentsTotals(componentsResults: ComponentLintResult[]) {\n    let totalErrorCount = 0;\n    let totalFatalErrorCount = 0;\n    let totalFixableErrorCount = 0;\n    let totalFixableWarningCount = 0;\n    let totalWarningCount = 0;\n    componentsResults.forEach((result) => {\n      totalErrorCount += result.totalErrorCount ?? 0;\n      // @ts-ignore - missing from the @types/eslint lib\n      totalFatalErrorCount += result.totalFatalErrorCount ?? 0;\n      totalFixableErrorCount += result.totalFixableErrorCount ?? 0;\n      totalFixableWarningCount += result.totalFixableWarningCount ?? 0;\n      totalWarningCount += result.totalWarningCount ?? 0;\n    });\n    return {\n      totalErrorCount,\n      totalFatalErrorCount,\n      totalFixableErrorCount,\n      totalFixableWarningCount,\n      totalWarningCount,\n      componentsResults,\n    };\n  }\n\n  /**\n   * Create the eslint instance by options that was already merged with context\n   * @param options\n   * @param ESLintModule\n   * @returns\n   */\n  private createEslint(options: ESLintLib.Options, ESLintModule?: any): ESLintLib {\n    // eslint-disable-next-line no-new\n    if (ESLintModule) new ESLintModule.ESLint(options);\n    return new ESLintLib(options);\n  }\n\n  version() {\n    if (this.ESLint) return this.ESLint.version;\n    return ESLintLib.version;\n  }\n}\n"]}